
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000062a  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800100  00800100  0000062a  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000062a  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000001c  00000000  00000000  00000659  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000675  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002361  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bb  00000000  00000000  00002b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086f  00000000  00000000  000034d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d8  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fd  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004555  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  0000052e  0000052e  00000602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004640  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    0000000c  0000050e  0000050e  000005e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MIDI_IsStatusWord 00000008  00000526  00000526  000005fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MIDI_IsSysRealTime 0000000c  0000051a  0000051a  000005ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.MIDI_GetStatusType 00000040  0000041c  0000041c  000004f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.isEqualCommands 00000014  000004de  000004de  000005b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.MIDICTRL_Init 0000001e  00000490  00000490  00000564  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.MIDICTRL_HandleCommand 00000080  000002e6  000002e6  000003ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .data.defaultCommands 00000018  00800140  0000053e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .progmemx.data.muteCommand 00000004  000001a4  000001a4  00000278  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .bss.channelNum 00000001  00800158  00800158  0000062a  2**0
                  ALLOC
 25 .bss.muteCommandEnabled 00000001  00800159  00800159  0000062a  2**0
                  ALLOC
 26 .bss.omniModeEnabled 00000001  0080015a  0080015a  0000062a  2**0
                  ALLOC
 27 .text.MIDI_ParserTask 0000013e  000001a8  000001a8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss.state    00000001  0080015b  0080015b  0000062a  2**0
                  ALLOC
 29 .text.SH100CTRL_Init 00000002  00000530  00000530  00000604  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SH100CTRL_SwChannel1 00000002  00000532  00000532  00000606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SH100CTRL_MuteAmp 00000002  00000534  00000534  00000608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.UART_init 00000018  000004ae  000004ae  00000582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_18 00000064  00000366  00000366  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.UART_PopWord 00000034  0000045c  0000045c  00000530  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.UART_RxBufferNotEmpty 0000000e  000004f2  000004f2  000005c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_20 00000052  000003ca  000003ca  0000049e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc  00000018  000004c6  000004c6  0000059a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_fini 00000002  00000536  00000536  0000060a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_funcs_on_exit 00000002  00000538  00000538  0000060c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_simulator_exit 00000002  0000053a  0000053a  0000060e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.exit    0000000e  00000500  00000500  000005d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text._Exit   00000002  0000053c  0000053c  00000610  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
   2:	95 c2       	rjmp	.+1322   	; 0x52e <__bad_interrupt>
   4:	94 c2       	rjmp	.+1320   	; 0x52e <__bad_interrupt>
   6:	93 c2       	rjmp	.+1318   	; 0x52e <__bad_interrupt>
   8:	92 c2       	rjmp	.+1316   	; 0x52e <__bad_interrupt>
   a:	91 c2       	rjmp	.+1314   	; 0x52e <__bad_interrupt>
   c:	90 c2       	rjmp	.+1312   	; 0x52e <__bad_interrupt>
   e:	8f c2       	rjmp	.+1310   	; 0x52e <__bad_interrupt>
  10:	8e c2       	rjmp	.+1308   	; 0x52e <__bad_interrupt>
  12:	8d c2       	rjmp	.+1306   	; 0x52e <__bad_interrupt>
  14:	8c c2       	rjmp	.+1304   	; 0x52e <__bad_interrupt>
  16:	8b c2       	rjmp	.+1302   	; 0x52e <__bad_interrupt>
  18:	8a c2       	rjmp	.+1300   	; 0x52e <__bad_interrupt>
  1a:	89 c2       	rjmp	.+1298   	; 0x52e <__bad_interrupt>
  1c:	88 c2       	rjmp	.+1296   	; 0x52e <__bad_interrupt>
  1e:	87 c2       	rjmp	.+1294   	; 0x52e <__bad_interrupt>
  20:	86 c2       	rjmp	.+1292   	; 0x52e <__bad_interrupt>
  22:	85 c2       	rjmp	.+1290   	; 0x52e <__bad_interrupt>
  24:	a0 c1       	rjmp	.+832    	; 0x366 <__vector_18>
  26:	83 c2       	rjmp	.+1286   	; 0x52e <__bad_interrupt>
  28:	d0 c1       	rjmp	.+928    	; 0x3ca <__vector_20>
  2a:	81 c2       	rjmp	.+1282   	; 0x52e <__bad_interrupt>
  2c:	80 c2       	rjmp	.+1280   	; 0x52e <__bad_interrupt>
  2e:	7f c2       	rjmp	.+1278   	; 0x52e <__bad_interrupt>
  30:	7e c2       	rjmp	.+1276   	; 0x52e <__bad_interrupt>
  32:	7d c2       	rjmp	.+1274   	; 0x52e <__bad_interrupt>
  34:	fd c1       	rjmp	.+1018   	; 0x430 <MIDI_GetStatusType+0x14>
  36:	0e c2       	rjmp	.+1052   	; 0x454 <MIDI_GetStatusType+0x38>
  38:	0d c2       	rjmp	.+1050   	; 0x454 <MIDI_GetStatusType+0x38>
  3a:	0c c2       	rjmp	.+1048   	; 0x454 <MIDI_GetStatusType+0x38>
  3c:	0b c2       	rjmp	.+1046   	; 0x454 <MIDI_GetStatusType+0x38>
  3e:	0a c2       	rjmp	.+1044   	; 0x454 <MIDI_GetStatusType+0x38>
  40:	09 c2       	rjmp	.+1042   	; 0x454 <MIDI_GetStatusType+0x38>
  42:	08 c2       	rjmp	.+1040   	; 0x454 <MIDI_GetStatusType+0x38>
  44:	07 c2       	rjmp	.+1038   	; 0x454 <MIDI_GetStatusType+0x38>
  46:	06 c2       	rjmp	.+1036   	; 0x454 <MIDI_GetStatusType+0x38>
  48:	05 c2       	rjmp	.+1034   	; 0x454 <MIDI_GetStatusType+0x38>
  4a:	04 c2       	rjmp	.+1032   	; 0x454 <MIDI_GetStatusType+0x38>
  4c:	03 c2       	rjmp	.+1030   	; 0x454 <MIDI_GetStatusType+0x38>
  4e:	02 c2       	rjmp	.+1028   	; 0x454 <MIDI_GetStatusType+0x38>
  50:	01 c2       	rjmp	.+1026   	; 0x454 <MIDI_GetStatusType+0x38>
  52:	00 c2       	rjmp	.+1024   	; 0x454 <MIDI_GetStatusType+0x38>
  54:	ed c1       	rjmp	.+986    	; 0x430 <MIDI_GetStatusType+0x14>
  56:	fe c1       	rjmp	.+1020   	; 0x454 <MIDI_GetStatusType+0x38>
  58:	fd c1       	rjmp	.+1018   	; 0x454 <MIDI_GetStatusType+0x38>
  5a:	fc c1       	rjmp	.+1016   	; 0x454 <MIDI_GetStatusType+0x38>
  5c:	fb c1       	rjmp	.+1014   	; 0x454 <MIDI_GetStatusType+0x38>
  5e:	fa c1       	rjmp	.+1012   	; 0x454 <MIDI_GetStatusType+0x38>
  60:	f9 c1       	rjmp	.+1010   	; 0x454 <MIDI_GetStatusType+0x38>
  62:	f8 c1       	rjmp	.+1008   	; 0x454 <MIDI_GetStatusType+0x38>
  64:	f7 c1       	rjmp	.+1006   	; 0x454 <MIDI_GetStatusType+0x38>
  66:	f6 c1       	rjmp	.+1004   	; 0x454 <MIDI_GetStatusType+0x38>
  68:	f5 c1       	rjmp	.+1002   	; 0x454 <MIDI_GetStatusType+0x38>
  6a:	f4 c1       	rjmp	.+1000   	; 0x454 <MIDI_GetStatusType+0x38>
  6c:	f3 c1       	rjmp	.+998    	; 0x454 <MIDI_GetStatusType+0x38>
  6e:	f2 c1       	rjmp	.+996    	; 0x454 <MIDI_GetStatusType+0x38>
  70:	f1 c1       	rjmp	.+994    	; 0x454 <MIDI_GetStatusType+0x38>
  72:	f0 c1       	rjmp	.+992    	; 0x454 <MIDI_GetStatusType+0x38>
  74:	dd c1       	rjmp	.+954    	; 0x430 <MIDI_GetStatusType+0x14>
  76:	ee c1       	rjmp	.+988    	; 0x454 <MIDI_GetStatusType+0x38>
  78:	ed c1       	rjmp	.+986    	; 0x454 <MIDI_GetStatusType+0x38>
  7a:	ec c1       	rjmp	.+984    	; 0x454 <MIDI_GetStatusType+0x38>
  7c:	eb c1       	rjmp	.+982    	; 0x454 <MIDI_GetStatusType+0x38>
  7e:	ea c1       	rjmp	.+980    	; 0x454 <MIDI_GetStatusType+0x38>
  80:	e9 c1       	rjmp	.+978    	; 0x454 <MIDI_GetStatusType+0x38>
  82:	e8 c1       	rjmp	.+976    	; 0x454 <MIDI_GetStatusType+0x38>
  84:	e7 c1       	rjmp	.+974    	; 0x454 <MIDI_GetStatusType+0x38>
  86:	e6 c1       	rjmp	.+972    	; 0x454 <MIDI_GetStatusType+0x38>
  88:	e5 c1       	rjmp	.+970    	; 0x454 <MIDI_GetStatusType+0x38>
  8a:	e4 c1       	rjmp	.+968    	; 0x454 <MIDI_GetStatusType+0x38>
  8c:	e3 c1       	rjmp	.+966    	; 0x454 <MIDI_GetStatusType+0x38>
  8e:	e2 c1       	rjmp	.+964    	; 0x454 <MIDI_GetStatusType+0x38>
  90:	e1 c1       	rjmp	.+962    	; 0x454 <MIDI_GetStatusType+0x38>
  92:	e0 c1       	rjmp	.+960    	; 0x454 <MIDI_GetStatusType+0x38>
  94:	cd c1       	rjmp	.+922    	; 0x430 <MIDI_GetStatusType+0x14>
  96:	de c1       	rjmp	.+956    	; 0x454 <MIDI_GetStatusType+0x38>
  98:	dd c1       	rjmp	.+954    	; 0x454 <MIDI_GetStatusType+0x38>
  9a:	dc c1       	rjmp	.+952    	; 0x454 <MIDI_GetStatusType+0x38>
  9c:	db c1       	rjmp	.+950    	; 0x454 <MIDI_GetStatusType+0x38>
  9e:	da c1       	rjmp	.+948    	; 0x454 <MIDI_GetStatusType+0x38>
  a0:	d9 c1       	rjmp	.+946    	; 0x454 <MIDI_GetStatusType+0x38>
  a2:	d8 c1       	rjmp	.+944    	; 0x454 <MIDI_GetStatusType+0x38>
  a4:	d7 c1       	rjmp	.+942    	; 0x454 <MIDI_GetStatusType+0x38>
  a6:	d6 c1       	rjmp	.+940    	; 0x454 <MIDI_GetStatusType+0x38>
  a8:	d5 c1       	rjmp	.+938    	; 0x454 <MIDI_GetStatusType+0x38>
  aa:	d4 c1       	rjmp	.+936    	; 0x454 <MIDI_GetStatusType+0x38>
  ac:	d3 c1       	rjmp	.+934    	; 0x454 <MIDI_GetStatusType+0x38>
  ae:	d2 c1       	rjmp	.+932    	; 0x454 <MIDI_GetStatusType+0x38>
  b0:	d1 c1       	rjmp	.+930    	; 0x454 <MIDI_GetStatusType+0x38>
  b2:	d0 c1       	rjmp	.+928    	; 0x454 <MIDI_GetStatusType+0x38>
  b4:	d1 c1       	rjmp	.+930    	; 0x458 <MIDI_GetStatusType+0x3c>
  b6:	ce c1       	rjmp	.+924    	; 0x454 <MIDI_GetStatusType+0x38>
  b8:	cd c1       	rjmp	.+922    	; 0x454 <MIDI_GetStatusType+0x38>
  ba:	cc c1       	rjmp	.+920    	; 0x454 <MIDI_GetStatusType+0x38>
  bc:	cb c1       	rjmp	.+918    	; 0x454 <MIDI_GetStatusType+0x38>
  be:	ca c1       	rjmp	.+916    	; 0x454 <MIDI_GetStatusType+0x38>
  c0:	c9 c1       	rjmp	.+914    	; 0x454 <MIDI_GetStatusType+0x38>
  c2:	c8 c1       	rjmp	.+912    	; 0x454 <MIDI_GetStatusType+0x38>
  c4:	c7 c1       	rjmp	.+910    	; 0x454 <MIDI_GetStatusType+0x38>
  c6:	c6 c1       	rjmp	.+908    	; 0x454 <MIDI_GetStatusType+0x38>
  c8:	c5 c1       	rjmp	.+906    	; 0x454 <MIDI_GetStatusType+0x38>
  ca:	c4 c1       	rjmp	.+904    	; 0x454 <MIDI_GetStatusType+0x38>
  cc:	c3 c1       	rjmp	.+902    	; 0x454 <MIDI_GetStatusType+0x38>
  ce:	c2 c1       	rjmp	.+900    	; 0x454 <MIDI_GetStatusType+0x38>
  d0:	c1 c1       	rjmp	.+898    	; 0x454 <MIDI_GetStatusType+0x38>
  d2:	c0 c1       	rjmp	.+896    	; 0x454 <MIDI_GetStatusType+0x38>
  d4:	c1 c1       	rjmp	.+898    	; 0x458 <MIDI_GetStatusType+0x3c>
  d6:	be c1       	rjmp	.+892    	; 0x454 <MIDI_GetStatusType+0x38>
  d8:	bd c1       	rjmp	.+890    	; 0x454 <MIDI_GetStatusType+0x38>
  da:	bc c1       	rjmp	.+888    	; 0x454 <MIDI_GetStatusType+0x38>
  dc:	bb c1       	rjmp	.+886    	; 0x454 <MIDI_GetStatusType+0x38>
  de:	ba c1       	rjmp	.+884    	; 0x454 <MIDI_GetStatusType+0x38>
  e0:	b9 c1       	rjmp	.+882    	; 0x454 <MIDI_GetStatusType+0x38>
  e2:	b8 c1       	rjmp	.+880    	; 0x454 <MIDI_GetStatusType+0x38>
  e4:	b7 c1       	rjmp	.+878    	; 0x454 <MIDI_GetStatusType+0x38>
  e6:	b6 c1       	rjmp	.+876    	; 0x454 <MIDI_GetStatusType+0x38>
  e8:	b5 c1       	rjmp	.+874    	; 0x454 <MIDI_GetStatusType+0x38>
  ea:	b4 c1       	rjmp	.+872    	; 0x454 <MIDI_GetStatusType+0x38>
  ec:	b3 c1       	rjmp	.+870    	; 0x454 <MIDI_GetStatusType+0x38>
  ee:	b2 c1       	rjmp	.+868    	; 0x454 <MIDI_GetStatusType+0x38>
  f0:	b1 c1       	rjmp	.+866    	; 0x454 <MIDI_GetStatusType+0x38>
  f2:	b0 c1       	rjmp	.+864    	; 0x454 <MIDI_GetStatusType+0x38>
  f4:	9d c1       	rjmp	.+826    	; 0x430 <MIDI_GetStatusType+0x14>
  f6:	ae c1       	rjmp	.+860    	; 0x454 <MIDI_GetStatusType+0x38>
  f8:	ad c1       	rjmp	.+858    	; 0x454 <MIDI_GetStatusType+0x38>
  fa:	ac c1       	rjmp	.+856    	; 0x454 <MIDI_GetStatusType+0x38>
  fc:	ab c1       	rjmp	.+854    	; 0x454 <MIDI_GetStatusType+0x38>
  fe:	aa c1       	rjmp	.+852    	; 0x454 <MIDI_GetStatusType+0x38>
 100:	a9 c1       	rjmp	.+850    	; 0x454 <MIDI_GetStatusType+0x38>
 102:	a8 c1       	rjmp	.+848    	; 0x454 <MIDI_GetStatusType+0x38>
 104:	a7 c1       	rjmp	.+846    	; 0x454 <MIDI_GetStatusType+0x38>
 106:	a6 c1       	rjmp	.+844    	; 0x454 <MIDI_GetStatusType+0x38>
 108:	a5 c1       	rjmp	.+842    	; 0x454 <MIDI_GetStatusType+0x38>
 10a:	a4 c1       	rjmp	.+840    	; 0x454 <MIDI_GetStatusType+0x38>
 10c:	a3 c1       	rjmp	.+838    	; 0x454 <MIDI_GetStatusType+0x38>
 10e:	a2 c1       	rjmp	.+836    	; 0x454 <MIDI_GetStatusType+0x38>
 110:	a1 c1       	rjmp	.+834    	; 0x454 <MIDI_GetStatusType+0x38>
 112:	a0 c1       	rjmp	.+832    	; 0x454 <MIDI_GetStatusType+0x38>
 114:	9b c1       	rjmp	.+822    	; 0x44c <MIDI_GetStatusType+0x30>
 116:	a0 c1       	rjmp	.+832    	; 0x458 <MIDI_GetStatusType+0x3c>
 118:	8b c1       	rjmp	.+790    	; 0x430 <MIDI_GetStatusType+0x14>
 11a:	9e c1       	rjmp	.+828    	; 0x458 <MIDI_GetStatusType+0x3c>
 11c:	9b c1       	rjmp	.+822    	; 0x454 <MIDI_GetStatusType+0x38>
 11e:	9a c1       	rjmp	.+820    	; 0x454 <MIDI_GetStatusType+0x38>
 120:	99 c1       	rjmp	.+818    	; 0x454 <MIDI_GetStatusType+0x38>
 122:	96 c1       	rjmp	.+812    	; 0x450 <MIDI_GetStatusType+0x34>
 124:	87 c1       	rjmp	.+782    	; 0x434 <MIDI_GetStatusType+0x18>
 126:	96 c1       	rjmp	.+812    	; 0x454 <MIDI_GetStatusType+0x38>
 128:	87 c1       	rjmp	.+782    	; 0x438 <MIDI_GetStatusType+0x1c>
 12a:	88 c1       	rjmp	.+784    	; 0x43c <MIDI_GetStatusType+0x20>
 12c:	89 c1       	rjmp	.+786    	; 0x440 <MIDI_GetStatusType+0x24>
 12e:	92 c1       	rjmp	.+804    	; 0x454 <MIDI_GetStatusType+0x38>
 130:	89 c1       	rjmp	.+786    	; 0x444 <MIDI_GetStatusType+0x28>
 132:	8a c1       	rjmp	.+788    	; 0x448 <MIDI_GetStatusType+0x2c>
 134:	45 c0       	rjmp	.+138    	; 0x1c0 <MIDI_ParserTask+0x18>
 136:	51 c0       	rjmp	.+162    	; 0x1da <MIDI_ParserTask+0x32>
 138:	84 c0       	rjmp	.+264    	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 13a:	b7 c0       	rjmp	.+366    	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
 13c:	97 c0       	rjmp	.+302    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 13e:	c6 c0       	rjmp	.+396    	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 140:	c9 c0       	rjmp	.+402    	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>

00000142 <.dinit>:
 142:	01 00       	.word	0x0001	; ????
 144:	01 40       	sbci	r16, 0x01	; 1
 146:	80 01       	movw	r16, r0
 148:	40 01       	movw	r8, r0
 14a:	58 00       	.word	0x0058	; ????
 14c:	05 3e       	cpi	r16, 0xE5	; 229
 14e:	01 58       	subi	r16, 0x81	; 129
 150:	01 5c       	subi	r16, 0xC1	; 193
 152:	80 00       	.word	0x0080	; ????

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d4 e0       	ldi	r29, 0x04	; 4
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
 160:	e2 e4       	ldi	r30, 0x42	; 66
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	17 c0       	rjmp	.+46     	; 0x196 <__do_clear_bss+0x8>
 168:	b5 91       	lpm	r27, Z+
 16a:	a5 91       	lpm	r26, Z+
 16c:	35 91       	lpm	r19, Z+
 16e:	25 91       	lpm	r18, Z+
 170:	05 91       	lpm	r16, Z+
 172:	07 fd       	sbrc	r16, 7
 174:	0c c0       	rjmp	.+24     	; 0x18e <__do_clear_bss>
 176:	95 91       	lpm	r25, Z+
 178:	85 91       	lpm	r24, Z+
 17a:	ef 01       	movw	r28, r30
 17c:	f9 2f       	mov	r31, r25
 17e:	e8 2f       	mov	r30, r24
 180:	05 90       	lpm	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	a2 17       	cp	r26, r18
 186:	b3 07       	cpc	r27, r19
 188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0x20>
 18a:	fe 01       	movw	r30, r28
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__do_clear_bss+0x8>

0000018e <__do_clear_bss>:
 18e:	1d 92       	st	X+, r1
 190:	a2 17       	cp	r26, r18
 192:	b3 07       	cpc	r27, r19
 194:	e1 f7       	brne	.-8      	; 0x18e <__do_clear_bss>
 196:	e3 35       	cpi	r30, 0x53	; 83
 198:	f4 07       	cpc	r31, r20
 19a:	31 f7       	brne	.-52     	; 0x168 <__do_copy_data+0x8>
 19c:	b8 d1       	rcall	.+880    	; 0x50e <main>
 19e:	b0 c1       	rjmp	.+864    	; 0x500 <exit>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>

Disassembly of section .text:

0000052e <__bad_interrupt>:
 52e:	68 cd       	rjmp	.-1328   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000050e <main>:
#include "midi_controller.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
 50e:	cf df       	rcall	.-98     	; 0x4ae <UART_init>
	MIDICTRL_Init();
 510:	bf df       	rcall	.-130    	; 0x490 <MIDICTRL_Init>
	SH100CTRL_Init();
 512:	0e d0       	rcall	.+28     	; 0x530 <SH100CTRL_Init>
	
	cpu_irq_enable();
 514:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
 516:	48 de       	rcall	.-880    	; 0x1a8 <MIDI_ParserTask>
 518:	fe cf       	rjmp	.-4      	; 0x516 <main+0x8>

Disassembly of section .text.MIDI_IsStatusWord:

00000526 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
 526:	88 1f       	adc	r24, r24
 528:	88 27       	eor	r24, r24
 52a:	88 1f       	adc	r24, r24
 52c:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

0000051a <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	88 3f       	cpi	r24, 0xF8	; 248
 51e:	08 f4       	brcc	.+2      	; 0x522 <MIDI_IsSysRealTime+0x8>
 520:	90 e0       	ldi	r25, 0x00	; 0
}
 522:	89 2f       	mov	r24, r25
 524:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

0000041c <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	fc 01       	movw	r30, r24
 420:	e0 58       	subi	r30, 0x80	; 128
 422:	f1 09       	sbc	r31, r1
 424:	e0 38       	cpi	r30, 0x80	; 128
 426:	f1 05       	cpc	r31, r1
 428:	a8 f4       	brcc	.+42     	; 0x454 <MIDI_GetStatusType+0x38>
 42a:	e6 5e       	subi	r30, 0xE6	; 230
 42c:	ff 4f       	sbci	r31, 0xFF	; 255
 42e:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 440:	83 e0       	ldi	r24, 0x03	; 3
 442:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 458:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 45a:	08 95       	ret

Disassembly of section .text.isEqualCommands:

000004de <isEqualCommands>:
	}
};

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
 4de:	62 13       	cpse	r22, r18
 4e0:	04 c0       	rjmp	.+8      	; 0x4ea <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data2) return false;	
 4e2:	85 17       	cp	r24, r21
 4e4:	21 f0       	breq	.+8      	; 0x4ee <isEqualCommands+0x10>
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
	}
};

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data2) return false;	
	return true;
 4ee:	81 e0       	ldi	r24, 0x01	; 1
}
 4f0:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

00000490 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// !!!!!!!!LOAD FROM EEPROM after init!!!!!!!!!!!!!
	userCommands = defaultCommands;
 490:	88 e1       	ldi	r24, 0x18	; 24
 492:	e0 e4       	ldi	r30, 0x40	; 64
 494:	f1 e0       	ldi	r31, 0x01	; 1
 496:	a1 e0       	ldi	r26, 0x01	; 1
 498:	b1 e0       	ldi	r27, 0x01	; 1
 49a:	01 90       	ld	r0, Z+
 49c:	0d 92       	st	X+, r0
 49e:	8a 95       	dec	r24
 4a0:	e1 f7       	brne	.-8      	; 0x49a <MIDICTRL_Init+0xa>
	commandSet = USER;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <commandSet>
	
	mode = RUNNING;
 4a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ac:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

000002e6 <MIDICTRL_HandleCommand>:
}

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	switch(mode)
 2ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f2:	21 11       	cpse	r18, r1
 2f4:	33 c0       	rjmp	.+102    	; 0x35c <MIDICTRL_HandleCommand+0x76>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 2f6:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <omniModeEnabled>
 2fa:	21 11       	cpse	r18, r1
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <MIDICTRL_HandleCommand+0x20>
			{
				if(channelNum != command.channel) return;
 2fe:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <channelNum>
 302:	72 13       	cpse	r23, r18
 304:	2b c0       	rjmp	.+86     	; 0x35c <MIDICTRL_HandleCommand+0x76>
 306:	09 2f       	mov	r16, r25
 308:	18 2f       	mov	r17, r24
 30a:	c7 2f       	mov	r28, r23
 30c:	d6 2f       	mov	r29, r22
			}
			
			if(muteCommandEnabled)
 30e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <muteCommandEnabled>
 312:	88 23       	and	r24, r24
 314:	79 f0       	breq	.+30     	; 0x334 <MIDICTRL_HandleCommand+0x4e>
			{
				if(isEqualCommands(command, muteCommand)) SH100CTRL_MuteAmp();
 316:	84 ea       	ldi	r24, 0xA4	; 164
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	a0 e0       	ldi	r26, 0x00	; 0
 31c:	fc 01       	movw	r30, r24
 31e:	5a 2f       	mov	r21, r26
 320:	d2 d0       	rcall	.+420    	; 0x4c6 <__xload_4>
 322:	9b 01       	movw	r18, r22
 324:	ac 01       	movw	r20, r24
 326:	6d 2f       	mov	r22, r29
 328:	7c 2f       	mov	r23, r28
 32a:	81 2f       	mov	r24, r17
 32c:	90 2f       	mov	r25, r16
 32e:	d7 d0       	rcall	.+430    	; 0x4de <isEqualCommands>
 330:	81 11       	cpse	r24, r1
 332:	00 d1       	rcall	.+512    	; 0x534 <SH100CTRL_MuteAmp>
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 334:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <commandSet>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	19 f4       	brne	.+6      	; 0x342 <MIDICTRL_HandleCommand+0x5c>
 33c:	e1 e0       	ldi	r30, 0x01	; 1
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	02 c0       	rjmp	.+4      	; 0x346 <MIDICTRL_HandleCommand+0x60>
			else currentCommandBlock = &defaultCommands;
 342:	e0 e4       	ldi	r30, 0x40	; 64
 344:	f1 e0       	ldi	r31, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) SH100CTRL_SwChannel1(); return;
 346:	20 81       	ld	r18, Z
 348:	31 81       	ldd	r19, Z+1	; 0x01
 34a:	42 81       	ldd	r20, Z+2	; 0x02
 34c:	53 81       	ldd	r21, Z+3	; 0x03
 34e:	6d 2f       	mov	r22, r29
 350:	7c 2f       	mov	r23, r28
 352:	81 2f       	mov	r24, r17
 354:	90 2f       	mov	r25, r16
 356:	c3 d0       	rcall	.+390    	; 0x4de <isEqualCommands>
 358:	81 11       	cpse	r24, r1
 35a:	eb d0       	rcall	.+470    	; 0x532 <SH100CTRL_SwChannel1>
		case PROGRAMMING:
		{
			break;
		}
	}	
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

000001a8 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 1a8:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <state>
 1ac:	8e 2f       	mov	r24, r30
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	91 05       	cpc	r25, r1
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <MIDI_ParserTask+0x10>
 1b6:	96 c0       	rjmp	.+300    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
 1b8:	fc 01       	movw	r30, r24
 1ba:	e6 56       	subi	r30, 0x66	; 102
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 1c0:	ec e1       	ldi	r30, 0x1C	; 28
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 1c6:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 1c8:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 1ca:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <currentStatusType>
			isSecondDataWord = false;
 1ce:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
			state = WAIT_WORD;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
			break;
 1d8:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 1da:	8b d1       	rcall	.+790    	; 0x4f2 <UART_RxBufferNotEmpty>
 1dc:	88 23       	and	r24, r24
 1de:	09 f4       	brne	.+2      	; 0x1e2 <MIDI_ParserTask+0x3a>
 1e0:	81 c0       	rjmp	.+258    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
			{
				recievedWord = UART_PopWord();
 1e2:	3c d1       	rcall	.+632    	; 0x45c <UART_PopWord>
 1e4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 1e8:	98 d1       	rcall	.+816    	; 0x51a <MIDI_IsSysRealTime>
 1ea:	81 11       	cpse	r24, r1
 1ec:	7b c0       	rjmp	.+246    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
					return;
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 1ee:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 1f2:	99 d1       	rcall	.+818    	; 0x526 <MIDI_IsStatusWord>
 1f4:	88 23       	and	r24, r24
 1f6:	21 f0       	breq	.+8      	; 0x200 <__EEPROM_REGION_LENGTH__>
				{					
					state = DISPATCH_STATUS;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
 1fe:	08 95       	ret
				}
				else
				{
					switch(currentStatusType)
 200:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentStatusType>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	49 f0       	breq	.+18     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 208:	18 f4       	brcc	.+6      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	51 f0       	breq	.+20     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 20e:	15 c0       	rjmp	.+42     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	59 f0       	breq	.+22     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 214:	85 30       	cpi	r24, 0x05	; 5
 216:	69 f0       	breq	.+26     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 218:	10 c0       	rjmp	.+32     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
 220:	08 95       	ret
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
 228:	08 95       	ret
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
 230:	08 95       	ret
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
 238:	08 95       	ret
						default: state = WAIT_WORD;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
 240:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 242:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <recievedWord>
 246:	89 2f       	mov	r24, r25
 248:	82 95       	swap	r24
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	ec e1       	ldi	r30, 0x1C	; 28
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	80 83       	st	Z, r24
			currentCommand.channel = recievedWord & 0x0F;
 252:	9f 70       	andi	r25, 0x0F	; 15
 254:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 256:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 258:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 25a:	e0 d0       	rcall	.+448    	; 0x41c <MIDI_GetStatusType>
 25c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentStatusType>
			isSecondDataWord = false;
 260:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
			state = WAIT_WORD;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
			break;
 26a:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 26c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isSecondDataWord>
 270:	88 23       	and	r24, r24
 272:	81 f0       	breq	.+32     	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
			{
				currentCommand.data2 = recievedWord;
 274:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 278:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <currentCommand+0x3>
				isSecondDataWord = false;			
 27c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 280:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <currentCommand>
 284:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <currentCommand+0x1>
 288:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <currentCommand+0x2>
 28c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <currentCommand+0x3>
 290:	2a d0       	rcall	.+84     	; 0x2e6 <MIDICTRL_HandleCommand>
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 294:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 298:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <currentCommand+0x2>
				isSecondDataWord = true;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <isSecondDataWord>
			}
			state = WAIT_WORD;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
			break;
 2a8:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 2aa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 2ae:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 2b2:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <currentCommand>
 2b6:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <currentCommand+0x1>
 2ba:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <currentCommand+0x2>
 2be:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <currentCommand+0x3>
 2c2:	11 d0       	rcall	.+34     	; 0x2e6 <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
			break;
 2ca:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
			break;
 2d2:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 2d4:	ec e1       	ldi	r30, 0x1C	; 28
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 2da:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 2dc:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <state>
 2e4:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000530 <SH100CTRL_Init>:
{
	
}

void SH100CTRL_SwAB()
{
 530:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel1:

00000532 <SH100CTRL_SwChannel1>:
 532:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

00000534 <SH100CTRL_MuteAmp>:
	
}

void SH100CTRL_MuteAmp()
{
 534:	08 95       	ret

Disassembly of section .text.UART_init:

000004ae <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
 4ae:	88 ed       	ldi	r24, 0xD8	; 216
 4b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C=0x06; 
 4b4:	86 e0       	ldi	r24, 0x06	; 6
 4b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0x00;
 4ba:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=0x13;
 4be:	83 e1       	ldi	r24, 0x13	; 19
 4c0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
 4c4:	08 95       	ret

Disassembly of section .text.__vector_18:

00000366 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	8f 93       	push	r24
 372:	9f 93       	push	r25
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 378:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 37c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 380:	8c 71       	andi	r24, 0x1C	; 28
 382:	d1 f4       	brne	.+52     	; 0x3b8 <__vector_18+0x52>
	{
		rx_buffer0[rx_wr_index++] = data;
 384:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <rx_wr_index>
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	8e 0f       	add	r24, r30
 38c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <rx_wr_index>
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	e3 5d       	subi	r30, 0xD3	; 211
 394:	fe 4f       	sbci	r31, 0xFE	; 254
 396:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 398:	80 31       	cpi	r24, 0x10	; 16
 39a:	11 f4       	brne	.+4      	; 0x3a0 <__vector_18+0x3a>
 39c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 3a0:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rx_counter>
 3a4:	8f 5f       	subi	r24, 0xFF	; 255
 3a6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <rx_counter>
 3aa:	80 31       	cpi	r24, 0x10	; 16
 3ac:	29 f4       	brne	.+10     	; 0x3b8 <__vector_18+0x52>
		{
			rx_counter=0;
 3ae:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <rx_counter>
			rx_buffer_overflow=1;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <rx_buffer_overflow>
		}
	}
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	9f 91       	pop	r25
 3be:	8f 91       	pop	r24
 3c0:	0f 90       	pop	r0
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	0f 90       	pop	r0
 3c6:	1f 90       	pop	r1
 3c8:	18 95       	reti

Disassembly of section .text.UART_PopWord:

0000045c <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
 45c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <rx_counter>
 460:	88 23       	and	r24, r24
 462:	e1 f3       	breq	.-8      	; 0x45c <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
 464:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <rx_rd_index>
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	9e 0f       	add	r25, r30
 46c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <rx_rd_index>
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	e3 5d       	subi	r30, 0xD3	; 211
 474:	fe 4f       	sbci	r31, 0xFE	; 254
 476:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
 478:	90 31       	cpi	r25, 0x10	; 16
 47a:	11 f4       	brne	.+4      	; 0x480 <UART_PopWord+0x24>
 47c:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <rx_rd_index>
	#endif
	
	cpu_irq_disable();
 480:	f8 94       	cli
	--rx_counter;
 482:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rx_counter>
 486:	91 50       	subi	r25, 0x01	; 1
 488:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <rx_counter>
	cpu_irq_enable();
 48c:	78 94       	sei
	return data;
}
 48e:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000004f2 <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <rx_counter>
 4f8:	91 11       	cpse	r25, r1
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <UART_RxBufferNotEmpty+0xc>
 4fc:	80 e0       	ldi	r24, 0x00	; 0
}
 4fe:	08 95       	ret

Disassembly of section .text.__vector_20:

000003ca <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 3ca:	1f 92       	push	r1
 3cc:	0f 92       	push	r0
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	0f 92       	push	r0
 3d2:	11 24       	eor	r1, r1
 3d4:	8f 93       	push	r24
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
	if (tx_counter)
 3da:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tx_counter>
 3de:	88 23       	and	r24, r24
 3e0:	a9 f0       	breq	.+42     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
	{
		--tx_counter;
 3e2:	81 50       	subi	r24, 0x01	; 1
 3e4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 3e8:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <tx_rd_index>
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	8e 0f       	add	r24, r30
 3f0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <tx_rd_index>
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	ec 5d       	subi	r30, 0xDC	; 220
 3f8:	fe 4f       	sbci	r31, 0xFE	; 254
 3fa:	80 81       	ld	r24, Z
 3fc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 400:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <tx_rd_index>
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	11 f4       	brne	.+4      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 408:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <tx_rd_index>
		#endif
	}
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	8f 91       	pop	r24
 412:	0f 90       	pop	r0
 414:	0f be       	out	0x3f, r0	; 63
 416:	0f 90       	pop	r0
 418:	1f 90       	pop	r1
 41a:	18 95       	reti

Disassembly of section .text.libgcc:

000004c6 <__xload_4>:
 4c6:	57 fd       	sbrc	r21, 7
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <__xload_4+0xe>
 4ca:	65 91       	lpm	r22, Z+
 4cc:	75 91       	lpm	r23, Z+
 4ce:	85 91       	lpm	r24, Z+
 4d0:	95 91       	lpm	r25, Z+
 4d2:	08 95       	ret
 4d4:	61 91       	ld	r22, Z+
 4d6:	71 91       	ld	r23, Z+
 4d8:	81 91       	ld	r24, Z+
 4da:	91 91       	ld	r25, Z+
 4dc:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000536 <_fini>:
 536:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000538 <__funcs_on_exit>:
 538:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000053a <__simulator_exit>:
 53a:	08 95       	ret

Disassembly of section .text.exit:

00000500 <exit>:
 500:	ec 01       	movw	r28, r24
 502:	1a d0       	rcall	.+52     	; 0x538 <__funcs_on_exit>
 504:	18 d0       	rcall	.+48     	; 0x536 <_fini>
 506:	ce 01       	movw	r24, r28
 508:	18 d0       	rcall	.+48     	; 0x53a <__simulator_exit>
 50a:	ce 01       	movw	r24, r28
 50c:	17 d0       	rcall	.+46     	; 0x53c <_Exit>

Disassembly of section .text._Exit:

0000053c <_Exit>:
 53c:	31 de       	rcall	.-926    	; 0x1a0 <_exit>
