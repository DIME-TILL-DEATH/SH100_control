
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001b52  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  00800100  00800100  00001b52  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000a8  00000000  00000000  00001b81  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001c30  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d83  00000000  00000000  00001fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000125a  00000000  00000000  00008d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fd8  00000000  00000000  00009fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  0000bf90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073b  00000000  00000000  0000c6b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b9a  00000000  00000000  0000cdef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000e989  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00001996  00001996  00001b2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ec0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.FBTNS_MainTask 0000019a  00000670  00000670  00000804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.leaveDefSettings_cnt 00000001  008001a1  008001a1  00001b52  2**0
                  ALLOC
 17 .bss.swProgrammingMode_cnt 00000001  008001a2  008001a2  00001b52  2**0
                  ALLOC
 18 .data.protectionInterval_cnt 00000001  008001a3  000019bc  00001b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .text.__portable_avr_delay_cycles 00000016  0000186c  0000186c  00001a00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.initTest 000000d8  0000094c  0000094c  00000ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.ISRInit 0000002a  0000164e  0000164e  000017e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    00000012  000018aa  000018aa  00001a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_16 00000096  00000bb8  00000bb8  00000d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__vector_21 000000c2  00000af6  00000af6  00000c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_4 00000046  00001296  00001296  0000142a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .bss.measSwitch 00000001  008001a4  008001a4  00001b52  2**0
                  ALLOC
 27 .bss.isAmpStarted 00000001  008001a5  008001a5  00001b52  2**0
                  ALLOC
 28 .text.MIDI_IsStatusWord 00000008  0000194c  0000194c  00001ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MIDI_IsSysRealTime 0000000c  00001908  00001908  00001a9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.MIDI_GetStatusType 00000070  00000eaa  00000eaa  0000103e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.isEqualCommands 00000042  00001322  00001322  000014b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.loadCommSetFromMemory 0000007a  00000c4e  00000c4e  00000de2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.setMidiLeds 00000052  00001114  00001114  000012a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.MIDICTRL_Init 00000028  000016f6  000016f6  0000188a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.MIDICTRL_MidiMode 00000006  0000195c  0000195c  00001af0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_SetProgrammingButton 0000002e  00001596  00001596  0000172a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.MIDICTRL_EnterProgrammingMode 00000038  00001420  00001420  000015b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MIDICTRL_SetMidiChannel 00000006  00001962  00001962  00001af6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.MIDICTRL_OmniModeEn 00000006  00001968  00001968  00001afc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.MIDICTRL_MuteCommEn 00000006  0000196e  0000196e  00001b02  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.programmBtn 0000004c  00001202  00001202  00001396  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.MIDICTRL_SendSwChComm 0000006a  00000f88  00000f88  0000111c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.MIDICTRL_SendLoopEnComm 0000002a  00001678  00001678  0000180c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.MIDICTRL_SendSwABComm 0000002a  000016a2  000016a2  00001836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.MIDICTRL_StoreUserCommands 0000003e  000013a6  000013a6  0000153a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.MIDICTRL_DiscardCommands 00000022  0000178e  0000178e  00001922  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.indicateMidiError 0000002e  000015c4  000015c4  00001758  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.MIDICTRL_HandleCommand 000001ec  000000dc  000000dc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__vector_13 0000005c  000010b8  000010b8  0000124c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .data.defaultCommands 00000018  0080017f  000019a0  00001b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 51 .progmemx.data.muteCommand 00000004  000000d8  000000d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 52 .bss.channelNum 00000001  008001a6  008001a6  00001b52  2**0
                  ALLOC
 53 .bss.muteCommandEnabled 00000001  008001a7  008001a7  00001b52  2**0
                  ALLOC
 54 .bss.omniModeEnabled 00000001  008001a8  008001a8  00001b52  2**0
                  ALLOC
 55 .text.handleRealTimeStatus 00000004  00001992  00001992  00001b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.MIDI_ParserTask 00000142  0000080a  0000080a  0000099e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.MIDI_SetRetranslateState 00000006  00001974  00001974  00001b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.MIDI_SendCommand 00000078  00000d42  00000d42  00000ed6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .bss.state    00000001  008001a9  008001a9  00001b52  2**0
                  ALLOC
 60 .data.retranslate 00000001  008001aa  000019bd  00001b51  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 61 .text.setChannelLeds 00000022  000017b0  000017b0  00001944  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100CTRL_SetAmpLeds 0000002e  000015f2  000015f2  00001786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SH100CTRL_StoreAmpState 0000001c  000017d2  000017d2  00001966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SH100CTRL_SetLoop 0000002a  000016cc  000016cc  00001860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SH100CTRL_SwChannel 0000002e  00001620  00001620  000017b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SH100CTRL_SwLoop 00000014  00001882  00001882  00001a16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SH100CTRL_BtnSwChannel 00000010  000018ce  000018ce  00001a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SH100CTRL_SetAB 00000024  00001746  00001746  000018da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SH100CTRL_SetAmpState 00000032  00001532  00001532  000016c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SH100CTRL_Init 00000078  00000dba  00000dba  00000f4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SH100CTRL_SwAB 0000000c  00001914  00001914  00001aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SH100CTRL_MuteAmp 00000006  0000197a  0000197a  00001b0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.SH100CTRL_UnmuteAmp 0000000c  00001920  00001920  00001ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.SH100CTRL_CheckOutputJacks 00000078  00000e32  00000e32  00000fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SH100HW_Init 00000066  00000ff2  00000ff2  00001186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.SH100HW_SetPAFailure 0000000e  000018de  000018de  00001a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.SH100HW_GetPAFailure 0000000a  00001938  00001938  00001acc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.SH100HW_SetCh 0000004e  00001166  00001166  000012fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.SH100HW_LoopEn 00000018  00001824  00001824  000019b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.SH100HW_SetAB 00000006  00001980  00001980  00001b14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.SH100HW_SetNewLedState 00000038  00001458  00001458  000015ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.SH100HW_SetPreviousLedState 00000028  0000171e  0000171e  000018b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.SH100HW_GetOutputJacks 00000018  0000183c  0000183c  000019d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.SH100HW_SetPAState 0000003c  000013e4  000013e4  00001578  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.SH100HW_SetOutputMode 00000006  00001986  00001986  00001b1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.SH100HW_StartADConvertion 00000014  00001896  00001896  00001a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.SH100HW_GetControlsState 000001c0  000004b0  000004b0  00000644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.writeShiftRegs 00000042  00001364  00001364  000014f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.SH100HW_MainTask 000001e8  000002c8  000002c8  0000045c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .bss.fastBlink 00000001  008001ab  008001ab  00001b52  2**0
                  ALLOC
 91 .bss.slowBlink 00000001  008001ac  008001ac  00001b52  2**0
                  ALLOC
 92 .bss.blinkCounter 00000001  008001ad  008001ad  00001b52  2**0
                  ALLOC
 93 .text.UART_init 00000018  00001854  00001854  000019e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__vector_18 00000060  00001058  00001058  000011ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.UART_PopWord 00000034  000014fe  000014fe  00001692  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.UART_RxBufferNotEmpty 0000000e  000018ec  000018ec  00001a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__vector_20 0000004e  000011b4  000011b4  00001348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.UART_PushWord 00000046  000012dc  000012dc  00001470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text         0000007a  00000cc8  00000cc8  00000e5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text         00000008  00001954  00001954  00001ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text         00000048  0000124e  0000124e  000013e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.libgcc  0000001a  0000180a  0000180a  0000199e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.__dummy_fini 00000002  00001998  00001998  00001b2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__dummy_funcs_on_exit 00000002  0000199a  0000199a  00001b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__dummy_simulator_exit 00000002  0000199c  0000199c  00001b30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.exit    0000000e  000018fa  000018fa  00001a8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.__simple_malloc 000000d2  00000a24  00000a24  00000bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .bss.end.1483 00000002  00800197  00800197  00001b52  2**0
                  ALLOC
109 .bss.cur.1482 00000002  00800199  00800199  00001b52  2**0
                  ALLOC
110 .text._Exit   00000002  0000199e  0000199e  00001b32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.__expand_heap 0000006e  00000f1a  00000f1a  000010ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .bss.__brkval 00000002  0080019b  0080019b  00001b52  2**0
                  ALLOC
113 .data.__malloc_heap_end 00000002  0080019d  000019b8  00001b4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
114 .data.__malloc_heap_start 00000002  0080019f  000019ba  00001b4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
115 .text.avrlibc 00000024  0000176a  0000176a  000018fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.avrlibc 00000012  000018bc  000018bc  00001a50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.avrlibc 0000000c  0000192c  0000192c  00001ac0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.avrlibc 00000032  00001564  00001564  000016f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.avrlibc 0000001c  000017ee  000017ee  00001982  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.avrlibc 00000006  0000198c  0000198c  00001b20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.libgcc.prologue 00000038  00001490  00001490  00001624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.libgcc.prologue 00000036  000014c8  000014c8  0000165c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.libgcc  0000000a  00001942  00001942  00001ad6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	43 c0       	rjmp	.+134    	; 0x88 <__ctors_end>
   2:	c9 cc       	rjmp	.-1646   	; 0xfffff996 <__eeprom_end+0xff7ef996>
   4:	c8 cc       	rjmp	.-1648   	; 0xfffff996 <__eeprom_end+0xff7ef996>
   6:	c7 cc       	rjmp	.-1650   	; 0xfffff996 <__eeprom_end+0xff7ef996>
   8:	46 c9       	rjmp	.-3444   	; 0xfffff296 <__eeprom_end+0xff7ef296>
   a:	c5 cc       	rjmp	.-1654   	; 0xfffff996 <__eeprom_end+0xff7ef996>
   c:	c4 cc       	rjmp	.-1656   	; 0xfffff996 <__eeprom_end+0xff7ef996>
   e:	c3 cc       	rjmp	.-1658   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  10:	c2 cc       	rjmp	.-1660   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  12:	c1 cc       	rjmp	.-1662   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  14:	c0 cc       	rjmp	.-1664   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  16:	bf cc       	rjmp	.-1666   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  18:	be cc       	rjmp	.-1668   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  1a:	4e c8       	rjmp	.-3940   	; 0xfffff0b8 <__eeprom_end+0xff7ef0b8>
  1c:	bc cc       	rjmp	.-1672   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  1e:	bb cc       	rjmp	.-1674   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  20:	cb c5       	rjmp	.+2966   	; 0xbb8 <__vector_16>
  22:	b9 cc       	rjmp	.-1678   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  24:	19 c8       	rjmp	.-4046   	; 0xfffff058 <__eeprom_end+0xff7ef058>
  26:	b7 cc       	rjmp	.-1682   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  28:	c5 c8       	rjmp	.-3702   	; 0xfffff1b4 <__eeprom_end+0xff7ef1b4>
  2a:	65 c5       	rjmp	.+2762   	; 0xaf6 <__vector_21>
  2c:	b4 cc       	rjmp	.-1688   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  2e:	b3 cc       	rjmp	.-1690   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  30:	b2 cc       	rjmp	.-1692   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  32:	b1 cc       	rjmp	.-1694   	; 0xfffff996 <__eeprom_end+0xff7ef996>
  34:	f6 c3       	rjmp	.+2028   	; 0x822 <MIDI_ParserTask+0x18>
  36:	02 c4       	rjmp	.+2052   	; 0x83c <MIDI_ParserTask+0x32>
  38:	41 c4       	rjmp	.+2178   	; 0x8bc <MIDI_ParserTask+0xb2>
  3a:	6f c4       	rjmp	.+2270   	; 0x91a <MIDI_ParserTask+0x110>
  3c:	54 c4       	rjmp	.+2216   	; 0x8e6 <MIDI_ParserTask+0xdc>
  3e:	79 c4       	rjmp	.+2290   	; 0x932 <MIDI_ParserTask+0x128>
  40:	7c c4       	rjmp	.+2296   	; 0x93a <MIDI_ParserTask+0x130>
  42:	45 c2       	rjmp	.+1162   	; 0x4ce <SH100HW_GetControlsState+0x1e>
  44:	5a c2       	rjmp	.+1204   	; 0x4fa <SH100HW_GetControlsState+0x4a>
  46:	73 c2       	rjmp	.+1254   	; 0x52e <__stack+0x2f>
  48:	8c c2       	rjmp	.+1304   	; 0x562 <__stack+0x63>
  4a:	a1 c2       	rjmp	.+1346   	; 0x58e <__stack+0x8f>
  4c:	ba c2       	rjmp	.+1396   	; 0x5c2 <__stack+0xc3>
  4e:	c9 c2       	rjmp	.+1426   	; 0x5e2 <__stack+0xe3>
  50:	e2 c2       	rjmp	.+1476   	; 0x616 <__stack+0x117>

00000052 <.dinit>:
  52:	01 00       	.word	0x0001	; ????
  54:	01 7f       	andi	r16, 0xF1	; 241
  56:	80 01       	movw	r16, r0
  58:	7f 01       	movw	r14, r30
  5a:	97 00       	.word	0x0097	; ????
  5c:	19 a0       	ldd	r1, Y+33	; 0x21
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	01 9d       	mul	r16, r1
  62:	80 01       	movw	r16, r0
  64:	9d 01       	movw	r18, r26
  66:	a1 00       	.word	0x00a1	; ????
  68:	19 b8       	out	0x09, r1	; 9
  6a:	01 a1       	ldd	r16, Z+33	; 0x21
  6c:	01 a3       	std	Z+33, r16	; 0x21
  6e:	80 01       	movw	r16, r0
  70:	a3 01       	movw	r20, r6
  72:	a4 00       	.word	0x00a4	; ????
  74:	19 bc       	out	0x29, r1	; 41
  76:	01 a4       	ldd	r0, Z+41	; 0x29
  78:	01 aa       	std	Z+49, r0	; 0x31
  7a:	80 01       	movw	r16, r0
  7c:	aa 01       	movw	r20, r20
  7e:	ab 00       	.word	0x00ab	; ????
  80:	19 bd       	out	0x29, r17	; 41
  82:	01 ab       	std	Z+49, r16	; 0x31
  84:	01 ae       	std	Z+57, r0	; 0x39
  86:	80 00       	.word	0x0080	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d4 e0       	ldi	r29, 0x04	; 4
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	e2 e5       	ldi	r30, 0x52	; 82
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	17 c0       	rjmp	.+46     	; 0xca <__do_clear_bss+0x8>
  9c:	b5 91       	lpm	r27, Z+
  9e:	a5 91       	lpm	r26, Z+
  a0:	35 91       	lpm	r19, Z+
  a2:	25 91       	lpm	r18, Z+
  a4:	05 91       	lpm	r16, Z+
  a6:	07 fd       	sbrc	r16, 7
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <__do_clear_bss>
  aa:	95 91       	lpm	r25, Z+
  ac:	85 91       	lpm	r24, Z+
  ae:	ef 01       	movw	r28, r30
  b0:	f9 2f       	mov	r31, r25
  b2:	e8 2f       	mov	r30, r24
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x20>
  be:	fe 01       	movw	r30, r28
  c0:	04 c0       	rjmp	.+8      	; 0xca <__do_clear_bss+0x8>

000000c2 <__do_clear_bss>:
  c2:	1d 92       	st	X+, r1
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__do_clear_bss>
  ca:	e7 38       	cpi	r30, 0x87	; 135
  cc:	f4 07       	cpc	r31, r20
  ce:	31 f7       	brne	.-52     	; 0x9c <__do_copy_data+0x8>
  d0:	ec db       	rcall	.-2088   	; 0xfffff8aa <__eeprom_end+0xff7ef8aa>
  d2:	13 cc       	rjmp	.-2010   	; 0xfffff8fa <__eeprom_end+0xff7ef8fa>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>

Disassembly of section .text:

00001996 <__bad_interrupt>:
    1996:	34 c3       	rjmp	.+1640   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.FBTNS_MainTask:

00000670 <FBTNS_MainTask>:
uint8_t protectionInterval_cnt = PROTECTION_INTERVAL;
uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

void FBTNS_MainTask(const SH100HW_Controls_t* pressedButtons)
{
 670:	9b 01       	movw	r18, r22
 672:	48 2f       	mov	r20, r24
	if(protectionInterval_cnt == 0)
 674:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <protectionInterval_cnt>
 678:	81 11       	cpse	r24, r1
 67a:	c3 c0       	rjmp	.+390    	; 0x802 <FBTNS_MainTask+0x192>
 67c:	a4 2f       	mov	r26, r20
 67e:	c9 01       	movw	r24, r18
	{
		
		//=============BTN CH1==========================
		if(pressedButtons->btnCh1 == BT_ON)
 680:	2d 5f       	subi	r18, 0xFD	; 253
 682:	3f 4f       	sbci	r19, 0xFF	; 255
 684:	4f 4f       	sbci	r20, 0xFF	; 255
 686:	f9 01       	movw	r30, r18
 688:	24 91       	lpm	r18, Z
 68a:	47 fd       	sbrc	r20, 7
 68c:	20 81       	ld	r18, Z
 68e:	21 11       	cpse	r18, r1
 690:	26 c0       	rjmp	.+76     	; 0x6de <FBTNS_MainTask+0x6e>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 692:	84 e1       	ldi	r24, 0x14	; 20
 694:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <protectionInterval_cnt>
			if(swProgrammingMode_cnt == SWITCH_MODE_DELAY)
 698:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <swProgrammingMode_cnt>
 69c:	8a 30       	cpi	r24, 0x0A	; 10
 69e:	61 f4       	brne	.+24     	; 0x6b8 <FBTNS_MainTask+0x48>
			{
				swProgrammingMode_cnt = 0;
 6a0:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <swProgrammingMode_cnt>
				//enter prog mode, or save settings
				if(MIDICTRL_MidiMode() == RUNNING)
 6a4:	5b d9       	rcall	.-3402   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 6a6:	81 11       	cpse	r24, r1
 6a8:	03 c0       	rjmp	.+6      	; 0x6b0 <FBTNS_MainTask+0x40>
				{
					MIDICTRL_EnterProgrammingMode();
 6aa:	ba d6       	rcall	.+3444   	; 0x1420 <MIDICTRL_EnterProgrammingMode>
					SH100CTRL_MuteAmp();
 6ac:	66 d9       	rcall	.-3380   	; 0xfffff97a <__eeprom_end+0xff7ef97a>
 6ae:	08 95       	ret
				}
				else
				{
					MIDICTRL_StoreUserCommands();
 6b0:	7a d6       	rcall	.+3316   	; 0x13a6 <MIDICTRL_StoreUserCommands>
					SH100CTRL_SetAmpLeds();
 6b2:	9f d7       	rcall	.+3902   	; 0x15f2 <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 6b4:	35 d9       	rcall	.-3478   	; 0xfffff920 <__eeprom_end+0xff7ef920>
 6b6:	08 95       	ret
				}
			}
			else
			{
				if(swProgrammingMode_cnt == 0)
 6b8:	81 11       	cpse	r24, r1
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <FBTNS_MainTask+0x62>
				{
					switch(MIDICTRL_MidiMode())
 6bc:	4f d9       	rcall	.-3426   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 6be:	88 23       	and	r24, r24
 6c0:	19 f0       	breq	.+6      	; 0x6c8 <FBTNS_MainTask+0x58>
 6c2:	81 30       	cpi	r24, 0x01	; 1
 6c4:	21 f0       	breq	.+8      	; 0x6ce <FBTNS_MainTask+0x5e>
 6c6:	05 c0       	rjmp	.+10     	; 0x6d2 <FBTNS_MainTask+0x62>
					{
						case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL1); break;
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	01 d9       	rcall	.-3582   	; 0xfffff8ce <__eeprom_end+0xff7ef8ce>
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <FBTNS_MainTask+0x62>
						case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	62 d7       	rcall	.+3780   	; 0x1596 <MIDICTRL_SetProgrammingButton>
					}
				}
				swProgrammingMode_cnt++;
 6d2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <swProgrammingMode_cnt>
 6d6:	8f 5f       	subi	r24, 0xFF	; 255
 6d8:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <swProgrammingMode_cnt>
 6dc:	08 95       	ret
			}
			return;
		}
		else swProgrammingMode_cnt=0;
 6de:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <swProgrammingMode_cnt>
		
		//=============BTN CH2==========================
		if(pressedButtons->btnCh2 == BT_ON)
 6e2:	9c 01       	movw	r18, r24
 6e4:	4a 2f       	mov	r20, r26
 6e6:	2c 5f       	subi	r18, 0xFC	; 252
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	4f 4f       	sbci	r20, 0xFF	; 255
 6ec:	f9 01       	movw	r30, r18
 6ee:	24 91       	lpm	r18, Z
 6f0:	47 fd       	sbrc	r20, 7
 6f2:	20 81       	ld	r18, Z
 6f4:	21 11       	cpse	r18, r1
 6f6:	0f c0       	rjmp	.+30     	; 0x716 <FBTNS_MainTask+0xa6>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 6f8:	84 e1       	ldi	r24, 0x14	; 20
 6fa:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 6fe:	2e d9       	rcall	.-3492   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 700:	88 23       	and	r24, r24
 702:	19 f0       	breq	.+6      	; 0x70a <FBTNS_MainTask+0x9a>
 704:	81 30       	cpi	r24, 0x01	; 1
 706:	21 f0       	breq	.+8      	; 0x710 <FBTNS_MainTask+0xa0>
 708:	08 95       	ret
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL2); break;
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	e0 d8       	rcall	.-3648   	; 0xfffff8ce <__eeprom_end+0xff7ef8ce>
 70e:	08 95       	ret
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	41 d7       	rcall	.+3714   	; 0x1596 <MIDICTRL_SetProgrammingButton>
 714:	08 95       	ret
			}
			return;
		}
		
		//=============BTN CH3==========================
		if(pressedButtons->btnCh3 == BT_ON)
 716:	9c 01       	movw	r18, r24
 718:	4a 2f       	mov	r20, r26
 71a:	2b 5f       	subi	r18, 0xFB	; 251
 71c:	3f 4f       	sbci	r19, 0xFF	; 255
 71e:	4f 4f       	sbci	r20, 0xFF	; 255
 720:	f9 01       	movw	r30, r18
 722:	24 91       	lpm	r18, Z
 724:	47 fd       	sbrc	r20, 7
 726:	20 81       	ld	r18, Z
 728:	21 11       	cpse	r18, r1
 72a:	0f c0       	rjmp	.+30     	; 0x74a <FBTNS_MainTask+0xda>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 72c:	84 e1       	ldi	r24, 0x14	; 20
 72e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 732:	14 d9       	rcall	.-3544   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 734:	88 23       	and	r24, r24
 736:	19 f0       	breq	.+6      	; 0x73e <FBTNS_MainTask+0xce>
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	21 f0       	breq	.+8      	; 0x744 <FBTNS_MainTask+0xd4>
 73c:	08 95       	ret
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL3); break;
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	c6 d8       	rcall	.-3700   	; 0xfffff8ce <__eeprom_end+0xff7ef8ce>
 742:	08 95       	ret
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	27 d7       	rcall	.+3662   	; 0x1596 <MIDICTRL_SetProgrammingButton>
 748:	08 95       	ret
			}
			return;
		}
		
		//=============BTN CH4==========================
		if(pressedButtons->btnCh4 == BT_ON)
 74a:	9c 01       	movw	r18, r24
 74c:	4a 2f       	mov	r20, r26
 74e:	2a 5f       	subi	r18, 0xFA	; 250
 750:	3f 4f       	sbci	r19, 0xFF	; 255
 752:	4f 4f       	sbci	r20, 0xFF	; 255
 754:	f9 01       	movw	r30, r18
 756:	24 91       	lpm	r18, Z
 758:	47 fd       	sbrc	r20, 7
 75a:	20 81       	ld	r18, Z
 75c:	21 11       	cpse	r18, r1
 75e:	0f c0       	rjmp	.+30     	; 0x77e <FBTNS_MainTask+0x10e>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 760:	84 e1       	ldi	r24, 0x14	; 20
 762:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 766:	fa d8       	rcall	.-3596   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 768:	88 23       	and	r24, r24
 76a:	19 f0       	breq	.+6      	; 0x772 <FBTNS_MainTask+0x102>
 76c:	81 30       	cpi	r24, 0x01	; 1
 76e:	21 f0       	breq	.+8      	; 0x778 <FBTNS_MainTask+0x108>
 770:	08 95       	ret
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL4); break;
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	ac d8       	rcall	.-3752   	; 0xfffff8ce <__eeprom_end+0xff7ef8ce>
 776:	08 95       	ret
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 778:	83 e0       	ldi	r24, 0x03	; 3
 77a:	0d d7       	rcall	.+3610   	; 0x1596 <MIDICTRL_SetProgrammingButton>
 77c:	08 95       	ret
			}
			return;
		}
		
		//=============BTN LOOP=========================
		if(pressedButtons->btnLoop == BT_ON)
 77e:	9c 01       	movw	r18, r24
 780:	4a 2f       	mov	r20, r26
 782:	28 5f       	subi	r18, 0xF8	; 248
 784:	3f 4f       	sbci	r19, 0xFF	; 255
 786:	4f 4f       	sbci	r20, 0xFF	; 255
 788:	f9 01       	movw	r30, r18
 78a:	24 91       	lpm	r18, Z
 78c:	47 fd       	sbrc	r20, 7
 78e:	20 81       	ld	r18, Z
 790:	21 11       	cpse	r18, r1
 792:	0e c0       	rjmp	.+28     	; 0x7b0 <FBTNS_MainTask+0x140>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 794:	84 e1       	ldi	r24, 0x14	; 20
 796:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 79a:	e0 d8       	rcall	.-3648   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 79c:	88 23       	and	r24, r24
 79e:	19 f0       	breq	.+6      	; 0x7a6 <FBTNS_MainTask+0x136>
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	19 f0       	breq	.+6      	; 0x7aa <FBTNS_MainTask+0x13a>
 7a4:	08 95       	ret
			{
				case RUNNING:
				{
					SH100CTRL_SwLoop();
 7a6:	6d d8       	rcall	.-3878   	; 0xfffff882 <__eeprom_end+0xff7ef882>
					break;
 7a8:	08 95       	ret
				}
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 7aa:	84 e0       	ldi	r24, 0x04	; 4
 7ac:	f4 d6       	rcall	.+3560   	; 0x1596 <MIDICTRL_SetProgrammingButton>
 7ae:	08 95       	ret
			}
			return;
		}
		
		//=============BTN AB===========================
		if(pressedButtons->btnAB == BT_ON)
 7b0:	07 96       	adiw	r24, 0x07	; 7
 7b2:	a1 1d       	adc	r26, r1
 7b4:	fc 01       	movw	r30, r24
 7b6:	84 91       	lpm	r24, Z
 7b8:	a7 fd       	sbrc	r26, 7
 7ba:	80 81       	ld	r24, Z
 7bc:	81 11       	cpse	r24, r1
 7be:	1e c0       	rjmp	.+60     	; 0x7fc <FBTNS_MainTask+0x18c>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 7c0:	84 e1       	ldi	r24, 0x14	; 20
 7c2:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <protectionInterval_cnt>
			if(leaveDefSettings_cnt == SWITCH_MODE_DELAY)
 7c6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <leaveDefSettings_cnt>
 7ca:	8a 30       	cpi	r24, 0x0A	; 10
 7cc:	49 f4       	brne	.+18     	; 0x7e0 <FBTNS_MainTask+0x170>
			{
				if(MIDICTRL_MidiMode() == PROGRAMMING)
 7ce:	c6 d8       	rcall	.-3700   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 7d0:	81 30       	cpi	r24, 0x01	; 1
 7d2:	d1 f4       	brne	.+52     	; 0x808 <FBTNS_MainTask+0x198>
				{
					leaveDefSettings_cnt = 0;
 7d4:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <leaveDefSettings_cnt>
					MIDICTRL_DiscardCommands();
 7d8:	da d7       	rcall	.+4020   	; 0x178e <MIDICTRL_DiscardCommands>
					SH100CTRL_SetAmpLeds();
 7da:	0b d7       	rcall	.+3606   	; 0x15f2 <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 7dc:	a1 d8       	rcall	.-3774   	; 0xfffff920 <__eeprom_end+0xff7ef920>
 7de:	08 95       	ret
				}
			}
			else
			{
				leaveDefSettings_cnt++;
 7e0:	8f 5f       	subi	r24, 0xFF	; 255
 7e2:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <leaveDefSettings_cnt>
				switch(MIDICTRL_MidiMode())
 7e6:	ba d8       	rcall	.-3724   	; 0xfffff95c <__eeprom_end+0xff7ef95c>
 7e8:	88 23       	and	r24, r24
 7ea:	19 f0       	breq	.+6      	; 0x7f2 <FBTNS_MainTask+0x182>
 7ec:	81 30       	cpi	r24, 0x01	; 1
 7ee:	19 f0       	breq	.+6      	; 0x7f6 <FBTNS_MainTask+0x186>
 7f0:	08 95       	ret
				{
					case RUNNING:
					{
						SH100CTRL_SwAB();
 7f2:	90 d8       	rcall	.-3808   	; 0xfffff914 <__eeprom_end+0xff7ef914>
						break;
 7f4:	08 95       	ret
					}
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 7f6:	85 e0       	ldi	r24, 0x05	; 5
 7f8:	ce d6       	rcall	.+3484   	; 0x1596 <MIDICTRL_SetProgrammingButton>
 7fa:	08 95       	ret
				}
			}
			return;
		}
		else leaveDefSettings_cnt=0;
 7fc:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <leaveDefSettings_cnt>
 800:	08 95       	ret
	}
	else
	{
		protectionInterval_cnt--;
 802:	81 50       	subi	r24, 0x01	; 1
 804:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <protectionInterval_cnt>
 808:	08 95       	ret

Disassembly of section .text.__portable_avr_delay_cycles:

0000186c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    186c:	04 c0       	rjmp	.+8      	; 0x1876 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    186e:	61 50       	subi	r22, 0x01	; 1
    1870:	71 09       	sbc	r23, r1
    1872:	81 09       	sbc	r24, r1
    1874:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1876:	61 15       	cp	r22, r1
    1878:	71 05       	cpc	r23, r1
    187a:	81 05       	cpc	r24, r1
    187c:	91 05       	cpc	r25, r1
    187e:	b9 f7       	brne	.-18     	; 0x186e <__portable_avr_delay_cycles+0x2>
    1880:	08 95       	ret

Disassembly of section .text.initTest:

0000094c <initTest>:
bool isAmpStarted = false;
int16_t negVdd;
int16_t posVdd;
void initTest()
{
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_FAST_BLINKING);
 94c:	62 e0       	ldi	r22, 0x02	; 2
 94e:	87 e0       	ldi	r24, 0x07	; 7
 950:	83 d5       	rcall	.+2822   	; 0x1458 <SH100HW_SetNewLedState>
	delay_ms(20000);
 952:	66 ed       	ldi	r22, 0xD6	; 214
 954:	7c ed       	ldi	r23, 0xDC	; 220
 956:	82 e3       	ldi	r24, 0x32	; 50
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	88 d7       	rcall	.+3856   	; 0x186c <__portable_avr_delay_cycles>
	
	SH100HW_StartADConvertion(ADC_V_SIGNAL);
 95c:	86 e0       	ldi	r24, 0x06	; 6
 95e:	9b d7       	rcall	.+3894   	; 0x1896 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 960:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 964:	86 fd       	sbrc	r24, 6
 966:	fc cf       	rjmp	.-8      	; 0x960 <initTest+0x14>
		
	int32_t outLineValue = ADC;
 968:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 96c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 970:	cb 01       	movw	r24, r22
 972:	a0 e0       	ldi	r26, 0x00	; 0
 974:	b0 e0       	ldi	r27, 0x00	; 0
	
	if(fabs(outLineValue - 0x3FF/2) > 100)
 976:	bc 01       	movw	r22, r24
 978:	cd 01       	movw	r24, r26
 97a:	6f 5f       	subi	r22, 0xFF	; 255
 97c:	71 40       	sbci	r23, 0x01	; 1
 97e:	81 09       	sbc	r24, r1
 980:	91 09       	sbc	r25, r1
 982:	a4 d1       	rcall	.+840    	; 0xccc <__floatsisf>
 984:	9f 77       	andi	r25, 0x7F	; 127
 986:	20 e0       	ldi	r18, 0x00	; 0
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	48 ec       	ldi	r20, 0xC8	; 200
 98c:	52 e4       	ldi	r21, 0x42	; 66
 98e:	e2 d7       	rcall	.+4036   	; 0x1954 <__gesf2>
 990:	18 16       	cp	r1, r24
 992:	4c f4       	brge	.+18     	; 0x9a6 <initTest+0x5a>
	{
		// DC on output!
		SH100HW_SetPAFailure(true);
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	a3 d7       	rcall	.+3910   	; 0x18de <SH100HW_SetPAFailure>
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	87 e0       	ldi	r24, 0x07	; 7
 99c:	5d d5       	rcall	.+2746   	; 0x1458 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 99e:	62 e0       	ldi	r22, 0x02	; 2
 9a0:	88 e0       	ldi	r24, 0x08	; 8
 9a2:	5a d5       	rcall	.+2740   	; 0x1458 <SH100HW_SetNewLedState>
 9a4:	ff cf       	rjmp	.-2      	; 0x9a4 <initTest+0x58>
		while(1) {}
	}
	
	SH100HW_StartADConvertion(ADC_V_NEGATIVE);
 9a6:	87 e0       	ldi	r24, 0x07	; 7
 9a8:	76 d7       	rcall	.+3820   	; 0x1896 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 9aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 9ae:	86 fd       	sbrc	r24, 6
 9b0:	fc cf       	rjmp	.-8      	; 0x9aa <initTest+0x5e>
		
	negVdd = ADC;
 9b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 9b6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 9ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 9be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	SH100HW_StartADConvertion(ADC_V_POSITIVE);
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	68 d7       	rcall	.+3792   	; 0x1896 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 9c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 9ca:	86 fd       	sbrc	r24, 6
 9cc:	fc cf       	rjmp	.-8      	; 0x9c6 <initTest+0x7a>
		
	posVdd = ADC;
 9ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 9d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 9d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <posVdd+0x1>
 9da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <posVdd>
	
	if(fabs(negVdd-posVdd) > 100)
 9de:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 9e2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 9e6:	68 1b       	sub	r22, r24
 9e8:	79 0b       	sbc	r23, r25
 9ea:	07 2e       	mov	r0, r23
 9ec:	00 0c       	add	r0, r0
 9ee:	88 0b       	sbc	r24, r24
 9f0:	99 0b       	sbc	r25, r25
 9f2:	6c d1       	rcall	.+728    	; 0xccc <__floatsisf>
 9f4:	9f 77       	andi	r25, 0x7F	; 127
 9f6:	20 e0       	ldi	r18, 0x00	; 0
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	48 ec       	ldi	r20, 0xC8	; 200
 9fc:	52 e4       	ldi	r21, 0x42	; 66
 9fe:	aa d7       	rcall	.+3924   	; 0x1954 <__gesf2>
 a00:	18 16       	cp	r1, r24
 a02:	4c f4       	brge	.+18     	; 0xa16 <initTest+0xca>
	{
		// one of Vdd rail is out
		SH100HW_SetPAFailure(true);
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	6b d7       	rcall	.+3798   	; 0x18de <SH100HW_SetPAFailure>
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	87 e0       	ldi	r24, 0x07	; 7
 a0c:	25 d5       	rcall	.+2634   	; 0x1458 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 a0e:	62 e0       	ldi	r22, 0x02	; 2
 a10:	88 e0       	ldi	r24, 0x08	; 8
 a12:	22 d5       	rcall	.+2628   	; 0x1458 <SH100HW_SetNewLedState>
 a14:	ff cf       	rjmp	.-2      	; 0xa14 <initTest+0xc8>
		while(1) {}
	}
		
	SH100HW_SetPAFailure(false);
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	62 d7       	rcall	.+3780   	; 0x18de <SH100HW_SetPAFailure>
	SH100CTRL_CheckOutputJacks();
 a1a:	0b d2       	rcall	.+1046   	; 0xe32 <SH100CTRL_CheckOutputJacks>
	isAmpStarted = true;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <isAmpStarted>
 a22:	08 95       	ret

Disassembly of section .text.ISRInit:

0000164e <ISRInit>:
}

void ISRInit()
{
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    164e:	85 b5       	in	r24, 0x25	; 37
    1650:	85 60       	ori	r24, 0x05	; 5
    1652:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    1654:	ee e6       	ldi	r30, 0x6E	; 110
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	81 60       	ori	r24, 0x01	; 1
    165c:	80 83       	st	Z, r24
	TCNT0 = 100;
    165e:	84 e6       	ldi	r24, 0x64	; 100
    1660:	86 bd       	out	0x26, r24	; 38
		
	// PCINT10, interrupt for PC2 pin(SW detect)
	PCICR |= 0x02;
    1662:	e8 e6       	ldi	r30, 0x68	; 104
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	82 60       	ori	r24, 0x02	; 2
    166a:	80 83       	st	Z, r24
	PCMSK1 |= 0x04;
    166c:	ec e6       	ldi	r30, 0x6C	; 108
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	84 60       	ori	r24, 0x04	; 4
    1674:	80 83       	st	Z, r24
    1676:	08 95       	ret

Disassembly of section .text.main:

000018aa <main>:
}

int main(void)
{
	UART_init();
    18aa:	d4 df       	rcall	.-88     	; 0x1854 <UART_init>
	SH100HW_Init();
    18ac:	a2 db       	rcall	.-2236   	; 0xff2 <SH100HW_Init>
	SH100CTRL_Init();
    18ae:	85 da       	rcall	.-2806   	; 0xdba <SH100CTRL_Init>
	MIDICTRL_Init();
    18b0:	22 df       	rcall	.-444    	; 0x16f6 <MIDICTRL_Init>
	
	ISRInit();	
    18b2:	cd de       	rcall	.-614    	; 0x164e <ISRInit>
	cpu_irq_enable();
    18b4:	78 94       	sei
	
	initTest();
    18b6:	4a d8       	rcall	.-3948   	; 0x94c <initTest>
		
    while(1)
    {
		MIDI_ParserTask();
    18b8:	a8 d7       	rcall	.+3920   	; 0x280a <__TEXT_REGION_LENGTH__+0x80a>
    18ba:	fe cf       	rjmp	.-4      	; 0x18b8 <main+0xe>

Disassembly of section .text.__vector_16:

00000bb8 <__vector_16>:
	}
}

//==========================Main AMP task=======================================
ISR(TIMER0_OVF_vect)
{
 bb8:	1f 92       	push	r1
 bba:	0f 92       	push	r0
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	0f 92       	push	r0
 bc0:	11 24       	eor	r1, r1
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	2f 93       	push	r18
 bc8:	3f 93       	push	r19
 bca:	4f 93       	push	r20
 bcc:	5f 93       	push	r21
 bce:	6f 93       	push	r22
 bd0:	7f 93       	push	r23
 bd2:	8f 93       	push	r24
 bd4:	9f 93       	push	r25
 bd6:	af 93       	push	r26
 bd8:	bf 93       	push	r27
 bda:	ef 93       	push	r30
 bdc:	ff 93       	push	r31
 bde:	cf 93       	push	r28
 be0:	df 93       	push	r29
 be2:	cd b7       	in	r28, 0x3d	; 61
 be4:	de b7       	in	r29, 0x3e	; 62
 be6:	2f 97       	sbiw	r28, 0x0f	; 15
 be8:	de bf       	out	0x3e, r29	; 62
 bea:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 bec:	6d db       	rcall	.-2342   	; 0x2c8 <SH100HW_MainTask>
	
	if(isAmpStarted)
 bee:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <isAmpStarted>
 bf2:	88 23       	and	r24, r24
 bf4:	19 f0       	breq	.+6      	; 0xbfc <__vector_16+0x44>
	{
		SH100CTRL_CheckOutputJacks();
 bf6:	1d d1       	rcall	.+570    	; 0xe32 <SH100CTRL_CheckOutputJacks>
		SH100HW_StartADConvertion(ADC_V_NEGATIVE);
 bf8:	87 e0       	ldi	r24, 0x07	; 7
 bfa:	4d d6       	rcall	.+3226   	; 0x1896 <SH100HW_StartADConvertion>
	}
	
	SH100HW_Controls_t pressedButtons = SH100HW_GetControlsState();
 bfc:	8e 01       	movw	r16, r28
 bfe:	0f 5f       	subi	r16, 0xFF	; 255
 c00:	1f 4f       	sbci	r17, 0xFF	; 255
 c02:	c8 01       	movw	r24, r16
 c04:	55 dc       	rcall	.-1878   	; 0x4b0 <SH100HW_GetControlsState>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 c06:	89 81       	ldd	r24, Y+1	; 0x01
 c08:	ac d6       	rcall	.+3416   	; 0x1962 <MIDICTRL_SetMidiChannel>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 c0a:	8a 81       	ldd	r24, Y+2	; 0x02
 c0c:	ad d6       	rcall	.+3418   	; 0x1968 <MIDICTRL_OmniModeEn>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 c0e:	8b 81       	ldd	r24, Y+3	; 0x03
 c10:	ae d6       	rcall	.+3420   	; 0x196e <MIDICTRL_MuteCommEn>
	
	FBTNS_MainTask(&pressedButtons);
 c12:	b8 01       	movw	r22, r16
 c14:	80 e8       	ldi	r24, 0x80	; 128
 c16:	2c dd       	rcall	.-1448   	; 0x670 <FBTNS_MainTask>
}
 c18:	2f 96       	adiw	r28, 0x0f	; 15
 c1a:	0f b6       	in	r0, 0x3f	; 63
 c1c:	f8 94       	cli
 c1e:	de bf       	out	0x3e, r29	; 62
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	cd bf       	out	0x3d, r28	; 61
 c24:	df 91       	pop	r29
 c26:	cf 91       	pop	r28
 c28:	ff 91       	pop	r31
 c2a:	ef 91       	pop	r30
 c2c:	bf 91       	pop	r27
 c2e:	af 91       	pop	r26
 c30:	9f 91       	pop	r25
 c32:	8f 91       	pop	r24
 c34:	7f 91       	pop	r23
 c36:	6f 91       	pop	r22
 c38:	5f 91       	pop	r21
 c3a:	4f 91       	pop	r20
 c3c:	3f 91       	pop	r19
 c3e:	2f 91       	pop	r18
 c40:	1f 91       	pop	r17
 c42:	0f 91       	pop	r16
 c44:	0f 90       	pop	r0
 c46:	0f be       	out	0x3f, r0	; 63
 c48:	0f 90       	pop	r0
 c4a:	1f 90       	pop	r1
 c4c:	18 95       	reti

Disassembly of section .text.__vector_21:

00000af6 <__vector_21>:

int16_t negVdd;
int16_t posVdd;
bool measSwitch = false;
ISR(ADC_vect)
{
 af6:	1f 92       	push	r1
 af8:	0f 92       	push	r0
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	0f 92       	push	r0
 afe:	11 24       	eor	r1, r1
 b00:	2f 93       	push	r18
 b02:	3f 93       	push	r19
 b04:	4f 93       	push	r20
 b06:	5f 93       	push	r21
 b08:	6f 93       	push	r22
 b0a:	7f 93       	push	r23
 b0c:	8f 93       	push	r24
 b0e:	9f 93       	push	r25
 b10:	af 93       	push	r26
 b12:	bf 93       	push	r27
 b14:	ef 93       	push	r30
 b16:	ff 93       	push	r31
	if(isAmpStarted)
 b18:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <isAmpStarted>
 b1c:	88 23       	and	r24, r24
 b1e:	d9 f1       	breq	.+118    	; 0xb96 <__vector_21+0xa0>
	{
		if(measSwitch)
 b20:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <measSwitch>
 b24:	88 23       	and	r24, r24
 b26:	59 f0       	breq	.+22     	; 0xb3e <__vector_21+0x48>
		{
			posVdd = ADC;
 b28:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 b2c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 b30:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <posVdd+0x1>
 b34:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <posVdd>
			measSwitch = false;
 b38:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <measSwitch>
 b3c:	0d c0       	rjmp	.+26     	; 0xb58 <__vector_21+0x62>
			//SH100HW_StartADConvertion(ADC_V_NEGATIVE);
		}
		else
		{
			negVdd = ADC;
 b3e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 b42:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 b46:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 b4a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			measSwitch = true;
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <measSwitch>
			SH100HW_StartADConvertion(ADC_V_POSITIVE);
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	9f d6       	rcall	.+3390   	; 0x1896 <SH100HW_StartADConvertion>
		}
		
		if(fabs(negVdd-posVdd) > 100)
 b58:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 b5c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 b60:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <posVdd>
 b64:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <posVdd+0x1>
 b68:	68 1b       	sub	r22, r24
 b6a:	79 0b       	sbc	r23, r25
 b6c:	07 2e       	mov	r0, r23
 b6e:	00 0c       	add	r0, r0
 b70:	88 0b       	sbc	r24, r24
 b72:	99 0b       	sbc	r25, r25
 b74:	ab d0       	rcall	.+342    	; 0xccc <__floatsisf>
 b76:	9f 77       	andi	r25, 0x7F	; 127
 b78:	20 e0       	ldi	r18, 0x00	; 0
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	48 ec       	ldi	r20, 0xC8	; 200
 b7e:	52 e4       	ldi	r21, 0x42	; 66
 b80:	e9 d6       	rcall	.+3538   	; 0x1954 <__gesf2>
 b82:	18 16       	cp	r1, r24
 b84:	44 f4       	brge	.+16     	; 0xb96 <__vector_21+0xa0>
		{
			// one of Vdd rail is out
			SH100HW_SetPAFailure(true);
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	aa d6       	rcall	.+3412   	; 0x18de <SH100HW_SetPAFailure>
			SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 b8a:	60 e0       	ldi	r22, 0x00	; 0
 b8c:	87 e0       	ldi	r24, 0x07	; 7
 b8e:	64 d4       	rcall	.+2248   	; 0x1458 <SH100HW_SetNewLedState>
			SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 b90:	62 e0       	ldi	r22, 0x02	; 2
 b92:	88 e0       	ldi	r24, 0x08	; 8
 b94:	61 d4       	rcall	.+2242   	; 0x1458 <SH100HW_SetNewLedState>
		}
	}
}
 b96:	ff 91       	pop	r31
 b98:	ef 91       	pop	r30
 b9a:	bf 91       	pop	r27
 b9c:	af 91       	pop	r26
 b9e:	9f 91       	pop	r25
 ba0:	8f 91       	pop	r24
 ba2:	7f 91       	pop	r23
 ba4:	6f 91       	pop	r22
 ba6:	5f 91       	pop	r21
 ba8:	4f 91       	pop	r20
 baa:	3f 91       	pop	r19
 bac:	2f 91       	pop	r18
 bae:	0f 90       	pop	r0
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	0f 90       	pop	r0
 bb4:	1f 90       	pop	r1
 bb6:	18 95       	reti

Disassembly of section .text.__vector_4:

00001296 <__vector_4>:

//=========================PWR Turn off INT=================================
ISR(PCINT1_vect)
{
    1296:	1f 92       	push	r1
    1298:	0f 92       	push	r0
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	0f 92       	push	r0
    129e:	11 24       	eor	r1, r1
    12a0:	2f 93       	push	r18
    12a2:	3f 93       	push	r19
    12a4:	4f 93       	push	r20
    12a6:	5f 93       	push	r21
    12a8:	6f 93       	push	r22
    12aa:	7f 93       	push	r23
    12ac:	8f 93       	push	r24
    12ae:	9f 93       	push	r25
    12b0:	af 93       	push	r26
    12b2:	bf 93       	push	r27
    12b4:	ef 93       	push	r30
    12b6:	ff 93       	push	r31
	// Power off
	// need to check pin level?
	SH100CTRL_StoreAmpState();
    12b8:	8c d2       	rcall	.+1304   	; 0x17d2 <SH100CTRL_StoreAmpState>
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	0f 90       	pop	r0
    12d8:	1f 90       	pop	r1
    12da:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

0000194c <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    194c:	88 1f       	adc	r24, r24
    194e:	88 27       	eor	r24, r24
    1950:	88 1f       	adc	r24, r24
    1952:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00001908 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	88 3f       	cpi	r24, 0xF8	; 248
    190c:	08 f4       	brcc	.+2      	; 0x1910 <MIDI_IsSysRealTime+0x8>
    190e:	90 e0       	ldi	r25, 0x00	; 0
}
    1910:	89 2f       	mov	r24, r25
    1912:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000eaa <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 eaa:	82 3f       	cpi	r24, 0xF2	; 242
 eac:	01 f1       	breq	.+64     	; 0xeee <MIDI_GetStatusType+0x44>
 eae:	68 f4       	brcc	.+26     	; 0xeca <MIDI_GetStatusType+0x20>
 eb0:	8e 30       	cpi	r24, 0x0E	; 14
 eb2:	28 f4       	brcc	.+10     	; 0xebe <MIDI_GetStatusType+0x14>
 eb4:	8c 30       	cpi	r24, 0x0C	; 12
 eb6:	78 f5       	brcc	.+94     	; 0xf16 <MIDI_GetStatusType+0x6c>
 eb8:	88 30       	cpi	r24, 0x08	; 8
 eba:	c8 f4       	brcc	.+50     	; 0xeee <MIDI_GetStatusType+0x44>
 ebc:	2a c0       	rjmp	.+84     	; 0xf12 <MIDI_GetStatusType+0x68>
 ebe:	80 3f       	cpi	r24, 0xF0	; 240
 ec0:	21 f1       	breq	.+72     	; 0xf0a <MIDI_GetStatusType+0x60>
 ec2:	48 f5       	brcc	.+82     	; 0xf16 <MIDI_GetStatusType+0x6c>
 ec4:	8e 30       	cpi	r24, 0x0E	; 14
 ec6:	99 f0       	breq	.+38     	; 0xeee <MIDI_GetStatusType+0x44>
 ec8:	24 c0       	rjmp	.+72     	; 0xf12 <MIDI_GetStatusType+0x68>
 eca:	8a 3f       	cpi	r24, 0xFA	; 250
 ecc:	a1 f0       	breq	.+40     	; 0xef6 <MIDI_GetStatusType+0x4c>
 ece:	38 f4       	brcc	.+14     	; 0xede <MIDI_GetStatusType+0x34>
 ed0:	87 3f       	cpi	r24, 0xF7	; 247
 ed2:	e9 f0       	breq	.+58     	; 0xf0e <MIDI_GetStatusType+0x64>
 ed4:	88 3f       	cpi	r24, 0xF8	; 248
 ed6:	69 f0       	breq	.+26     	; 0xef2 <MIDI_GetStatusType+0x48>
 ed8:	83 3f       	cpi	r24, 0xF3	; 243
 eda:	e9 f0       	breq	.+58     	; 0xf16 <MIDI_GetStatusType+0x6c>
 edc:	1a c0       	rjmp	.+52     	; 0xf12 <MIDI_GetStatusType+0x68>
 ede:	8c 3f       	cpi	r24, 0xFC	; 252
 ee0:	71 f0       	breq	.+28     	; 0xefe <MIDI_GetStatusType+0x54>
 ee2:	58 f0       	brcs	.+22     	; 0xefa <MIDI_GetStatusType+0x50>
 ee4:	8e 3f       	cpi	r24, 0xFE	; 254
 ee6:	69 f0       	breq	.+26     	; 0xf02 <MIDI_GetStatusType+0x58>
 ee8:	8f 3f       	cpi	r24, 0xFF	; 255
 eea:	69 f0       	breq	.+26     	; 0xf06 <MIDI_GetStatusType+0x5c>
 eec:	12 c0       	rjmp	.+36     	; 0xf12 <MIDI_GetStatusType+0x68>
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 eee:	82 e0       	ldi	r24, 0x02	; 2
 ef0:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 ef2:	83 e0       	ldi	r24, 0x03	; 3
 ef4:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 ef6:	83 e0       	ldi	r24, 0x03	; 3
 ef8:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 efa:	83 e0       	ldi	r24, 0x03	; 3
 efc:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 efe:	83 e0       	ldi	r24, 0x03	; 3
 f00:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 f02:	83 e0       	ldi	r24, 0x03	; 3
 f04:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 f06:	83 e0       	ldi	r24, 0x03	; 3
 f08:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 f0a:	84 e0       	ldi	r24, 0x04	; 4
 f0c:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 f0e:	85 e0       	ldi	r24, 0x05	; 5
 f10:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 f12:	80 e0       	ldi	r24, 0x00	; 0
 f14:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 f16:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 f18:	08 95       	ret

Disassembly of section .text.isEqualCommands:

00001322 <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(const MIDI_Command_t* commandRecieved, const MIDI_Command_t* commandSaved)
{
	if(commandRecieved->status != commandSaved->status) return false;
    1322:	fb 01       	movw	r30, r22
    1324:	54 91       	lpm	r21, Z
    1326:	87 fd       	sbrc	r24, 7
    1328:	50 81       	ld	r21, Z
    132a:	f9 01       	movw	r30, r18
    132c:	94 91       	lpm	r25, Z
    132e:	47 fd       	sbrc	r20, 7
    1330:	90 81       	ld	r25, Z
    1332:	59 13       	cpse	r21, r25
    1334:	13 c0       	rjmp	.+38     	; 0x135c <isEqualCommands+0x3a>
	if(commandRecieved->data1 != commandSaved->data1) return false;
    1336:	a8 2f       	mov	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	02 96       	adiw	r24, 0x02	; 2
    133c:	a1 1d       	adc	r26, r1
    133e:	fc 01       	movw	r30, r24
    1340:	94 91       	lpm	r25, Z
    1342:	a7 fd       	sbrc	r26, 7
    1344:	90 81       	ld	r25, Z
    1346:	2e 5f       	subi	r18, 0xFE	; 254
    1348:	3f 4f       	sbci	r19, 0xFF	; 255
    134a:	4f 4f       	sbci	r20, 0xFF	; 255
    134c:	f9 01       	movw	r30, r18
    134e:	84 91       	lpm	r24, Z
    1350:	47 fd       	sbrc	r20, 7
    1352:	80 81       	ld	r24, Z
    1354:	98 17       	cp	r25, r24
    1356:	21 f0       	breq	.+8      	; 0x1360 <isEqualCommands+0x3e>
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(const MIDI_Command_t* commandRecieved, const MIDI_Command_t* commandSaved)
{
	if(commandRecieved->status != commandSaved->status) return false;
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	08 95       	ret
	if(commandRecieved->data1 != commandSaved->data1) return false;
			
	return true;
    1360:	81 e0       	ldi	r24, 0x01	; 1
}
    1362:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

00000c4e <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 c4e:	cf 93       	push	r28
 c50:	df 93       	push	r29
 c52:	cd b7       	in	r28, 0x3d	; 61
 c54:	de b7       	in	r29, 0x3e	; 62
 c56:	68 97       	sbiw	r28, 0x18	; 24
 c58:	0f b6       	in	r0, 0x3f	; 63
 c5a:	f8 94       	cli
 c5c:	de bf       	out	0x3e, r29	; 62
 c5e:	0f be       	out	0x3f, r0	; 63
 c60:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word((uint16_t*)0x02);
 c62:	62 e0       	ldi	r22, 0x02	; 2
 c64:	70 e0       	ldi	r23, 0x00	; 0
 c66:	80 e8       	ldi	r24, 0x80	; 128
 c68:	61 d6       	rcall	.+3266   	; 0x192c <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 c6a:	8b 3a       	cpi	r24, 0xAB	; 171
 c6c:	9c 4a       	sbci	r25, 0xAC	; 172
 c6e:	c1 f4       	brne	.+48     	; 0xca0 <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 c70:	4f e0       	ldi	r20, 0x0F	; 15
 c72:	50 e0       	ldi	r21, 0x00	; 0
 c74:	60 e8       	ldi	r22, 0x80	; 128
 c76:	28 e1       	ldi	r18, 0x18	; 24
 c78:	30 e0       	ldi	r19, 0x00	; 0
 c7a:	ce 01       	movw	r24, r28
 c7c:	01 96       	adiw	r24, 0x01	; 1
 c7e:	75 d5       	rcall	.+2794   	; 0x176a <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 c80:	88 e1       	ldi	r24, 0x18	; 24
 c82:	fe 01       	movw	r30, r28
 c84:	31 96       	adiw	r30, 0x01	; 1
 c86:	ac e0       	ldi	r26, 0x0C	; 12
 c88:	b1 e0       	ldi	r27, 0x01	; 1
 c8a:	01 90       	ld	r0, Z+
 c8c:	0d 92       	st	X+, r0
 c8e:	8a 95       	dec	r24
 c90:	e1 f7       	brne	.-8      	; 0xc8a <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 c92:	6e e0       	ldi	r22, 0x0E	; 14
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	80 e8       	ldi	r24, 0x80	; 128
 c98:	11 d6       	rcall	.+3106   	; 0x18bc <eeprom_read_byte>
 c9a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <commandSet>
 c9e:	0b c0       	rjmp	.+22     	; 0xcb6 <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 ca0:	88 e1       	ldi	r24, 0x18	; 24
 ca2:	ef e7       	ldi	r30, 0x7F	; 127
 ca4:	f1 e0       	ldi	r31, 0x01	; 1
 ca6:	ac e0       	ldi	r26, 0x0C	; 12
 ca8:	b1 e0       	ldi	r27, 0x01	; 1
 caa:	01 90       	ld	r0, Z+
 cac:	0d 92       	st	X+, r0
 cae:	8a 95       	dec	r24
 cb0:	e1 f7       	brne	.-8      	; 0xcaa <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 cb2:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <commandSet>
	}
}
 cb6:	68 96       	adiw	r28, 0x18	; 24
 cb8:	0f b6       	in	r0, 0x3f	; 63
 cba:	f8 94       	cli
 cbc:	de bf       	out	0x3e, r29	; 62
 cbe:	0f be       	out	0x3f, r0	; 63
 cc0:	cd bf       	out	0x3d, r28	; 61
 cc2:	df 91       	pop	r29
 cc4:	cf 91       	pop	r28
 cc6:	08 95       	ret

Disassembly of section .text.setMidiLeds:

00001114 <setMidiLeds>:

void setMidiLeds()
{
    1114:	cf 93       	push	r28
	if(mode == PROGRAMMING)
    1116:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    111a:	81 30       	cpi	r24, 0x01	; 1
    111c:	11 f5       	brne	.+68     	; 0x1162 <setMidiLeds+0x4e>
    111e:	18 c0       	rjmp	.+48     	; 0x1150 <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
    1120:	ec 2f       	mov	r30, r28
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	eb 5f       	subi	r30, 0xFB	; 251
    1126:	fe 4f       	sbci	r31, 0xFE	; 254
    1128:	80 81       	ld	r24, Z
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	41 f0       	breq	.+16     	; 0x113e <setMidiLeds+0x2a>
    112e:	18 f0       	brcs	.+6      	; 0x1136 <setMidiLeds+0x22>
    1130:	82 30       	cpi	r24, 0x02	; 2
    1132:	49 f0       	breq	.+18     	; 0x1146 <setMidiLeds+0x32>
    1134:	0b c0       	rjmp	.+22     	; 0x114c <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	8c 2f       	mov	r24, r28
    113a:	8e d1       	rcall	.+796    	; 0x1458 <SH100HW_SetNewLedState>
    113c:	07 c0       	rjmp	.+14     	; 0x114c <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
    113e:	62 e0       	ldi	r22, 0x02	; 2
    1140:	8c 2f       	mov	r24, r28
    1142:	8a d1       	rcall	.+788    	; 0x1458 <SH100HW_SetNewLedState>
    1144:	03 c0       	rjmp	.+6      	; 0x114c <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	8c 2f       	mov	r24, r28
    114a:	86 d1       	rcall	.+780    	; 0x1458 <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
    114c:	cf 5f       	subi	r28, 0xFF	; 255
    114e:	01 c0       	rjmp	.+2      	; 0x1152 <setMidiLeds+0x3e>
    1150:	c0 e0       	ldi	r28, 0x00	; 0
    1152:	c6 30       	cpi	r28, 0x06	; 6
    1154:	28 f3       	brcs	.-54     	; 0x1120 <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
    1156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <currentErrBtnId>
    115a:	8f 3f       	cpi	r24, 0xFF	; 255
    115c:	11 f0       	breq	.+4      	; 0x1162 <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	7b d1       	rcall	.+758    	; 0x1458 <SH100HW_SetNewLedState>
		}
	}
}
    1162:	cf 91       	pop	r28
    1164:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

000016f6 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x00; // psc = 1024 if on
    16f6:	e1 e8       	ldi	r30, 0x81	; 129
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
    16fe:	ef e6       	ldi	r30, 0x6F	; 111
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	81 60       	ori	r24, 0x01	; 1
    1706:	80 83       	st	Z, r24
	TCNT1 = 0;
    1708:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    170c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    1710:	8f ef       	ldi	r24, 0xFF	; 255
    1712:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	
	loadCommSetFromMemory();
    1716:	9b da       	rcall	.-2762   	; 0xc4e <loadCommSetFromMemory>
	mode = RUNNING;
    1718:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    171c:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

0000195c <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    195c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1960:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

00001596 <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
    1596:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <currentProgBtn>
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	f9 01       	movw	r30, r18
    159e:	eb 5f       	subi	r30, 0xFB	; 251
    15a0:	fe 4f       	sbci	r31, 0xFE	; 254
    15a2:	90 81       	ld	r25, Z
    15a4:	91 30       	cpi	r25, 0x01	; 1
    15a6:	21 f4       	brne	.+8      	; 0x15b0 <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
    15a8:	f9 01       	movw	r30, r18
    15aa:	eb 5f       	subi	r30, 0xFB	; 251
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
    15b0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
    15b4:	e8 2f       	mov	r30, r24
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	eb 5f       	subi	r30, 0xFB	; 251
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 83       	st	Z, r24
	setMidiLeds();
    15c0:	a9 dd       	rcall	.-1198   	; 0x1114 <setMidiLeds>
    15c2:	08 95       	ret

Disassembly of section .text.MIDICTRL_EnterProgrammingMode:

00001420 <MIDICTRL_EnterProgrammingMode>:
	mode = RUNNING;
}

void MIDICTRL_EnterProgrammingMode()
{	
	MIDI_SetRetranslateState(false);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	a8 d2       	rcall	.+1360   	; 0x1974 <MIDI_SetRetranslateState>
	
	for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++)
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <MIDICTRL_EnterProgrammingMode+0x14>
	midiProgBtnState[i] = PROG_CLEAR;
    1428:	e8 2f       	mov	r30, r24
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	eb 5f       	subi	r30, 0xFB	; 251
    142e:	fe 4f       	sbci	r31, 0xFE	; 254
    1430:	10 82       	st	Z, r1

void MIDICTRL_EnterProgrammingMode()
{	
	MIDI_SetRetranslateState(false);
	
	for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++)
    1432:	8f 5f       	subi	r24, 0xFF	; 255
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	c0 f3       	brcs	.-16     	; 0x1428 <MIDICTRL_EnterProgrammingMode+0x8>
	midiProgBtnState[i] = PROG_CLEAR;
	
	MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
    1438:	80 e0       	ldi	r24, 0x00	; 0
    143a:	ad d0       	rcall	.+346    	; 0x1596 <MIDICTRL_SetProgrammingButton>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
    143c:	63 e0       	ldi	r22, 0x03	; 3
    143e:	87 e0       	ldi	r24, 0x07	; 7
    1440:	0b d0       	rcall	.+22     	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
    1442:	63 e0       	ldi	r22, 0x03	; 3
    1444:	88 e0       	ldi	r24, 0x08	; 8
    1446:	08 d0       	rcall	.+16     	; 0x1458 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(LED_B, LED_OFF);
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	86 e0       	ldi	r24, 0x06	; 6
    144c:	05 d0       	rcall	.+10     	; 0x1458 <SH100HW_SetNewLedState>
	
	setMidiLeds();
    144e:	62 de       	rcall	.-828    	; 0x1114 <setMidiLeds>
	
	mode = PROGRAMMING;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <mode>
    1456:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

00001962 <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    1962:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <channelNum>
    1966:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

00001968 <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    1968:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <omniModeEnabled>
    196c:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

0000196e <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    196e:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <muteCommandEnabled>
    1972:	08 95       	ret

Disassembly of section .text.programmBtn:

00001202 <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	f9 01       	movw	r30, r18
    120e:	eb 5f       	subi	r30, 0xFB	; 251
    1210:	fe 4f       	sbci	r31, 0xFE	; 254
    1212:	90 81       	ld	r25, Z
    1214:	91 30       	cpi	r25, 0x01	; 1
    1216:	b9 f4       	brne	.+46     	; 0x1246 <programmBtn+0x44>
    1218:	6a 01       	movw	r12, r20
    121a:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
    121c:	fa 01       	movw	r30, r20
    121e:	84 91       	lpm	r24, Z
    1220:	e7 fc       	sbrc	r14, 7
    1222:	80 81       	ld	r24, Z
    1224:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
    1226:	82 e0       	ldi	r24, 0x02	; 2
    1228:	c8 0e       	add	r12, r24
    122a:	d1 1c       	adc	r13, r1
    122c:	e1 1c       	adc	r14, r1
    122e:	f6 01       	movw	r30, r12
    1230:	84 91       	lpm	r24, Z
    1232:	e7 fc       	sbrc	r14, 7
    1234:	80 81       	ld	r24, Z
    1236:	12 96       	adiw	r26, 0x02	; 2
    1238:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
    123a:	f9 01       	movw	r30, r18
    123c:	eb 5f       	subi	r30, 0xFB	; 251
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	82 e0       	ldi	r24, 0x02	; 2
    1242:	80 83       	st	Z, r24
		setMidiLeds();
    1244:	67 df       	rcall	.-306    	; 0x1114 <setMidiLeds>
	}
}
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwChComm:

00000f88 <MIDICTRL_SendSwChComm>:

void MIDICTRL_SendSwChComm(uint8_t chNum)
{
	if(mode == RUNNING)
 f88:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <mode>
 f8c:	91 11       	cpse	r25, r1
 f8e:	30 c0       	rjmp	.+96     	; 0xff0 <MIDICTRL_SendSwChComm+0x68>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
 f90:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <commandSet>
 f94:	91 30       	cpi	r25, 0x01	; 1
 f96:	19 f4       	brne	.+6      	; 0xf9e <MIDICTRL_SendSwChComm+0x16>
 f98:	ec e0       	ldi	r30, 0x0C	; 12
 f9a:	f1 e0       	ldi	r31, 0x01	; 1
 f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <MIDICTRL_SendSwChComm+0x1a>
		else currentCommandBlock = &defaultCommands;
 f9e:	ef e7       	ldi	r30, 0x7F	; 127
 fa0:	f1 e0       	ldi	r31, 0x01	; 1
		
		switch(chNum)
 fa2:	81 30       	cpi	r24, 0x01	; 1
 fa4:	71 f0       	breq	.+28     	; 0xfc2 <MIDICTRL_SendSwChComm+0x3a>
 fa6:	28 f0       	brcs	.+10     	; 0xfb2 <MIDICTRL_SendSwChComm+0x2a>
 fa8:	82 30       	cpi	r24, 0x02	; 2
 faa:	99 f0       	breq	.+38     	; 0xfd2 <MIDICTRL_SendSwChComm+0x4a>
 fac:	83 30       	cpi	r24, 0x03	; 3
 fae:	c9 f0       	breq	.+50     	; 0xfe2 <MIDICTRL_SendSwChComm+0x5a>
 fb0:	08 95       	ret
		{
			case SH100_CHANNEL1: MIDI_SendCommand(currentCommandBlock->channel1, channelNum); break;
 fb2:	60 81       	ld	r22, Z
 fb4:	71 81       	ldd	r23, Z+1	; 0x01
 fb6:	82 81       	ldd	r24, Z+2	; 0x02
 fb8:	93 81       	ldd	r25, Z+3	; 0x03
 fba:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <channelNum>
 fbe:	c1 de       	rcall	.-638    	; 0xd42 <MIDI_SendCommand>
 fc0:	08 95       	ret
			case SH100_CHANNEL2: MIDI_SendCommand(currentCommandBlock->channel2, channelNum); break;
 fc2:	64 81       	ldd	r22, Z+4	; 0x04
 fc4:	75 81       	ldd	r23, Z+5	; 0x05
 fc6:	86 81       	ldd	r24, Z+6	; 0x06
 fc8:	97 81       	ldd	r25, Z+7	; 0x07
 fca:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <channelNum>
 fce:	b9 de       	rcall	.-654    	; 0xd42 <MIDI_SendCommand>
 fd0:	08 95       	ret
			case SH100_CHANNEL3: MIDI_SendCommand(currentCommandBlock->channel3, channelNum); break;
 fd2:	60 85       	ldd	r22, Z+8	; 0x08
 fd4:	71 85       	ldd	r23, Z+9	; 0x09
 fd6:	82 85       	ldd	r24, Z+10	; 0x0a
 fd8:	93 85       	ldd	r25, Z+11	; 0x0b
 fda:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <channelNum>
 fde:	b1 de       	rcall	.-670    	; 0xd42 <MIDI_SendCommand>
 fe0:	08 95       	ret
			case SH100_CHANNEL4: MIDI_SendCommand(currentCommandBlock->channel4, channelNum); break;
 fe2:	64 85       	ldd	r22, Z+12	; 0x0c
 fe4:	75 85       	ldd	r23, Z+13	; 0x0d
 fe6:	86 85       	ldd	r24, Z+14	; 0x0e
 fe8:	97 85       	ldd	r25, Z+15	; 0x0f
 fea:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <channelNum>
 fee:	a9 de       	rcall	.-686    	; 0xd42 <MIDI_SendCommand>
 ff0:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendLoopEnComm:

00001678 <MIDICTRL_SendLoopEnComm>:
	}
}

void MIDICTRL_SendLoopEnComm()
{
	if(mode == RUNNING)
    1678:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    167c:	81 11       	cpse	r24, r1
    167e:	10 c0       	rjmp	.+32     	; 0x16a0 <MIDICTRL_SendLoopEnComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    1680:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	19 f4       	brne	.+6      	; 0x168e <MIDICTRL_SendLoopEnComm+0x16>
    1688:	ec e0       	ldi	r30, 0x0C	; 12
    168a:	f1 e0       	ldi	r31, 0x01	; 1
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <MIDICTRL_SendLoopEnComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    168e:	ef e7       	ldi	r30, 0x7F	; 127
    1690:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->loopOn, channelNum);
    1692:	60 89       	ldd	r22, Z+16	; 0x10
    1694:	71 89       	ldd	r23, Z+17	; 0x11
    1696:	82 89       	ldd	r24, Z+18	; 0x12
    1698:	93 89       	ldd	r25, Z+19	; 0x13
    169a:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <channelNum>
    169e:	51 db       	rcall	.-2398   	; 0xd42 <MIDI_SendCommand>
    16a0:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwABComm:

000016a2 <MIDICTRL_SendSwABComm>:
	}
}

void MIDICTRL_SendSwABComm()
{
	if(mode == RUNNING)
    16a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    16a6:	81 11       	cpse	r24, r1
    16a8:	10 c0       	rjmp	.+32     	; 0x16ca <MIDICTRL_SendSwABComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    16aa:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	19 f4       	brne	.+6      	; 0x16b8 <MIDICTRL_SendSwABComm+0x16>
    16b2:	ec e0       	ldi	r30, 0x0C	; 12
    16b4:	f1 e0       	ldi	r31, 0x01	; 1
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <MIDICTRL_SendSwABComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    16b8:	ef e7       	ldi	r30, 0x7F	; 127
    16ba:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
    16bc:	64 89       	ldd	r22, Z+20	; 0x14
    16be:	75 89       	ldd	r23, Z+21	; 0x15
    16c0:	86 89       	ldd	r24, Z+22	; 0x16
    16c2:	97 89       	ldd	r25, Z+23	; 0x17
    16c4:	40 91 a6 01 	lds	r20, 0x01A6	; 0x8001a6 <channelNum>
    16c8:	3c db       	rcall	.-2440   	; 0xd42 <MIDI_SendCommand>
    16ca:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

000013a6 <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
    13a6:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	d1 f4       	brne	.+52     	; 0x13e2 <MIDICTRL_StoreUserCommands+0x3c>
	{
		commandSet = USER;
    13ae:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <commandSet>
		
		eeprom_write_word((uint16_t*)0x02, MEMORY_MAGIC_WORD);
    13b2:	6b ea       	ldi	r22, 0xAB	; 171
    13b4:	7c ea       	ldi	r23, 0xAC	; 172
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	e8 d2       	rcall	.+1488   	; 0x198c <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
    13bc:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <commandSet>
    13c0:	8e e0       	ldi	r24, 0x0E	; 14
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	14 d2       	rcall	.+1064   	; 0x17ee <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
    13c6:	6c e0       	ldi	r22, 0x0C	; 12
    13c8:	71 e0       	ldi	r23, 0x01	; 1
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	28 e1       	ldi	r18, 0x18	; 24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	4f e0       	ldi	r20, 0x0F	; 15
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	c7 d0       	rcall	.+398    	; 0x1564 <eeprom_write_block>
		
		SH100HW_SetPreviousLedState(LED_B);
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	a2 d1       	rcall	.+836    	; 0x171e <SH100HW_SetPreviousLedState>
		MIDI_SetRetranslateState(true);
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	cb d2       	rcall	.+1430   	; 0x1974 <MIDI_SetRetranslateState>
		
		mode = RUNNING;
    13de:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    13e2:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

0000178e <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    178e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	61 f4       	brne	.+24     	; 0x17ae <MIDICTRL_DiscardCommands+0x20>
	{
		commandSet = DEFAULT;
    1796:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <commandSet>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);		
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	8e e0       	ldi	r24, 0x0E	; 14
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	26 d0       	rcall	.+76     	; 0x17ee <eeprom_write_byte>
		
		SH100HW_SetPreviousLedState(LED_B);
    17a2:	86 e0       	ldi	r24, 0x06	; 6
    17a4:	bc df       	rcall	.-136    	; 0x171e <SH100HW_SetPreviousLedState>
		MIDI_SetRetranslateState(true);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	e5 d0       	rcall	.+458    	; 0x1974 <MIDI_SetRetranslateState>
		
		mode = RUNNING;
    17aa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    17ae:	08 95       	ret

Disassembly of section .text.indicateMidiError:

000015c4 <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 255 - 75;
    15c4:	84 eb       	ldi	r24, 0xB4	; 180
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    15cc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TCCR1B |= 0x05; // psc = 1024, timer on
    15d0:	e1 e8       	ldi	r30, 0x81	; 129
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	85 60       	ori	r24, 0x05	; 5
    15d8:	80 83       	st	Z, r24
	currentErrBtnId = currentProgBtn;
    15da:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
    15de:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	setMidiLeds();
    15e2:	98 dd       	rcall	.-1232   	; 0x1114 <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	87 e0       	ldi	r24, 0x07	; 7
    15e8:	37 df       	rcall	.-402    	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	34 df       	rcall	.-408    	; 0x1458 <SH100HW_SetNewLedState>
    15f0:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

000000dc <MIDICTRL_HandleCommand>:
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
	}
}

void MIDICTRL_HandleCommand(const MIDI_Command_t* command)
{
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	6b 01       	movw	r12, r22
  e8:	e8 2e       	mov	r14, r24
	switch(mode)
  ea:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
  ee:	88 23       	and	r24, r24
  f0:	21 f0       	breq	.+8      	; 0xfa <MIDICTRL_HandleCommand+0x1e>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	09 f4       	brne	.+2      	; 0xf8 <MIDICTRL_HandleCommand+0x1c>
  f6:	8f c0       	rjmp	.+286    	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
  f8:	e1 c0       	rjmp	.+450    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
  fa:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <omniModeEnabled>
  fe:	81 11       	cpse	r24, r1
 100:	0c c0       	rjmp	.+24     	; 0x11a <MIDICTRL_HandleCommand+0x3e>
			{
				if(channelNum != command->channel_type) return;
 102:	ae 2d       	mov	r26, r14
 104:	c6 01       	movw	r24, r12
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	a1 1d       	adc	r26, r1
 10a:	fc 01       	movw	r30, r24
 10c:	94 91       	lpm	r25, Z
 10e:	a7 fd       	sbrc	r26, 7
 110:	90 81       	ld	r25, Z
 112:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <channelNum>
 116:	98 13       	cpse	r25, r24
 118:	d1 c0       	rjmp	.+418    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			
			if(muteCommandEnabled)
 11a:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <muteCommandEnabled>
 11e:	88 23       	and	r24, r24
 120:	a9 f0       	breq	.+42     	; 0x14c <MIDICTRL_HandleCommand+0x70>
			{
				if(isEqualCommands(command, &muteCommand)) 
 122:	28 ed       	ldi	r18, 0xD8	; 216
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	8e 2d       	mov	r24, r14
 12a:	b6 01       	movw	r22, r12
 12c:	fa d8       	rcall	.-3596   	; 0xfffff322 <__eeprom_end+0xff7ef322>
 12e:	88 23       	and	r24, r24
 130:	69 f0       	breq	.+26     	; 0x14c <MIDICTRL_HandleCommand+0x70>
				{
					if((command->data2>63) ? 1 : 0) SH100CTRL_MuteAmp();
 132:	ae 2d       	mov	r26, r14
 134:	c6 01       	movw	r24, r12
 136:	03 96       	adiw	r24, 0x03	; 3
 138:	a1 1d       	adc	r26, r1
 13a:	fc 01       	movw	r30, r24
 13c:	84 91       	lpm	r24, Z
 13e:	a7 fd       	sbrc	r26, 7
 140:	80 81       	ld	r24, Z
 142:	80 34       	cpi	r24, 0x40	; 64
 144:	10 f0       	brcs	.+4      	; 0x14a <MIDICTRL_HandleCommand+0x6e>
 146:	19 dc       	rcall	.-1998   	; 0xfffff97a <__eeprom_end+0xff7ef97a>
 148:	01 c0       	rjmp	.+2      	; 0x14c <MIDICTRL_HandleCommand+0x70>
					else SH100CTRL_UnmuteAmp();
 14a:	ea db       	rcall	.-2092   	; 0xfffff920 <__eeprom_end+0xff7ef920>
				}
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 14c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	19 f4       	brne	.+6      	; 0x15a <MIDICTRL_HandleCommand+0x7e>
 154:	cc e0       	ldi	r28, 0x0C	; 12
 156:	d1 e0       	ldi	r29, 0x01	; 1
 158:	02 c0       	rjmp	.+4      	; 0x15e <MIDICTRL_HandleCommand+0x82>
			else currentCommandBlock = &defaultCommands;
 15a:	cf e7       	ldi	r28, 0x7F	; 127
 15c:	d1 e0       	ldi	r29, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, &(currentCommandBlock->channel1))) 
 15e:	9e 01       	movw	r18, r28
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	8e 2d       	mov	r24, r14
 164:	b6 01       	movw	r22, r12
 166:	dd d8       	rcall	.-3654   	; 0xfffff322 <__eeprom_end+0xff7ef322>
 168:	88 23       	and	r24, r24
 16a:	19 f0       	breq	.+6      	; 0x172 <MIDICTRL_HandleCommand+0x96>
			{
				SH100CTRL_SwChannel(0); 
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	58 da       	rcall	.-2896   	; 0xfffff620 <__eeprom_end+0xff7ef620>
				return;
 170:	a5 c0       	rjmp	.+330    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->channel2))) 
 172:	9e 01       	movw	r18, r28
 174:	2c 5f       	subi	r18, 0xFC	; 252
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	40 e8       	ldi	r20, 0x80	; 128
 17a:	8e 2d       	mov	r24, r14
 17c:	b6 01       	movw	r22, r12
 17e:	d1 d8       	rcall	.-3678   	; 0xfffff322 <__eeprom_end+0xff7ef322>
 180:	88 23       	and	r24, r24
 182:	19 f0       	breq	.+6      	; 0x18a <MIDICTRL_HandleCommand+0xae>
			{
				SH100CTRL_SwChannel(1); 
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	4c da       	rcall	.-2920   	; 0xfffff620 <__eeprom_end+0xff7ef620>
				return;
 188:	99 c0       	rjmp	.+306    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->channel3))) 
 18a:	9e 01       	movw	r18, r28
 18c:	28 5f       	subi	r18, 0xF8	; 248
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	8e 2d       	mov	r24, r14
 194:	b6 01       	movw	r22, r12
 196:	c5 d8       	rcall	.-3702   	; 0xfffff322 <__eeprom_end+0xff7ef322>
 198:	88 23       	and	r24, r24
 19a:	19 f0       	breq	.+6      	; 0x1a2 <MIDICTRL_HandleCommand+0xc6>
			{
				SH100CTRL_SwChannel(2); 
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	40 da       	rcall	.-2944   	; 0xfffff620 <__eeprom_end+0xff7ef620>
				return;
 1a0:	8d c0       	rjmp	.+282    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->channel4))) 
 1a2:	9e 01       	movw	r18, r28
 1a4:	24 5f       	subi	r18, 0xF4	; 244
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	40 e8       	ldi	r20, 0x80	; 128
 1aa:	8e 2d       	mov	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	b9 d8       	rcall	.-3726   	; 0xfffff322 <__eeprom_end+0xff7ef322>
 1b0:	88 23       	and	r24, r24
 1b2:	19 f0       	breq	.+6      	; 0x1ba <MIDICTRL_HandleCommand+0xde>
			{
				SH100CTRL_SwChannel(3); 
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	34 da       	rcall	.-2968   	; 0xfffff620 <__eeprom_end+0xff7ef620>
				return;
 1b8:	81 c0       	rjmp	.+258    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}		
			if(isEqualCommands(command, &(currentCommandBlock->loopOn))) 
 1ba:	9e 01       	movw	r18, r28
 1bc:	20 5f       	subi	r18, 0xF0	; 240
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	8e 2d       	mov	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	ad d8       	rcall	.-3750   	; 0xfffff322 <__eeprom_end+0xff7ef322>
 1c8:	88 23       	and	r24, r24
 1ca:	71 f0       	breq	.+28     	; 0x1e8 <MIDICTRL_HandleCommand+0x10c>
			{
				SH100CTRL_SetLoop((command->data2>63) ? 1 : 0); 
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	c8 0e       	add	r12, r24
 1d0:	d1 1c       	adc	r13, r1
 1d2:	e1 1c       	adc	r14, r1
 1d4:	f6 01       	movw	r30, r12
 1d6:	94 91       	lpm	r25, Z
 1d8:	e7 fc       	sbrc	r14, 7
 1da:	90 81       	ld	r25, Z
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 34       	cpi	r25, 0x40	; 64
 1e0:	08 f4       	brcc	.+2      	; 0x1e4 <MIDICTRL_HandleCommand+0x108>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	73 da       	rcall	.-2842   	; 0xfffff6cc <__eeprom_end+0xff7ef6cc>
				return;
 1e6:	6a c0       	rjmp	.+212    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->outAB))) 
 1e8:	64 96       	adiw	r28, 0x14	; 20
 1ea:	9e 01       	movw	r18, r28
 1ec:	40 e8       	ldi	r20, 0x80	; 128
 1ee:	8e 2d       	mov	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	97 d8       	rcall	.-3794   	; 0xfffff322 <__eeprom_end+0xff7ef322>
 1f4:	88 23       	and	r24, r24
 1f6:	09 f4       	brne	.+2      	; 0x1fa <MIDICTRL_HandleCommand+0x11e>
 1f8:	61 c0       	rjmp	.+194    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			{
				SH100CTRL_SetAB((command->data2>63) ? 1 : 0); 
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	c8 0e       	add	r12, r24
 1fe:	d1 1c       	adc	r13, r1
 200:	e1 1c       	adc	r14, r1
 202:	f6 01       	movw	r30, r12
 204:	94 91       	lpm	r25, Z
 206:	e7 fc       	sbrc	r14, 7
 208:	90 81       	ld	r25, Z
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 34       	cpi	r25, 0x40	; 64
 20e:	08 f4       	brcc	.+2      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	99 da       	rcall	.-2766   	; 0xfffff746 <__eeprom_end+0xff7ef746>
				return;
 214:	53 c0       	rjmp	.+166    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command->status == MIDI_COMM_PROGRAM_CHANGE)
 216:	f6 01       	movw	r30, r12
 218:	84 91       	lpm	r24, Z
 21a:	e7 fc       	sbrc	r14, 7
 21c:	80 81       	ld	r24, Z
 21e:	8c 30       	cpi	r24, 0x0C	; 12
 220:	41 f5       	brne	.+80     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			{
				switch(currentProgBtn)
 222:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	69 f0       	breq	.+26     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 22a:	28 f0       	brcs	.+10     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	89 f0       	breq	.+34     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	b1 f0       	breq	.+44     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 234:	1c c0       	rjmp	.+56     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), command, MIDI_PROG_BTN_CH1); break;
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	6e 2d       	mov	r22, r14
 23a:	a6 01       	movw	r20, r12
 23c:	8c e0       	ldi	r24, 0x0C	; 12
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	e0 d7       	rcall	.+4032   	; 0x1202 <programmBtn>
 242:	3c c0       	rjmp	.+120    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), command, MIDI_PROG_BTN_CH2); break;
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	6e 2d       	mov	r22, r14
 248:	a6 01       	movw	r20, r12
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	d9 d7       	rcall	.+4018   	; 0x1202 <programmBtn>
 250:	35 c0       	rjmp	.+106    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), command, MIDI_PROG_BTN_CH3); break;
 252:	22 e0       	ldi	r18, 0x02	; 2
 254:	6e 2d       	mov	r22, r14
 256:	a6 01       	movw	r20, r12
 258:	84 e1       	ldi	r24, 0x14	; 20
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	d2 d7       	rcall	.+4004   	; 0x1202 <programmBtn>
 25e:	2e c0       	rjmp	.+92     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), command, MIDI_PROG_BTN_CH4); break;
 260:	23 e0       	ldi	r18, 0x03	; 3
 262:	6e 2d       	mov	r22, r14
 264:	a6 01       	movw	r20, r12
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	cb d7       	rcall	.+3990   	; 0x1202 <programmBtn>
 26c:	27 c0       	rjmp	.+78     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					default: indicateMidiError(); break; 
 26e:	aa d9       	rcall	.-3244   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
 270:	25 c0       	rjmp	.+74     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
				}
			}
			else if(command->status == MIDI_COMM_CONTROL_CHANGE)
 272:	8b 30       	cpi	r24, 0x0B	; 11
 274:	11 f5       	brne	.+68     	; 0x2ba <__EEPROM_REGION_LENGTH__+0xba>
			{
				if(command->data1 == muteCommand.data1)
 276:	ae 2d       	mov	r26, r14
 278:	c6 01       	movw	r24, r12
 27a:	02 96       	adiw	r24, 0x02	; 2
 27c:	a1 1d       	adc	r26, r1
 27e:	fc 01       	movw	r30, r24
 280:	84 91       	lpm	r24, Z
 282:	a7 fd       	sbrc	r26, 7
 284:	80 81       	ld	r24, Z
 286:	87 30       	cpi	r24, 0x07	; 7
 288:	11 f4       	brne	.+4      	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
				{
					indicateMidiError();
 28a:	9c d9       	rcall	.-3272   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
 28c:	17 c0       	rjmp	.+46     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
				}
				else
				{
					switch(currentProgBtn)
 28e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
 292:	84 30       	cpi	r24, 0x04	; 4
 294:	49 f0       	breq	.+18     	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	71 f4       	brne	.+28     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), command, MIDI_PROG_BTN_AB); break;
 29a:	25 e0       	ldi	r18, 0x05	; 5
 29c:	6e 2d       	mov	r22, r14
 29e:	a6 01       	movw	r20, r12
 2a0:	80 e2       	ldi	r24, 0x20	; 32
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	ae d7       	rcall	.+3932   	; 0x1202 <programmBtn>
 2a6:	0a c0       	rjmp	.+20     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), command, MIDI_PROG_BTN_LOOP); break;
 2a8:	24 e0       	ldi	r18, 0x04	; 4
 2aa:	6e 2d       	mov	r22, r14
 2ac:	a6 01       	movw	r20, r12
 2ae:	8c e1       	ldi	r24, 0x1C	; 28
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	a7 d7       	rcall	.+3918   	; 0x1202 <programmBtn>
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
						default: indicateMidiError(); break;
 2b6:	86 d9       	rcall	.-3316   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					}
				}
			}
			else
			{
				indicateMidiError();
 2ba:	84 d9       	rcall	.-3320   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
			}			
			break;
		}
	}	
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	08 95       	ret

Disassembly of section .text.__vector_13:

000010b8 <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	2f 93       	push	r18
    10c4:	3f 93       	push	r19
    10c6:	4f 93       	push	r20
    10c8:	5f 93       	push	r21
    10ca:	6f 93       	push	r22
    10cc:	7f 93       	push	r23
    10ce:	8f 93       	push	r24
    10d0:	9f 93       	push	r25
    10d2:	af 93       	push	r26
    10d4:	bf 93       	push	r27
    10d6:	ef 93       	push	r30
    10d8:	ff 93       	push	r31
	TCCR1B |= 0x00; // psc = 0, timer off
    10da:	e1 e8       	ldi	r30, 0x81	; 129
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 83       	st	Z, r24
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	setMidiLeds();
    10e8:	15 d0       	rcall	.+42     	; 0x1114 <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
    10ea:	87 e0       	ldi	r24, 0x07	; 7
    10ec:	18 d3       	rcall	.+1584   	; 0x171e <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
    10ee:	88 e0       	ldi	r24, 0x08	; 8
    10f0:	16 d3       	rcall	.+1580   	; 0x171e <SH100HW_SetPreviousLedState>
    10f2:	ff 91       	pop	r31
    10f4:	ef 91       	pop	r30
    10f6:	bf 91       	pop	r27
    10f8:	af 91       	pop	r26
    10fa:	9f 91       	pop	r25
    10fc:	8f 91       	pop	r24
    10fe:	7f 91       	pop	r23
    1100:	6f 91       	pop	r22
    1102:	5f 91       	pop	r21
    1104:	4f 91       	pop	r20
    1106:	3f 91       	pop	r19
    1108:	2f 91       	pop	r18
    110a:	0f 90       	pop	r0
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	0f 90       	pop	r0
    1110:	1f 90       	pop	r1
    1112:	18 95       	reti

Disassembly of section .text.handleRealTimeStatus:

00001992 <handleRealTimeStatus>:
	HADLE_SYS_EX
}state = RESET;

void handleRealTimeStatus(MIDI_Status_t status)
{
	UART_PushWord(status);
    1992:	a4 dc       	rcall	.-1720   	; 0x12dc <UART_PushWord>
    1994:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

0000080a <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 80a:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <state>
 80e:	8e 2f       	mov	r24, r30
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	87 30       	cpi	r24, 0x07	; 7
 814:	91 05       	cpc	r25, r1
 816:	08 f0       	brcs	.+2      	; 0x81a <MIDI_ParserTask+0x10>
 818:	98 c0       	rjmp	.+304    	; 0x94a <MIDI_ParserTask+0x140>
 81a:	fc 01       	movw	r30, r24
 81c:	e6 5e       	subi	r30, 0xE6	; 230
 81e:	ff 4f       	sbci	r31, 0xFF	; 255
 820:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 822:	e8 e2       	ldi	r30, 0x28	; 40
 824:	f1 e0       	ldi	r31, 0x01	; 1
 826:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 828:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 82a:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 82c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <currentStatusType>
			isSecondDataWord = false;
 830:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
			state = WAIT_WORD;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
			break;
 83a:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 83c:	57 d8       	rcall	.-3922   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
 83e:	88 23       	and	r24, r24
 840:	09 f4       	brne	.+2      	; 0x844 <MIDI_ParserTask+0x3a>
 842:	83 c0       	rjmp	.+262    	; 0x94a <MIDI_ParserTask+0x140>
			{
				recievedWord = UART_PopWord();
 844:	5c d6       	rcall	.+3256   	; 0x14fe <UART_PopWord>
 846:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 84a:	5e d8       	rcall	.-3908   	; 0xfffff908 <__eeprom_end+0xff7ef908>
 84c:	88 23       	and	r24, r24
 84e:	21 f0       	breq	.+8      	; 0x858 <MIDI_ParserTask+0x4e>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
 850:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 854:	9e d8       	rcall	.-3780   	; 0xfffff992 <__eeprom_end+0xff7ef992>
					return;
 856:	08 95       	ret
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 858:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 85c:	77 d8       	rcall	.-3858   	; 0xfffff94c <__eeprom_end+0xff7ef94c>
 85e:	88 23       	and	r24, r24
 860:	21 f0       	breq	.+8      	; 0x86a <MIDI_ParserTask+0x60>
				{					
					state = DISPATCH_STATUS;
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
 868:	20 c0       	rjmp	.+64     	; 0x8aa <MIDI_ParserTask+0xa0>
				}
				else
				{
					switch(currentStatusType)
 86a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <currentStatusType>
 86e:	82 30       	cpi	r24, 0x02	; 2
 870:	49 f0       	breq	.+18     	; 0x884 <MIDI_ParserTask+0x7a>
 872:	18 f4       	brcc	.+6      	; 0x87a <MIDI_ParserTask+0x70>
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	51 f0       	breq	.+20     	; 0x88c <MIDI_ParserTask+0x82>
 878:	15 c0       	rjmp	.+42     	; 0x8a4 <MIDI_ParserTask+0x9a>
 87a:	84 30       	cpi	r24, 0x04	; 4
 87c:	59 f0       	breq	.+22     	; 0x894 <MIDI_ParserTask+0x8a>
 87e:	85 30       	cpi	r24, 0x05	; 5
 880:	69 f0       	breq	.+26     	; 0x89c <MIDI_ParserTask+0x92>
 882:	10 c0       	rjmp	.+32     	; 0x8a4 <MIDI_ParserTask+0x9a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 884:	84 e0       	ldi	r24, 0x04	; 4
 886:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
 88a:	0f c0       	rjmp	.+30     	; 0x8aa <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
 892:	0b c0       	rjmp	.+22     	; 0x8aa <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 894:	85 e0       	ldi	r24, 0x05	; 5
 896:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 89c:	86 e0       	ldi	r24, 0x06	; 6
 89e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <MIDI_ParserTask+0xa0>
						default: state = WAIT_WORD;
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
					}
				}
				
				if(retranslate)
 8aa:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <retranslate>
 8ae:	88 23       	and	r24, r24
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <MIDI_ParserTask+0xaa>
 8b2:	4b c0       	rjmp	.+150    	; 0x94a <MIDI_ParserTask+0x140>
				{
					UART_PushWord(recievedWord);
 8b4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 8b8:	11 d5       	rcall	.+2594   	; 0x12dc <UART_PushWord>
 8ba:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 8bc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <recievedWord>
 8c0:	89 2f       	mov	r24, r25
 8c2:	82 95       	swap	r24
 8c4:	8f 70       	andi	r24, 0x0F	; 15
 8c6:	e8 e2       	ldi	r30, 0x28	; 40
 8c8:	f1 e0       	ldi	r31, 0x01	; 1
 8ca:	80 83       	st	Z, r24
			currentCommand.channel_type = recievedWord & 0x0F;
 8cc:	9f 70       	andi	r25, 0x0F	; 15
 8ce:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 8d0:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 8d2:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 8d4:	ea d2       	rcall	.+1492   	; 0xeaa <MIDI_GetStatusType>
 8d6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <currentStatusType>
			isSecondDataWord = false;
 8da:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
			state = WAIT_WORD;
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
			break;
 8e4:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 8e6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isSecondDataWord>
 8ea:	88 23       	and	r24, r24
 8ec:	59 f0       	breq	.+22     	; 0x904 <MIDI_ParserTask+0xfa>
			{
				currentCommand.data2 = recievedWord;
 8ee:	e8 e2       	ldi	r30, 0x28	; 40
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 8f6:	83 83       	std	Z+3, r24	; 0x03
				isSecondDataWord = false;			
 8f8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
				MIDICTRL_HandleCommand(&currentCommand);
 8fc:	bf 01       	movw	r22, r30
 8fe:	80 e8       	ldi	r24, 0x80	; 128
 900:	ed db       	rcall	.-2086   	; 0xdc <MIDICTRL_HandleCommand>
 902:	07 c0       	rjmp	.+14     	; 0x912 <MIDI_ParserTask+0x108>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 904:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 908:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <currentCommand+0x2>
				isSecondDataWord = true;
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <isSecondDataWord>
			}
			state = WAIT_WORD;
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
			break;
 918:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 91a:	e8 e2       	ldi	r30, 0x28	; 40
 91c:	f1 e0       	ldi	r31, 0x01	; 1
 91e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 922:	82 83       	std	Z+2, r24	; 0x02
			MIDICTRL_HandleCommand(&currentCommand);
 924:	bf 01       	movw	r22, r30
 926:	80 e8       	ldi	r24, 0x80	; 128
 928:	d9 db       	rcall	.-2126   	; 0xdc <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
			break;
 930:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
			break;
 938:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 93a:	e8 e2       	ldi	r30, 0x28	; 40
 93c:	f1 e0       	ldi	r31, 0x01	; 1
 93e:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 940:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 942:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <state>
 94a:	08 95       	ret

Disassembly of section .text.MIDI_SetRetranslateState:

00001974 <MIDI_SetRetranslateState>:
	}
}

void MIDI_SetRetranslateState(bool enabled)
{
	retranslate = enabled;
    1974:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <retranslate>
    1978:	08 95       	ret

Disassembly of section .text.MIDI_SendCommand:

00000d42 <MIDI_SendCommand>:
}

void MIDI_SendCommand(MIDI_Command_t command, uint8_t channel)
{
 d42:	0f 93       	push	r16
 d44:	1f 93       	push	r17
 d46:	cf 93       	push	r28
 d48:	df 93       	push	r29
 d4a:	c6 2f       	mov	r28, r22
 d4c:	18 2f       	mov	r17, r24
 d4e:	09 2f       	mov	r16, r25
 d50:	d4 2f       	mov	r29, r20
	switch(MIDI_GetStatusType(command.status))
 d52:	86 2f       	mov	r24, r22
 d54:	aa d0       	rcall	.+340    	; 0xeaa <MIDI_GetStatusType>
 d56:	83 30       	cpi	r24, 0x03	; 3
 d58:	59 f0       	breq	.+22     	; 0xd70 <MIDI_SendCommand+0x2e>
 d5a:	28 f4       	brcc	.+10     	; 0xd66 <MIDI_SendCommand+0x24>
 d5c:	81 30       	cpi	r24, 0x01	; 1
 d5e:	59 f0       	breq	.+22     	; 0xd76 <MIDI_SendCommand+0x34>
 d60:	82 30       	cpi	r24, 0x02	; 2
 d62:	a1 f0       	breq	.+40     	; 0xd8c <MIDI_SendCommand+0x4a>
 d64:	25 c0       	rjmp	.+74     	; 0xdb0 <MIDI_SendCommand+0x6e>
 d66:	84 30       	cpi	r24, 0x04	; 4
 d68:	f1 f0       	breq	.+60     	; 0xda6 <MIDI_SendCommand+0x64>
 d6a:	85 30       	cpi	r24, 0x05	; 5
 d6c:	f9 f0       	breq	.+62     	; 0xdac <MIDI_SendCommand+0x6a>
 d6e:	20 c0       	rjmp	.+64     	; 0xdb0 <MIDI_SendCommand+0x6e>
	{
		case MIDI_TYPE_REAL_TIME:
		{
			// second nymble!
			UART_PushWord(command.status);
 d70:	8c 2f       	mov	r24, r28
 d72:	b4 d2       	rcall	.+1384   	; 0x12dc <UART_PushWord>
			break;
 d74:	1d c0       	rjmp	.+58     	; 0xdb0 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_ONE_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 d76:	80 e1       	ldi	r24, 0x10	; 16
 d78:	c8 9f       	mul	r28, r24
 d7a:	b0 01       	movw	r22, r0
 d7c:	11 24       	eor	r1, r1
 d7e:	8d 2f       	mov	r24, r29
 d80:	8f 70       	andi	r24, 0x0F	; 15
 d82:	86 2b       	or	r24, r22
 d84:	ab d2       	rcall	.+1366   	; 0x12dc <UART_PushWord>
			UART_PushWord(command.data1);
 d86:	81 2f       	mov	r24, r17
 d88:	a9 d2       	rcall	.+1362   	; 0x12dc <UART_PushWord>
			break;
 d8a:	12 c0       	rjmp	.+36     	; 0xdb0 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_TWO_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 d8c:	80 e1       	ldi	r24, 0x10	; 16
 d8e:	c8 9f       	mul	r28, r24
 d90:	b0 01       	movw	r22, r0
 d92:	11 24       	eor	r1, r1
 d94:	8d 2f       	mov	r24, r29
 d96:	8f 70       	andi	r24, 0x0F	; 15
 d98:	86 2b       	or	r24, r22
 d9a:	a0 d2       	rcall	.+1344   	; 0x12dc <UART_PushWord>
			UART_PushWord(command.data1);
 d9c:	81 2f       	mov	r24, r17
 d9e:	9e d2       	rcall	.+1340   	; 0x12dc <UART_PushWord>
			UART_PushWord(command.data2);
 da0:	80 2f       	mov	r24, r16
 da2:	9c d2       	rcall	.+1336   	; 0x12dc <UART_PushWord>
			break;
 da4:	05 c0       	rjmp	.+10     	; 0xdb0 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_START_SYS_EX:
		{
			// second nymble!
			UART_PushWord(command.status);
 da6:	8c 2f       	mov	r24, r28
 da8:	99 d2       	rcall	.+1330   	; 0x12dc <UART_PushWord>
			break;
 daa:	02 c0       	rjmp	.+4      	; 0xdb0 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_STOP_SYS_EX:
		{
			// second nymble!!!
			UART_PushWord(command.status);
 dac:	8c 2f       	mov	r24, r28
 dae:	96 d2       	rcall	.+1324   	; 0x12dc <UART_PushWord>
			break;
		}
		case MIDI_TYPE_UNDEFINED: break;
	}
 db0:	df 91       	pop	r29
 db2:	cf 91       	pop	r28
 db4:	1f 91       	pop	r17
 db6:	0f 91       	pop	r16
 db8:	08 95       	ret

Disassembly of section .text.setChannelLeds:

000017b0 <setChannelLeds>:
	SH100CTRL_SetAB(ampState.swAB);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    17b0:	60 e0       	ldi	r22, 0x00	; 0
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	51 de       	rcall	.-862    	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	4e de       	rcall	.-868    	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	82 e0       	ldi	r24, 0x02	; 2
    17c0:	4b de       	rcall	.-874    	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	83 e0       	ldi	r24, 0x03	; 3
    17c6:	48 de       	rcall	.-880    	; 0x1458 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ampState>
    17ce:	44 de       	rcall	.-888    	; 0x1458 <SH100HW_SetNewLedState>
    17d0:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

000015f2 <SH100CTRL_SetAmpLeds>:
}

void SH100CTRL_SetAmpLeds()
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
	setChannelLeds();
    15f6:	dc d0       	rcall	.+440    	; 0x17b0 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    15f8:	cd e2       	ldi	r28, 0x2D	; 45
    15fa:	d1 e0       	ldi	r29, 0x01	; 1
    15fc:	e8 81       	ld	r30, Y
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	e3 5d       	subi	r30, 0xD3	; 211
    1602:	fe 4f       	sbci	r31, 0xFE	; 254
    1604:	61 81       	ldd	r22, Z+1	; 0x01
    1606:	84 e0       	ldi	r24, 0x04	; 4
    1608:	27 df       	rcall	.-434    	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    160a:	6d 81       	ldd	r22, Y+5	; 0x05
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	68 27       	eor	r22, r24
    1610:	85 e0       	ldi	r24, 0x05	; 5
    1612:	22 df       	rcall	.-444    	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    1614:	6d 81       	ldd	r22, Y+5	; 0x05
    1616:	86 e0       	ldi	r24, 0x06	; 6
    1618:	1f df       	rcall	.-450    	; 0x1458 <SH100HW_SetNewLedState>
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

Disassembly of section .text.SH100CTRL_StoreAmpState:

000017d2 <SH100CTRL_StoreAmpState>:

void SH100CTRL_StoreAmpState()
{
	eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
    17d2:	6b ea       	ldi	r22, 0xAB	; 171
    17d4:	7c ea       	ldi	r23, 0xAC	; 172
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	d8 d0       	rcall	.+432    	; 0x198c <eeprom_write_word>
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
    17dc:	6d e2       	ldi	r22, 0x2D	; 45
    17de:	71 e0       	ldi	r23, 0x01	; 1
    17e0:	80 e8       	ldi	r24, 0x80	; 128
    17e2:	26 e0       	ldi	r18, 0x06	; 6
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	48 e0       	ldi	r20, 0x08	; 8
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	bc de       	rcall	.-648    	; 0x1564 <eeprom_write_block>
    17ec:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetLoop:

000016cc <SH100CTRL_SetLoop>:
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
}

void SH100CTRL_SetLoop(bool en)
{
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
	ampState.loopOn[ampState.channelNum] = en;
    16d0:	cd e2       	ldi	r28, 0x2D	; 45
    16d2:	d1 e0       	ldi	r29, 0x01	; 1
    16d4:	e8 81       	ld	r30, Y
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	e3 5d       	subi	r30, 0xD3	; 211
    16da:	fe 4f       	sbci	r31, 0xFE	; 254
    16dc:	81 83       	std	Z+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn[ampState.channelNum]);
    16de:	a2 d0       	rcall	.+324    	; 0x1824 <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    16e0:	e8 81       	ld	r30, Y
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	e3 5d       	subi	r30, 0xD3	; 211
    16e6:	fe 4f       	sbci	r31, 0xFE	; 254
    16e8:	61 81       	ldd	r22, Z+1	; 0x01
    16ea:	84 e0       	ldi	r24, 0x04	; 4
    16ec:	b5 de       	rcall	.-662    	; 0x1458 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendLoopEnComm();
    16ee:	c4 df       	rcall	.-120    	; 0x1678 <MIDICTRL_SendLoopEnComm>
}
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

00001620 <SH100CTRL_SwChannel>:
		SH100CTRL_SwLoop();
	}
}

void SH100CTRL_SwChannel(uint8_t chNum)
{
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	c8 2f       	mov	r28, r24
	ampState.channelNum = chNum;
    1628:	0d e2       	ldi	r16, 0x2D	; 45
    162a:	11 e0       	ldi	r17, 0x01	; 1
    162c:	d8 01       	movw	r26, r16
    162e:	8c 93       	st	X, r24
	
	SH100HW_SetCh(chNum);
    1630:	9a dd       	rcall	.-1228   	; 0x1166 <SH100HW_SetCh>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    1632:	d8 01       	movw	r26, r16
    1634:	ec 91       	ld	r30, X
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	e3 5d       	subi	r30, 0xD3	; 211
    163a:	fe 4f       	sbci	r31, 0xFE	; 254
    163c:	81 81       	ldd	r24, Z+1	; 0x01
    163e:	46 d0       	rcall	.+140    	; 0x16cc <SH100CTRL_SetLoop>
	setChannelLeds();
    1640:	b7 d0       	rcall	.+366    	; 0x17b0 <setChannelLeds>
	
	MIDICTRL_SendSwChComm(chNum);
    1642:	8c 2f       	mov	r24, r28
    1644:	a1 dc       	rcall	.-1726   	; 0xf88 <MIDICTRL_SendSwChComm>
}
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

00001882 <SH100CTRL_SwLoop>:

void SH100CTRL_SwLoop()
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
    1882:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <ampState>
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	e3 5d       	subi	r30, 0xD3	; 211
    188a:	fe 4f       	sbci	r31, 0xFE	; 254
    188c:	91 81       	ldd	r25, Z+1	; 0x01
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	89 27       	eor	r24, r25
    1892:	1c df       	rcall	.-456    	; 0x16cc <SH100CTRL_SetLoop>
    1894:	08 95       	ret

Disassembly of section .text.SH100CTRL_BtnSwChannel:

000018ce <SH100CTRL_BtnSwChannel>:
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
}

void SH100CTRL_BtnSwChannel(uint8_t chNum)
{
	if(ampState.channelNum != chNum)
    18ce:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ampState>
    18d2:	98 17       	cp	r25, r24
    18d4:	11 f0       	breq	.+4      	; 0x18da <SH100CTRL_BtnSwChannel+0xc>
	{
		SH100CTRL_SwChannel(chNum);
    18d6:	a4 de       	rcall	.-696    	; 0x1620 <SH100CTRL_SwChannel>
    18d8:	08 95       	ret
	}
	else
	{
		SH100CTRL_SwLoop();
    18da:	d3 df       	rcall	.-90     	; 0x1882 <SH100CTRL_SwLoop>
    18dc:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAB:

00001746 <SH100CTRL_SetAB>:
{
	SH100CTRL_SetAB(!ampState.swAB);
}

void SH100CTRL_SetAB(bool isB)
{
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
	ampState.swAB = isB;
    174a:	cd e2       	ldi	r28, 0x2D	; 45
    174c:	d1 e0       	ldi	r29, 0x01	; 1
    174e:	8d 83       	std	Y+5, r24	; 0x05
	SH100HW_SetAB(ampState.swAB);
    1750:	17 d1       	rcall	.+558    	; 0x1980 <SH100HW_SetAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1752:	6d 81       	ldd	r22, Y+5	; 0x05
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	68 27       	eor	r22, r24
    1758:	85 e0       	ldi	r24, 0x05	; 5
    175a:	7e de       	rcall	.-772    	; 0x1458 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    175c:	6d 81       	ldd	r22, Y+5	; 0x05
    175e:	86 e0       	ldi	r24, 0x06	; 6
    1760:	7b de       	rcall	.-778    	; 0x1458 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendSwABComm();
    1762:	9f df       	rcall	.-194    	; 0x16a2 <MIDICTRL_SendSwABComm>
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

00001532 <SH100CTRL_SetAmpState>:
	
	SH100CTRL_SetAmpState(&ampState);
}

void SH100CTRL_SetAmpState(const SH100_State_t* state)
{
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	98 2f       	mov	r25, r24
	ampState = *state;
    1538:	86 e0       	ldi	r24, 0x06	; 6
    153a:	e6 2f       	mov	r30, r22
    153c:	f7 2f       	mov	r31, r23
    153e:	ad e2       	ldi	r26, 0x2D	; 45
    1540:	b1 e0       	ldi	r27, 0x01	; 1
    1542:	79 2f       	mov	r23, r25
    1544:	62 d1       	rcall	.+708    	; 0x180a <__movmemx_qi>
	
	SH100CTRL_SwChannel(ampState.channelNum);
    1546:	cd e2       	ldi	r28, 0x2D	; 45
    1548:	d1 e0       	ldi	r29, 0x01	; 1
    154a:	88 81       	ld	r24, Y
    154c:	69 d0       	rcall	.+210    	; 0x1620 <SH100CTRL_SwChannel>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    154e:	e8 81       	ld	r30, Y
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	e3 5d       	subi	r30, 0xD3	; 211
    1554:	fe 4f       	sbci	r31, 0xFE	; 254
    1556:	81 81       	ldd	r24, Z+1	; 0x01
    1558:	b9 d0       	rcall	.+370    	; 0x16cc <SH100CTRL_SetLoop>
	SH100CTRL_SetAB(ampState.swAB);
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	f4 d0       	rcall	.+488    	; 0x1746 <SH100CTRL_SetAB>
}
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000dba <SH100CTRL_Init>:
SH100_State_t ampState;

void setChannelLeds();

void SH100CTRL_Init()
{
 dba:	cf 93       	push	r28
 dbc:	df 93       	push	r29
 dbe:	00 d0       	rcall	.+0      	; 0xdc0 <SH100CTRL_Init+0x6>
 dc0:	00 d0       	rcall	.+0      	; 0xdc2 <SH100CTRL_Init+0x8>
 dc2:	00 d0       	rcall	.+0      	; 0xdc4 <SH100CTRL_Init+0xa>
 dc4:	cd b7       	in	r28, 0x3d	; 61
 dc6:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 dc8:	60 e0       	ldi	r22, 0x00	; 0
 dca:	70 e0       	ldi	r23, 0x00	; 0
 dcc:	80 e0       	ldi	r24, 0x00	; 0
 dce:	ae d5       	rcall	.+2908   	; 0x192c <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 dd0:	8b 3a       	cpi	r24, 0xAB	; 171
 dd2:	9c 4a       	sbci	r25, 0xAC	; 172
 dd4:	91 f4       	brne	.+36     	; 0xdfa <SH100CTRL_Init+0x40>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
 dd6:	48 e0       	ldi	r20, 0x08	; 8
 dd8:	50 e0       	ldi	r21, 0x00	; 0
 dda:	60 e8       	ldi	r22, 0x80	; 128
 ddc:	26 e0       	ldi	r18, 0x06	; 6
 dde:	30 e0       	ldi	r19, 0x00	; 0
 de0:	ce 01       	movw	r24, r28
 de2:	01 96       	adiw	r24, 0x01	; 1
 de4:	c2 d4       	rcall	.+2436   	; 0x176a <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 de6:	86 e0       	ldi	r24, 0x06	; 6
 de8:	fe 01       	movw	r30, r28
 dea:	31 96       	adiw	r30, 0x01	; 1
 dec:	ad e2       	ldi	r26, 0x2D	; 45
 dee:	b1 e0       	ldi	r27, 0x01	; 1
 df0:	01 90       	ld	r0, Z+
 df2:	0d 92       	st	X+, r0
 df4:	8a 95       	dec	r24
 df6:	e1 f7       	brne	.-8      	; 0xdf0 <SH100CTRL_Init+0x36>
 df8:	0f c0       	rjmp	.+30     	; 0xe18 <SH100CTRL_Init+0x5e>
	}
	else
	{
		ampState.channelNum = 0;
 dfa:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ampState>
		for(int i=0; i<4; i++)
 dfe:	80 e0       	ldi	r24, 0x00	; 0
 e00:	90 e0       	ldi	r25, 0x00	; 0
 e02:	05 c0       	rjmp	.+10     	; 0xe0e <SH100CTRL_Init+0x54>
		{
			ampState.loopOn[i] = false;
 e04:	fc 01       	movw	r30, r24
 e06:	e3 5d       	subi	r30, 0xD3	; 211
 e08:	fe 4f       	sbci	r31, 0xFE	; 254
 e0a:	11 82       	std	Z+1, r1	; 0x01
		ampState = *ampState_ptr;
	}
	else
	{
		ampState.channelNum = 0;
		for(int i=0; i<4; i++)
 e0c:	01 96       	adiw	r24, 0x01	; 1
 e0e:	84 30       	cpi	r24, 0x04	; 4
 e10:	91 05       	cpc	r25, r1
 e12:	c4 f3       	brlt	.-16     	; 0xe04 <SH100CTRL_Init+0x4a>
		{
			ampState.loopOn[i] = false;
		}		
		ampState.swAB = false;		
 e14:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <ampState+0x5>
	}
	
	SH100CTRL_SetAmpState(&ampState);
 e18:	6d e2       	ldi	r22, 0x2D	; 45
 e1a:	71 e0       	ldi	r23, 0x01	; 1
 e1c:	80 e8       	ldi	r24, 0x80	; 128
 e1e:	89 d3       	rcall	.+1810   	; 0x1532 <SH100CTRL_SetAmpState>
}
 e20:	26 96       	adiw	r28, 0x06	; 6
 e22:	0f b6       	in	r0, 0x3f	; 63
 e24:	f8 94       	cli
 e26:	de bf       	out	0x3e, r29	; 62
 e28:	0f be       	out	0x3f, r0	; 63
 e2a:	cd bf       	out	0x3d, r28	; 61
 e2c:	df 91       	pop	r29
 e2e:	cf 91       	pop	r28
 e30:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

00001914 <SH100CTRL_SwAB>:
	MIDICTRL_SendLoopEnComm();
}

void SH100CTRL_SwAB()
{
	SH100CTRL_SetAB(!ampState.swAB);
    1914:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <ampState+0x5>
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	89 27       	eor	r24, r25
    191c:	14 df       	rcall	.-472    	; 0x1746 <SH100CTRL_SetAB>
    191e:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

0000197a <SH100CTRL_MuteAmp>:
	MIDICTRL_SendSwABComm();
}

void SH100CTRL_MuteAmp()
{
	SH100HW_SetPAState(OUTPUT_MUTE);
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	33 dd       	rcall	.-1434   	; 0x13e4 <SH100HW_SetPAState>
    197e:	08 95       	ret

Disassembly of section .text.SH100CTRL_UnmuteAmp:

00001920 <SH100CTRL_UnmuteAmp>:
}

void SH100CTRL_UnmuteAmp()
{
	if(SH100HW_GetOutputJacks() != OUT_NONE)
    1920:	8d df       	rcall	.-230    	; 0x183c <SH100HW_GetOutputJacks>
    1922:	88 23       	and	r24, r24
    1924:	11 f0       	breq	.+4      	; 0x192a <SH100CTRL_UnmuteAmp+0xa>
	{
		SH100HW_SetPAState(OUTPUT_ENABLED);	
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	5d dd       	rcall	.-1350   	; 0x13e4 <SH100HW_SetPAState>
    192a:	08 95       	ret

Disassembly of section .text.SH100CTRL_CheckOutputJacks:

00000e32 <SH100CTRL_CheckOutputJacks>:
	}		
}

void SH100CTRL_CheckOutputJacks()
{
	if(SH100HW_GetPAFailure()) return;
 e32:	82 d5       	rcall	.+2820   	; 0x1938 <SH100HW_GetPAFailure>
 e34:	81 11       	cpse	r24, r1
 e36:	38 c0       	rjmp	.+112    	; 0xea8 <SH100CTRL_CheckOutputJacks+0x76>
	
	SH100HW_OutputJacks_t outJacksState = SH100HW_GetOutputJacks();
 e38:	01 d5       	rcall	.+2562   	; 0x183c <SH100HW_GetOutputJacks>
	
	switch(outJacksState)
 e3a:	81 30       	cpi	r24, 0x01	; 1
 e3c:	89 f0       	breq	.+34     	; 0xe60 <SH100CTRL_CheckOutputJacks+0x2e>
 e3e:	28 f0       	brcs	.+10     	; 0xe4a <SH100CTRL_CheckOutputJacks+0x18>
 e40:	82 30       	cpi	r24, 0x02	; 2
 e42:	d9 f0       	breq	.+54     	; 0xe7a <SH100CTRL_CheckOutputJacks+0x48>
 e44:	83 30       	cpi	r24, 0x03	; 3
 e46:	31 f1       	breq	.+76     	; 0xe94 <SH100CTRL_CheckOutputJacks+0x62>
 e48:	08 95       	ret
	{
		case OUT_NONE:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 e4a:	88 d5       	rcall	.+2832   	; 0x195c <MIDICTRL_MidiMode>
 e4c:	81 11       	cpse	r24, r1
 e4e:	06 c0       	rjmp	.+12     	; 0xe5c <SH100CTRL_CheckOutputJacks+0x2a>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 e50:	60 e0       	ldi	r22, 0x00	; 0
 e52:	87 e0       	ldi	r24, 0x07	; 7
 e54:	01 d3       	rcall	.+1538   	; 0x1458 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 e56:	61 e0       	ldi	r22, 0x01	; 1
 e58:	88 e0       	ldi	r24, 0x08	; 8
 e5a:	fe d2       	rcall	.+1532   	; 0x1458 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 e5c:	8e d5       	rcall	.+2844   	; 0x197a <SH100CTRL_MuteAmp>
			break;
 e5e:	08 95       	ret
		}
		case OUT_16OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 e60:	7d d5       	rcall	.+2810   	; 0x195c <MIDICTRL_MidiMode>
 e62:	81 11       	cpse	r24, r1
 e64:	21 c0       	rjmp	.+66     	; 0xea8 <SH100CTRL_CheckOutputJacks+0x76>
			{
				SH100CTRL_UnmuteAmp();
 e66:	5c d5       	rcall	.+2744   	; 0x1920 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_16OHM);
 e68:	81 e0       	ldi	r24, 0x01	; 1
 e6a:	8d d5       	rcall	.+2842   	; 0x1986 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 e6c:	61 e0       	ldi	r22, 0x01	; 1
 e6e:	87 e0       	ldi	r24, 0x07	; 7
 e70:	f3 d2       	rcall	.+1510   	; 0x1458 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 e72:	60 e0       	ldi	r22, 0x00	; 0
 e74:	88 e0       	ldi	r24, 0x08	; 8
 e76:	f0 d2       	rcall	.+1504   	; 0x1458 <SH100HW_SetNewLedState>
 e78:	08 95       	ret
			}			
			break;
		}
		case OUT_8OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 e7a:	70 d5       	rcall	.+2784   	; 0x195c <MIDICTRL_MidiMode>
 e7c:	81 11       	cpse	r24, r1
 e7e:	14 c0       	rjmp	.+40     	; 0xea8 <SH100CTRL_CheckOutputJacks+0x76>
			{
				SH100CTRL_UnmuteAmp();
 e80:	4f d5       	rcall	.+2718   	; 0x1920 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_8OHM);
 e82:	80 e0       	ldi	r24, 0x00	; 0
 e84:	80 d5       	rcall	.+2816   	; 0x1986 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 e86:	61 e0       	ldi	r22, 0x01	; 1
 e88:	87 e0       	ldi	r24, 0x07	; 7
 e8a:	e6 d2       	rcall	.+1484   	; 0x1458 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 e8c:	60 e0       	ldi	r22, 0x00	; 0
 e8e:	88 e0       	ldi	r24, 0x08	; 8
 e90:	e3 d2       	rcall	.+1478   	; 0x1458 <SH100HW_SetNewLedState>
 e92:	08 95       	ret

			break;
		}
		case OUT_BOTH:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 e94:	63 d5       	rcall	.+2758   	; 0x195c <MIDICTRL_MidiMode>
 e96:	81 11       	cpse	r24, r1
 e98:	06 c0       	rjmp	.+12     	; 0xea6 <SH100CTRL_CheckOutputJacks+0x74>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 e9a:	60 e0       	ldi	r22, 0x00	; 0
 e9c:	87 e0       	ldi	r24, 0x07	; 7
 e9e:	dc d2       	rcall	.+1464   	; 0x1458 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 ea0:	61 e0       	ldi	r22, 0x01	; 1
 ea2:	88 e0       	ldi	r24, 0x08	; 8
 ea4:	d9 d2       	rcall	.+1458   	; 0x1458 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 ea6:	69 d5       	rcall	.+2770   	; 0x197a <SH100CTRL_MuteAmp>
 ea8:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000ff2 <SH100HW_Init>:
void writeShiftRegs(uint16_t data);

bool isPAOk;

void SH100HW_Init()
{
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
	isPAOk = false;
     ff8:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <isPAOk>
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     ffc:	55 b1       	in	r21, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
     ffe:	84 b1       	in	r24, 0x04	; 4
    1000:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
    1002:	28 b1       	in	r18, 0x08	; 8
    1004:	20 61       	ori	r18, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
    1006:	97 b1       	in	r25, 0x07	; 7
    1008:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    100a:	3b b1       	in	r19, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
    100c:	4a b1       	in	r20, 0x0a	; 10
    100e:	40 6e       	ori	r20, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    1010:	3b 71       	andi	r19, 0x1B	; 27
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    1012:	4b 7e       	andi	r20, 0xEB	; 235
    1014:	4a b9       	out	0x0a, r20	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
    1016:	30 61       	ori	r19, 0x10	; 16
    1018:	3b b9       	out	0x0b, r19	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
    101a:	9b 7d       	andi	r25, 0xDB	; 219
    101c:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    101e:	21 7d       	andi	r18, 0xD1	; 209
    1020:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
    1022:	9a 60       	ori	r25, 0x0A	; 10
    1024:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
    1026:	95 2f       	mov	r25, r21
    1028:	90 7d       	andi	r25, 0xD0	; 208
    102a:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	84 b9       	out	0x04, r24	; 4
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
    1030:	10 e0       	ldi	r17, 0x00	; 0
    1032:	0c c0       	rjmp	.+24     	; 0x104c <SH100HW_Init+0x5a>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
    1034:	c1 2f       	mov	r28, r17
    1036:	d0 e0       	ldi	r29, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	f3 dc       	rcall	.-1562   	; 0xa24 <__simple_malloc>
    103e:	cc 0f       	add	r28, r28
    1040:	dd 1f       	adc	r29, r29
    1042:	c6 5c       	subi	r28, 0xC6	; 198
    1044:	de 4f       	sbci	r29, 0xFE	; 254
    1046:	99 83       	std	Y+1, r25	; 0x01
    1048:	88 83       	st	Y, r24
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
    104a:	1f 5f       	subi	r17, 0xFF	; 255
    104c:	12 31       	cpi	r17, 0x12	; 18
    104e:	90 f3       	brcs	.-28     	; 0x1034 <SH100HW_Init+0x42>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	1f 91       	pop	r17
    1056:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAFailure:

000018de <SH100HW_SetPAFailure>:

void SH100HW_SetPAFailure(bool isFail)
{
	isPAOk = !isFail;
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	98 27       	eor	r25, r24
    18e2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <isPAOk>
	if(isFail)
    18e6:	81 11       	cpse	r24, r1
	{
		SH100CTRL_MuteAmp();
    18e8:	48 d0       	rcall	.+144    	; 0x197a <SH100CTRL_MuteAmp>
    18ea:	08 95       	ret

Disassembly of section .text.SH100HW_GetPAFailure:

00001938 <SH100HW_GetPAFailure>:
	}
}

bool SH100HW_GetPAFailure()
{
	return !isPAOk;
    1938:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <isPAOk>
}
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	89 27       	eor	r24, r25
    1940:	08 95       	ret

Disassembly of section .text.SH100HW_SetCh:

00001166 <SH100HW_SetCh>:

void SH100HW_SetCh(uint8_t chNum)
{
	switch(chNum)
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	69 f0       	breq	.+26     	; 0x1184 <SH100HW_SetCh+0x1e>
    116a:	28 f0       	brcs	.+10     	; 0x1176 <SH100HW_SetCh+0x10>
    116c:	82 30       	cpi	r24, 0x02	; 2
    116e:	91 f0       	breq	.+36     	; 0x1194 <SH100HW_SetCh+0x2e>
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	c1 f0       	breq	.+48     	; 0x11a4 <SH100HW_SetCh+0x3e>
    1174:	08 95       	ret
	{
		case 0:
		{
			RELAY_13_24 = REL_OFF;
    1176:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    117a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    117e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    1182:	08 95       	ret
		}
		case 1:
		{
			RELAY_13_24 = REL_ON;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    118a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    118e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    1192:	08 95       	ret
		}
		case 2:
		{
			RELAY_13_24 = REL_OFF;
    1194:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_ON;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    119e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    11a2:	08 95       	ret
		}
		case 3:
		{
			RELAY_13_24 = REL_ON;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    11aa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_ON;
    11ae:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RELAY_2_4>
    11b2:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

00001824 <SH100HW_LoopEn>:
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
	RELAY_LOOP = isEnabled;
    1824:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RELAY_LOOP>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1828:	88 23       	and	r24, r24
    182a:	21 f0       	breq	.+8      	; 0x1834 <SH100HW_LoopEn+0x10>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    182c:	85 b1       	in	r24, 0x05	; 5
    182e:	84 60       	ori	r24, 0x04	; 4
    1830:	85 b9       	out	0x05, r24	; 5
    1832:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1834:	85 b1       	in	r24, 0x05	; 5
    1836:	8b 7f       	andi	r24, 0xFB	; 251
    1838:	85 b9       	out	0x05, r24	; 5
    183a:	08 95       	ret

Disassembly of section .text.SH100HW_SetAB:

00001980 <SH100HW_SetAB>:
	ioport_set_pin_level(PIN_RELAY_LOOP, RELAY_LOOP);
}

void SH100HW_SetAB(bool isBEn)
{
	RELAY_AB = isBEn;
    1980:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <RELAY_AB>
    1984:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

00001458 <SH100HW_SetNewLedState>:
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
    145c:	e8 2f       	mov	r30, r24
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	df 01       	movw	r26, r30
    1462:	19 96       	adiw	r26, 0x09	; 9
    1464:	aa 0f       	add	r26, r26
    1466:	bb 1f       	adc	r27, r27
    1468:	a6 5c       	subi	r26, 0xC6	; 198
    146a:	be 4f       	sbci	r27, 0xFE	; 254
    146c:	0d 90       	ld	r0, X+
    146e:	bc 91       	ld	r27, X
    1470:	a0 2d       	mov	r26, r0
    1472:	ee 0f       	add	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	e6 5c       	subi	r30, 0xC6	; 198
    1478:	fe 4f       	sbci	r31, 0xFE	; 254
    147a:	c0 81       	ld	r28, Z
    147c:	d1 81       	ldd	r29, Z+1	; 0x01
    147e:	88 81       	ld	r24, Y
    1480:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
    1482:	01 90       	ld	r0, Z+
    1484:	f0 81       	ld	r31, Z
    1486:	e0 2d       	mov	r30, r0
    1488:	60 83       	st	Z, r22
}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

0000171e <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	fc 01       	movw	r30, r24
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	e6 5c       	subi	r30, 0xC6	; 198
    1728:	fe 4f       	sbci	r31, 0xFE	; 254
    172a:	a0 81       	ld	r26, Z
    172c:	b1 81       	ldd	r27, Z+1	; 0x01
    172e:	fc 01       	movw	r30, r24
    1730:	39 96       	adiw	r30, 0x09	; 9
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	e6 5c       	subi	r30, 0xC6	; 198
    1738:	fe 4f       	sbci	r31, 0xFE	; 254
    173a:	01 90       	ld	r0, Z+
    173c:	f0 81       	ld	r31, Z
    173e:	e0 2d       	mov	r30, r0
    1740:	80 81       	ld	r24, Z
    1742:	8c 93       	st	X, r24
    1744:	08 95       	ret

Disassembly of section .text.SH100HW_GetOutputJacks:

0000183c <SH100HW_GetOutputJacks>:
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    183c:	21 e0       	ldi	r18, 0x01	; 1
    183e:	18 9b       	sbis	0x03, 0	; 3
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	91 e0       	ldi	r25, 0x01	; 1
    1844:	19 9b       	sbis	0x03, 1	; 3
    1846:	90 e0       	ldi	r25, 0x00	; 0

SH100HW_OutputJacks_t SH100HW_GetOutputJacks()
{
	bool is16Ohm = ioport_get_pin_level(PIN_M16_DETECT);
	bool is8Ohm = ioport_get_pin_level(PIN_M8_DETECT);
	return ((is16Ohm) | (is8Ohm<<1));
    1848:	89 2f       	mov	r24, r25
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	88 0f       	add	r24, r24
    184e:	99 1f       	adc	r25, r25
}
    1850:	82 2b       	or	r24, r18
    1852:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAState:

000013e4 <SH100HW_SetPAState>:

void SH100HW_SetPAState(SH100HW_OutputState_t state)
{
	if(isPAOk)
    13e4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <isPAOk>
    13e8:	99 23       	and	r25, r25
    13ea:	99 f0       	breq	.+38     	; 0x1412 <SH100HW_SetPAState+0x2e>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    13ec:	81 11       	cpse	r24, r1
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <SH100HW_SetPAState+0x14>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    13f0:	98 b1       	in	r25, 0x08	; 8
    13f2:	92 60       	ori	r25, 0x02	; 2
    13f4:	98 b9       	out	0x08, r25	; 8
    13f6:	03 c0       	rjmp	.+6      	; 0x13fe <SH100HW_SetPAState+0x1a>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    13f8:	98 b1       	in	r25, 0x08	; 8
    13fa:	9d 7f       	andi	r25, 0xFD	; 253
    13fc:	98 b9       	out	0x08, r25	; 8
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    13fe:	88 23       	and	r24, r24
    1400:	21 f0       	breq	.+8      	; 0x140a <SH100HW_SetPAState+0x26>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1402:	88 b1       	in	r24, 0x08	; 8
    1404:	88 60       	ori	r24, 0x08	; 8
    1406:	88 b9       	out	0x08, r24	; 8
    1408:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    140a:	88 b1       	in	r24, 0x08	; 8
    140c:	87 7f       	andi	r24, 0xF7	; 247
    140e:	88 b9       	out	0x08, r24	; 8
    1410:	08 95       	ret
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1412:	88 b1       	in	r24, 0x08	; 8
    1414:	82 60       	ori	r24, 0x02	; 2
    1416:	88 b9       	out	0x08, r24	; 8
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1418:	88 b1       	in	r24, 0x08	; 8
    141a:	87 7f       	andi	r24, 0xF7	; 247
    141c:	88 b9       	out	0x08, r24	; 8
    141e:	08 95       	ret

Disassembly of section .text.SH100HW_SetOutputMode:

00001986 <SH100HW_SetOutputMode>:
	}
}

void SH100HW_SetOutputMode(SH100HW_PAMode_t mode)
{
	RELAY_8_16 = mode;
    1986:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <RELAY_8_16>
    198a:	08 95       	ret

Disassembly of section .text.SH100HW_StartADConvertion:

00001896 <SH100HW_StartADConvertion>:
}

void SH100HW_StartADConvertion(ADC_Channels_t channel)
{
	ADMUX = (1<<REFS0) | channel; // AREF ext pin, Left-adjustment result
    1896:	80 64       	ori	r24, 0x40	; 64
    1898:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	DIDR0 = 0x01; // Disable digital io on PC0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7fe07e>
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, INT enable, prescaler = 64
    18a2:	8e ec       	ldi	r24, 0xCE	; 206
    18a4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
    18a8:	08 95       	ret

Disassembly of section .text.SH100HW_GetControlsState:

000004b0 <SH100HW_GetControlsState>:
}

SH100HW_Controls_t SH100HW_GetControlsState()
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	dc 01       	movw	r26, r24
	SH100HW_Controls_t buttonsState;
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	be c0       	rjmp	.+380    	; 0x636 <__stack+0x137>
	{
		
		switch(cnt)
 4ba:	49 2f       	mov	r20, r25
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	48 30       	cpi	r20, 0x08	; 8
 4c0:	51 05       	cpc	r21, r1
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <SH100HW_GetControlsState+0x16>
 4c4:	b7 c0       	rjmp	.+366    	; 0x634 <__stack+0x135>
 4c6:	fa 01       	movw	r30, r20
 4c8:	ef 5d       	subi	r30, 0xDF	; 223
 4ca:	ff 4f       	sbci	r31, 0xFF	; 255
 4cc:	09 94       	ijmp
 4ce:	8b b1       	in	r24, 0x0b	; 11
 4d0:	8f 7d       	andi	r24, 0xDF	; 223
 4d2:	8b b9       	out	0x0b, r24	; 11
 4d4:	8b b1       	in	r24, 0x0b	; 11
 4d6:	8f 7b       	andi	r24, 0xBF	; 191
 4d8:	8b b9       	out	0x0b, r24	; 11
 4da:	8b b1       	in	r24, 0x0b	; 11
 4dc:	8f 77       	andi	r24, 0x7F	; 127
 4de:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	4c 9b       	sbis	0x09, 4	; 9
 4e4:	80 e0       	ldi	r24, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = ioport_get_pin_level(PIN_MIDI_SWITCH);
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	8c 93       	st	X, r24
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	35 9b       	sbis	0x06, 5	; 6
 4f0:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.FS2_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 4f2:	1c 96       	adiw	r26, 0x0c	; 12
 4f4:	8c 93       	st	X, r24
 4f6:	1c 97       	sbiw	r26, 0x0c	; 12
				break;
 4f8:	9d c0       	rjmp	.+314    	; 0x634 <__stack+0x135>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 4fa:	8b b1       	in	r24, 0x0b	; 11
 4fc:	80 62       	ori	r24, 0x20	; 32
 4fe:	8b b9       	out	0x0b, r24	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 500:	8b b1       	in	r24, 0x0b	; 11
 502:	8f 7b       	andi	r24, 0xBF	; 191
 504:	8b b9       	out	0x0b, r24	; 11
 506:	8b b1       	in	r24, 0x0b	; 11
 508:	8f 77       	andi	r24, 0x7F	; 127
 50a:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	4c 9b       	sbis	0x09, 4	; 9
 510:	80 e0       	ldi	r24, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 512:	28 2f       	mov	r18, r24
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	4a 9b       	sbis	0x09, 2	; 9
 518:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.btnAB = ioport_get_pin_level(PIN_BUTTONS);
 51a:	17 96       	adiw	r26, 0x07	; 7
 51c:	8c 93       	st	X, r24
 51e:	17 97       	sbiw	r26, 0x07	; 7
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	35 9b       	sbis	0x06, 5	; 6
 524:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.FS2_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 526:	1e 96       	adiw	r26, 0x0e	; 14
 528:	8c 93       	st	X, r24
 52a:	1e 97       	sbiw	r26, 0x0e	; 14
				break;
 52c:	83 c0       	rjmp	.+262    	; 0x634 <__stack+0x135>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 52e:	8b b1       	in	r24, 0x0b	; 11
 530:	8f 7d       	andi	r24, 0xDF	; 223
 532:	8b b9       	out	0x0b, r24	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 534:	8b b1       	in	r24, 0x0b	; 11
 536:	80 64       	ori	r24, 0x40	; 64
 538:	8b b9       	out	0x0b, r24	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 53a:	8b b1       	in	r24, 0x0b	; 11
 53c:	8f 77       	andi	r24, 0x7F	; 127
 53e:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	4c 9b       	sbis	0x09, 4	; 9
 544:	40 e0       	ldi	r20, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 546:	34 2f       	mov	r19, r20
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	4a 9b       	sbis	0x09, 2	; 9
 54c:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.btnLoop = ioport_get_pin_level(PIN_BUTTONS);
 54e:	18 96       	adiw	r26, 0x08	; 8
 550:	8c 93       	st	X, r24
 552:	18 97       	sbiw	r26, 0x08	; 8
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	35 9b       	sbis	0x06, 5	; 6
 558:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.FS1_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 55a:	1b 96       	adiw	r26, 0x0b	; 11
 55c:	8c 93       	st	X, r24
 55e:	1b 97       	sbiw	r26, 0x0b	; 11
				break;
 560:	69 c0       	rjmp	.+210    	; 0x634 <__stack+0x135>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 562:	8b b1       	in	r24, 0x0b	; 11
 564:	80 62       	ori	r24, 0x20	; 32
 566:	8b b9       	out	0x0b, r24	; 11
 568:	8b b1       	in	r24, 0x0b	; 11
 56a:	80 64       	ori	r24, 0x40	; 64
 56c:	8b b9       	out	0x0b, r24	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 56e:	8b b1       	in	r24, 0x0b	; 11
 570:	8f 77       	andi	r24, 0x7F	; 127
 572:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	4c 9b       	sbis	0x09, 4	; 9
 578:	80 e0       	ldi	r24, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = ioport_get_pin_level(PIN_MIDI_SWITCH);
 57a:	12 96       	adiw	r26, 0x02	; 2
 57c:	8c 93       	st	X, r24
 57e:	12 97       	sbiw	r26, 0x02	; 2
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	35 9b       	sbis	0x06, 5	; 6
 584:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.FS1_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 586:	19 96       	adiw	r26, 0x09	; 9
 588:	8c 93       	st	X, r24
 58a:	19 97       	sbiw	r26, 0x09	; 9
				break;
 58c:	53 c0       	rjmp	.+166    	; 0x634 <__stack+0x135>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 58e:	8b b1       	in	r24, 0x0b	; 11
 590:	8f 7d       	andi	r24, 0xDF	; 223
 592:	8b b9       	out	0x0b, r24	; 11
 594:	8b b1       	in	r24, 0x0b	; 11
 596:	8f 7b       	andi	r24, 0xBF	; 191
 598:	8b b9       	out	0x0b, r24	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 59a:	8b b1       	in	r24, 0x0b	; 11
 59c:	80 68       	ori	r24, 0x80	; 128
 59e:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	4c 9b       	sbis	0x09, 4	; 9
 5a4:	60 e0       	ldi	r22, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 5a6:	d6 2f       	mov	r29, r22
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	4a 9b       	sbis	0x09, 2	; 9
 5ac:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.btnCh2 = ioport_get_pin_level(PIN_BUTTONS);
 5ae:	14 96       	adiw	r26, 0x04	; 4
 5b0:	8c 93       	st	X, r24
 5b2:	14 97       	sbiw	r26, 0x04	; 4
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	35 9b       	sbis	0x06, 5	; 6
 5b8:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.FS1_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 5ba:	1a 96       	adiw	r26, 0x0a	; 10
 5bc:	8c 93       	st	X, r24
 5be:	1a 97       	sbiw	r26, 0x0a	; 10
				break;
 5c0:	39 c0       	rjmp	.+114    	; 0x634 <__stack+0x135>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5c2:	8b b1       	in	r24, 0x0b	; 11
 5c4:	80 62       	ori	r24, 0x20	; 32
 5c6:	8b b9       	out	0x0b, r24	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5c8:	8b b1       	in	r24, 0x0b	; 11
 5ca:	8f 7b       	andi	r24, 0xBF	; 191
 5cc:	8b b9       	out	0x0b, r24	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5ce:	8b b1       	in	r24, 0x0b	; 11
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	4a 9b       	sbis	0x09, 2	; 9
 5d8:	80 e0       	ldi	r24, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = ioport_get_pin_level(PIN_BUTTONS);
 5da:	15 96       	adiw	r26, 0x05	; 5
 5dc:	8c 93       	st	X, r24
 5de:	15 97       	sbiw	r26, 0x05	; 5
				break;
 5e0:	29 c0       	rjmp	.+82     	; 0x634 <__stack+0x135>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5e2:	8b b1       	in	r24, 0x0b	; 11
 5e4:	8f 7d       	andi	r24, 0xDF	; 223
 5e6:	8b b9       	out	0x0b, r24	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5e8:	8b b1       	in	r24, 0x0b	; 11
 5ea:	80 64       	ori	r24, 0x40	; 64
 5ec:	8b b9       	out	0x0b, r24	; 11
 5ee:	8b b1       	in	r24, 0x0b	; 11
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	4c 9b       	sbis	0x09, 4	; 9
 5f8:	60 e0       	ldi	r22, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[1] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 5fa:	c6 2f       	mov	r28, r22
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	4a 9b       	sbis	0x09, 2	; 9
 600:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.btnCh4 = ioport_get_pin_level(PIN_BUTTONS);
 602:	16 96       	adiw	r26, 0x06	; 6
 604:	8c 93       	st	X, r24
 606:	16 97       	sbiw	r26, 0x06	; 6
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	35 9b       	sbis	0x06, 5	; 6
 60c:	80 e0       	ldi	r24, 0x00	; 0
				buttonsState.FS2_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 60e:	1d 96       	adiw	r26, 0x0d	; 13
 610:	8c 93       	st	X, r24
 612:	1d 97       	sbiw	r26, 0x0d	; 13
				break;
 614:	0f c0       	rjmp	.+30     	; 0x634 <__stack+0x135>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 616:	8b b1       	in	r24, 0x0b	; 11
 618:	80 62       	ori	r24, 0x20	; 32
 61a:	8b b9       	out	0x0b, r24	; 11
 61c:	8b b1       	in	r24, 0x0b	; 11
 61e:	80 64       	ori	r24, 0x40	; 64
 620:	8b b9       	out	0x0b, r24	; 11
 622:	8b b1       	in	r24, 0x0b	; 11
 624:	80 68       	ori	r24, 0x80	; 128
 626:	8b b9       	out	0x0b, r24	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	4a 9b       	sbis	0x09, 2	; 9
 62c:	80 e0       	ldi	r24, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = ioport_get_pin_level(PIN_BUTTONS);
 62e:	13 96       	adiw	r26, 0x03	; 3
 630:	8c 93       	st	X, r24
 632:	13 97       	sbiw	r26, 0x03	; 3

SH100HW_Controls_t SH100HW_GetControlsState()
{
	SH100HW_Controls_t buttonsState;
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 634:	9f 5f       	subi	r25, 0xFF	; 255
 636:	98 30       	cpi	r25, 0x08	; 8
 638:	08 f4       	brcc	.+2      	; 0x63c <__stack+0x13d>
 63a:	3f cf       	rjmp	.-386    	; 0x4ba <SH100HW_GetControlsState+0xa>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 63c:	6c 2f       	mov	r22, r28
 63e:	70 e0       	ldi	r23, 0x00	; 0
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	43 2f       	mov	r20, r19
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	44 0f       	add	r20, r20
 64a:	55 1f       	adc	r21, r21
 64c:	44 0f       	add	r20, r20
 64e:	55 1f       	adc	r21, r21
 650:	82 2f       	mov	r24, r18
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6d 2b       	or	r22, r29
 662:	46 2b       	or	r20, r22
 664:	84 2b       	or	r24, r20
 666:	8c 93       	st	X, r24
	
	return buttonsState;
}
 668:	cd 01       	movw	r24, r26
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

00001364 <writeShiftRegs>:

void writeShiftRegs(uint16_t data)
{
    1364:	ac 01       	movw	r20, r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1366:	88 b1       	in	r24, 0x08	; 8
    1368:	8f 7e       	andi	r24, 0xEF	; 239
    136a:	88 b9       	out	0x08, r24	; 8
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	12 c0       	rjmp	.+36     	; 0x1394 <writeShiftRegs+0x30>
    1370:	95 b1       	in	r25, 0x05	; 5
    1372:	9f 7d       	andi	r25, 0xDF	; 223
    1374:	95 b9       	out	0x05, r25	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1376:	55 23       	and	r21, r21
    1378:	24 f4       	brge	.+8      	; 0x1382 <writeShiftRegs+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    137a:	85 b1       	in	r24, 0x05	; 5
    137c:	88 60       	ori	r24, 0x08	; 8
    137e:	85 b9       	out	0x05, r24	; 5
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <writeShiftRegs+0x24>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1382:	85 b1       	in	r24, 0x05	; 5
    1384:	87 7f       	andi	r24, 0xF7	; 247
    1386:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1388:	95 b1       	in	r25, 0x05	; 5
    138a:	90 62       	ori	r25, 0x20	; 32
    138c:	95 b9       	out	0x05, r25	; 5
	{
		ioport_set_pin_level(PIN_SCK, 0);
		ioport_set_pin_level(PIN_MOSI, (data & 0x8000));
		ioport_set_pin_level(PIN_SCK, 1);
		data = data << 1;
    138e:	44 0f       	add	r20, r20
    1390:	55 1f       	adc	r21, r21
}

void writeShiftRegs(uint16_t data)
{
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    1392:	2f 5f       	subi	r18, 0xFF	; 255
    1394:	20 31       	cpi	r18, 0x10	; 16
    1396:	60 f3       	brcs	.-40     	; 0x1370 <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1398:	85 b1       	in	r24, 0x05	; 5
    139a:	8f 7d       	andi	r24, 0xDF	; 223
    139c:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    139e:	88 b1       	in	r24, 0x08	; 8
    13a0:	80 61       	ori	r24, 0x10	; 16
    13a2:	88 b9       	out	0x08, r24	; 8
    13a4:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000002c8 <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	29 97       	sbiw	r28, 0x09	; 9
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
	if(!isPAOk) SH100CTRL_MuteAmp();
 2dc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <isPAOk>
 2e0:	81 11       	cpse	r24, r1
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <SH100HW_MainTask+0x1e>
 2e4:	4a db       	rcall	.-2412   	; 0xfffff97a <__eeprom_end+0xff7ef97a>
	
	//SH100HW_ReadControlsState();
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 2e6:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <blinkCounter>
 2ea:	89 e2       	ldi	r24, 0x29	; 41
 2ec:	98 9f       	mul	r25, r24
 2ee:	81 2d       	mov	r24, r1
 2f0:	11 24       	eor	r1, r1
 2f2:	86 95       	lsr	r24
 2f4:	86 95       	lsr	r24
 2f6:	39 2f       	mov	r19, r25
 2f8:	29 e1       	ldi	r18, 0x19	; 25
 2fa:	82 9f       	mul	r24, r18
 2fc:	30 19       	sub	r19, r0
 2fe:	11 24       	eor	r1, r1
 300:	31 11       	cpse	r19, r1
 302:	08 c0       	rjmp	.+16     	; 0x314 <SH100HW_MainTask+0x4c>
 304:	99 23       	and	r25, r25
 306:	31 f0       	breq	.+12     	; 0x314 <SH100HW_MainTask+0x4c>
	{
		fastBlink = !fastBlink;
 308:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <fastBlink>
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	82 27       	eor	r24, r18
 310:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <fastBlink>
	}
	
	if(blinkCounter == 50)
 314:	92 33       	cpi	r25, 0x32	; 50
 316:	51 f4       	brne	.+20     	; 0x32c <SH100HW_MainTask+0x64>
	{
		blinkCounter = 0;
 318:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <blinkCounter>
		slowBlink = !slowBlink;
 31c:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <slowBlink>
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 27       	eor	r24, r25
 324:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	47 c0       	rjmp	.+142    	; 0x3ba <SH100HW_MainTask+0xf2>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 32c:	9f 5f       	subi	r25, 0xFF	; 255
 32e:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <blinkCounter>
 332:	fa cf       	rjmp	.-12     	; 0x328 <SH100HW_MainTask+0x60>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 334:	82 2f       	mov	r24, r18
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	fc 01       	movw	r30, r24
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	e6 5c       	subi	r30, 0xC6	; 198
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	01 90       	ld	r0, Z+
 344:	f0 81       	ld	r31, Z
 346:	e0 2d       	mov	r30, r0
 348:	30 81       	ld	r19, Z
 34a:	31 30       	cpi	r19, 0x01	; 1
 34c:	71 f0       	breq	.+28     	; 0x36a <SH100HW_MainTask+0xa2>
 34e:	28 f0       	brcs	.+10     	; 0x35a <SH100HW_MainTask+0x92>
 350:	32 30       	cpi	r19, 0x02	; 2
 352:	a1 f0       	breq	.+40     	; 0x37c <SH100HW_MainTask+0xb4>
 354:	33 30       	cpi	r19, 0x03	; 3
 356:	e1 f0       	breq	.+56     	; 0x390 <SH100HW_MainTask+0xc8>
 358:	28 c0       	rjmp	.+80     	; 0x3aa <SH100HW_MainTask+0xe2>
		{
			case LED_OFF: isLedOn[i] = false; break;
 35a:	e1 e0       	ldi	r30, 0x01	; 1
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	ec 0f       	add	r30, r28
 360:	fd 1f       	adc	r31, r29
 362:	e8 0f       	add	r30, r24
 364:	f9 1f       	adc	r31, r25
 366:	10 82       	st	Z, r1
 368:	27 c0       	rjmp	.+78     	; 0x3b8 <SH100HW_MainTask+0xf0>
			case LED_ON: isLedOn[i] = true; break;
 36a:	e1 e0       	ldi	r30, 0x01	; 1
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ec 0f       	add	r30, r28
 370:	fd 1f       	adc	r31, r29
 372:	e8 0f       	add	r30, r24
 374:	f9 1f       	adc	r31, r25
 376:	31 e0       	ldi	r19, 0x01	; 1
 378:	30 83       	st	Z, r19
 37a:	1e c0       	rjmp	.+60     	; 0x3b8 <SH100HW_MainTask+0xf0>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 37c:	e1 e0       	ldi	r30, 0x01	; 1
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	ec 0f       	add	r30, r28
 382:	fd 1f       	adc	r31, r29
 384:	e8 0f       	add	r30, r24
 386:	f9 1f       	adc	r31, r25
 388:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <fastBlink>
 38c:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 38e:	14 c0       	rjmp	.+40     	; 0x3b8 <SH100HW_MainTask+0xf0>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 390:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <slowBlink>
 394:	e1 e0       	ldi	r30, 0x01	; 1
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	ec 0f       	add	r30, r28
 39a:	fd 1f       	adc	r31, r29
 39c:	e8 0f       	add	r30, r24
 39e:	f9 1f       	adc	r31, r25
 3a0:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	83 27       	eor	r24, r19
 3a6:	88 87       	std	Y+8, r24	; 0x08
				break;
 3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <SH100HW_MainTask+0xf0>
			}	
			default: isLedOn[i] = LED_OFF;
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ec 0f       	add	r30, r28
 3b0:	fd 1f       	adc	r31, r29
 3b2:	e8 0f       	add	r30, r24
 3b4:	f9 1f       	adc	r31, r25
 3b6:	10 82       	st	Z, r1
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 3b8:	2f 5f       	subi	r18, 0xFF	; 255
 3ba:	29 30       	cpi	r18, 0x09	; 9
 3bc:	08 f4       	brcc	.+2      	; 0x3c0 <SH100HW_MainTask+0xf8>
 3be:	ba cf       	rjmp	.-140    	; 0x334 <SH100HW_MainTask+0x6c>
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3c0:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 3c4:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <RELAY_1_3>
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3ce:	ac 01       	movw	r20, r24
 3d0:	42 2b       	or	r20, r18
 3d2:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 3d4:	9b 81       	ldd	r25, Y+3	; 0x03
 3d6:	89 2f       	mov	r24, r25
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 3e2:	82 2b       	or	r24, r18
 3e4:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 3e6:	29 81       	ldd	r18, Y+1	; 0x01
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	22 0f       	add	r18, r18
 3ec:	33 1f       	adc	r19, r19
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	22 0f       	add	r18, r18
 3f4:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 3f6:	82 2b       	or	r24, r18
 3f8:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 3fa:	2a 81       	ldd	r18, Y+2	; 0x02
 3fc:	50 e1       	ldi	r21, 0x10	; 16
 3fe:	25 9f       	mul	r18, r21
 400:	90 01       	movw	r18, r0
 402:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 404:	28 2b       	or	r18, r24
 406:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 408:	4c 81       	ldd	r20, Y+4	; 0x04
 40a:	80 e2       	ldi	r24, 0x20	; 32
 40c:	48 9f       	mul	r20, r24
 40e:	a0 01       	movw	r20, r0
 410:	11 24       	eor	r1, r1
 412:	24 2b       	or	r18, r20
 414:	35 2b       	or	r19, r21
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 416:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <RELAY_8_16>
 41a:	80 e8       	ldi	r24, 0x80	; 128
 41c:	48 9f       	mul	r20, r24
 41e:	a0 01       	movw	r20, r0
 420:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 422:	24 2b       	or	r18, r20
 424:	35 2b       	or	r19, r21
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 426:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <RELAY_2_4>
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	98 2f       	mov	r25, r24
 42e:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 430:	28 2b       	or	r18, r24
 432:	39 2b       	or	r19, r25
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 434:	8e 81       	ldd	r24, Y+6	; 0x06
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	98 2f       	mov	r25, r24
 43a:	88 27       	eor	r24, r24
 43c:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 43e:	28 2b       	or	r18, r24
 440:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 442:	8f 81       	ldd	r24, Y+7	; 0x07
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	98 2f       	mov	r25, r24
 448:	88 27       	eor	r24, r24
 44a:	99 0f       	add	r25, r25
 44c:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 44e:	28 2b       	or	r18, r24
 450:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 452:	88 85       	ldd	r24, Y+8	; 0x08
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	98 2f       	mov	r25, r24
 458:	88 27       	eor	r24, r24
 45a:	99 0f       	add	r25, r25
 45c:	99 0f       	add	r25, r25
 45e:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 460:	28 2b       	or	r18, r24
 462:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 464:	99 85       	ldd	r25, Y+9	; 0x09
 466:	89 2f       	mov	r24, r25
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	98 2f       	mov	r25, r24
 46c:	88 27       	eor	r24, r24
 46e:	92 95       	swap	r25
 470:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 472:	28 2b       	or	r18, r24
 474:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
 476:	4d 81       	ldd	r20, Y+5	; 0x05
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	54 2f       	mov	r21, r20
 47c:	44 27       	eor	r20, r20
 47e:	52 95       	swap	r21
 480:	55 0f       	add	r21, r21
 482:	50 7e       	andi	r21, 0xE0	; 224
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 484:	24 2b       	or	r18, r20
 486:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
								((uint16_t)RELAY_AB << (8+6)) |
 488:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <RELAY_AB>
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	90 e4       	ldi	r25, 0x40	; 64
 490:	89 9f       	mul	r24, r25
 492:	90 2d       	mov	r25, r0
 494:	88 27       	eor	r24, r24
 496:	11 24       	eor	r1, r1
								(0 << (8+7));

	writeShiftRegs(resultSendWord);
 498:	82 2b       	or	r24, r18
 49a:	93 2b       	or	r25, r19
 49c:	63 d7       	rcall	.+3782   	; 0x1364 <writeShiftRegs>
 49e:	29 96       	adiw	r28, 0x09	; 9
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	08 95       	ret

Disassembly of section .text.UART_init:

00001854 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    1854:	88 ed       	ldi	r24, 0xD8	; 216
    1856:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00); 
    185a:	86 e0       	ldi	r24, 0x06	; 6
    185c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0;
    1860:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=19;
    1864:	83 e1       	ldi	r24, 0x13	; 19
    1866:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    186a:	08 95       	ret

Disassembly of section .text.__vector_18:

00001058 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
    1058:	1f 92       	push	r1
    105a:	1f b6       	in	r1, 0x3f	; 63
    105c:	1f 92       	push	r1
    105e:	11 24       	eor	r1, r1
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
    1068:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
    106c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
    1070:	8c 71       	andi	r24, 0x1C	; 28
    1072:	d1 f4       	brne	.+52     	; 0x10a8 <__vector_18+0x50>
	{
		rx_buffer0[rx_wr_index++] = data;
    1074:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <rx_wr_index>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	8e 0f       	add	r24, r30
    107c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <rx_wr_index>
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	e6 59       	subi	r30, 0x96	; 150
    1084:	fe 4f       	sbci	r31, 0xFE	; 254
    1086:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
    1088:	80 31       	cpi	r24, 0x10	; 16
    108a:	11 f4       	brne	.+4      	; 0x1090 <__vector_18+0x38>
    108c:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
    1090:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_counter>
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <rx_counter>
    109a:	80 31       	cpi	r24, 0x10	; 16
    109c:	29 f4       	brne	.+10     	; 0x10a8 <__vector_18+0x50>
		{
			rx_counter=0;
    109e:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <rx_counter>
			rx_buffer_overflow=1;
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <rx_buffer_overflow>
		}
	}
}
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	9f 91       	pop	r25
    10ae:	8f 91       	pop	r24
    10b0:	1f 90       	pop	r1
    10b2:	1f be       	out	0x3f, r1	; 63
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

Disassembly of section .text.UART_PopWord:

000014fe <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
    14fe:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <rx_counter>
    1502:	88 23       	and	r24, r24
    1504:	e1 f3       	breq	.-8      	; 0x14fe <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
    1506:	e0 91 7a 01 	lds	r30, 0x017A	; 0x80017a <rx_rd_index>
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	9e 0f       	add	r25, r30
    150e:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <rx_rd_index>
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	e6 59       	subi	r30, 0x96	; 150
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
    151a:	90 31       	cpi	r25, 0x10	; 16
    151c:	11 f4       	brne	.+4      	; 0x1522 <UART_PopWord+0x24>
    151e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <rx_rd_index>
	#endif
	
	cpu_irq_disable();
    1522:	f8 94       	cli
	--rx_counter;
    1524:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <rx_counter>
    1528:	91 50       	subi	r25, 0x01	; 1
    152a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <rx_counter>
	cpu_irq_enable();
    152e:	78 94       	sei
	return data;
}
    1530:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000018ec <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <rx_counter>
    18f2:	91 11       	cpse	r25, r1
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <UART_RxBufferNotEmpty+0xc>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
}
    18f8:	08 95       	ret

Disassembly of section .text.__vector_20:

000011b4 <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
    11b4:	1f 92       	push	r1
    11b6:	1f b6       	in	r1, 0x3f	; 63
    11b8:	1f 92       	push	r1
    11ba:	11 24       	eor	r1, r1
    11bc:	8f 93       	push	r24
    11be:	ef 93       	push	r30
    11c0:	ff 93       	push	r31
	if (tx_counter)
    11c2:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <tx_counter>
    11c6:	88 23       	and	r24, r24
    11c8:	a9 f0       	breq	.+42     	; 0x11f4 <__vector_20+0x40>
	{
		--tx_counter;
    11ca:	81 50       	subi	r24, 0x01	; 1
    11cc:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
    11d0:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <tx_rd_index>
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	8e 0f       	add	r24, r30
    11d8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <tx_rd_index>
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	ef 59       	subi	r30, 0x9F	; 159
    11e0:	fe 4f       	sbci	r31, 0xFE	; 254
    11e2:	80 81       	ld	r24, Z
    11e4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
    11e8:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <tx_rd_index>
    11ec:	88 30       	cpi	r24, 0x08	; 8
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__vector_20+0x40>
    11f0:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <tx_rd_index>
		#endif
	}
}
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	8f 91       	pop	r24
    11fa:	1f 90       	pop	r1
    11fc:	1f be       	out	0x3f, r1	; 63
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

Disassembly of section .text.UART_PushWord:

000012dc <UART_PushWord>:

// Write a character to the USART Transmitter buffer
void UART_PushWord(uint8_t c)
{	
	while (tx_counter == TX_BUFFER_SIZE);
    12dc:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <tx_counter>
    12e0:	98 30       	cpi	r25, 0x08	; 8
    12e2:	e1 f3       	breq	.-8      	; 0x12dc <UART_PushWord>
	
	cpu_irq_disable();
    12e4:	f8 94       	cli
	
	if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
    12e6:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <tx_counter>
    12ea:	91 11       	cpse	r25, r1
    12ec:	04 c0       	rjmp	.+8      	; 0x12f6 <UART_PushWord+0x1a>
    12ee:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
    12f2:	25 fd       	sbrc	r18, 5
    12f4:	12 c0       	rjmp	.+36     	; 0x131a <UART_PushWord+0x3e>
	{
		tx_buffer[tx_wr_index++] = c;
    12f6:	e0 91 7c 01 	lds	r30, 0x017C	; 0x80017c <tx_wr_index>
    12fa:	21 e0       	ldi	r18, 0x01	; 1
    12fc:	2e 0f       	add	r18, r30
    12fe:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <tx_wr_index>
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	ef 59       	subi	r30, 0x9F	; 159
    1306:	fe 4f       	sbci	r31, 0xFE	; 254
    1308:	80 83       	st	Z, r24
		
		#if TX_BUFFER_SIZE0 != 256
			if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
    130a:	28 30       	cpi	r18, 0x08	; 8
    130c:	11 f4       	brne	.+4      	; 0x1312 <UART_PushWord+0x36>
    130e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <tx_wr_index>
		#endif
		
		++tx_counter;
    1312:	9f 5f       	subi	r25, 0xFF	; 255
    1314:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <tx_counter>
    1318:	02 c0       	rjmp	.+4      	; 0x131e <UART_PushWord+0x42>
	}
	else UDR0=c;
    131a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	cpu_irq_enable();
    131e:	78 94       	sei
    1320:	08 95       	ret

Disassembly of section .text:

00000cc8 <__floatunsisf>:
 cc8:	e8 94       	clt
 cca:	09 c0       	rjmp	.+18     	; 0xcde <__floatsisf+0x12>

00000ccc <__floatsisf>:
 ccc:	97 fb       	bst	r25, 7
 cce:	3e f4       	brtc	.+14     	; 0xcde <__floatsisf+0x12>
 cd0:	90 95       	com	r25
 cd2:	80 95       	com	r24
 cd4:	70 95       	com	r23
 cd6:	61 95       	neg	r22
 cd8:	7f 4f       	sbci	r23, 0xFF	; 255
 cda:	8f 4f       	sbci	r24, 0xFF	; 255
 cdc:	9f 4f       	sbci	r25, 0xFF	; 255
 cde:	99 23       	and	r25, r25
 ce0:	a9 f0       	breq	.+42     	; 0xd0c <__floatsisf+0x40>
 ce2:	f9 2f       	mov	r31, r25
 ce4:	96 e9       	ldi	r25, 0x96	; 150
 ce6:	bb 27       	eor	r27, r27
 ce8:	93 95       	inc	r25
 cea:	f6 95       	lsr	r31
 cec:	87 95       	ror	r24
 cee:	77 95       	ror	r23
 cf0:	67 95       	ror	r22
 cf2:	b7 95       	ror	r27
 cf4:	f1 11       	cpse	r31, r1
 cf6:	f8 cf       	rjmp	.-16     	; 0xce8 <__floatsisf+0x1c>
 cf8:	fa f4       	brpl	.+62     	; 0xd38 <__floatsisf+0x6c>
 cfa:	bb 0f       	add	r27, r27
 cfc:	11 f4       	brne	.+4      	; 0xd02 <__floatsisf+0x36>
 cfe:	60 ff       	sbrs	r22, 0
 d00:	1b c0       	rjmp	.+54     	; 0xd38 <__floatsisf+0x6c>
 d02:	6f 5f       	subi	r22, 0xFF	; 255
 d04:	7f 4f       	sbci	r23, 0xFF	; 255
 d06:	8f 4f       	sbci	r24, 0xFF	; 255
 d08:	9f 4f       	sbci	r25, 0xFF	; 255
 d0a:	16 c0       	rjmp	.+44     	; 0xd38 <__floatsisf+0x6c>
 d0c:	88 23       	and	r24, r24
 d0e:	11 f0       	breq	.+4      	; 0xd14 <__floatsisf+0x48>
 d10:	96 e9       	ldi	r25, 0x96	; 150
 d12:	11 c0       	rjmp	.+34     	; 0xd36 <__floatsisf+0x6a>
 d14:	77 23       	and	r23, r23
 d16:	21 f0       	breq	.+8      	; 0xd20 <__floatsisf+0x54>
 d18:	9e e8       	ldi	r25, 0x8E	; 142
 d1a:	87 2f       	mov	r24, r23
 d1c:	76 2f       	mov	r23, r22
 d1e:	05 c0       	rjmp	.+10     	; 0xd2a <__floatsisf+0x5e>
 d20:	66 23       	and	r22, r22
 d22:	71 f0       	breq	.+28     	; 0xd40 <__floatsisf+0x74>
 d24:	96 e8       	ldi	r25, 0x86	; 134
 d26:	86 2f       	mov	r24, r22
 d28:	70 e0       	ldi	r23, 0x00	; 0
 d2a:	60 e0       	ldi	r22, 0x00	; 0
 d2c:	2a f0       	brmi	.+10     	; 0xd38 <__floatsisf+0x6c>
 d2e:	9a 95       	dec	r25
 d30:	66 0f       	add	r22, r22
 d32:	77 1f       	adc	r23, r23
 d34:	88 1f       	adc	r24, r24
 d36:	da f7       	brpl	.-10     	; 0xd2e <__floatsisf+0x62>
 d38:	88 0f       	add	r24, r24
 d3a:	96 95       	lsr	r25
 d3c:	87 95       	ror	r24
 d3e:	97 f9       	bld	r25, 7
 d40:	08 95       	ret

Disassembly of section .text:

00001954 <__gesf2>:
    1954:	7c dc       	rcall	.-1800   	; 0x124e <__fp_cmp>
    1956:	08 f4       	brcc	.+2      	; 0x195a <__gesf2+0x6>
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	08 95       	ret

Disassembly of section .text:

0000124e <__fp_cmp>:
    124e:	99 0f       	add	r25, r25
    1250:	00 08       	sbc	r0, r0
    1252:	55 0f       	add	r21, r21
    1254:	aa 0b       	sbc	r26, r26
    1256:	e0 e8       	ldi	r30, 0x80	; 128
    1258:	fe ef       	ldi	r31, 0xFE	; 254
    125a:	16 16       	cp	r1, r22
    125c:	17 06       	cpc	r1, r23
    125e:	e8 07       	cpc	r30, r24
    1260:	f9 07       	cpc	r31, r25
    1262:	c0 f0       	brcs	.+48     	; 0x1294 <__fp_cmp+0x46>
    1264:	12 16       	cp	r1, r18
    1266:	13 06       	cpc	r1, r19
    1268:	e4 07       	cpc	r30, r20
    126a:	f5 07       	cpc	r31, r21
    126c:	98 f0       	brcs	.+38     	; 0x1294 <__fp_cmp+0x46>
    126e:	62 1b       	sub	r22, r18
    1270:	73 0b       	sbc	r23, r19
    1272:	84 0b       	sbc	r24, r20
    1274:	95 0b       	sbc	r25, r21
    1276:	39 f4       	brne	.+14     	; 0x1286 <__fp_cmp+0x38>
    1278:	0a 26       	eor	r0, r26
    127a:	61 f0       	breq	.+24     	; 0x1294 <__fp_cmp+0x46>
    127c:	23 2b       	or	r18, r19
    127e:	24 2b       	or	r18, r20
    1280:	25 2b       	or	r18, r21
    1282:	21 f4       	brne	.+8      	; 0x128c <__fp_cmp+0x3e>
    1284:	08 95       	ret
    1286:	0a 26       	eor	r0, r26
    1288:	09 f4       	brne	.+2      	; 0x128c <__fp_cmp+0x3e>
    128a:	a1 40       	sbci	r26, 0x01	; 1
    128c:	a6 95       	lsr	r26
    128e:	8f ef       	ldi	r24, 0xFF	; 255
    1290:	81 1d       	adc	r24, r1
    1292:	81 1d       	adc	r24, r1
    1294:	08 95       	ret

Disassembly of section .text.libgcc:

0000180a <__movmemx_qi>:
    180a:	99 27       	eor	r25, r25

0000180c <__movmemx_hi>:
    180c:	77 fd       	sbrc	r23, 7
    180e:	05 c0       	rjmp	.+10     	; 0x181a <__movmemx_hi+0xe>
    1810:	05 90       	lpm	r0, Z+
    1812:	0d 92       	st	X+, r0
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	e1 f7       	brne	.-8      	; 0x1810 <__movmemx_hi+0x4>
    1818:	08 95       	ret
    181a:	01 90       	ld	r0, Z+
    181c:	0d 92       	st	X+, r0
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	e1 f7       	brne	.-8      	; 0x181a <__movmemx_hi+0xe>
    1822:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001998 <_fini>:
    1998:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000199a <__funcs_on_exit>:
    199a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000199c <__simulator_exit>:
    199c:	08 95       	ret

Disassembly of section .text.exit:

000018fa <exit>:
    18fa:	ec 01       	movw	r28, r24
    18fc:	4e d0       	rcall	.+156    	; 0x199a <__funcs_on_exit>
    18fe:	4c d0       	rcall	.+152    	; 0x1998 <_fini>
    1900:	ce 01       	movw	r24, r28
    1902:	4c d0       	rcall	.+152    	; 0x199c <__simulator_exit>
    1904:	ce 01       	movw	r24, r28
    1906:	4b d0       	rcall	.+150    	; 0x199e <_Exit>

Disassembly of section .text.__simple_malloc:

00000a24 <__simple_malloc>:
 a24:	a2 e0       	ldi	r26, 0x02	; 2
 a26:	b0 e0       	ldi	r27, 0x00	; 0
 a28:	e7 e1       	ldi	r30, 0x17	; 23
 a2a:	f5 e0       	ldi	r31, 0x05	; 5
 a2c:	3b c5       	rjmp	.+2678   	; 0x14a4 <__prologue_saves__+0x14>
 a2e:	8c 01       	movw	r16, r24
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	01 15       	cp	r16, r1
 a36:	11 05       	cpc	r17, r1
 a38:	09 f4       	brne	.+2      	; 0xa3c <__simple_malloc+0x18>
 a3a:	53 c0       	rjmp	.+166    	; 0xae2 <__simple_malloc+0xbe>
 a3c:	89 2b       	or	r24, r25
 a3e:	71 f0       	breq	.+28     	; 0xa5c <__simple_malloc+0x38>
 a40:	02 30       	cpi	r16, 0x02	; 2
 a42:	11 05       	cpc	r17, r1
 a44:	10 f4       	brcc	.+4      	; 0xa4a <__simple_malloc+0x26>
 a46:	02 e0       	ldi	r16, 0x02	; 2
 a48:	10 e0       	ldi	r17, 0x00	; 0
 a4a:	c8 01       	movw	r24, r16
 a4c:	d9 da       	rcall	.-2638   	; 0x0 <__vectors>
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	09 f0       	breq	.+2      	; 0xa54 <__simple_malloc+0x30>
 a52:	4e c0       	rjmp	.+156    	; 0xaf0 <__simple_malloc+0xcc>
 a54:	92 e0       	ldi	r25, 0x02	; 2
 a56:	e9 2e       	mov	r14, r25
 a58:	f1 2c       	mov	r15, r1
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__simple_malloc+0x40>
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	e8 2e       	mov	r14, r24
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	f8 2e       	mov	r15, r24
 a64:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <end.1483>
 a68:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <end.1483+0x1>
 a6c:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <cur.1482>
 a70:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <cur.1482+0x1>
 a74:	82 1b       	sub	r24, r18
 a76:	93 0b       	sbc	r25, r19
 a78:	67 01       	movw	r12, r14
 a7a:	c0 0e       	add	r12, r16
 a7c:	d1 1e       	adc	r13, r17
 a7e:	80 17       	cp	r24, r16
 a80:	91 07       	cpc	r25, r17
 a82:	e8 f4       	brcc	.+58     	; 0xabe <__simple_malloc+0x9a>
 a84:	da 82       	std	Y+2, r13	; 0x02
 a86:	c9 82       	std	Y+1, r12	; 0x01
 a88:	ce 01       	movw	r24, r28
 a8a:	01 96       	adiw	r24, 0x01	; 1
 a8c:	46 d2       	rcall	.+1164   	; 0xf1a <__expand_heap>
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	19 f4       	brne	.+6      	; 0xa98 <__simple_malloc+0x74>
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	2c c0       	rjmp	.+88     	; 0xaf0 <__simple_malloc+0xcc>
 a98:	20 91 97 01 	lds	r18, 0x0197	; 0x800197 <end.1483>
 a9c:	30 91 98 01 	lds	r19, 0x0198	; 0x800198 <end.1483+0x1>
 aa0:	82 17       	cp	r24, r18
 aa2:	93 07       	cpc	r25, r19
 aa4:	21 f0       	breq	.+8      	; 0xaae <__simple_malloc+0x8a>
 aa6:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <cur.1482+0x1>
 aaa:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <cur.1482>
 aae:	29 81       	ldd	r18, Y+1	; 0x01
 ab0:	3a 81       	ldd	r19, Y+2	; 0x02
 ab2:	82 0f       	add	r24, r18
 ab4:	93 1f       	adc	r25, r19
 ab6:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <end.1483+0x1>
 aba:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <end.1483>
 abe:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <cur.1482>
 ac2:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <cur.1482+0x1>
 ac6:	cf 01       	movw	r24, r30
 ac8:	e1 14       	cp	r14, r1
 aca:	f1 04       	cpc	r15, r1
 acc:	19 f0       	breq	.+6      	; 0xad4 <__simple_malloc+0xb0>
 ace:	02 96       	adiw	r24, 0x02	; 2
 ad0:	11 83       	std	Z+1, r17	; 0x01
 ad2:	00 83       	st	Z, r16
 ad4:	ce 0e       	add	r12, r30
 ad6:	df 1e       	adc	r13, r31
 ad8:	d0 92 9a 01 	sts	0x019A, r13	; 0x80019a <cur.1482+0x1>
 adc:	c0 92 99 01 	sts	0x0199, r12	; 0x800199 <cur.1482>
 ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <__simple_malloc+0xcc>
 ae2:	00 97       	sbiw	r24, 0x00	; 0
 ae4:	09 f0       	breq	.+2      	; 0xae8 <__simple_malloc+0xc4>
 ae6:	af cf       	rjmp	.-162    	; 0xa46 <__simple_malloc+0x22>
 ae8:	7c 01       	movw	r14, r24
 aea:	01 e0       	ldi	r16, 0x01	; 1
 aec:	10 e0       	ldi	r17, 0x00	; 0
 aee:	ba cf       	rjmp	.-140    	; 0xa64 <__simple_malloc+0x40>
 af0:	22 96       	adiw	r28, 0x02	; 2
 af2:	e8 e0       	ldi	r30, 0x08	; 8
 af4:	f3 c4       	rjmp	.+2534   	; 0x14dc <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

0000199e <_Exit>:
    199e:	9a d3       	rcall	.+1844   	; 0x20d4 <__TEXT_REGION_LENGTH__+0xd4>

Disassembly of section .text.__expand_heap:

00000f1a <__expand_heap>:
 f1a:	fc 01       	movw	r30, r24
 f1c:	40 81       	ld	r20, Z
 f1e:	51 81       	ldd	r21, Z+1	; 0x01
 f20:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <__brkval>
 f24:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <__brkval+0x1>
 f28:	89 2b       	or	r24, r25
 f2a:	41 f4       	brne	.+16     	; 0xf3c <__expand_heap+0x22>
 f2c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <__malloc_heap_start>
 f30:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <__malloc_heap_start+0x1>
 f34:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <__brkval+0x1>
 f38:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <__brkval>
 f3c:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <__malloc_heap_end>
 f40:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <__malloc_heap_end+0x1>
 f44:	00 97       	sbiw	r24, 0x00	; 0
 f46:	19 f4       	brne	.+6      	; 0xf4e <__expand_heap+0x34>
 f48:	8d b7       	in	r24, 0x3d	; 61
 f4a:	9e b7       	in	r25, 0x3e	; 62
 f4c:	80 97       	sbiw	r24, 0x20	; 32
 f4e:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <__brkval>
 f52:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <__brkval+0x1>
 f56:	28 17       	cp	r18, r24
 f58:	39 07       	cpc	r19, r25
 f5a:	48 f0       	brcs	.+18     	; 0xf6e <__expand_heap+0x54>
 f5c:	8c e0       	ldi	r24, 0x0C	; 12
 f5e:	90 e0       	ldi	r25, 0x00	; 0
 f60:	90 93 7e 01 	sts	0x017E, r25	; 0x80017e <__errno_val+0x1>
 f64:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <__errno_val>
 f68:	80 e0       	ldi	r24, 0x00	; 0
 f6a:	90 e0       	ldi	r25, 0x00	; 0
 f6c:	08 95       	ret
 f6e:	82 1b       	sub	r24, r18
 f70:	93 0b       	sbc	r25, r19
 f72:	84 17       	cp	r24, r20
 f74:	95 07       	cpc	r25, r21
 f76:	90 f3       	brcs	.-28     	; 0xf5c <__expand_heap+0x42>
 f78:	42 0f       	add	r20, r18
 f7a:	53 1f       	adc	r21, r19
 f7c:	50 93 9c 01 	sts	0x019C, r21	; 0x80019c <__brkval+0x1>
 f80:	40 93 9b 01 	sts	0x019B, r20	; 0x80019b <__brkval>
 f84:	c9 01       	movw	r24, r18
 f86:	08 95       	ret

Disassembly of section .text.avrlibc:

0000176a <eeprom_read_block>:
    176a:	ba 01       	movw	r22, r20
    176c:	a9 01       	movw	r20, r18
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22

00001772 <eeprom_read_blraw>:
    1772:	fc 01       	movw	r30, r24
    1774:	f9 99       	sbic	0x1f, 1	; 31
    1776:	fe cf       	rjmp	.-4      	; 0x1774 <eeprom_read_blraw+0x2>
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <eeprom_read_blraw+0x14>
    177a:	f2 bd       	out	0x22, r31	; 34
    177c:	e1 bd       	out	0x21, r30	; 33
    177e:	f8 9a       	sbi	0x1f, 0	; 31
    1780:	31 96       	adiw	r30, 0x01	; 1
    1782:	00 b4       	in	r0, 0x20	; 32
    1784:	0d 92       	st	X+, r0
    1786:	41 50       	subi	r20, 0x01	; 1
    1788:	50 40       	sbci	r21, 0x00	; 0
    178a:	b8 f7       	brcc	.-18     	; 0x177a <eeprom_read_blraw+0x8>
    178c:	08 95       	ret

Disassembly of section .text.avrlibc:

000018bc <eeprom_read_byte>:
    18bc:	cb 01       	movw	r24, r22
    18be:	f9 99       	sbic	0x1f, 1	; 31
    18c0:	fe cf       	rjmp	.-4      	; 0x18be <eeprom_read_byte+0x2>
    18c2:	92 bd       	out	0x22, r25	; 34
    18c4:	81 bd       	out	0x21, r24	; 33
    18c6:	f8 9a       	sbi	0x1f, 0	; 31
    18c8:	99 27       	eor	r25, r25
    18ca:	80 b5       	in	r24, 0x20	; 32
    18cc:	08 95       	ret

Disassembly of section .text.avrlibc:

0000192c <eeprom_read_word>:
    192c:	cb 01       	movw	r24, r22
    192e:	a8 e1       	ldi	r26, 0x18	; 24
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	42 e0       	ldi	r20, 0x02	; 2
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	1d cf       	rjmp	.-454    	; 0x1772 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00001564 <eeprom_write_block>:
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	6b 01       	movw	r12, r22
    156c:	e8 2e       	mov	r14, r24
    156e:	ca 01       	movw	r24, r20
    1570:	42 2f       	mov	r20, r18
    1572:	73 2f       	mov	r23, r19
    1574:	09 c0       	rjmp	.+18     	; 0x1588 <eeprom_write_block+0x24>
    1576:	f6 01       	movw	r30, r12
    1578:	5e 2d       	mov	r21, r14
    157a:	e3 d1       	rcall	.+966    	; 0x1942 <__xload_1>
    157c:	26 2f       	mov	r18, r22
    157e:	38 d1       	rcall	.+624    	; 0x17f0 <eeprom_write_r18>
    1580:	3f ef       	ldi	r19, 0xFF	; 255
    1582:	c3 1a       	sub	r12, r19
    1584:	d3 0a       	sbc	r13, r19
    1586:	e3 0a       	sbc	r14, r19
    1588:	41 50       	subi	r20, 0x01	; 1
    158a:	70 40       	sbci	r23, 0x00	; 0
    158c:	a0 f7       	brcc	.-24     	; 0x1576 <eeprom_write_block+0x12>
    158e:	ef 90       	pop	r14
    1590:	df 90       	pop	r13
    1592:	cf 90       	pop	r12
    1594:	08 95       	ret

Disassembly of section .text.avrlibc:

000017ee <eeprom_write_byte>:
    17ee:	26 2f       	mov	r18, r22

000017f0 <eeprom_write_r18>:
    17f0:	f9 99       	sbic	0x1f, 1	; 31
    17f2:	fe cf       	rjmp	.-4      	; 0x17f0 <eeprom_write_r18>
    17f4:	1f ba       	out	0x1f, r1	; 31
    17f6:	92 bd       	out	0x22, r25	; 34
    17f8:	81 bd       	out	0x21, r24	; 33
    17fa:	20 bd       	out	0x20, r18	; 32
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	fa 9a       	sbi	0x1f, 2	; 31
    1802:	f9 9a       	sbi	0x1f, 1	; 31
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	01 96       	adiw	r24, 0x01	; 1
    1808:	08 95       	ret

Disassembly of section .text.avrlibc:

0000198c <eeprom_write_word>:
    198c:	30 df       	rcall	.-416    	; 0x17ee <eeprom_write_byte>
    198e:	27 2f       	mov	r18, r23
    1990:	2f cf       	rjmp	.-418    	; 0x17f0 <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

00001490 <__prologue_saves__>:
    1490:	2f 92       	push	r2
    1492:	3f 92       	push	r3
    1494:	4f 92       	push	r4
    1496:	5f 92       	push	r5
    1498:	6f 92       	push	r6
    149a:	7f 92       	push	r7
    149c:	8f 92       	push	r8
    149e:	9f 92       	push	r9
    14a0:	af 92       	push	r10
    14a2:	bf 92       	push	r11
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	ca 1b       	sub	r28, r26
    14ba:	db 0b       	sbc	r29, r27
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	0f be       	out	0x3f, r0	; 63
    14c4:	cd bf       	out	0x3d, r28	; 61
    14c6:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000014c8 <__epilogue_restores__>:
    14c8:	2a 88       	ldd	r2, Y+18	; 0x12
    14ca:	39 88       	ldd	r3, Y+17	; 0x11
    14cc:	48 88       	ldd	r4, Y+16	; 0x10
    14ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    14d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    14d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    14d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    14d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    14d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    14da:	b9 84       	ldd	r11, Y+9	; 0x09
    14dc:	c8 84       	ldd	r12, Y+8	; 0x08
    14de:	df 80       	ldd	r13, Y+7	; 0x07
    14e0:	ee 80       	ldd	r14, Y+6	; 0x06
    14e2:	fd 80       	ldd	r15, Y+5	; 0x05
    14e4:	0c 81       	ldd	r16, Y+4	; 0x04
    14e6:	1b 81       	ldd	r17, Y+3	; 0x03
    14e8:	aa 81       	ldd	r26, Y+2	; 0x02
    14ea:	b9 81       	ldd	r27, Y+1	; 0x01
    14ec:	ce 0f       	add	r28, r30
    14ee:	d1 1d       	adc	r29, r1
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	ed 01       	movw	r28, r26
    14fc:	08 95       	ret

Disassembly of section .text.libgcc:

00001942 <__xload_1>:
    1942:	57 fd       	sbrc	r21, 7
    1944:	60 81       	ld	r22, Z
    1946:	57 ff       	sbrs	r21, 7
    1948:	64 91       	lpm	r22, Z
    194a:	08 95       	ret
