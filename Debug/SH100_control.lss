
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000071e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000043  00800100  00800100  0000071e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000071e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000046  00000000  00000000  0000074d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000798  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029a6  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b79  00000000  00000000  000032fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b80  00000000  00000000  00003e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000049f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000379  00000000  00000000  00004c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f1  00000000  00000000  00004ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000053ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00000624  00000624  000006f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000054ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    0000000c  000005f8  000005f8  000006cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MIDI_IsStatusWord 00000008  0000061c  0000061c  000006f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MIDI_IsSysRealTime 0000000c  00000604  00000604  000006d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.MIDI_GetStatusType 00000040  000004ee  000004ee  000005c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.isEqualCommands 00000014  000005b6  000005b6  0000068a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.MIDICTRL_Init 0000007e  00000366  00000366  0000043a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.MIDICTRL_HandleCommand 00000080  000002e6  000002e6  000003ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .data.defaultCommands 00000018  00800143  00000632  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .progmemx.data.muteCommand 00000004  000001a4  000001a4  00000278  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .bss.channelNum 00000001  0080015b  0080015b  0000071e  2**0
                  ALLOC
 25 .bss.muteCommandEnabled 00000001  0080015c  0080015c  0000071e  2**0
                  ALLOC
 26 .bss.omniModeEnabled 00000001  0080015d  0080015d  0000071e  2**0
                  ALLOC
 27 .text.MIDI_ParserTask 0000013e  000001a8  000001a8  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss.state    00000001  0080015e  0080015e  0000071e  2**0
                  ALLOC
 29 .text.SH100CTRL_Init 00000054  00000448  00000448  0000051c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SH100CTRL_SwChannel1 00000002  00000626  00000626  000006fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SH100CTRL_MuteAmp 00000002  00000628  00000628  000006fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.UART_init 00000018  00000586  00000586  0000065a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.__vector_18 00000064  000003e4  000003e4  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.UART_PopWord 00000034  0000052e  0000052e  00000602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.UART_RxBufferNotEmpty 0000000e  000005dc  000005dc  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__vector_20 00000052  0000049c  0000049c  00000570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.libgcc  00000018  0000059e  0000059e  00000672  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.__dummy_fini 00000002  0000062a  0000062a  000006fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_funcs_on_exit 00000002  0000062c  0000062c  00000700  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_simulator_exit 00000002  0000062e  0000062e  00000702  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.exit    0000000e  000005ea  000005ea  000006be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text._Exit   00000002  00000630  00000630  00000704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.avrlibc 00000024  00000562  00000562  00000636  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc 00000012  000005ca  000005ca  0000069e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc 0000000c  00000610  00000610  000006e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	a9 c0       	rjmp	.+338    	; 0x154 <__ctors_end>
   2:	10 c3       	rjmp	.+1568   	; 0x624 <__bad_interrupt>
   4:	0f c3       	rjmp	.+1566   	; 0x624 <__bad_interrupt>
   6:	0e c3       	rjmp	.+1564   	; 0x624 <__bad_interrupt>
   8:	0d c3       	rjmp	.+1562   	; 0x624 <__bad_interrupt>
   a:	0c c3       	rjmp	.+1560   	; 0x624 <__bad_interrupt>
   c:	0b c3       	rjmp	.+1558   	; 0x624 <__bad_interrupt>
   e:	0a c3       	rjmp	.+1556   	; 0x624 <__bad_interrupt>
  10:	09 c3       	rjmp	.+1554   	; 0x624 <__bad_interrupt>
  12:	08 c3       	rjmp	.+1552   	; 0x624 <__bad_interrupt>
  14:	07 c3       	rjmp	.+1550   	; 0x624 <__bad_interrupt>
  16:	06 c3       	rjmp	.+1548   	; 0x624 <__bad_interrupt>
  18:	05 c3       	rjmp	.+1546   	; 0x624 <__bad_interrupt>
  1a:	04 c3       	rjmp	.+1544   	; 0x624 <__bad_interrupt>
  1c:	03 c3       	rjmp	.+1542   	; 0x624 <__bad_interrupt>
  1e:	02 c3       	rjmp	.+1540   	; 0x624 <__bad_interrupt>
  20:	01 c3       	rjmp	.+1538   	; 0x624 <__bad_interrupt>
  22:	00 c3       	rjmp	.+1536   	; 0x624 <__bad_interrupt>
  24:	df c1       	rjmp	.+958    	; 0x3e4 <__vector_18>
  26:	fe c2       	rjmp	.+1532   	; 0x624 <__bad_interrupt>
  28:	39 c2       	rjmp	.+1138   	; 0x49c <__vector_20>
  2a:	fc c2       	rjmp	.+1528   	; 0x624 <__bad_interrupt>
  2c:	fb c2       	rjmp	.+1526   	; 0x624 <__bad_interrupt>
  2e:	fa c2       	rjmp	.+1524   	; 0x624 <__bad_interrupt>
  30:	f9 c2       	rjmp	.+1522   	; 0x624 <__bad_interrupt>
  32:	f8 c2       	rjmp	.+1520   	; 0x624 <__bad_interrupt>
  34:	66 c2       	rjmp	.+1228   	; 0x502 <__stack+0x3>
  36:	77 c2       	rjmp	.+1262   	; 0x526 <__stack+0x27>
  38:	76 c2       	rjmp	.+1260   	; 0x526 <__stack+0x27>
  3a:	75 c2       	rjmp	.+1258   	; 0x526 <__stack+0x27>
  3c:	74 c2       	rjmp	.+1256   	; 0x526 <__stack+0x27>
  3e:	73 c2       	rjmp	.+1254   	; 0x526 <__stack+0x27>
  40:	72 c2       	rjmp	.+1252   	; 0x526 <__stack+0x27>
  42:	71 c2       	rjmp	.+1250   	; 0x526 <__stack+0x27>
  44:	70 c2       	rjmp	.+1248   	; 0x526 <__stack+0x27>
  46:	6f c2       	rjmp	.+1246   	; 0x526 <__stack+0x27>
  48:	6e c2       	rjmp	.+1244   	; 0x526 <__stack+0x27>
  4a:	6d c2       	rjmp	.+1242   	; 0x526 <__stack+0x27>
  4c:	6c c2       	rjmp	.+1240   	; 0x526 <__stack+0x27>
  4e:	6b c2       	rjmp	.+1238   	; 0x526 <__stack+0x27>
  50:	6a c2       	rjmp	.+1236   	; 0x526 <__stack+0x27>
  52:	69 c2       	rjmp	.+1234   	; 0x526 <__stack+0x27>
  54:	56 c2       	rjmp	.+1196   	; 0x502 <__stack+0x3>
  56:	67 c2       	rjmp	.+1230   	; 0x526 <__stack+0x27>
  58:	66 c2       	rjmp	.+1228   	; 0x526 <__stack+0x27>
  5a:	65 c2       	rjmp	.+1226   	; 0x526 <__stack+0x27>
  5c:	64 c2       	rjmp	.+1224   	; 0x526 <__stack+0x27>
  5e:	63 c2       	rjmp	.+1222   	; 0x526 <__stack+0x27>
  60:	62 c2       	rjmp	.+1220   	; 0x526 <__stack+0x27>
  62:	61 c2       	rjmp	.+1218   	; 0x526 <__stack+0x27>
  64:	60 c2       	rjmp	.+1216   	; 0x526 <__stack+0x27>
  66:	5f c2       	rjmp	.+1214   	; 0x526 <__stack+0x27>
  68:	5e c2       	rjmp	.+1212   	; 0x526 <__stack+0x27>
  6a:	5d c2       	rjmp	.+1210   	; 0x526 <__stack+0x27>
  6c:	5c c2       	rjmp	.+1208   	; 0x526 <__stack+0x27>
  6e:	5b c2       	rjmp	.+1206   	; 0x526 <__stack+0x27>
  70:	5a c2       	rjmp	.+1204   	; 0x526 <__stack+0x27>
  72:	59 c2       	rjmp	.+1202   	; 0x526 <__stack+0x27>
  74:	46 c2       	rjmp	.+1164   	; 0x502 <__stack+0x3>
  76:	57 c2       	rjmp	.+1198   	; 0x526 <__stack+0x27>
  78:	56 c2       	rjmp	.+1196   	; 0x526 <__stack+0x27>
  7a:	55 c2       	rjmp	.+1194   	; 0x526 <__stack+0x27>
  7c:	54 c2       	rjmp	.+1192   	; 0x526 <__stack+0x27>
  7e:	53 c2       	rjmp	.+1190   	; 0x526 <__stack+0x27>
  80:	52 c2       	rjmp	.+1188   	; 0x526 <__stack+0x27>
  82:	51 c2       	rjmp	.+1186   	; 0x526 <__stack+0x27>
  84:	50 c2       	rjmp	.+1184   	; 0x526 <__stack+0x27>
  86:	4f c2       	rjmp	.+1182   	; 0x526 <__stack+0x27>
  88:	4e c2       	rjmp	.+1180   	; 0x526 <__stack+0x27>
  8a:	4d c2       	rjmp	.+1178   	; 0x526 <__stack+0x27>
  8c:	4c c2       	rjmp	.+1176   	; 0x526 <__stack+0x27>
  8e:	4b c2       	rjmp	.+1174   	; 0x526 <__stack+0x27>
  90:	4a c2       	rjmp	.+1172   	; 0x526 <__stack+0x27>
  92:	49 c2       	rjmp	.+1170   	; 0x526 <__stack+0x27>
  94:	36 c2       	rjmp	.+1132   	; 0x502 <__stack+0x3>
  96:	47 c2       	rjmp	.+1166   	; 0x526 <__stack+0x27>
  98:	46 c2       	rjmp	.+1164   	; 0x526 <__stack+0x27>
  9a:	45 c2       	rjmp	.+1162   	; 0x526 <__stack+0x27>
  9c:	44 c2       	rjmp	.+1160   	; 0x526 <__stack+0x27>
  9e:	43 c2       	rjmp	.+1158   	; 0x526 <__stack+0x27>
  a0:	42 c2       	rjmp	.+1156   	; 0x526 <__stack+0x27>
  a2:	41 c2       	rjmp	.+1154   	; 0x526 <__stack+0x27>
  a4:	40 c2       	rjmp	.+1152   	; 0x526 <__stack+0x27>
  a6:	3f c2       	rjmp	.+1150   	; 0x526 <__stack+0x27>
  a8:	3e c2       	rjmp	.+1148   	; 0x526 <__stack+0x27>
  aa:	3d c2       	rjmp	.+1146   	; 0x526 <__stack+0x27>
  ac:	3c c2       	rjmp	.+1144   	; 0x526 <__stack+0x27>
  ae:	3b c2       	rjmp	.+1142   	; 0x526 <__stack+0x27>
  b0:	3a c2       	rjmp	.+1140   	; 0x526 <__stack+0x27>
  b2:	39 c2       	rjmp	.+1138   	; 0x526 <__stack+0x27>
  b4:	3a c2       	rjmp	.+1140   	; 0x52a <__stack+0x2b>
  b6:	37 c2       	rjmp	.+1134   	; 0x526 <__stack+0x27>
  b8:	36 c2       	rjmp	.+1132   	; 0x526 <__stack+0x27>
  ba:	35 c2       	rjmp	.+1130   	; 0x526 <__stack+0x27>
  bc:	34 c2       	rjmp	.+1128   	; 0x526 <__stack+0x27>
  be:	33 c2       	rjmp	.+1126   	; 0x526 <__stack+0x27>
  c0:	32 c2       	rjmp	.+1124   	; 0x526 <__stack+0x27>
  c2:	31 c2       	rjmp	.+1122   	; 0x526 <__stack+0x27>
  c4:	30 c2       	rjmp	.+1120   	; 0x526 <__stack+0x27>
  c6:	2f c2       	rjmp	.+1118   	; 0x526 <__stack+0x27>
  c8:	2e c2       	rjmp	.+1116   	; 0x526 <__stack+0x27>
  ca:	2d c2       	rjmp	.+1114   	; 0x526 <__stack+0x27>
  cc:	2c c2       	rjmp	.+1112   	; 0x526 <__stack+0x27>
  ce:	2b c2       	rjmp	.+1110   	; 0x526 <__stack+0x27>
  d0:	2a c2       	rjmp	.+1108   	; 0x526 <__stack+0x27>
  d2:	29 c2       	rjmp	.+1106   	; 0x526 <__stack+0x27>
  d4:	2a c2       	rjmp	.+1108   	; 0x52a <__stack+0x2b>
  d6:	27 c2       	rjmp	.+1102   	; 0x526 <__stack+0x27>
  d8:	26 c2       	rjmp	.+1100   	; 0x526 <__stack+0x27>
  da:	25 c2       	rjmp	.+1098   	; 0x526 <__stack+0x27>
  dc:	24 c2       	rjmp	.+1096   	; 0x526 <__stack+0x27>
  de:	23 c2       	rjmp	.+1094   	; 0x526 <__stack+0x27>
  e0:	22 c2       	rjmp	.+1092   	; 0x526 <__stack+0x27>
  e2:	21 c2       	rjmp	.+1090   	; 0x526 <__stack+0x27>
  e4:	20 c2       	rjmp	.+1088   	; 0x526 <__stack+0x27>
  e6:	1f c2       	rjmp	.+1086   	; 0x526 <__stack+0x27>
  e8:	1e c2       	rjmp	.+1084   	; 0x526 <__stack+0x27>
  ea:	1d c2       	rjmp	.+1082   	; 0x526 <__stack+0x27>
  ec:	1c c2       	rjmp	.+1080   	; 0x526 <__stack+0x27>
  ee:	1b c2       	rjmp	.+1078   	; 0x526 <__stack+0x27>
  f0:	1a c2       	rjmp	.+1076   	; 0x526 <__stack+0x27>
  f2:	19 c2       	rjmp	.+1074   	; 0x526 <__stack+0x27>
  f4:	06 c2       	rjmp	.+1036   	; 0x502 <__stack+0x3>
  f6:	17 c2       	rjmp	.+1070   	; 0x526 <__stack+0x27>
  f8:	16 c2       	rjmp	.+1068   	; 0x526 <__stack+0x27>
  fa:	15 c2       	rjmp	.+1066   	; 0x526 <__stack+0x27>
  fc:	14 c2       	rjmp	.+1064   	; 0x526 <__stack+0x27>
  fe:	13 c2       	rjmp	.+1062   	; 0x526 <__stack+0x27>
 100:	12 c2       	rjmp	.+1060   	; 0x526 <__stack+0x27>
 102:	11 c2       	rjmp	.+1058   	; 0x526 <__stack+0x27>
 104:	10 c2       	rjmp	.+1056   	; 0x526 <__stack+0x27>
 106:	0f c2       	rjmp	.+1054   	; 0x526 <__stack+0x27>
 108:	0e c2       	rjmp	.+1052   	; 0x526 <__stack+0x27>
 10a:	0d c2       	rjmp	.+1050   	; 0x526 <__stack+0x27>
 10c:	0c c2       	rjmp	.+1048   	; 0x526 <__stack+0x27>
 10e:	0b c2       	rjmp	.+1046   	; 0x526 <__stack+0x27>
 110:	0a c2       	rjmp	.+1044   	; 0x526 <__stack+0x27>
 112:	09 c2       	rjmp	.+1042   	; 0x526 <__stack+0x27>
 114:	04 c2       	rjmp	.+1032   	; 0x51e <__stack+0x1f>
 116:	09 c2       	rjmp	.+1042   	; 0x52a <__stack+0x2b>
 118:	f4 c1       	rjmp	.+1000   	; 0x502 <__stack+0x3>
 11a:	07 c2       	rjmp	.+1038   	; 0x52a <__stack+0x2b>
 11c:	04 c2       	rjmp	.+1032   	; 0x526 <__stack+0x27>
 11e:	03 c2       	rjmp	.+1030   	; 0x526 <__stack+0x27>
 120:	02 c2       	rjmp	.+1028   	; 0x526 <__stack+0x27>
 122:	ff c1       	rjmp	.+1022   	; 0x522 <__stack+0x23>
 124:	f0 c1       	rjmp	.+992    	; 0x506 <__stack+0x7>
 126:	ff c1       	rjmp	.+1022   	; 0x526 <__stack+0x27>
 128:	f0 c1       	rjmp	.+992    	; 0x50a <__stack+0xb>
 12a:	f1 c1       	rjmp	.+994    	; 0x50e <__stack+0xf>
 12c:	f2 c1       	rjmp	.+996    	; 0x512 <__stack+0x13>
 12e:	fb c1       	rjmp	.+1014   	; 0x526 <__stack+0x27>
 130:	f2 c1       	rjmp	.+996    	; 0x516 <__stack+0x17>
 132:	f3 c1       	rjmp	.+998    	; 0x51a <__stack+0x1b>
 134:	45 c0       	rjmp	.+138    	; 0x1c0 <MIDI_ParserTask+0x18>
 136:	51 c0       	rjmp	.+162    	; 0x1da <MIDI_ParserTask+0x32>
 138:	84 c0       	rjmp	.+264    	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 13a:	b7 c0       	rjmp	.+366    	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
 13c:	97 c0       	rjmp	.+302    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
 13e:	c6 c0       	rjmp	.+396    	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 140:	c9 c0       	rjmp	.+402    	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>

00000142 <.dinit>:
 142:	01 00       	.word	0x0001	; ????
 144:	01 43       	sbci	r16, 0x31	; 49
 146:	80 01       	movw	r16, r0
 148:	43 01       	movw	r8, r6
 14a:	5b 00       	.word	0x005b	; ????
 14c:	06 32       	cpi	r16, 0x26	; 38
 14e:	01 5b       	subi	r16, 0xB1	; 177
 150:	01 5f       	subi	r16, 0xF1	; 241
 152:	80 00       	.word	0x0080	; ????

00000154 <__ctors_end>:
 154:	11 24       	eor	r1, r1
 156:	1f be       	out	0x3f, r1	; 63
 158:	cf ef       	ldi	r28, 0xFF	; 255
 15a:	d4 e0       	ldi	r29, 0x04	; 4
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	cd bf       	out	0x3d, r28	; 61

00000160 <__do_copy_data>:
 160:	e2 e4       	ldi	r30, 0x42	; 66
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	17 c0       	rjmp	.+46     	; 0x196 <__do_clear_bss+0x8>
 168:	b5 91       	lpm	r27, Z+
 16a:	a5 91       	lpm	r26, Z+
 16c:	35 91       	lpm	r19, Z+
 16e:	25 91       	lpm	r18, Z+
 170:	05 91       	lpm	r16, Z+
 172:	07 fd       	sbrc	r16, 7
 174:	0c c0       	rjmp	.+24     	; 0x18e <__do_clear_bss>
 176:	95 91       	lpm	r25, Z+
 178:	85 91       	lpm	r24, Z+
 17a:	ef 01       	movw	r28, r30
 17c:	f9 2f       	mov	r31, r25
 17e:	e8 2f       	mov	r30, r24
 180:	05 90       	lpm	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	a2 17       	cp	r26, r18
 186:	b3 07       	cpc	r27, r19
 188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0x20>
 18a:	fe 01       	movw	r30, r28
 18c:	04 c0       	rjmp	.+8      	; 0x196 <__do_clear_bss+0x8>

0000018e <__do_clear_bss>:
 18e:	1d 92       	st	X+, r1
 190:	a2 17       	cp	r26, r18
 192:	b3 07       	cpc	r27, r19
 194:	e1 f7       	brne	.-8      	; 0x18e <__do_clear_bss>
 196:	e3 35       	cpi	r30, 0x53	; 83
 198:	f4 07       	cpc	r31, r20
 19a:	31 f7       	brne	.-52     	; 0x168 <__do_copy_data+0x8>
 19c:	2d d2       	rcall	.+1114   	; 0x5f8 <main>
 19e:	25 c2       	rjmp	.+1098   	; 0x5ea <exit>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>

Disassembly of section .text:

00000624 <__bad_interrupt>:
 624:	ed cc       	rjmp	.-1574   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000005f8 <main>:
#include "midi_controller.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
 5f8:	c6 df       	rcall	.-116    	; 0x586 <UART_init>
	MIDICTRL_Init();
 5fa:	b5 de       	rcall	.-662    	; 0x366 <MIDICTRL_Init>
	SH100CTRL_Init();
 5fc:	25 df       	rcall	.-438    	; 0x448 <SH100CTRL_Init>
	
	cpu_irq_enable();
 5fe:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
 600:	d3 dd       	rcall	.-1114   	; 0x1a8 <MIDI_ParserTask>
 602:	fe cf       	rjmp	.-4      	; 0x600 <main+0x8>

Disassembly of section .text.MIDI_IsStatusWord:

0000061c <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
 61c:	88 1f       	adc	r24, r24
 61e:	88 27       	eor	r24, r24
 620:	88 1f       	adc	r24, r24
 622:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00000604 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	88 3f       	cpi	r24, 0xF8	; 248
 608:	08 f4       	brcc	.+2      	; 0x60c <MIDI_IsSysRealTime+0x8>
 60a:	90 e0       	ldi	r25, 0x00	; 0
}
 60c:	89 2f       	mov	r24, r25
 60e:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

000004ee <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	fc 01       	movw	r30, r24
 4f2:	e0 58       	subi	r30, 0x80	; 128
 4f4:	f1 09       	sbc	r31, r1
 4f6:	e0 38       	cpi	r30, 0x80	; 128
 4f8:	f1 05       	cpc	r31, r1
 4fa:	a8 f4       	brcc	.+42     	; 0x526 <__stack+0x27>
 4fc:	e6 5e       	subi	r30, 0xE6	; 230
 4fe:	ff 4f       	sbci	r31, 0xFF	; 255
 500:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 506:	83 e0       	ldi	r24, 0x03	; 3
 508:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 50a:	83 e0       	ldi	r24, 0x03	; 3
 50c:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 516:	83 e0       	ldi	r24, 0x03	; 3
 518:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 52a:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 52c:	08 95       	ret

Disassembly of section .text.isEqualCommands:

000005b6 <isEqualCommands>:
	}
};

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
 5b6:	62 13       	cpse	r22, r18
 5b8:	04 c0       	rjmp	.+8      	; 0x5c2 <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data2) return false;	
 5ba:	85 17       	cp	r24, r21
 5bc:	21 f0       	breq	.+8      	; 0x5c6 <isEqualCommands+0x10>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
	}
};

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data2) return false;	
	return true;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
}
 5c8:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

00000366 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
 36e:	68 97       	sbiw	r28, 0x18	; 24
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	47 d1       	rcall	.+654    	; 0x610 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 382:	8b 3a       	cpi	r24, 0xAB	; 171
 384:	9c 4a       	sbci	r25, 0xAC	; 172
 386:	c1 f4       	brne	.+48     	; 0x3b8 <MIDICTRL_Init+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];	
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));		
 388:	40 e1       	ldi	r20, 0x10	; 16
 38a:	50 e0       	ldi	r21, 0x00	; 0
 38c:	60 e8       	ldi	r22, 0x80	; 128
 38e:	28 e1       	ldi	r18, 0x18	; 24
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	ce 01       	movw	r24, r28
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	e5 d0       	rcall	.+458    	; 0x562 <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 398:	88 e1       	ldi	r24, 0x18	; 24
 39a:	fe 01       	movw	r30, r28
 39c:	31 96       	adiw	r30, 0x01	; 1
 39e:	a1 e0       	ldi	r26, 0x01	; 1
 3a0:	b1 e0       	ldi	r27, 0x01	; 1
 3a2:	01 90       	ld	r0, Z+
 3a4:	0d 92       	st	X+, r0
 3a6:	8a 95       	dec	r24
 3a8:	e1 f7       	brne	.-8      	; 0x3a2 <MIDICTRL_Init+0x3c>
		
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 3aa:	6b e0       	ldi	r22, 0x0B	; 11
 3ac:	70 e0       	ldi	r23, 0x00	; 0
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	0c d1       	rcall	.+536    	; 0x5ca <eeprom_read_byte>
 3b2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <commandSet>
 3b6:	0b c0       	rjmp	.+22     	; 0x3ce <MIDICTRL_Init+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 3b8:	88 e1       	ldi	r24, 0x18	; 24
 3ba:	e3 e4       	ldi	r30, 0x43	; 67
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	a1 e0       	ldi	r26, 0x01	; 1
 3c0:	b1 e0       	ldi	r27, 0x01	; 1
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <MIDICTRL_Init+0x5c>
		commandSet = DEFAULT;	
 3ca:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <commandSet>
	}

	mode = RUNNING;
 3ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 3d2:	68 96       	adiw	r28, 0x18	; 24
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	f8 94       	cli
 3d8:	de bf       	out	0x3e, r29	; 62
 3da:	0f be       	out	0x3f, r0	; 63
 3dc:	cd bf       	out	0x3d, r28	; 61
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

000002e6 <MIDICTRL_HandleCommand>:

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
 2e6:	0f 93       	push	r16
 2e8:	1f 93       	push	r17
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	switch(mode)
 2ee:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2f2:	21 11       	cpse	r18, r1
 2f4:	33 c0       	rjmp	.+102    	; 0x35c <MIDICTRL_HandleCommand+0x76>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 2f6:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <omniModeEnabled>
 2fa:	21 11       	cpse	r18, r1
 2fc:	04 c0       	rjmp	.+8      	; 0x306 <MIDICTRL_HandleCommand+0x20>
			{
				if(channelNum != command.channel) return;
 2fe:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <channelNum>
 302:	72 13       	cpse	r23, r18
 304:	2b c0       	rjmp	.+86     	; 0x35c <MIDICTRL_HandleCommand+0x76>
 306:	09 2f       	mov	r16, r25
 308:	18 2f       	mov	r17, r24
 30a:	c7 2f       	mov	r28, r23
 30c:	d6 2f       	mov	r29, r22
			}
			
			if(muteCommandEnabled)
 30e:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <muteCommandEnabled>
 312:	88 23       	and	r24, r24
 314:	79 f0       	breq	.+30     	; 0x334 <MIDICTRL_HandleCommand+0x4e>
			{
				if(isEqualCommands(command, muteCommand)) SH100CTRL_MuteAmp();
 316:	84 ea       	ldi	r24, 0xA4	; 164
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	a0 e0       	ldi	r26, 0x00	; 0
 31c:	fc 01       	movw	r30, r24
 31e:	5a 2f       	mov	r21, r26
 320:	3e d1       	rcall	.+636    	; 0x59e <__xload_4>
 322:	9b 01       	movw	r18, r22
 324:	ac 01       	movw	r20, r24
 326:	6d 2f       	mov	r22, r29
 328:	7c 2f       	mov	r23, r28
 32a:	81 2f       	mov	r24, r17
 32c:	90 2f       	mov	r25, r16
 32e:	43 d1       	rcall	.+646    	; 0x5b6 <isEqualCommands>
 330:	81 11       	cpse	r24, r1
 332:	7a d1       	rcall	.+756    	; 0x628 <SH100CTRL_MuteAmp>
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 334:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <commandSet>
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	19 f4       	brne	.+6      	; 0x342 <MIDICTRL_HandleCommand+0x5c>
 33c:	e1 e0       	ldi	r30, 0x01	; 1
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	02 c0       	rjmp	.+4      	; 0x346 <MIDICTRL_HandleCommand+0x60>
			else currentCommandBlock = &defaultCommands;
 342:	e3 e4       	ldi	r30, 0x43	; 67
 344:	f1 e0       	ldi	r31, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) SH100CTRL_SwChannel1(); return;
 346:	20 81       	ld	r18, Z
 348:	31 81       	ldd	r19, Z+1	; 0x01
 34a:	42 81       	ldd	r20, Z+2	; 0x02
 34c:	53 81       	ldd	r21, Z+3	; 0x03
 34e:	6d 2f       	mov	r22, r29
 350:	7c 2f       	mov	r23, r28
 352:	81 2f       	mov	r24, r17
 354:	90 2f       	mov	r25, r16
 356:	2f d1       	rcall	.+606    	; 0x5b6 <isEqualCommands>
 358:	81 11       	cpse	r24, r1
 35a:	65 d1       	rcall	.+714    	; 0x626 <SH100CTRL_SwChannel1>
		case PROGRAMMING:
		{
			break;
		}
	}	
}
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	1f 91       	pop	r17
 362:	0f 91       	pop	r16
 364:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

000001a8 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 1a8:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <state>
 1ac:	8e 2f       	mov	r24, r30
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	87 30       	cpi	r24, 0x07	; 7
 1b2:	91 05       	cpc	r25, r1
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <MIDI_ParserTask+0x10>
 1b6:	96 c0       	rjmp	.+300    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
 1b8:	fc 01       	movw	r30, r24
 1ba:	e6 56       	subi	r30, 0x66	; 102
 1bc:	ff 4f       	sbci	r31, 0xFF	; 255
 1be:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 1c0:	ec e1       	ldi	r30, 0x1C	; 28
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 1c6:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 1c8:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 1ca:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <currentStatusType>
			isSecondDataWord = false;
 1ce:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
			state = WAIT_WORD;
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
			break;
 1d8:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 1da:	00 d2       	rcall	.+1024   	; 0x5dc <UART_RxBufferNotEmpty>
 1dc:	88 23       	and	r24, r24
 1de:	09 f4       	brne	.+2      	; 0x1e2 <MIDI_ParserTask+0x3a>
 1e0:	81 c0       	rjmp	.+258    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
			{
				recievedWord = UART_PopWord();
 1e2:	a5 d1       	rcall	.+842    	; 0x52e <UART_PopWord>
 1e4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 1e8:	0d d2       	rcall	.+1050   	; 0x604 <MIDI_IsSysRealTime>
 1ea:	81 11       	cpse	r24, r1
 1ec:	7b c0       	rjmp	.+246    	; 0x2e4 <__EEPROM_REGION_LENGTH__+0xe4>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
					return;
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 1ee:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 1f2:	14 d2       	rcall	.+1064   	; 0x61c <MIDI_IsStatusWord>
 1f4:	88 23       	and	r24, r24
 1f6:	21 f0       	breq	.+8      	; 0x200 <__EEPROM_REGION_LENGTH__>
				{					
					state = DISPATCH_STATUS;
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 1fe:	08 95       	ret
				}
				else
				{
					switch(currentStatusType)
 200:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentStatusType>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	49 f0       	breq	.+18     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 208:	18 f4       	brcc	.+6      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	51 f0       	breq	.+20     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 20e:	15 c0       	rjmp	.+42     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	59 f0       	breq	.+22     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 214:	85 30       	cpi	r24, 0x05	; 5
 216:	69 f0       	breq	.+26     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 218:	10 c0       	rjmp	.+32     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 21a:	84 e0       	ldi	r24, 0x04	; 4
 21c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 220:	08 95       	ret
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 228:	08 95       	ret
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 230:	08 95       	ret
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 238:	08 95       	ret
						default: state = WAIT_WORD;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 240:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 242:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <recievedWord>
 246:	89 2f       	mov	r24, r25
 248:	82 95       	swap	r24
 24a:	8f 70       	andi	r24, 0x0F	; 15
 24c:	ec e1       	ldi	r30, 0x1C	; 28
 24e:	f1 e0       	ldi	r31, 0x01	; 1
 250:	80 83       	st	Z, r24
			currentCommand.channel = recievedWord & 0x0F;
 252:	9f 70       	andi	r25, 0x0F	; 15
 254:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 256:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 258:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 25a:	49 d1       	rcall	.+658    	; 0x4ee <MIDI_GetStatusType>
 25c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentStatusType>
			isSecondDataWord = false;
 260:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
			state = WAIT_WORD;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
			break;
 26a:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 26c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isSecondDataWord>
 270:	88 23       	and	r24, r24
 272:	81 f0       	breq	.+32     	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
			{
				currentCommand.data2 = recievedWord;
 274:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 278:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <currentCommand+0x3>
				isSecondDataWord = false;			
 27c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 280:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <currentCommand>
 284:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <currentCommand+0x1>
 288:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <currentCommand+0x2>
 28c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <currentCommand+0x3>
 290:	2a d0       	rcall	.+84     	; 0x2e6 <MIDICTRL_HandleCommand>
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 294:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 298:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <currentCommand+0x2>
				isSecondDataWord = true;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <isSecondDataWord>
			}
			state = WAIT_WORD;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
			break;
 2a8:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 2aa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 2ae:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 2b2:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <currentCommand>
 2b6:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <currentCommand+0x1>
 2ba:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <currentCommand+0x2>
 2be:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <currentCommand+0x3>
 2c2:	11 d0       	rcall	.+34     	; 0x2e6 <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
			break;
 2ca:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
			break;
 2d2:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 2d4:	ec e1       	ldi	r30, 0x1C	; 28
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 2da:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 2dc:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <state>
 2e4:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000448 <SH100CTRL_Init>:
{
	
}

void SH100CTRL_SwAB()
{
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	00 d0       	rcall	.+0      	; 0x44e <SH100CTRL_Init+0x6>
 44e:	0f 92       	push	r0
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	da d0       	rcall	.+436    	; 0x610 <eeprom_read_word>
 45c:	8b 3a       	cpi	r24, 0xAB	; 171
 45e:	9c 4a       	sbci	r25, 0xAC	; 172
 460:	91 f4       	brne	.+36     	; 0x486 <SH100CTRL_Init+0x3e>
 462:	40 e1       	ldi	r20, 0x10	; 16
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	60 e8       	ldi	r22, 0x80	; 128
 468:	23 e0       	ldi	r18, 0x03	; 3
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	ce 01       	movw	r24, r28
 46e:	01 96       	adiw	r24, 0x01	; 1
 470:	78 d0       	rcall	.+240    	; 0x562 <eeprom_read_block>
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
 476:	ab 81       	ldd	r26, Y+3	; 0x03
 478:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <ampState>
 47c:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <ampState+0x1>
 480:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <ampState+0x2>
 484:	05 c0       	rjmp	.+10     	; 0x490 <SH100CTRL_Init+0x48>
 486:	e1 e2       	ldi	r30, 0x21	; 33
 488:	f1 e0       	ldi	r31, 0x01	; 1
 48a:	10 82       	st	Z, r1
 48c:	11 82       	std	Z+1, r1	; 0x01
 48e:	12 82       	std	Z+2, r1	; 0x02
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel1:

00000626 <SH100CTRL_SwChannel1>:
 626:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

00000628 <SH100CTRL_MuteAmp>:
	
}

void SH100CTRL_MuteAmp()
{
 628:	08 95       	ret

Disassembly of section .text.UART_init:

00000586 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
 586:	88 ed       	ldi	r24, 0xD8	; 216
 588:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C=0x06; 
 58c:	86 e0       	ldi	r24, 0x06	; 6
 58e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0x00;
 592:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=0x13;
 596:	83 e1       	ldi	r24, 0x13	; 19
 598:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
 59c:	08 95       	ret

Disassembly of section .text.__vector_18:

000003e4 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	8f 93       	push	r24
 3f0:	9f 93       	push	r25
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 3f6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 3fa:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 3fe:	8c 71       	andi	r24, 0x1C	; 28
 400:	d1 f4       	brne	.+52     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
	{
		rx_buffer0[rx_wr_index++] = data;
 402:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <rx_wr_index>
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	8e 0f       	add	r24, r30
 40a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <rx_wr_index>
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	e0 5d       	subi	r30, 0xD0	; 208
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 416:	80 31       	cpi	r24, 0x10	; 16
 418:	11 f4       	brne	.+4      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 41a:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 41e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rx_counter>
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_counter>
 428:	80 31       	cpi	r24, 0x10	; 16
 42a:	29 f4       	brne	.+10     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
		{
			rx_counter=0;
 42c:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <rx_counter>
			rx_buffer_overflow=1;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <rx_buffer_overflow>
		}
	}
}
 436:	ff 91       	pop	r31
 438:	ef 91       	pop	r30
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

Disassembly of section .text.UART_PopWord:

0000052e <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
 52e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rx_counter>
 532:	88 23       	and	r24, r24
 534:	e1 f3       	breq	.-8      	; 0x52e <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
 536:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <rx_rd_index>
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	9e 0f       	add	r25, r30
 53e:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <rx_rd_index>
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	e0 5d       	subi	r30, 0xD0	; 208
 546:	fe 4f       	sbci	r31, 0xFE	; 254
 548:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
 54a:	90 31       	cpi	r25, 0x10	; 16
 54c:	11 f4       	brne	.+4      	; 0x552 <UART_PopWord+0x24>
 54e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
 552:	f8 94       	cli
	--rx_counter;
 554:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <rx_counter>
 558:	91 50       	subi	r25, 0x01	; 1
 55a:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <rx_counter>
	cpu_irq_enable();
 55e:	78 94       	sei
	return data;
}
 560:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000005dc <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <rx_counter>
 5e2:	91 11       	cpse	r25, r1
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <UART_RxBufferNotEmpty+0xc>
 5e6:	80 e0       	ldi	r24, 0x00	; 0
}
 5e8:	08 95       	ret

Disassembly of section .text.__vector_20:

0000049c <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	8f 93       	push	r24
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
	if (tx_counter)
 4ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <tx_counter>
 4b0:	88 23       	and	r24, r24
 4b2:	a9 f0       	breq	.+42     	; 0x4de <__vector_20+0x42>
	{
		--tx_counter;
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 4ba:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <tx_rd_index>
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	8e 0f       	add	r24, r30
 4c2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <tx_rd_index>
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	e9 5d       	subi	r30, 0xD9	; 217
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	80 81       	ld	r24, Z
 4ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 4d2:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <tx_rd_index>
 4d6:	88 30       	cpi	r24, 0x08	; 8
 4d8:	11 f4       	brne	.+4      	; 0x4de <__vector_20+0x42>
 4da:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <tx_rd_index>
		#endif
	}
}
 4de:	ff 91       	pop	r31
 4e0:	ef 91       	pop	r30
 4e2:	8f 91       	pop	r24
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

Disassembly of section .text.libgcc:

0000059e <__xload_4>:
 59e:	57 fd       	sbrc	r21, 7
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <__xload_4+0xe>
 5a2:	65 91       	lpm	r22, Z+
 5a4:	75 91       	lpm	r23, Z+
 5a6:	85 91       	lpm	r24, Z+
 5a8:	95 91       	lpm	r25, Z+
 5aa:	08 95       	ret
 5ac:	61 91       	ld	r22, Z+
 5ae:	71 91       	ld	r23, Z+
 5b0:	81 91       	ld	r24, Z+
 5b2:	91 91       	ld	r25, Z+
 5b4:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000062a <_fini>:
 62a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000062c <__funcs_on_exit>:
 62c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000062e <__simulator_exit>:
 62e:	08 95       	ret

Disassembly of section .text.exit:

000005ea <exit>:
 5ea:	ec 01       	movw	r28, r24
 5ec:	1f d0       	rcall	.+62     	; 0x62c <__funcs_on_exit>
 5ee:	1d d0       	rcall	.+58     	; 0x62a <_fini>
 5f0:	ce 01       	movw	r24, r28
 5f2:	1d d0       	rcall	.+58     	; 0x62e <__simulator_exit>
 5f4:	ce 01       	movw	r24, r28
 5f6:	1c d0       	rcall	.+56     	; 0x630 <_Exit>

Disassembly of section .text._Exit:

00000630 <_Exit>:
 630:	b7 dd       	rcall	.-1170   	; 0x1a0 <_exit>

Disassembly of section .text.avrlibc:

00000562 <eeprom_read_block>:
 562:	ba 01       	movw	r22, r20
 564:	a9 01       	movw	r20, r18
 566:	dc 01       	movw	r26, r24
 568:	cb 01       	movw	r24, r22

0000056a <eeprom_read_blraw>:
 56a:	fc 01       	movw	r30, r24
 56c:	f9 99       	sbic	0x1f, 1	; 31
 56e:	fe cf       	rjmp	.-4      	; 0x56c <eeprom_read_blraw+0x2>
 570:	06 c0       	rjmp	.+12     	; 0x57e <eeprom_read_blraw+0x14>
 572:	f2 bd       	out	0x22, r31	; 34
 574:	e1 bd       	out	0x21, r30	; 33
 576:	f8 9a       	sbi	0x1f, 0	; 31
 578:	31 96       	adiw	r30, 0x01	; 1
 57a:	00 b4       	in	r0, 0x20	; 32
 57c:	0d 92       	st	X+, r0
 57e:	41 50       	subi	r20, 0x01	; 1
 580:	50 40       	sbci	r21, 0x00	; 0
 582:	b8 f7       	brcc	.-18     	; 0x572 <eeprom_read_blraw+0x8>
 584:	08 95       	ret

Disassembly of section .text.avrlibc:

000005ca <eeprom_read_byte>:
 5ca:	cb 01       	movw	r24, r22
 5cc:	f9 99       	sbic	0x1f, 1	; 31
 5ce:	fe cf       	rjmp	.-4      	; 0x5cc <eeprom_read_byte+0x2>
 5d0:	92 bd       	out	0x22, r25	; 34
 5d2:	81 bd       	out	0x21, r24	; 33
 5d4:	f8 9a       	sbi	0x1f, 0	; 31
 5d6:	99 27       	eor	r25, r25
 5d8:	80 b5       	in	r24, 0x20	; 32
 5da:	08 95       	ret

Disassembly of section .text.avrlibc:

00000610 <eeprom_read_word>:
 610:	cb 01       	movw	r24, r22
 612:	a8 e1       	ldi	r26, 0x18	; 24
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	42 e0       	ldi	r20, 0x02	; 2
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	a7 cf       	rjmp	.-178    	; 0x56a <eeprom_read_blraw>
