
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001664  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800100  00800100  00001664  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000007e  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00001718  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000601a  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104c  00000000  00000000  00007a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b49  00000000  00000000  00008abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000061c  00000000  00000000  0000a608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  0000ac24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001656  00000000  00000000  0000b24d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000c8a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  000014a8  000014a8  0000163c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000cacc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000036  00001086  00001086  0000121a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_16 000001ac  000003bc  000003bc  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_4 00000046  00000eca  00000eca  0000105e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.leaveDefSettings_cnt 00000001  008001a8  008001a8  00001664  2**0
                  ALLOC
 19 .bss.swProgrammingMode_cnt 00000001  008001a9  008001a9  00001664  2**0
                  ALLOC
 20 .data.protectionInterval_cnt 00000001  008001aa  000014ce  00001662  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.MIDI_IsStatusWord 00000008  00001466  00001466  000015fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.MIDI_IsSysRealTime 0000000c  00001416  00001416  000015aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.MIDI_GetStatusType 00000040  00000f98  00000f98  0000112c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.isEqualCommands 00000014  0000139e  0000139e  00001532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.loadCommSetFromMemory 0000007a  00000a64  00000a64  00000bf8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.setMidiLeds 00000052  00000d40  00000d40  00000ed4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MIDICTRL_Init 00000028  000011ea  000011ea  0000137e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MIDICTRL_MidiMode 00000006  0000146e  0000146e  00001602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MIDICTRL_SetProgrammingButton 0000002e  0000118e  0000118e  00001322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.MIDICTRL_SwitchMode 0000004c  00000e32  00000e32  00000fc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.MIDICTRL_SetMidiChannel 00000006  00001474  00001474  00001608  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.MIDICTRL_OmniModeEn 00000006  0000147a  0000147a  0000160e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.MIDICTRL_MuteCommEn 00000006  00001480  00001480  00001614  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.programmBtn 0000004c  00000e7e  00000e7e  00001012  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.MIDICTRL_StoreUserCommands 00000036  000010bc  000010bc  00001250  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_DiscardCommands 00000014  000013b2  000013b2  00001546  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.indicateMidiError 0000002e  000011bc  000011bc  00001350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MIDICTRL_HandleCommand 0000014e  00000844  00000844  000009d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_13 0000005c  00000ce4  00000ce4  00000e78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .data.defaultCommands 00000018  00800186  000014b2  00001646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 41 .progmemx.data.muteCommand 00000004  000001d8  000001d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .bss.channelNum 00000001  008001ab  008001ab  00001664  2**0
                  ALLOC
 43 .bss.muteCommandEnabled 00000001  008001ac  008001ac  00001664  2**0
                  ALLOC
 44 .bss.omniModeEnabled 00000001  008001ad  008001ad  00001664  2**0
                  ALLOC
 45 .text.handleRealTimeStatus 00000004  000014a4  000014a4  00001638  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.MIDI_ParserTask 00000156  000006ee  000006ee  00000882  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.MIDI_SetRetranslateState 00000006  00001486  00001486  0000161a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .bss.state    00000001  008001ae  008001ae  00001664  2**0
                  ALLOC
 49 .data.retranslate 00000001  008001af  000014cf  00001663  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 50 .text.setChannelLeds 00000022  000012aa  000012aa  0000143e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.SH100CTRL_SetAmpState 0000003e  00000fd8  00000fd8  0000116c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.SH100CTRL_Init 00000062  00000c24  00000c24  00000db8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.SH100CTRL_SetAmpLeds 00000026  0000123a  0000123a  000013ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.SH100CTRL_StoreAmpState 0000001c  000012ee  000012ee  00001482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.SH100CTRL_SwChannel 0000000a  00001452  00001452  000015e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.SH100CTRL_SetLoop 00000018  00001326  00001326  000014ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.SH100CTRL_SetAB 00000022  000012cc  000012cc  00001460  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.SH100CTRL_SwLoop 0000000c  00001422  00001422  000015b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.SH100CTRL_BtnSwChannel 00000010  000013ea  000013ea  0000157e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SH100CTRL_SwAB 0000000c  0000142e  0000142e  000015c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.SH100CTRL_MuteAmp 00000006  0000148c  0000148c  00001620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100CTRL_UnmuteAmp 0000000c  0000143a  0000143a  000015ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SH100CTRL_CheckOutputJacks 0000005e  00000c86  00000c86  00000e1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SH100HW_Init 00000074  00000ade  00000ade  00000c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SH100HW_GetButtonsState 00000012  000013c6  000013c6  0000155a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SH100HW_SetCh 0000004e  00000de4  00000de4  00000f78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SH100HW_LoopEn 00000018  0000133e  0000133e  000014d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SH100HW_SetAB 00000006  00001492  00001492  00001626  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SH100HW_SetNewLedState 00000038  00001016  00001016  000011aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SH100HW_SetPreviousLedState 00000028  00001212  00001212  000013a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SH100HW_GetOutputJacks 00000018  00001356  00001356  000014ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SH100HW_SetPAState 00000026  00001260  00001260  000013f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.SH100HW_SetOutputMode 00000006  00001498  00001498  0000162c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.readButtonsState 00000186  00000568  00000568  000006fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.writeShiftRegs 00000042  00000f56  00000f56  000010ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.SH100HW_MainTask 000001e0  000001dc  000001dc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.fastBlink 00000001  008001b0  008001b0  00001664  2**0
                  ALLOC
 78 .bss.slowBlink 00000001  008001b1  008001b1  00001664  2**0
                  ALLOC
 79 .bss.blinkCounter 00000001  008001b2  008001b2  00001664  2**0
                  ALLOC
 80 .text.UART_init 00000018  0000136e  0000136e  00001502  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__vector_18 00000064  00000bc0  00000bc0  00000d54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.UART_PopWord 00000034  00001128  00001128  000012bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.UART_RxBufferNotEmpty 0000000e  000013fa  000013fa  0000158e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.__vector_20 00000052  00000d92  00000d92  00000f26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.UART_PushWord 00000046  00000f10  00000f10  000010a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.libgcc  00000018  00001386  00001386  0000151a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__dummy_fini 00000002  000014aa  000014aa  0000163e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__dummy_funcs_on_exit 00000002  000014ac  000014ac  00001640  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__dummy_simulator_exit 00000002  000014ae  000014ae  00001642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.exit    0000000e  00001408  00001408  0000159c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__simple_malloc 000000d2  00000992  00000992  00000b26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .bss.end.1483 00000002  0080019e  0080019e  00001664  2**0
                  ALLOC
 93 .bss.cur.1482 00000002  008001a0  008001a0  00001664  2**0
                  ALLOC
 94 .text._Exit   00000002  000014b0  000014b0  00001644  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.__expand_heap 0000006e  00000b52  00000b52  00000ce6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .bss.__brkval 00000002  008001a2  008001a2  00001664  2**0
                  ALLOC
 97 .data.__malloc_heap_end 00000002  008001a4  000014ca  0000165e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 98 .data.__malloc_heap_start 00000002  008001a6  000014cc  00001660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 99 .text.avrlibc 00000024  00001286  00001286  0000141a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.avrlibc 00000012  000013d8  000013d8  0000156c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.avrlibc 0000000c  00001446  00001446  000015da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.avrlibc 00000032  0000115c  0000115c  000012f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.avrlibc 0000001c  0000130a  0000130a  0000149e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.avrlibc 00000006  0000149e  0000149e  00001632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.libgcc.prologue 00000038  0000104e  0000104e  000011e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.libgcc.prologue 00000036  000010f2  000010f2  00001286  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.libgcc  0000000a  0000145c  0000145c  000015f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	c3 c0       	rjmp	.+390    	; 0x188 <__ctors_end>
   2:	52 ca       	rjmp	.-2908   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
   4:	51 ca       	rjmp	.-2910   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
   6:	50 ca       	rjmp	.-2912   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
   8:	60 c7       	rjmp	.+3776   	; 0xeca <__vector_4>
   a:	4e ca       	rjmp	.-2916   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
   c:	4d ca       	rjmp	.-2918   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
   e:	4c ca       	rjmp	.-2920   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  10:	4b ca       	rjmp	.-2922   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  12:	4a ca       	rjmp	.-2924   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  14:	49 ca       	rjmp	.-2926   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  16:	48 ca       	rjmp	.-2928   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  18:	47 ca       	rjmp	.-2930   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  1a:	64 c6       	rjmp	.+3272   	; 0xce4 <__vector_13>
  1c:	45 ca       	rjmp	.-2934   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  1e:	44 ca       	rjmp	.-2936   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  20:	cd c1       	rjmp	.+922    	; 0x3bc <__vector_16>
  22:	42 ca       	rjmp	.-2940   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  24:	cd c5       	rjmp	.+2970   	; 0xbc0 <__vector_18>
  26:	40 ca       	rjmp	.-2944   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  28:	b4 c6       	rjmp	.+3432   	; 0xd92 <__vector_20>
  2a:	3e ca       	rjmp	.-2948   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  2c:	3d ca       	rjmp	.-2950   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  2e:	3c ca       	rjmp	.-2952   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  30:	3b ca       	rjmp	.-2954   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  32:	3a ca       	rjmp	.-2956   	; 0xfffff4a8 <__eeprom_end+0xff7ef4a8>
  34:	bb c7       	rjmp	.+3958   	; 0xfac <MIDI_GetStatusType+0x14>
  36:	cc c7       	rjmp	.+3992   	; 0xfd0 <MIDI_GetStatusType+0x38>
  38:	cb c7       	rjmp	.+3990   	; 0xfd0 <MIDI_GetStatusType+0x38>
  3a:	ca c7       	rjmp	.+3988   	; 0xfd0 <MIDI_GetStatusType+0x38>
  3c:	c9 c7       	rjmp	.+3986   	; 0xfd0 <MIDI_GetStatusType+0x38>
  3e:	c8 c7       	rjmp	.+3984   	; 0xfd0 <MIDI_GetStatusType+0x38>
  40:	c7 c7       	rjmp	.+3982   	; 0xfd0 <MIDI_GetStatusType+0x38>
  42:	c6 c7       	rjmp	.+3980   	; 0xfd0 <MIDI_GetStatusType+0x38>
  44:	c5 c7       	rjmp	.+3978   	; 0xfd0 <MIDI_GetStatusType+0x38>
  46:	c4 c7       	rjmp	.+3976   	; 0xfd0 <MIDI_GetStatusType+0x38>
  48:	c3 c7       	rjmp	.+3974   	; 0xfd0 <MIDI_GetStatusType+0x38>
  4a:	c2 c7       	rjmp	.+3972   	; 0xfd0 <MIDI_GetStatusType+0x38>
  4c:	c1 c7       	rjmp	.+3970   	; 0xfd0 <MIDI_GetStatusType+0x38>
  4e:	c0 c7       	rjmp	.+3968   	; 0xfd0 <MIDI_GetStatusType+0x38>
  50:	bf c7       	rjmp	.+3966   	; 0xfd0 <MIDI_GetStatusType+0x38>
  52:	be c7       	rjmp	.+3964   	; 0xfd0 <MIDI_GetStatusType+0x38>
  54:	ab c7       	rjmp	.+3926   	; 0xfac <MIDI_GetStatusType+0x14>
  56:	bc c7       	rjmp	.+3960   	; 0xfd0 <MIDI_GetStatusType+0x38>
  58:	bb c7       	rjmp	.+3958   	; 0xfd0 <MIDI_GetStatusType+0x38>
  5a:	ba c7       	rjmp	.+3956   	; 0xfd0 <MIDI_GetStatusType+0x38>
  5c:	b9 c7       	rjmp	.+3954   	; 0xfd0 <MIDI_GetStatusType+0x38>
  5e:	b8 c7       	rjmp	.+3952   	; 0xfd0 <MIDI_GetStatusType+0x38>
  60:	b7 c7       	rjmp	.+3950   	; 0xfd0 <MIDI_GetStatusType+0x38>
  62:	b6 c7       	rjmp	.+3948   	; 0xfd0 <MIDI_GetStatusType+0x38>
  64:	b5 c7       	rjmp	.+3946   	; 0xfd0 <MIDI_GetStatusType+0x38>
  66:	b4 c7       	rjmp	.+3944   	; 0xfd0 <MIDI_GetStatusType+0x38>
  68:	b3 c7       	rjmp	.+3942   	; 0xfd0 <MIDI_GetStatusType+0x38>
  6a:	b2 c7       	rjmp	.+3940   	; 0xfd0 <MIDI_GetStatusType+0x38>
  6c:	b1 c7       	rjmp	.+3938   	; 0xfd0 <MIDI_GetStatusType+0x38>
  6e:	b0 c7       	rjmp	.+3936   	; 0xfd0 <MIDI_GetStatusType+0x38>
  70:	af c7       	rjmp	.+3934   	; 0xfd0 <MIDI_GetStatusType+0x38>
  72:	ae c7       	rjmp	.+3932   	; 0xfd0 <MIDI_GetStatusType+0x38>
  74:	9b c7       	rjmp	.+3894   	; 0xfac <MIDI_GetStatusType+0x14>
  76:	ac c7       	rjmp	.+3928   	; 0xfd0 <MIDI_GetStatusType+0x38>
  78:	ab c7       	rjmp	.+3926   	; 0xfd0 <MIDI_GetStatusType+0x38>
  7a:	aa c7       	rjmp	.+3924   	; 0xfd0 <MIDI_GetStatusType+0x38>
  7c:	a9 c7       	rjmp	.+3922   	; 0xfd0 <MIDI_GetStatusType+0x38>
  7e:	a8 c7       	rjmp	.+3920   	; 0xfd0 <MIDI_GetStatusType+0x38>
  80:	a7 c7       	rjmp	.+3918   	; 0xfd0 <MIDI_GetStatusType+0x38>
  82:	a6 c7       	rjmp	.+3916   	; 0xfd0 <MIDI_GetStatusType+0x38>
  84:	a5 c7       	rjmp	.+3914   	; 0xfd0 <MIDI_GetStatusType+0x38>
  86:	a4 c7       	rjmp	.+3912   	; 0xfd0 <MIDI_GetStatusType+0x38>
  88:	a3 c7       	rjmp	.+3910   	; 0xfd0 <MIDI_GetStatusType+0x38>
  8a:	a2 c7       	rjmp	.+3908   	; 0xfd0 <MIDI_GetStatusType+0x38>
  8c:	a1 c7       	rjmp	.+3906   	; 0xfd0 <MIDI_GetStatusType+0x38>
  8e:	a0 c7       	rjmp	.+3904   	; 0xfd0 <MIDI_GetStatusType+0x38>
  90:	9f c7       	rjmp	.+3902   	; 0xfd0 <MIDI_GetStatusType+0x38>
  92:	9e c7       	rjmp	.+3900   	; 0xfd0 <MIDI_GetStatusType+0x38>
  94:	8b c7       	rjmp	.+3862   	; 0xfac <MIDI_GetStatusType+0x14>
  96:	9c c7       	rjmp	.+3896   	; 0xfd0 <MIDI_GetStatusType+0x38>
  98:	9b c7       	rjmp	.+3894   	; 0xfd0 <MIDI_GetStatusType+0x38>
  9a:	9a c7       	rjmp	.+3892   	; 0xfd0 <MIDI_GetStatusType+0x38>
  9c:	99 c7       	rjmp	.+3890   	; 0xfd0 <MIDI_GetStatusType+0x38>
  9e:	98 c7       	rjmp	.+3888   	; 0xfd0 <MIDI_GetStatusType+0x38>
  a0:	97 c7       	rjmp	.+3886   	; 0xfd0 <MIDI_GetStatusType+0x38>
  a2:	96 c7       	rjmp	.+3884   	; 0xfd0 <MIDI_GetStatusType+0x38>
  a4:	95 c7       	rjmp	.+3882   	; 0xfd0 <MIDI_GetStatusType+0x38>
  a6:	94 c7       	rjmp	.+3880   	; 0xfd0 <MIDI_GetStatusType+0x38>
  a8:	93 c7       	rjmp	.+3878   	; 0xfd0 <MIDI_GetStatusType+0x38>
  aa:	92 c7       	rjmp	.+3876   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ac:	91 c7       	rjmp	.+3874   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ae:	90 c7       	rjmp	.+3872   	; 0xfd0 <MIDI_GetStatusType+0x38>
  b0:	8f c7       	rjmp	.+3870   	; 0xfd0 <MIDI_GetStatusType+0x38>
  b2:	8e c7       	rjmp	.+3868   	; 0xfd0 <MIDI_GetStatusType+0x38>
  b4:	8f c7       	rjmp	.+3870   	; 0xfd4 <MIDI_GetStatusType+0x3c>
  b6:	8c c7       	rjmp	.+3864   	; 0xfd0 <MIDI_GetStatusType+0x38>
  b8:	8b c7       	rjmp	.+3862   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ba:	8a c7       	rjmp	.+3860   	; 0xfd0 <MIDI_GetStatusType+0x38>
  bc:	89 c7       	rjmp	.+3858   	; 0xfd0 <MIDI_GetStatusType+0x38>
  be:	88 c7       	rjmp	.+3856   	; 0xfd0 <MIDI_GetStatusType+0x38>
  c0:	87 c7       	rjmp	.+3854   	; 0xfd0 <MIDI_GetStatusType+0x38>
  c2:	86 c7       	rjmp	.+3852   	; 0xfd0 <MIDI_GetStatusType+0x38>
  c4:	85 c7       	rjmp	.+3850   	; 0xfd0 <MIDI_GetStatusType+0x38>
  c6:	84 c7       	rjmp	.+3848   	; 0xfd0 <MIDI_GetStatusType+0x38>
  c8:	83 c7       	rjmp	.+3846   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ca:	82 c7       	rjmp	.+3844   	; 0xfd0 <MIDI_GetStatusType+0x38>
  cc:	81 c7       	rjmp	.+3842   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ce:	80 c7       	rjmp	.+3840   	; 0xfd0 <MIDI_GetStatusType+0x38>
  d0:	7f c7       	rjmp	.+3838   	; 0xfd0 <MIDI_GetStatusType+0x38>
  d2:	7e c7       	rjmp	.+3836   	; 0xfd0 <MIDI_GetStatusType+0x38>
  d4:	7f c7       	rjmp	.+3838   	; 0xfd4 <MIDI_GetStatusType+0x3c>
  d6:	7c c7       	rjmp	.+3832   	; 0xfd0 <MIDI_GetStatusType+0x38>
  d8:	7b c7       	rjmp	.+3830   	; 0xfd0 <MIDI_GetStatusType+0x38>
  da:	7a c7       	rjmp	.+3828   	; 0xfd0 <MIDI_GetStatusType+0x38>
  dc:	79 c7       	rjmp	.+3826   	; 0xfd0 <MIDI_GetStatusType+0x38>
  de:	78 c7       	rjmp	.+3824   	; 0xfd0 <MIDI_GetStatusType+0x38>
  e0:	77 c7       	rjmp	.+3822   	; 0xfd0 <MIDI_GetStatusType+0x38>
  e2:	76 c7       	rjmp	.+3820   	; 0xfd0 <MIDI_GetStatusType+0x38>
  e4:	75 c7       	rjmp	.+3818   	; 0xfd0 <MIDI_GetStatusType+0x38>
  e6:	74 c7       	rjmp	.+3816   	; 0xfd0 <MIDI_GetStatusType+0x38>
  e8:	73 c7       	rjmp	.+3814   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ea:	72 c7       	rjmp	.+3812   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ec:	71 c7       	rjmp	.+3810   	; 0xfd0 <MIDI_GetStatusType+0x38>
  ee:	70 c7       	rjmp	.+3808   	; 0xfd0 <MIDI_GetStatusType+0x38>
  f0:	6f c7       	rjmp	.+3806   	; 0xfd0 <MIDI_GetStatusType+0x38>
  f2:	6e c7       	rjmp	.+3804   	; 0xfd0 <MIDI_GetStatusType+0x38>
  f4:	5b c7       	rjmp	.+3766   	; 0xfac <MIDI_GetStatusType+0x14>
  f6:	6c c7       	rjmp	.+3800   	; 0xfd0 <MIDI_GetStatusType+0x38>
  f8:	6b c7       	rjmp	.+3798   	; 0xfd0 <MIDI_GetStatusType+0x38>
  fa:	6a c7       	rjmp	.+3796   	; 0xfd0 <MIDI_GetStatusType+0x38>
  fc:	69 c7       	rjmp	.+3794   	; 0xfd0 <MIDI_GetStatusType+0x38>
  fe:	68 c7       	rjmp	.+3792   	; 0xfd0 <MIDI_GetStatusType+0x38>
 100:	67 c7       	rjmp	.+3790   	; 0xfd0 <MIDI_GetStatusType+0x38>
 102:	66 c7       	rjmp	.+3788   	; 0xfd0 <MIDI_GetStatusType+0x38>
 104:	65 c7       	rjmp	.+3786   	; 0xfd0 <MIDI_GetStatusType+0x38>
 106:	64 c7       	rjmp	.+3784   	; 0xfd0 <MIDI_GetStatusType+0x38>
 108:	63 c7       	rjmp	.+3782   	; 0xfd0 <MIDI_GetStatusType+0x38>
 10a:	62 c7       	rjmp	.+3780   	; 0xfd0 <MIDI_GetStatusType+0x38>
 10c:	61 c7       	rjmp	.+3778   	; 0xfd0 <MIDI_GetStatusType+0x38>
 10e:	60 c7       	rjmp	.+3776   	; 0xfd0 <MIDI_GetStatusType+0x38>
 110:	5f c7       	rjmp	.+3774   	; 0xfd0 <MIDI_GetStatusType+0x38>
 112:	5e c7       	rjmp	.+3772   	; 0xfd0 <MIDI_GetStatusType+0x38>
 114:	59 c7       	rjmp	.+3762   	; 0xfc8 <MIDI_GetStatusType+0x30>
 116:	5e c7       	rjmp	.+3772   	; 0xfd4 <MIDI_GetStatusType+0x3c>
 118:	49 c7       	rjmp	.+3730   	; 0xfac <MIDI_GetStatusType+0x14>
 11a:	5c c7       	rjmp	.+3768   	; 0xfd4 <MIDI_GetStatusType+0x3c>
 11c:	59 c7       	rjmp	.+3762   	; 0xfd0 <MIDI_GetStatusType+0x38>
 11e:	58 c7       	rjmp	.+3760   	; 0xfd0 <MIDI_GetStatusType+0x38>
 120:	57 c7       	rjmp	.+3758   	; 0xfd0 <MIDI_GetStatusType+0x38>
 122:	54 c7       	rjmp	.+3752   	; 0xfcc <MIDI_GetStatusType+0x34>
 124:	45 c7       	rjmp	.+3722   	; 0xfb0 <MIDI_GetStatusType+0x18>
 126:	54 c7       	rjmp	.+3752   	; 0xfd0 <MIDI_GetStatusType+0x38>
 128:	45 c7       	rjmp	.+3722   	; 0xfb4 <MIDI_GetStatusType+0x1c>
 12a:	46 c7       	rjmp	.+3724   	; 0xfb8 <MIDI_GetStatusType+0x20>
 12c:	47 c7       	rjmp	.+3726   	; 0xfbc <MIDI_GetStatusType+0x24>
 12e:	50 c7       	rjmp	.+3744   	; 0xfd0 <MIDI_GetStatusType+0x38>
 130:	47 c7       	rjmp	.+3726   	; 0xfc0 <MIDI_GetStatusType+0x28>
 132:	48 c7       	rjmp	.+3728   	; 0xfc4 <MIDI_GetStatusType+0x2c>
 134:	e8 c2       	rjmp	.+1488   	; 0x706 <MIDI_ParserTask+0x18>
 136:	f4 c2       	rjmp	.+1512   	; 0x720 <MIDI_ParserTask+0x32>
 138:	33 c3       	rjmp	.+1638   	; 0x7a0 <MIDI_ParserTask+0xb2>
 13a:	66 c3       	rjmp	.+1740   	; 0x808 <MIDI_ParserTask+0x11a>
 13c:	46 c3       	rjmp	.+1676   	; 0x7ca <MIDI_ParserTask+0xdc>
 13e:	75 c3       	rjmp	.+1770   	; 0x82a <MIDI_ParserTask+0x13c>
 140:	78 c3       	rjmp	.+1776   	; 0x832 <MIDI_ParserTask+0x144>
 142:	1e c2       	rjmp	.+1084   	; 0x580 <readButtonsState+0x18>
 144:	31 c2       	rjmp	.+1122   	; 0x5a8 <readButtonsState+0x40>
 146:	47 c2       	rjmp	.+1166   	; 0x5d6 <readButtonsState+0x6e>
 148:	5d c2       	rjmp	.+1210   	; 0x604 <readButtonsState+0x9c>
 14a:	70 c2       	rjmp	.+1248   	; 0x62c <readButtonsState+0xc4>
 14c:	86 c2       	rjmp	.+1292   	; 0x65a <readButtonsState+0xf2>
 14e:	94 c2       	rjmp	.+1320   	; 0x678 <readButtonsState+0x110>
 150:	aa c2       	rjmp	.+1364   	; 0x6a6 <readButtonsState+0x13e>

00000152 <.dinit>:
 152:	01 00       	.word	0x0001	; ????
 154:	01 86       	std	Z+9, r0	; 0x09
 156:	80 01       	movw	r16, r0
 158:	86 01       	movw	r16, r12
 15a:	9e 00       	.word	0x009e	; ????
 15c:	14 b2       	in	r1, 0x14	; 20
 15e:	01 9e       	mul	r0, r17
 160:	01 a4       	ldd	r0, Z+41	; 0x29
 162:	80 01       	movw	r16, r0
 164:	a4 01       	movw	r20, r8
 166:	a8 00       	.word	0x00a8	; ????
 168:	14 ca       	rjmp	.-3032   	; 0xfffff592 <__eeprom_end+0xff7ef592>
 16a:	01 a8       	ldd	r0, Z+49	; 0x31
 16c:	01 aa       	std	Z+49, r0	; 0x31
 16e:	80 01       	movw	r16, r0
 170:	aa 01       	movw	r20, r20
 172:	ab 00       	.word	0x00ab	; ????
 174:	14 ce       	rjmp	.-984    	; 0xfffffd9e <__eeprom_end+0xff7efd9e>
 176:	01 ab       	std	Z+49, r16	; 0x31
 178:	01 af       	std	Z+57, r16	; 0x39
 17a:	80 01       	movw	r16, r0
 17c:	af 01       	movw	r20, r30
 17e:	b0 00       	.word	0x00b0	; ????
 180:	14 cf       	rjmp	.-472    	; 0xffffffaa <__eeprom_end+0xff7effaa>
 182:	01 b0       	in	r0, 0x01	; 1
 184:	01 b3       	in	r16, 0x11	; 17
 186:	80 00       	.word	0x0080	; ????

00000188 <__ctors_end>:
 188:	11 24       	eor	r1, r1
 18a:	1f be       	out	0x3f, r1	; 63
 18c:	cf ef       	ldi	r28, 0xFF	; 255
 18e:	d4 e0       	ldi	r29, 0x04	; 4
 190:	de bf       	out	0x3e, r29	; 62
 192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
 194:	e2 e5       	ldi	r30, 0x52	; 82
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <__do_clear_bss+0x8>
 19c:	b5 91       	lpm	r27, Z+
 19e:	a5 91       	lpm	r26, Z+
 1a0:	35 91       	lpm	r19, Z+
 1a2:	25 91       	lpm	r18, Z+
 1a4:	05 91       	lpm	r16, Z+
 1a6:	07 fd       	sbrc	r16, 7
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <__do_clear_bss>
 1aa:	95 91       	lpm	r25, Z+
 1ac:	85 91       	lpm	r24, Z+
 1ae:	ef 01       	movw	r28, r30
 1b0:	f9 2f       	mov	r31, r25
 1b2:	e8 2f       	mov	r30, r24
 1b4:	05 90       	lpm	r0, Z+
 1b6:	0d 92       	st	X+, r0
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <__do_copy_data+0x20>
 1be:	fe 01       	movw	r30, r28
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <__do_clear_bss+0x8>

000001c2 <__do_clear_bss>:
 1c2:	1d 92       	st	X+, r1
 1c4:	a2 17       	cp	r26, r18
 1c6:	b3 07       	cpc	r27, r19
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <__do_clear_bss>
 1ca:	e7 38       	cpi	r30, 0x87	; 135
 1cc:	f4 07       	cpc	r31, r20
 1ce:	31 f7       	brne	.-52     	; 0x19c <__do_copy_data+0x8>
 1d0:	5a d7       	rcall	.+3764   	; 0x1086 <main>
 1d2:	1a c9       	rjmp	.-3532   	; 0xfffff408 <__eeprom_end+0xff7ef408>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>

Disassembly of section .text:

000014a8 <__bad_interrupt>:
    14a8:	ab c5       	rjmp	.+2902   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.main:

00001086 <main>:
#include "sh100_hardware.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
    1086:	73 d1       	rcall	.+742    	; 0x136e <UART_init>
	SH100HW_Init();
    1088:	2a dd       	rcall	.-1452   	; 0xade <SH100HW_Init>
	SH100CTRL_Init();
    108a:	cc dd       	rcall	.-1128   	; 0xc24 <SH100CTRL_Init>
	MIDICTRL_Init();
    108c:	ae d0       	rcall	.+348    	; 0x11ea <MIDICTRL_Init>
	
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    108e:	85 b5       	in	r24, 0x25	; 37
    1090:	85 60       	ori	r24, 0x05	; 5
    1092:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    1094:	ee e6       	ldi	r30, 0x6E	; 110
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	81 60       	ori	r24, 0x01	; 1
    109c:	80 83       	st	Z, r24
	TCNT0 = 100;
    109e:	84 e6       	ldi	r24, 0x64	; 100
    10a0:	86 bd       	out	0x26, r24	; 38
	
	// PCINT10, interrupt for PC2 pin(SW detect)
	PCICR |= 0x02;
    10a2:	e8 e6       	ldi	r30, 0x68	; 104
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	82 60       	ori	r24, 0x02	; 2
    10aa:	80 83       	st	Z, r24
	PCMSK1 |= 0x04;
    10ac:	ec e6       	ldi	r30, 0x6C	; 108
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	84 60       	ori	r24, 0x04	; 4
    10b4:	80 83       	st	Z, r24
	
	cpu_irq_enable();
    10b6:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
    10b8:	1a db       	rcall	.-2508   	; 0x6ee <MIDI_ParserTask>
    10ba:	fe cf       	rjmp	.-4      	; 0x10b8 <main+0x32>

Disassembly of section .text.__vector_16:

000003bc <__vector_16>:
uint8_t protectionInterval_cnt = PROTECTION_INTERVAL;
uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

ISR(TIMER0_OVF_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	2f 97       	sbiw	r28, 0x0f	; 15
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 3ec:	f7 de       	rcall	.-530    	; 0x1dc <SH100HW_MainTask>
	SH100CTRL_CheckOutputJacks();
 3ee:	4b d4       	rcall	.+2198   	; 0xc86 <SH100CTRL_CheckOutputJacks>
	
	SH100HW_Buttons_t pressedButtons = SH100HW_GetButtonsState();
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	e8 d7       	rcall	.+4048   	; 0x13c6 <SH100HW_GetButtonsState>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	3d d8       	rcall	.-3974   	; 0xfffff474 <__eeprom_end+0xff7ef474>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 3fa:	9a 81       	ldd	r25, Y+2	; 0x02
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	91 11       	cpse	r25, r1
 400:	01 c0       	rjmp	.+2      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	3a d8       	rcall	.-3980   	; 0xfffff47a <__eeprom_end+0xff7ef47a>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 406:	9b 81       	ldd	r25, Y+3	; 0x03
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	91 11       	cpse	r25, r1
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	37 d8       	rcall	.-3986   	; 0xfffff480 <__eeprom_end+0xff7ef480>
	
	// FOOTSWITCH handling
	
	if(protectionInterval_cnt == 0)
 412:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <protectionInterval_cnt>
 416:	81 11       	cpse	r24, r1
 418:	8b c0       	rjmp	.+278    	; 0x530 <__stack+0x31>
	{	
		//=============BTN CH1==========================
		if(pressedButtons.btnCh1 == BT_ON)
 41a:	8c 81       	ldd	r24, Y+4	; 0x04
 41c:	81 11       	cpse	r24, r1
 41e:	24 c0       	rjmp	.+72     	; 0x468 <__DATA_REGION_LENGTH__+0x68>
		{
			if(swProgrammingMode_cnt == 200)
 420:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <swProgrammingMode_cnt>
 424:	88 3c       	cpi	r24, 0xC8	; 200
 426:	69 f4       	brne	.+26     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
			{
				swProgrammingMode_cnt = 0;
 428:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <swProgrammingMode_cnt>
				//enter prog mode, or save settings
				if(MIDICTRL_MidiMode() == RUNNING)
 42c:	20 d8       	rcall	.-4032   	; 0xfffff46e <__eeprom_end+0xff7ef46e>
 42e:	81 11       	cpse	r24, r1
 430:	04 c0       	rjmp	.+8      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
				{
					MIDICTRL_SwitchMode(PROGRAMMING);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	fe d4       	rcall	.+2556   	; 0xe32 <MIDICTRL_SwitchMode>
					SH100CTRL_MuteAmp();
 436:	2a d8       	rcall	.-4012   	; 0xfffff48c <__eeprom_end+0xff7ef48c>
 438:	7e c0       	rjmp	.+252    	; 0x536 <__stack+0x37>
				}
				else
				{
					MIDICTRL_StoreUserCommands();
 43a:	40 d6       	rcall	.+3200   	; 0x10bc <MIDICTRL_StoreUserCommands>
					SH100CTRL_SetAmpLeds();
 43c:	fe d6       	rcall	.+3580   	; 0x123a <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 43e:	fd d7       	rcall	.+4090   	; 0x143a <SH100CTRL_UnmuteAmp>
 440:	7a c0       	rjmp	.+244    	; 0x536 <__stack+0x37>
				}
			}
			else
			{		
				if(swProgrammingMode_cnt == 0)
 442:	81 11       	cpse	r24, r1
 444:	0b c0       	rjmp	.+22     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
				{
					switch(MIDICTRL_MidiMode())
 446:	13 d8       	rcall	.-4058   	; 0xfffff46e <__eeprom_end+0xff7ef46e>
 448:	88 23       	and	r24, r24
 44a:	19 f0       	breq	.+6      	; 0x452 <__DATA_REGION_LENGTH__+0x52>
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	21 f0       	breq	.+8      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 450:	05 c0       	rjmp	.+10     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
					{
						case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL1); break;
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	ca d7       	rcall	.+3988   	; 0x13ea <SH100CTRL_BtnSwChannel>
 456:	02 c0       	rjmp	.+4      	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
						case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	99 d6       	rcall	.+3378   	; 0x118e <MIDICTRL_SetProgrammingButton>
					}
				}
				swProgrammingMode_cnt++;
 45c:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <swProgrammingMode_cnt>
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <swProgrammingMode_cnt>
 466:	67 c0       	rjmp	.+206    	; 0x536 <__stack+0x37>
			}
			return;
		}
		else swProgrammingMode_cnt=0;	
 468:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <swProgrammingMode_cnt>
		
		//=============BTN CH2==========================
		if(pressedButtons.btnCh2 == BT_ON)
 46c:	8d 81       	ldd	r24, Y+5	; 0x05
 46e:	81 11       	cpse	r24, r1
 470:	0c c0       	rjmp	.+24     	; 0x48a <__DATA_REGION_LENGTH__+0x8a>
		{
			switch(MIDICTRL_MidiMode())
 472:	fd d7       	rcall	.+4090   	; 0x146e <MIDICTRL_MidiMode>
 474:	88 23       	and	r24, r24
 476:	19 f0       	breq	.+6      	; 0x47e <__DATA_REGION_LENGTH__+0x7e>
 478:	81 30       	cpi	r24, 0x01	; 1
 47a:	21 f0       	breq	.+8      	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 47c:	5c c0       	rjmp	.+184    	; 0x536 <__stack+0x37>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL2); break;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	b4 d7       	rcall	.+3944   	; 0x13ea <SH100CTRL_BtnSwChannel>
 482:	59 c0       	rjmp	.+178    	; 0x536 <__stack+0x37>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	83 d6       	rcall	.+3334   	; 0x118e <MIDICTRL_SetProgrammingButton>
 488:	56 c0       	rjmp	.+172    	; 0x536 <__stack+0x37>
			}
			return;
		}
		
		//=============BTN CH3==========================
		if(pressedButtons.btnCh3 == BT_ON)
 48a:	8e 81       	ldd	r24, Y+6	; 0x06
 48c:	81 11       	cpse	r24, r1
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <__DATA_REGION_LENGTH__+0xa8>
		{
			switch(MIDICTRL_MidiMode())
 490:	ee d7       	rcall	.+4060   	; 0x146e <MIDICTRL_MidiMode>
 492:	88 23       	and	r24, r24
 494:	19 f0       	breq	.+6      	; 0x49c <__DATA_REGION_LENGTH__+0x9c>
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	21 f0       	breq	.+8      	; 0x4a2 <__DATA_REGION_LENGTH__+0xa2>
 49a:	4d c0       	rjmp	.+154    	; 0x536 <__stack+0x37>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL3); break;
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	a5 d7       	rcall	.+3914   	; 0x13ea <SH100CTRL_BtnSwChannel>
 4a0:	4a c0       	rjmp	.+148    	; 0x536 <__stack+0x37>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	74 d6       	rcall	.+3304   	; 0x118e <MIDICTRL_SetProgrammingButton>
 4a6:	47 c0       	rjmp	.+142    	; 0x536 <__stack+0x37>
			}
			return;
		}
		
		//=============BTN CH4==========================
		if(pressedButtons.btnCh4 == BT_ON)
 4a8:	8f 81       	ldd	r24, Y+7	; 0x07
 4aa:	81 11       	cpse	r24, r1
 4ac:	0c c0       	rjmp	.+24     	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>
		{
			switch(MIDICTRL_MidiMode())
 4ae:	df d7       	rcall	.+4030   	; 0x146e <MIDICTRL_MidiMode>
 4b0:	88 23       	and	r24, r24
 4b2:	19 f0       	breq	.+6      	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	21 f0       	breq	.+8      	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
 4b8:	3e c0       	rjmp	.+124    	; 0x536 <__stack+0x37>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL4); break;
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	96 d7       	rcall	.+3884   	; 0x13ea <SH100CTRL_BtnSwChannel>
 4be:	3b c0       	rjmp	.+118    	; 0x536 <__stack+0x37>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	65 d6       	rcall	.+3274   	; 0x118e <MIDICTRL_SetProgrammingButton>
 4c4:	38 c0       	rjmp	.+112    	; 0x536 <__stack+0x37>
			}
			return;
		}
		
		//=============BTN LOOP=========================
		if(pressedButtons.btnLoop == BT_ON)
 4c6:	89 85       	ldd	r24, Y+9	; 0x09
 4c8:	81 11       	cpse	r24, r1
 4ca:	0e c0       	rjmp	.+28     	; 0x4e8 <__DATA_REGION_LENGTH__+0xe8>
		{
			switch(MIDICTRL_MidiMode())
 4cc:	d0 d7       	rcall	.+4000   	; 0x146e <MIDICTRL_MidiMode>
 4ce:	88 23       	and	r24, r24
 4d0:	19 f0       	breq	.+6      	; 0x4d8 <__DATA_REGION_LENGTH__+0xd8>
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	31 f0       	breq	.+12     	; 0x4e2 <__DATA_REGION_LENGTH__+0xe2>
 4d6:	2f c0       	rjmp	.+94     	; 0x536 <__stack+0x37>
			{
				case RUNNING:
				{
					SH100CTRL_SwLoop();
 4d8:	a4 d7       	rcall	.+3912   	; 0x1422 <SH100CTRL_SwLoop>
					protectionInterval_cnt = PROTECTION_INTERVAL;
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <protectionInterval_cnt>
					break;
 4e0:	2a c0       	rjmp	.+84     	; 0x536 <__stack+0x37>
				}
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 4e2:	84 e0       	ldi	r24, 0x04	; 4
 4e4:	54 d6       	rcall	.+3240   	; 0x118e <MIDICTRL_SetProgrammingButton>
 4e6:	27 c0       	rjmp	.+78     	; 0x536 <__stack+0x37>
			}
			return;
		}
			
		//=============BTN AB===========================
		if(pressedButtons.btnAB == BT_ON)
 4e8:	88 85       	ldd	r24, Y+8	; 0x08
 4ea:	81 11       	cpse	r24, r1
 4ec:	1e c0       	rjmp	.+60     	; 0x52a <__stack+0x2b>
		{
			if(leaveDefSettings_cnt == 200)
 4ee:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <leaveDefSettings_cnt>
 4f2:	88 3c       	cpi	r24, 0xC8	; 200
 4f4:	49 f4       	brne	.+18     	; 0x508 <__stack+0x9>
			{
				if(MIDICTRL_MidiMode() == PROGRAMMING)
 4f6:	bb d7       	rcall	.+3958   	; 0x146e <MIDICTRL_MidiMode>
 4f8:	81 30       	cpi	r24, 0x01	; 1
 4fa:	e9 f4       	brne	.+58     	; 0x536 <__stack+0x37>
				{
					leaveDefSettings_cnt = 0;
 4fc:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <leaveDefSettings_cnt>
					MIDICTRL_DiscardCommands();
 500:	58 d7       	rcall	.+3760   	; 0x13b2 <MIDICTRL_DiscardCommands>
					SH100CTRL_SetAmpLeds();
 502:	9b d6       	rcall	.+3382   	; 0x123a <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 504:	9a d7       	rcall	.+3892   	; 0x143a <SH100CTRL_UnmuteAmp>
 506:	17 c0       	rjmp	.+46     	; 0x536 <__stack+0x37>
				}
			}
			else
			{
				leaveDefSettings_cnt++;
 508:	8f 5f       	subi	r24, 0xFF	; 255
 50a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <leaveDefSettings_cnt>
				switch(MIDICTRL_MidiMode())
 50e:	af d7       	rcall	.+3934   	; 0x146e <MIDICTRL_MidiMode>
 510:	88 23       	and	r24, r24
 512:	19 f0       	breq	.+6      	; 0x51a <__stack+0x1b>
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	31 f0       	breq	.+12     	; 0x524 <__stack+0x25>
 518:	0e c0       	rjmp	.+28     	; 0x536 <__stack+0x37>
				{
					case RUNNING: 
					{
						SH100CTRL_SwAB(); 
 51a:	89 d7       	rcall	.+3858   	; 0x142e <SH100CTRL_SwAB>
						protectionInterval_cnt = PROTECTION_INTERVAL;
 51c:	8a e0       	ldi	r24, 0x0A	; 10
 51e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <protectionInterval_cnt>
						break;
 522:	09 c0       	rjmp	.+18     	; 0x536 <__stack+0x37>
					}
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 524:	85 e0       	ldi	r24, 0x05	; 5
 526:	33 d6       	rcall	.+3174   	; 0x118e <MIDICTRL_SetProgrammingButton>
 528:	06 c0       	rjmp	.+12     	; 0x536 <__stack+0x37>
				}
			}
			return;
		}
		else leaveDefSettings_cnt=0;
 52a:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <leaveDefSettings_cnt>
 52e:	03 c0       	rjmp	.+6      	; 0x536 <__stack+0x37>
	}
	else
	{
		protectionInterval_cnt--;
 530:	81 50       	subi	r24, 0x01	; 1
 532:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <protectionInterval_cnt>
	}
}
 536:	2f 96       	adiw	r28, 0x0f	; 15
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	ff 91       	pop	r31
 548:	ef 91       	pop	r30
 54a:	bf 91       	pop	r27
 54c:	af 91       	pop	r26
 54e:	9f 91       	pop	r25
 550:	8f 91       	pop	r24
 552:	7f 91       	pop	r23
 554:	6f 91       	pop	r22
 556:	5f 91       	pop	r21
 558:	4f 91       	pop	r20
 55a:	3f 91       	pop	r19
 55c:	2f 91       	pop	r18
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

Disassembly of section .text.__vector_4:

00000eca <__vector_4>:

ISR(PCINT1_vect)
{
 eca:	1f 92       	push	r1
 ecc:	0f 92       	push	r0
 ece:	0f b6       	in	r0, 0x3f	; 63
 ed0:	0f 92       	push	r0
 ed2:	11 24       	eor	r1, r1
 ed4:	2f 93       	push	r18
 ed6:	3f 93       	push	r19
 ed8:	4f 93       	push	r20
 eda:	5f 93       	push	r21
 edc:	6f 93       	push	r22
 ede:	7f 93       	push	r23
 ee0:	8f 93       	push	r24
 ee2:	9f 93       	push	r25
 ee4:	af 93       	push	r26
 ee6:	bf 93       	push	r27
 ee8:	ef 93       	push	r30
 eea:	ff 93       	push	r31
	// Power off
	// need to check pin level?
	SH100CTRL_StoreAmpState();
 eec:	00 d2       	rcall	.+1024   	; 0x12ee <SH100CTRL_StoreAmpState>
 eee:	ff 91       	pop	r31
 ef0:	ef 91       	pop	r30
 ef2:	bf 91       	pop	r27
 ef4:	af 91       	pop	r26
 ef6:	9f 91       	pop	r25
 ef8:	8f 91       	pop	r24
 efa:	7f 91       	pop	r23
 efc:	6f 91       	pop	r22
 efe:	5f 91       	pop	r21
 f00:	4f 91       	pop	r20
 f02:	3f 91       	pop	r19
 f04:	2f 91       	pop	r18
 f06:	0f 90       	pop	r0
 f08:	0f be       	out	0x3f, r0	; 63
 f0a:	0f 90       	pop	r0
 f0c:	1f 90       	pop	r1
 f0e:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

00001466 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    1466:	88 1f       	adc	r24, r24
    1468:	88 27       	eor	r24, r24
    146a:	88 1f       	adc	r24, r24
    146c:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00001416 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	88 3f       	cpi	r24, 0xF8	; 248
    141a:	08 f4       	brcc	.+2      	; 0x141e <MIDI_IsSysRealTime+0x8>
    141c:	90 e0       	ldi	r25, 0x00	; 0
}
    141e:	89 2f       	mov	r24, r25
    1420:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000f98 <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 f98:	90 e0       	ldi	r25, 0x00	; 0
 f9a:	fc 01       	movw	r30, r24
 f9c:	e0 58       	subi	r30, 0x80	; 128
 f9e:	f1 09       	sbc	r31, r1
 fa0:	e0 38       	cpi	r30, 0x80	; 128
 fa2:	f1 05       	cpc	r31, r1
 fa4:	a8 f4       	brcc	.+42     	; 0xfd0 <MIDI_GetStatusType+0x38>
 fa6:	e6 5e       	subi	r30, 0xE6	; 230
 fa8:	ff 4f       	sbci	r31, 0xFF	; 255
 faa:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 fac:	82 e0       	ldi	r24, 0x02	; 2
 fae:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 fb0:	83 e0       	ldi	r24, 0x03	; 3
 fb2:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 fb4:	83 e0       	ldi	r24, 0x03	; 3
 fb6:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 fb8:	83 e0       	ldi	r24, 0x03	; 3
 fba:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 fbc:	83 e0       	ldi	r24, 0x03	; 3
 fbe:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 fc0:	83 e0       	ldi	r24, 0x03	; 3
 fc2:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 fc4:	83 e0       	ldi	r24, 0x03	; 3
 fc6:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 fc8:	84 e0       	ldi	r24, 0x04	; 4
 fca:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 fcc:	85 e0       	ldi	r24, 0x05	; 5
 fce:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 fd0:	80 e0       	ldi	r24, 0x00	; 0
 fd2:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 fd4:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 fd6:	08 95       	ret

Disassembly of section .text.isEqualCommands:

0000139e <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    139e:	62 13       	cpse	r22, r18
    13a0:	04 c0       	rjmp	.+8      	; 0x13aa <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data2) return false;	
    13a2:	85 17       	cp	r24, r21
    13a4:	21 f0       	breq	.+8      	; 0x13ae <isEqualCommands+0x10>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data2) return false;	
	return true;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
}
    13b0:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

00000a64 <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 a64:	cf 93       	push	r28
 a66:	df 93       	push	r29
 a68:	cd b7       	in	r28, 0x3d	; 61
 a6a:	de b7       	in	r29, 0x3e	; 62
 a6c:	68 97       	sbiw	r28, 0x18	; 24
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word((uint16_t*)0x02);
 a78:	62 e0       	ldi	r22, 0x02	; 2
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	80 e8       	ldi	r24, 0x80	; 128
 a7e:	e3 d4       	rcall	.+2502   	; 0x1446 <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 a80:	8b 3a       	cpi	r24, 0xAB	; 171
 a82:	9c 4a       	sbci	r25, 0xAC	; 172
 a84:	c1 f4       	brne	.+48     	; 0xab6 <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 a86:	40 e1       	ldi	r20, 0x10	; 16
 a88:	50 e0       	ldi	r21, 0x00	; 0
 a8a:	60 e8       	ldi	r22, 0x80	; 128
 a8c:	28 e1       	ldi	r18, 0x18	; 24
 a8e:	30 e0       	ldi	r19, 0x00	; 0
 a90:	ce 01       	movw	r24, r28
 a92:	01 96       	adiw	r24, 0x01	; 1
 a94:	f8 d3       	rcall	.+2032   	; 0x1286 <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 a96:	88 e1       	ldi	r24, 0x18	; 24
 a98:	fe 01       	movw	r30, r28
 a9a:	31 96       	adiw	r30, 0x01	; 1
 a9c:	a8 e0       	ldi	r26, 0x08	; 8
 a9e:	b1 e0       	ldi	r27, 0x01	; 1
 aa0:	01 90       	ld	r0, Z+
 aa2:	0d 92       	st	X+, r0
 aa4:	8a 95       	dec	r24
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 aa8:	6b e0       	ldi	r22, 0x0B	; 11
 aaa:	70 e0       	ldi	r23, 0x00	; 0
 aac:	80 e8       	ldi	r24, 0x80	; 128
 aae:	94 d4       	rcall	.+2344   	; 0x13d8 <eeprom_read_byte>
 ab0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
 ab4:	0b c0       	rjmp	.+22     	; 0xacc <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 ab6:	88 e1       	ldi	r24, 0x18	; 24
 ab8:	e6 e8       	ldi	r30, 0x86	; 134
 aba:	f1 e0       	ldi	r31, 0x01	; 1
 abc:	a8 e0       	ldi	r26, 0x08	; 8
 abe:	b1 e0       	ldi	r27, 0x01	; 1
 ac0:	01 90       	ld	r0, Z+
 ac2:	0d 92       	st	X+, r0
 ac4:	8a 95       	dec	r24
 ac6:	e1 f7       	brne	.-8      	; 0xac0 <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 ac8:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
	}
}
 acc:	68 96       	adiw	r28, 0x18	; 24
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	f8 94       	cli
 ad2:	de bf       	out	0x3e, r29	; 62
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	cd bf       	out	0x3d, r28	; 61
 ad8:	df 91       	pop	r29
 ada:	cf 91       	pop	r28
 adc:	08 95       	ret

Disassembly of section .text.setMidiLeds:

00000d40 <setMidiLeds>:

void setMidiLeds()
{
 d40:	cf 93       	push	r28
	if(mode == PROGRAMMING)
 d42:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 d46:	81 30       	cpi	r24, 0x01	; 1
 d48:	11 f5       	brne	.+68     	; 0xd8e <setMidiLeds+0x4e>
 d4a:	18 c0       	rjmp	.+48     	; 0xd7c <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
 d4c:	ec 2f       	mov	r30, r28
 d4e:	f0 e0       	ldi	r31, 0x00	; 0
 d50:	ef 5f       	subi	r30, 0xFF	; 255
 d52:	fe 4f       	sbci	r31, 0xFE	; 254
 d54:	80 81       	ld	r24, Z
 d56:	81 30       	cpi	r24, 0x01	; 1
 d58:	41 f0       	breq	.+16     	; 0xd6a <setMidiLeds+0x2a>
 d5a:	18 f0       	brcs	.+6      	; 0xd62 <setMidiLeds+0x22>
 d5c:	82 30       	cpi	r24, 0x02	; 2
 d5e:	49 f0       	breq	.+18     	; 0xd72 <setMidiLeds+0x32>
 d60:	0b c0       	rjmp	.+22     	; 0xd78 <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
 d62:	60 e0       	ldi	r22, 0x00	; 0
 d64:	8c 2f       	mov	r24, r28
 d66:	57 d1       	rcall	.+686    	; 0x1016 <SH100HW_SetNewLedState>
 d68:	07 c0       	rjmp	.+14     	; 0xd78 <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
 d6a:	62 e0       	ldi	r22, 0x02	; 2
 d6c:	8c 2f       	mov	r24, r28
 d6e:	53 d1       	rcall	.+678    	; 0x1016 <SH100HW_SetNewLedState>
 d70:	03 c0       	rjmp	.+6      	; 0xd78 <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
 d72:	61 e0       	ldi	r22, 0x01	; 1
 d74:	8c 2f       	mov	r24, r28
 d76:	4f d1       	rcall	.+670    	; 0x1016 <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
 d78:	cf 5f       	subi	r28, 0xFF	; 255
 d7a:	01 c0       	rjmp	.+2      	; 0xd7e <setMidiLeds+0x3e>
 d7c:	c0 e0       	ldi	r28, 0x00	; 0
 d7e:	c6 30       	cpi	r28, 0x06	; 6
 d80:	28 f3       	brcs	.-54     	; 0xd4c <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
 d82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 d86:	8f 3f       	cpi	r24, 0xFF	; 255
 d88:	11 f0       	breq	.+4      	; 0xd8e <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
 d8a:	61 e0       	ldi	r22, 0x01	; 1
 d8c:	44 d1       	rcall	.+648    	; 0x1016 <SH100HW_SetNewLedState>
		}
	}
}
 d8e:	cf 91       	pop	r28
 d90:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

000011ea <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x00; // psc = 1024 if on
    11ea:	e1 e8       	ldi	r30, 0x81	; 129
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
    11f2:	ef e6       	ldi	r30, 0x6F	; 111
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	80 83       	st	Z, r24
	TCNT1 = 0;
    11fc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    1200:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    1204:	8f ef       	ldi	r24, 0xFF	; 255
    1206:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	loadCommSetFromMemory();
    120a:	2c dc       	rcall	.-1960   	; 0xa64 <loadCommSetFromMemory>
	mode = RUNNING;
    120c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    1210:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

0000146e <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    146e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    1472:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

0000118e <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
    118e:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <currentProgBtn>
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	f9 01       	movw	r30, r18
    1196:	ef 5f       	subi	r30, 0xFF	; 255
    1198:	fe 4f       	sbci	r31, 0xFE	; 254
    119a:	90 81       	ld	r25, Z
    119c:	91 30       	cpi	r25, 0x01	; 1
    119e:	21 f4       	brne	.+8      	; 0x11a8 <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
    11a0:	f9 01       	movw	r30, r18
    11a2:	ef 5f       	subi	r30, 0xFF	; 255
    11a4:	fe 4f       	sbci	r31, 0xFE	; 254
    11a6:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
    11a8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
    11ac:	e8 2f       	mov	r30, r24
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	ef 5f       	subi	r30, 0xFF	; 255
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 83       	st	Z, r24
	setMidiLeds();
    11b8:	c3 dd       	rcall	.-1146   	; 0xd40 <setMidiLeds>
    11ba:	08 95       	ret

Disassembly of section .text.MIDICTRL_SwitchMode:

00000e32 <MIDICTRL_SwitchMode>:
	loadCommSetFromMemory();
	mode = RUNNING;
}

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
 e32:	cf 93       	push	r28
 e34:	c8 2f       	mov	r28, r24
	if(mode == RUNNING)
 e36:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 e3a:	81 11       	cpse	r24, r1
 e3c:	18 c0       	rjmp	.+48     	; 0xe6e <MIDICTRL_SwitchMode+0x3c>
	{
		MIDI_SetRetranslateState(false);
 e3e:	23 d3       	rcall	.+1606   	; 0x1486 <MIDI_SetRetranslateState>
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
 e40:	80 e0       	ldi	r24, 0x00	; 0
 e42:	06 c0       	rjmp	.+12     	; 0xe50 <MIDICTRL_SwitchMode+0x1e>
			midiProgBtnState[i] = PROG_CLEAR;
 e44:	e8 2f       	mov	r30, r24
 e46:	f0 e0       	ldi	r31, 0x00	; 0
 e48:	ef 5f       	subi	r30, 0xFF	; 255
 e4a:	fe 4f       	sbci	r31, 0xFE	; 254
 e4c:	10 82       	st	Z, r1
{	
	if(mode == RUNNING)
	{
		MIDI_SetRetranslateState(false);
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
 e4e:	8f 5f       	subi	r24, 0xFF	; 255
 e50:	86 30       	cpi	r24, 0x06	; 6
 e52:	c0 f3       	brcs	.-16     	; 0xe44 <MIDICTRL_SwitchMode+0x12>
			midiProgBtnState[i] = PROG_CLEAR;
		
		MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
 e54:	80 e0       	ldi	r24, 0x00	; 0
 e56:	9b d1       	rcall	.+822    	; 0x118e <MIDICTRL_SetProgrammingButton>
		setMidiLeds();
 e58:	73 df       	rcall	.-282    	; 0xd40 <setMidiLeds>
		
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
 e5a:	63 e0       	ldi	r22, 0x03	; 3
 e5c:	87 e0       	ldi	r24, 0x07	; 7
 e5e:	db d0       	rcall	.+438    	; 0x1016 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
 e60:	63 e0       	ldi	r22, 0x03	; 3
 e62:	88 e0       	ldi	r24, 0x08	; 8
 e64:	d8 d0       	rcall	.+432    	; 0x1016 <SH100HW_SetNewLedState>
		
		SH100HW_SetNewLedState(LED_B, LED_OFF);
 e66:	60 e0       	ldi	r22, 0x00	; 0
 e68:	86 e0       	ldi	r24, 0x06	; 6
 e6a:	d5 d0       	rcall	.+426    	; 0x1016 <SH100HW_SetNewLedState>
 e6c:	04 c0       	rjmp	.+8      	; 0xe76 <MIDICTRL_SwitchMode+0x44>
	}
	else
	{
		//SH100HW_SetPreviousLedState(LED_PWR_GRN);
		//SH100HW_SetPreviousLedState(LED_PWR_RED);
		SH100HW_SetPreviousLedState(LED_B);
 e6e:	86 e0       	ldi	r24, 0x06	; 6
 e70:	d0 d1       	rcall	.+928    	; 0x1212 <SH100HW_SetPreviousLedState>
		
		MIDI_SetRetranslateState(true);
 e72:	81 e0       	ldi	r24, 0x01	; 1
 e74:	08 d3       	rcall	.+1552   	; 0x1486 <MIDI_SetRetranslateState>
	}
	mode = newMode;
 e76:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <mode>
}
 e7a:	cf 91       	pop	r28
 e7c:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

00001474 <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    1474:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <channelNum>
    1478:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

0000147a <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    147a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <omniModeEnabled>
    147e:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

00001480 <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    1480:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <muteCommandEnabled>
    1484:	08 95       	ret

Disassembly of section .text.programmBtn:

00000e7e <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
 e7e:	cf 92       	push	r12
 e80:	df 92       	push	r13
 e82:	ef 92       	push	r14
 e84:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
 e86:	30 e0       	ldi	r19, 0x00	; 0
 e88:	f9 01       	movw	r30, r18
 e8a:	ef 5f       	subi	r30, 0xFF	; 255
 e8c:	fe 4f       	sbci	r31, 0xFE	; 254
 e8e:	90 81       	ld	r25, Z
 e90:	91 30       	cpi	r25, 0x01	; 1
 e92:	b9 f4       	brne	.+46     	; 0xec2 <programmBtn+0x44>
 e94:	6a 01       	movw	r12, r20
 e96:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
 e98:	fa 01       	movw	r30, r20
 e9a:	84 91       	lpm	r24, Z
 e9c:	e7 fc       	sbrc	r14, 7
 e9e:	80 81       	ld	r24, Z
 ea0:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
 ea2:	82 e0       	ldi	r24, 0x02	; 2
 ea4:	c8 0e       	add	r12, r24
 ea6:	d1 1c       	adc	r13, r1
 ea8:	e1 1c       	adc	r14, r1
 eaa:	f6 01       	movw	r30, r12
 eac:	84 91       	lpm	r24, Z
 eae:	e7 fc       	sbrc	r14, 7
 eb0:	80 81       	ld	r24, Z
 eb2:	12 96       	adiw	r26, 0x02	; 2
 eb4:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
 eb6:	f9 01       	movw	r30, r18
 eb8:	ef 5f       	subi	r30, 0xFF	; 255
 eba:	fe 4f       	sbci	r31, 0xFE	; 254
 ebc:	82 e0       	ldi	r24, 0x02	; 2
 ebe:	80 83       	st	Z, r24
		setMidiLeds();
 ec0:	3f df       	rcall	.-386    	; 0xd40 <setMidiLeds>
	}
}
 ec2:	ef 90       	pop	r14
 ec4:	df 90       	pop	r13
 ec6:	cf 90       	pop	r12
 ec8:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

000010bc <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
    10bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	b1 f4       	brne	.+44     	; 0x10f0 <MIDICTRL_StoreUserCommands+0x34>
	{
		commandSet = USER;
    10c4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
		
		eeprom_write_word((uint16_t*)0x02, MEMORY_MAGIC_WORD);
    10c8:	6b ea       	ldi	r22, 0xAB	; 171
    10ca:	7c ea       	ldi	r23, 0xAC	; 172
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	e6 d1       	rcall	.+972    	; 0x149e <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
    10d2:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <commandSet>
    10d6:	8b e0       	ldi	r24, 0x0B	; 11
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	17 d1       	rcall	.+558    	; 0x130a <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
    10dc:	68 e0       	ldi	r22, 0x08	; 8
    10de:	71 e0       	ldi	r23, 0x01	; 1
    10e0:	80 e8       	ldi	r24, 0x80	; 128
    10e2:	28 e1       	ldi	r18, 0x18	; 24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	4c e0       	ldi	r20, 0x0C	; 12
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	38 d0       	rcall	.+112    	; 0x115c <eeprom_write_block>
		
		mode = RUNNING;
    10ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    10f0:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

000013b2 <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    13b2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <MIDICTRL_DiscardCommands+0x12>
	{
		commandSet = DEFAULT;
    13ba:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
		loadCommSetFromMemory();
    13be:	52 db       	rcall	.-2396   	; 0xa64 <loadCommSetFromMemory>
		mode = RUNNING;
    13c0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    13c4:	08 95       	ret

Disassembly of section .text.indicateMidiError:

000011bc <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 255 - 100;
    11bc:	8b e9       	ldi	r24, 0x9B	; 155
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    11c4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TCCR1B |= 0x05; // psc = 1024, timer on
    11c8:	e1 e8       	ldi	r30, 0x81	; 129
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	85 60       	ori	r24, 0x05	; 5
    11d0:	80 83       	st	Z, r24
	currentErrBtnId = currentProgBtn;
    11d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
    11d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
    11da:	b2 dd       	rcall	.-1180   	; 0xd40 <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	87 e0       	ldi	r24, 0x07	; 7
    11e0:	1a df       	rcall	.-460    	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	88 e0       	ldi	r24, 0x08	; 8
    11e6:	17 df       	rcall	.-466    	; 0x1016 <SH100HW_SetNewLedState>
    11e8:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

00000844 <MIDICTRL_HandleCommand>:
		setMidiLeds();
	}
}

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	00 d0       	rcall	.+0      	; 0x84a <MIDICTRL_HandleCommand+0x6>
 84a:	00 d0       	rcall	.+0      	; 0x84c <MIDICTRL_HandleCommand+0x8>
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	69 83       	std	Y+1, r22	; 0x01
 852:	7a 83       	std	Y+2, r23	; 0x02
 854:	8b 83       	std	Y+3, r24	; 0x03
 856:	9c 83       	std	Y+4, r25	; 0x04
	switch(mode)
 858:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 85c:	88 23       	and	r24, r24
 85e:	19 f0       	breq	.+6      	; 0x866 <MIDICTRL_HandleCommand+0x22>
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	d9 f1       	breq	.+118    	; 0x8da <MIDICTRL_HandleCommand+0x96>
 864:	8f c0       	rjmp	.+286    	; 0x984 <MIDICTRL_HandleCommand+0x140>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 866:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <omniModeEnabled>
 86a:	81 11       	cpse	r24, r1
 86c:	05 c0       	rjmp	.+10     	; 0x878 <MIDICTRL_HandleCommand+0x34>
			{
				if(channelNum != command.channel) return;
 86e:	9a 81       	ldd	r25, Y+2	; 0x02
 870:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <channelNum>
 874:	98 13       	cpse	r25, r24
 876:	86 c0       	rjmp	.+268    	; 0x984 <MIDICTRL_HandleCommand+0x140>
			}
			
			if(muteCommandEnabled)
 878:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <muteCommandEnabled>
 87c:	88 23       	and	r24, r24
 87e:	a9 f0       	breq	.+42     	; 0x8aa <MIDICTRL_HandleCommand+0x66>
			{
				if(isEqualCommands(command, muteCommand)) 
 880:	88 ed       	ldi	r24, 0xD8	; 216
 882:	91 e0       	ldi	r25, 0x01	; 1
 884:	a0 e0       	ldi	r26, 0x00	; 0
 886:	fc 01       	movw	r30, r24
 888:	5a 2f       	mov	r21, r26
 88a:	7d d5       	rcall	.+2810   	; 0x1386 <__xload_4>
 88c:	9b 01       	movw	r18, r22
 88e:	ac 01       	movw	r20, r24
 890:	69 81       	ldd	r22, Y+1	; 0x01
 892:	7a 81       	ldd	r23, Y+2	; 0x02
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	9c 81       	ldd	r25, Y+4	; 0x04
 898:	82 d5       	rcall	.+2820   	; 0x139e <isEqualCommands>
 89a:	88 23       	and	r24, r24
 89c:	31 f0       	breq	.+12     	; 0x8aa <MIDICTRL_HandleCommand+0x66>
				{
					if(command.data2>0) SH100CTRL_MuteAmp();
 89e:	8c 81       	ldd	r24, Y+4	; 0x04
 8a0:	88 23       	and	r24, r24
 8a2:	11 f0       	breq	.+4      	; 0x8a8 <MIDICTRL_HandleCommand+0x64>
 8a4:	f3 d5       	rcall	.+3046   	; 0x148c <SH100CTRL_MuteAmp>
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <MIDICTRL_HandleCommand+0x66>
					else SH100CTRL_UnmuteAmp();
 8a8:	c8 d5       	rcall	.+2960   	; 0x143a <SH100CTRL_UnmuteAmp>
				}
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 8aa:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	19 f4       	brne	.+6      	; 0x8b8 <MIDICTRL_HandleCommand+0x74>
 8b2:	e8 e0       	ldi	r30, 0x08	; 8
 8b4:	f1 e0       	ldi	r31, 0x01	; 1
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <MIDICTRL_HandleCommand+0x78>
			else currentCommandBlock = &defaultCommands;
 8b8:	e6 e8       	ldi	r30, 0x86	; 134
 8ba:	f1 e0       	ldi	r31, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) SH100CTRL_SwChannel(0); return;
 8bc:	20 81       	ld	r18, Z
 8be:	31 81       	ldd	r19, Z+1	; 0x01
 8c0:	42 81       	ldd	r20, Z+2	; 0x02
 8c2:	53 81       	ldd	r21, Z+3	; 0x03
 8c4:	69 81       	ldd	r22, Y+1	; 0x01
 8c6:	7a 81       	ldd	r23, Y+2	; 0x02
 8c8:	8b 81       	ldd	r24, Y+3	; 0x03
 8ca:	9c 81       	ldd	r25, Y+4	; 0x04
 8cc:	68 d5       	rcall	.+2768   	; 0x139e <isEqualCommands>
 8ce:	88 23       	and	r24, r24
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <MIDICTRL_HandleCommand+0x90>
 8d2:	58 c0       	rjmp	.+176    	; 0x984 <MIDICTRL_HandleCommand+0x140>
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	bd d5       	rcall	.+2938   	; 0x1452 <SH100CTRL_SwChannel>
 8d8:	55 c0       	rjmp	.+170    	; 0x984 <MIDICTRL_HandleCommand+0x140>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command.status == MIDI_COMM_PROGRAM_CHANGE)
 8da:	89 81       	ldd	r24, Y+1	; 0x01
 8dc:	80 3c       	cpi	r24, 0xC0	; 192
 8de:	81 f5       	brne	.+96     	; 0x940 <MIDICTRL_HandleCommand+0xfc>
			{
				switch(currentProgBtn)
 8e0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 8e4:	81 30       	cpi	r24, 0x01	; 1
 8e6:	79 f0       	breq	.+30     	; 0x906 <MIDICTRL_HandleCommand+0xc2>
 8e8:	28 f0       	brcs	.+10     	; 0x8f4 <MIDICTRL_HandleCommand+0xb0>
 8ea:	82 30       	cpi	r24, 0x02	; 2
 8ec:	a9 f0       	breq	.+42     	; 0x918 <MIDICTRL_HandleCommand+0xd4>
 8ee:	83 30       	cpi	r24, 0x03	; 3
 8f0:	e1 f0       	breq	.+56     	; 0x92a <MIDICTRL_HandleCommand+0xe6>
 8f2:	24 c0       	rjmp	.+72     	; 0x93c <MIDICTRL_HandleCommand+0xf8>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), &command, MIDI_PROG_BTN_CH1); break;
 8f4:	ae 01       	movw	r20, r28
 8f6:	4f 5f       	subi	r20, 0xFF	; 255
 8f8:	5f 4f       	sbci	r21, 0xFF	; 255
 8fa:	60 e8       	ldi	r22, 0x80	; 128
 8fc:	20 e0       	ldi	r18, 0x00	; 0
 8fe:	88 e0       	ldi	r24, 0x08	; 8
 900:	91 e0       	ldi	r25, 0x01	; 1
 902:	bd d2       	rcall	.+1402   	; 0xe7e <programmBtn>
 904:	3f c0       	rjmp	.+126    	; 0x984 <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), &command, MIDI_PROG_BTN_CH2); break;
 906:	ae 01       	movw	r20, r28
 908:	4f 5f       	subi	r20, 0xFF	; 255
 90a:	5f 4f       	sbci	r21, 0xFF	; 255
 90c:	60 e8       	ldi	r22, 0x80	; 128
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	8c e0       	ldi	r24, 0x0C	; 12
 912:	91 e0       	ldi	r25, 0x01	; 1
 914:	b4 d2       	rcall	.+1384   	; 0xe7e <programmBtn>
 916:	36 c0       	rjmp	.+108    	; 0x984 <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), &command, MIDI_PROG_BTN_CH3); break;
 918:	ae 01       	movw	r20, r28
 91a:	4f 5f       	subi	r20, 0xFF	; 255
 91c:	5f 4f       	sbci	r21, 0xFF	; 255
 91e:	60 e8       	ldi	r22, 0x80	; 128
 920:	22 e0       	ldi	r18, 0x02	; 2
 922:	80 e1       	ldi	r24, 0x10	; 16
 924:	91 e0       	ldi	r25, 0x01	; 1
 926:	ab d2       	rcall	.+1366   	; 0xe7e <programmBtn>
 928:	2d c0       	rjmp	.+90     	; 0x984 <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), &command, MIDI_PROG_BTN_CH4); break;
 92a:	ae 01       	movw	r20, r28
 92c:	4f 5f       	subi	r20, 0xFF	; 255
 92e:	5f 4f       	sbci	r21, 0xFF	; 255
 930:	60 e8       	ldi	r22, 0x80	; 128
 932:	23 e0       	ldi	r18, 0x03	; 3
 934:	84 e1       	ldi	r24, 0x14	; 20
 936:	91 e0       	ldi	r25, 0x01	; 1
 938:	a2 d2       	rcall	.+1348   	; 0xe7e <programmBtn>
 93a:	24 c0       	rjmp	.+72     	; 0x984 <MIDICTRL_HandleCommand+0x140>
					default: indicateMidiError(); break; 
 93c:	3f d4       	rcall	.+2174   	; 0x11bc <indicateMidiError>
 93e:	22 c0       	rjmp	.+68     	; 0x984 <MIDICTRL_HandleCommand+0x140>
				}
			}
			else if(command.status == MIDI_COMM_CONTROL_CHANGE)
 940:	80 3b       	cpi	r24, 0xB0	; 176
 942:	f9 f4       	brne	.+62     	; 0x982 <MIDICTRL_HandleCommand+0x13e>
			{
				if(command.data1 == muteCommand.data1)
 944:	8b 81       	ldd	r24, Y+3	; 0x03
 946:	87 30       	cpi	r24, 0x07	; 7
 948:	11 f4       	brne	.+4      	; 0x94e <MIDICTRL_HandleCommand+0x10a>
				{
					indicateMidiError();
 94a:	38 d4       	rcall	.+2160   	; 0x11bc <indicateMidiError>
 94c:	1b c0       	rjmp	.+54     	; 0x984 <MIDICTRL_HandleCommand+0x140>
				}
				else
				{
					switch(currentProgBtn)
 94e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 952:	84 30       	cpi	r24, 0x04	; 4
 954:	59 f0       	breq	.+22     	; 0x96c <MIDICTRL_HandleCommand+0x128>
 956:	85 30       	cpi	r24, 0x05	; 5
 958:	91 f4       	brne	.+36     	; 0x97e <MIDICTRL_HandleCommand+0x13a>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), &command, MIDI_PROG_BTN_AB); break;
 95a:	ae 01       	movw	r20, r28
 95c:	4f 5f       	subi	r20, 0xFF	; 255
 95e:	5f 4f       	sbci	r21, 0xFF	; 255
 960:	60 e8       	ldi	r22, 0x80	; 128
 962:	25 e0       	ldi	r18, 0x05	; 5
 964:	8c e1       	ldi	r24, 0x1C	; 28
 966:	91 e0       	ldi	r25, 0x01	; 1
 968:	8a d2       	rcall	.+1300   	; 0xe7e <programmBtn>
 96a:	0c c0       	rjmp	.+24     	; 0x984 <MIDICTRL_HandleCommand+0x140>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), &command, MIDI_PROG_BTN_LOOP); break;
 96c:	ae 01       	movw	r20, r28
 96e:	4f 5f       	subi	r20, 0xFF	; 255
 970:	5f 4f       	sbci	r21, 0xFF	; 255
 972:	60 e8       	ldi	r22, 0x80	; 128
 974:	24 e0       	ldi	r18, 0x04	; 4
 976:	88 e1       	ldi	r24, 0x18	; 24
 978:	91 e0       	ldi	r25, 0x01	; 1
 97a:	81 d2       	rcall	.+1282   	; 0xe7e <programmBtn>
 97c:	03 c0       	rjmp	.+6      	; 0x984 <MIDICTRL_HandleCommand+0x140>
						default: indicateMidiError(); break;
 97e:	1e d4       	rcall	.+2108   	; 0x11bc <indicateMidiError>
 980:	01 c0       	rjmp	.+2      	; 0x984 <MIDICTRL_HandleCommand+0x140>
					}
				}
			}
			else
			{
				indicateMidiError();
 982:	1c d4       	rcall	.+2104   	; 0x11bc <indicateMidiError>
			}			
			break;
		}
	}	
}
 984:	0f 90       	pop	r0
 986:	0f 90       	pop	r0
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	df 91       	pop	r29
 98e:	cf 91       	pop	r28
 990:	08 95       	ret

Disassembly of section .text.__vector_13:

00000ce4 <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
 ce4:	1f 92       	push	r1
 ce6:	0f 92       	push	r0
 ce8:	0f b6       	in	r0, 0x3f	; 63
 cea:	0f 92       	push	r0
 cec:	11 24       	eor	r1, r1
 cee:	2f 93       	push	r18
 cf0:	3f 93       	push	r19
 cf2:	4f 93       	push	r20
 cf4:	5f 93       	push	r21
 cf6:	6f 93       	push	r22
 cf8:	7f 93       	push	r23
 cfa:	8f 93       	push	r24
 cfc:	9f 93       	push	r25
 cfe:	af 93       	push	r26
 d00:	bf 93       	push	r27
 d02:	ef 93       	push	r30
 d04:	ff 93       	push	r31
	TCCR1B |= 0x00; // psc = 0, timer off
 d06:	e1 e8       	ldi	r30, 0x81	; 129
 d08:	f0 e0       	ldi	r31, 0x00	; 0
 d0a:	80 81       	ld	r24, Z
 d0c:	80 83       	st	Z, r24
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
 d0e:	8f ef       	ldi	r24, 0xFF	; 255
 d10:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
 d14:	15 d0       	rcall	.+42     	; 0xd40 <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
 d16:	87 e0       	ldi	r24, 0x07	; 7
 d18:	7c d2       	rcall	.+1272   	; 0x1212 <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
 d1a:	88 e0       	ldi	r24, 0x08	; 8
 d1c:	7a d2       	rcall	.+1268   	; 0x1212 <SH100HW_SetPreviousLedState>
 d1e:	ff 91       	pop	r31
 d20:	ef 91       	pop	r30
 d22:	bf 91       	pop	r27
 d24:	af 91       	pop	r26
 d26:	9f 91       	pop	r25
 d28:	8f 91       	pop	r24
 d2a:	7f 91       	pop	r23
 d2c:	6f 91       	pop	r22
 d2e:	5f 91       	pop	r21
 d30:	4f 91       	pop	r20
 d32:	3f 91       	pop	r19
 d34:	2f 91       	pop	r18
 d36:	0f 90       	pop	r0
 d38:	0f be       	out	0x3f, r0	; 63
 d3a:	0f 90       	pop	r0
 d3c:	1f 90       	pop	r1
 d3e:	18 95       	reti

Disassembly of section .text.handleRealTimeStatus:

000014a4 <handleRealTimeStatus>:
	HADLE_SYS_EX
}state = RESET;

void handleRealTimeStatus(MIDI_Status_t status)
{
	UART_PushWord(status);
    14a4:	35 dd       	rcall	.-1430   	; 0xf10 <UART_PushWord>
    14a6:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

000006ee <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 6ee:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <state>
 6f2:	8e 2f       	mov	r24, r30
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	87 30       	cpi	r24, 0x07	; 7
 6f8:	91 05       	cpc	r25, r1
 6fa:	08 f0       	brcs	.+2      	; 0x6fe <MIDI_ParserTask+0x10>
 6fc:	a2 c0       	rjmp	.+324    	; 0x842 <MIDI_ParserTask+0x154>
 6fe:	fc 01       	movw	r30, r24
 700:	e6 56       	subi	r30, 0x66	; 102
 702:	ff 4f       	sbci	r31, 0xFF	; 255
 704:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 706:	e4 e2       	ldi	r30, 0x24	; 36
 708:	f1 e0       	ldi	r31, 0x01	; 1
 70a:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 70c:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 70e:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 710:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 714:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 71e:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 720:	6c d6       	rcall	.+3288   	; 0x13fa <UART_RxBufferNotEmpty>
 722:	88 23       	and	r24, r24
 724:	09 f4       	brne	.+2      	; 0x728 <MIDI_ParserTask+0x3a>
 726:	8d c0       	rjmp	.+282    	; 0x842 <MIDI_ParserTask+0x154>
			{
				recievedWord = UART_PopWord();
 728:	ff d4       	rcall	.+2558   	; 0x1128 <UART_PopWord>
 72a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 72e:	73 d6       	rcall	.+3302   	; 0x1416 <MIDI_IsSysRealTime>
 730:	88 23       	and	r24, r24
 732:	21 f0       	breq	.+8      	; 0x73c <MIDI_ParserTask+0x4e>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
 734:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 738:	b5 d6       	rcall	.+3434   	; 0x14a4 <handleRealTimeStatus>
					return;
 73a:	08 95       	ret
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 73c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 740:	92 d6       	rcall	.+3364   	; 0x1466 <MIDI_IsStatusWord>
 742:	88 23       	and	r24, r24
 744:	21 f0       	breq	.+8      	; 0x74e <MIDI_ParserTask+0x60>
				{					
					state = DISPATCH_STATUS;
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 74c:	20 c0       	rjmp	.+64     	; 0x78e <MIDI_ParserTask+0xa0>
				}
				else
				{
					switch(currentStatusType)
 74e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <currentStatusType>
 752:	82 30       	cpi	r24, 0x02	; 2
 754:	49 f0       	breq	.+18     	; 0x768 <MIDI_ParserTask+0x7a>
 756:	18 f4       	brcc	.+6      	; 0x75e <MIDI_ParserTask+0x70>
 758:	81 30       	cpi	r24, 0x01	; 1
 75a:	51 f0       	breq	.+20     	; 0x770 <MIDI_ParserTask+0x82>
 75c:	15 c0       	rjmp	.+42     	; 0x788 <MIDI_ParserTask+0x9a>
 75e:	84 30       	cpi	r24, 0x04	; 4
 760:	59 f0       	breq	.+22     	; 0x778 <MIDI_ParserTask+0x8a>
 762:	85 30       	cpi	r24, 0x05	; 5
 764:	69 f0       	breq	.+26     	; 0x780 <MIDI_ParserTask+0x92>
 766:	10 c0       	rjmp	.+32     	; 0x788 <MIDI_ParserTask+0x9a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 768:	84 e0       	ldi	r24, 0x04	; 4
 76a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 76e:	0f c0       	rjmp	.+30     	; 0x78e <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 770:	83 e0       	ldi	r24, 0x03	; 3
 772:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 776:	0b c0       	rjmp	.+22     	; 0x78e <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 778:	85 e0       	ldi	r24, 0x05	; 5
 77a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 77e:	07 c0       	rjmp	.+14     	; 0x78e <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 780:	86 e0       	ldi	r24, 0x06	; 6
 782:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 786:	03 c0       	rjmp	.+6      	; 0x78e <MIDI_ParserTask+0xa0>
						default: state = WAIT_WORD;
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
					}
				}
				
				if(retranslate)
 78e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <retranslate>
 792:	88 23       	and	r24, r24
 794:	09 f4       	brne	.+2      	; 0x798 <MIDI_ParserTask+0xaa>
 796:	55 c0       	rjmp	.+170    	; 0x842 <MIDI_ParserTask+0x154>
				{
					UART_PushWord(recievedWord);
 798:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 79c:	b9 d3       	rcall	.+1906   	; 0xf10 <UART_PushWord>
 79e:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 7a0:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <recievedWord>
 7a4:	89 2f       	mov	r24, r25
 7a6:	82 95       	swap	r24
 7a8:	8f 70       	andi	r24, 0x0F	; 15
 7aa:	e4 e2       	ldi	r30, 0x24	; 36
 7ac:	f1 e0       	ldi	r31, 0x01	; 1
 7ae:	80 83       	st	Z, r24
			currentCommand.channel = recievedWord & 0x0F;
 7b0:	9f 70       	andi	r25, 0x0F	; 15
 7b2:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 7b4:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 7b6:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 7b8:	ef d3       	rcall	.+2014   	; 0xf98 <MIDI_GetStatusType>
 7ba:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 7be:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 7c8:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 7ca:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <isSecondDataWord>
 7ce:	88 23       	and	r24, r24
 7d0:	81 f0       	breq	.+32     	; 0x7f2 <MIDI_ParserTask+0x104>
			{
				currentCommand.data2 = recievedWord;
 7d2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 7d6:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <currentCommand+0x3>
				isSecondDataWord = false;			
 7da:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 7de:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 7e2:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 7e6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 7ea:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 7ee:	2a d0       	rcall	.+84     	; 0x844 <MIDICTRL_HandleCommand>
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <MIDI_ParserTask+0x112>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 7f2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 7f6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
				isSecondDataWord = true;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isSecondDataWord>
			}
			state = WAIT_WORD;
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 806:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 808:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 80c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 810:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 814:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 818:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 81c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 820:	11 d0       	rcall	.+34     	; 0x844 <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 828:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 830:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 832:	e4 e2       	ldi	r30, 0x24	; 36
 834:	f1 e0       	ldi	r31, 0x01	; 1
 836:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 838:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 83a:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 842:	08 95       	ret

Disassembly of section .text.MIDI_SetRetranslateState:

00001486 <MIDI_SetRetranslateState>:
	}
}

void MIDI_SetRetranslateState(bool enabled)
{
	retranslate = enabled;
    1486:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <retranslate>
    148a:	08 95       	ret

Disassembly of section .text.setChannelLeds:

000012aa <setChannelLeds>:
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	b3 de       	rcall	.-666    	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	b0 de       	rcall	.-672    	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	ad de       	rcall	.-678    	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	83 e0       	ldi	r24, 0x03	; 3
    12c0:	aa de       	rcall	.-684    	; 0x1016 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ampState>
    12c8:	a6 de       	rcall	.-692    	; 0x1016 <SH100HW_SetNewLedState>
    12ca:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

00000fd8 <SH100CTRL_SetAmpState>:
	
	SH100CTRL_SetAmpState(ampState);
}

void SH100CTRL_SetAmpState(SH100_State_t state)
{
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
	ampState = state;
     fdc:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <ampState>
     fe0:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <ampState+0x1>
     fe4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ampState+0x2>
	
	SH100HW_SetCh(ampState.channelNum);
     fe8:	c9 e2       	ldi	r28, 0x29	; 41
     fea:	d1 e0       	ldi	r29, 0x01	; 1
     fec:	86 2f       	mov	r24, r22
     fee:	fa de       	rcall	.-524    	; 0xde4 <SH100HW_SetCh>
	SH100HW_LoopEn(ampState.loopOn);
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	a5 d1       	rcall	.+842    	; 0x133e <SH100HW_LoopEn>
	SH100HW_SetAB(ampState.swAB);
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	4d d2       	rcall	.+1178   	; 0x1492 <SH100HW_SetAB>
	
	setChannelLeds();
     ff8:	58 d1       	rcall	.+688    	; 0x12aa <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
     ffa:	69 81       	ldd	r22, Y+1	; 0x01
     ffc:	84 e0       	ldi	r24, 0x04	; 4
     ffe:	0b d0       	rcall	.+22     	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1000:	6a 81       	ldd	r22, Y+2	; 0x02
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	68 27       	eor	r22, r24
    1006:	85 e0       	ldi	r24, 0x05	; 5
    1008:	06 d0       	rcall	.+12     	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    100a:	6a 81       	ldd	r22, Y+2	; 0x02
    100c:	86 e0       	ldi	r24, 0x06	; 6
    100e:	03 d0       	rcall	.+6      	; 0x1016 <SH100HW_SetNewLedState>
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000c24 <SH100CTRL_Init>:
SH100_State_t ampState;

void setChannelLeds();

void SH100CTRL_Init()
{
 c24:	cf 93       	push	r28
 c26:	df 93       	push	r29
 c28:	00 d0       	rcall	.+0      	; 0xc2a <SH100CTRL_Init+0x6>
 c2a:	0f 92       	push	r0
 c2c:	cd b7       	in	r28, 0x3d	; 61
 c2e:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 c30:	60 e0       	ldi	r22, 0x00	; 0
 c32:	70 e0       	ldi	r23, 0x00	; 0
 c34:	80 e0       	ldi	r24, 0x00	; 0
 c36:	07 d4       	rcall	.+2062   	; 0x1446 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 c38:	8b 3a       	cpi	r24, 0xAB	; 171
 c3a:	9c 4a       	sbci	r25, 0xAC	; 172
 c3c:	91 f4       	brne	.+36     	; 0xc62 <SH100CTRL_Init+0x3e>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
 c3e:	48 e0       	ldi	r20, 0x08	; 8
 c40:	50 e0       	ldi	r21, 0x00	; 0
 c42:	60 e8       	ldi	r22, 0x80	; 128
 c44:	23 e0       	ldi	r18, 0x03	; 3
 c46:	30 e0       	ldi	r19, 0x00	; 0
 c48:	ce 01       	movw	r24, r28
 c4a:	01 96       	adiw	r24, 0x01	; 1
 c4c:	1c d3       	rcall	.+1592   	; 0x1286 <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 c4e:	89 81       	ldd	r24, Y+1	; 0x01
 c50:	9a 81       	ldd	r25, Y+2	; 0x02
 c52:	ab 81       	ldd	r26, Y+3	; 0x03
 c54:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ampState>
 c58:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ampState+0x1>
 c5c:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <ampState+0x2>
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <SH100CTRL_Init+0x48>
	}
	else
	{
		ampState.channelNum = 0;
 c62:	e9 e2       	ldi	r30, 0x29	; 41
 c64:	f1 e0       	ldi	r31, 0x01	; 1
 c66:	10 82       	st	Z, r1
		ampState.loopOn = false;
 c68:	11 82       	std	Z+1, r1	; 0x01
		ampState.swAB = false;		
 c6a:	12 82       	std	Z+2, r1	; 0x02
	}
	
	SH100CTRL_SetAmpState(ampState);
 c6c:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <ampState>
 c70:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <ampState+0x1>
 c74:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ampState+0x2>
 c78:	af d1       	rcall	.+862    	; 0xfd8 <SH100CTRL_SetAmpState>
}
 c7a:	0f 90       	pop	r0
 c7c:	0f 90       	pop	r0
 c7e:	0f 90       	pop	r0
 c80:	df 91       	pop	r29
 c82:	cf 91       	pop	r28
 c84:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

0000123a <SH100CTRL_SetAmpLeds>:
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
}

void SH100CTRL_SetAmpLeds()
{
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
	setChannelLeds();
    123e:	35 d0       	rcall	.+106    	; 0x12aa <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
    1240:	c9 e2       	ldi	r28, 0x29	; 41
    1242:	d1 e0       	ldi	r29, 0x01	; 1
    1244:	69 81       	ldd	r22, Y+1	; 0x01
    1246:	84 e0       	ldi	r24, 0x04	; 4
    1248:	e6 de       	rcall	.-564    	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    124a:	6a 81       	ldd	r22, Y+2	; 0x02
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	68 27       	eor	r22, r24
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	e1 de       	rcall	.-574    	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    1254:	6a 81       	ldd	r22, Y+2	; 0x02
    1256:	86 e0       	ldi	r24, 0x06	; 6
    1258:	de de       	rcall	.-580    	; 0x1016 <SH100HW_SetNewLedState>
}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

Disassembly of section .text.SH100CTRL_StoreAmpState:

000012ee <SH100CTRL_StoreAmpState>:

void SH100CTRL_StoreAmpState()
{
	eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
    12ee:	6b ea       	ldi	r22, 0xAB	; 171
    12f0:	7c ea       	ldi	r23, 0xAC	; 172
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	d3 d0       	rcall	.+422    	; 0x149e <eeprom_write_word>
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
    12f8:	69 e2       	ldi	r22, 0x29	; 41
    12fa:	71 e0       	ldi	r23, 0x01	; 1
    12fc:	80 e8       	ldi	r24, 0x80	; 128
    12fe:	23 e0       	ldi	r18, 0x03	; 3
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	48 e0       	ldi	r20, 0x08	; 8
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	2a df       	rcall	.-428    	; 0x115c <eeprom_write_block>
    1308:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

00001452 <SH100CTRL_SwChannel>:
	}
}

void SH100CTRL_SwChannel(uint8_t chNum)
{
	ampState.channelNum = chNum;
    1452:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ampState>
	
	SH100HW_SetCh(chNum);
    1456:	c6 dc       	rcall	.-1652   	; 0xde4 <SH100HW_SetCh>
	setChannelLeds();
    1458:	28 df       	rcall	.-432    	; 0x12aa <setChannelLeds>
    145a:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetLoop:

00001326 <SH100CTRL_SetLoop>:
}

void SH100CTRL_SetLoop(bool en)
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
	ampState.loopOn = en;
    132a:	c9 e2       	ldi	r28, 0x29	; 41
    132c:	d1 e0       	ldi	r29, 0x01	; 1
    132e:	89 83       	std	Y+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn);
    1330:	06 d0       	rcall	.+12     	; 0x133e <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
    1332:	69 81       	ldd	r22, Y+1	; 0x01
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	6f de       	rcall	.-802    	; 0x1016 <SH100HW_SetNewLedState>
}
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAB:

000012cc <SH100CTRL_SetAB>:

void SH100CTRL_SetAB(bool isB)
{
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
	ampState.swAB = isB;
    12d0:	c9 e2       	ldi	r28, 0x29	; 41
    12d2:	d1 e0       	ldi	r29, 0x01	; 1
    12d4:	8a 83       	std	Y+2, r24	; 0x02
	SH100HW_SetAB(ampState.swAB);
    12d6:	dd d0       	rcall	.+442    	; 0x1492 <SH100HW_SetAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    12d8:	6a 81       	ldd	r22, Y+2	; 0x02
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	68 27       	eor	r22, r24
    12de:	85 e0       	ldi	r24, 0x05	; 5
    12e0:	9a de       	rcall	.-716    	; 0x1016 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    12e2:	6a 81       	ldd	r22, Y+2	; 0x02
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	97 de       	rcall	.-722    	; 0x1016 <SH100HW_SetNewLedState>
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

00001422 <SH100CTRL_SwLoop>:

void SH100CTRL_SwLoop()
{
	SH100CTRL_SetLoop(!ampState.loopOn);
    1422:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ampState+0x1>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 27       	eor	r24, r25
    142a:	7d df       	rcall	.-262    	; 0x1326 <SH100CTRL_SetLoop>
    142c:	08 95       	ret

Disassembly of section .text.SH100CTRL_BtnSwChannel:

000013ea <SH100CTRL_BtnSwChannel>:
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
}

void SH100CTRL_BtnSwChannel(uint8_t chNum)
{
	if(ampState.channelNum != chNum)
    13ea:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ampState>
    13ee:	98 17       	cp	r25, r24
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <SH100CTRL_BtnSwChannel+0xc>
	{
		SH100CTRL_SwChannel(chNum);
    13f2:	2f d0       	rcall	.+94     	; 0x1452 <SH100CTRL_SwChannel>
    13f4:	08 95       	ret
	}
	else
	{
		SH100CTRL_SwLoop();
    13f6:	15 d0       	rcall	.+42     	; 0x1422 <SH100CTRL_SwLoop>
    13f8:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

0000142e <SH100CTRL_SwAB>:
	SH100CTRL_SetLoop(!ampState.loopOn);
}

void SH100CTRL_SwAB()
{
	SH100CTRL_SetAB(!ampState.swAB);
    142e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ampState+0x2>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	89 27       	eor	r24, r25
    1436:	4a df       	rcall	.-364    	; 0x12cc <SH100CTRL_SetAB>
    1438:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

0000148c <SH100CTRL_MuteAmp>:
}

void SH100CTRL_MuteAmp()
{
	SH100HW_SetPAState(OUTPUT_MUTE);
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	e8 de       	rcall	.-560    	; 0x1260 <SH100HW_SetPAState>
    1490:	08 95       	ret

Disassembly of section .text.SH100CTRL_UnmuteAmp:

0000143a <SH100CTRL_UnmuteAmp>:
}

void SH100CTRL_UnmuteAmp()
{
	if(SH100HW_GetOutputJacks() != OUT_NONE)
    143a:	8d df       	rcall	.-230    	; 0x1356 <SH100HW_GetOutputJacks>
    143c:	88 23       	and	r24, r24
    143e:	11 f0       	breq	.+4      	; 0x1444 <SH100CTRL_UnmuteAmp+0xa>
	{
		SH100HW_SetPAState(OUTPUT_ENABLED);	
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	0e df       	rcall	.-484    	; 0x1260 <SH100HW_SetPAState>
    1444:	08 95       	ret

Disassembly of section .text.SH100CTRL_CheckOutputJacks:

00000c86 <SH100CTRL_CheckOutputJacks>:
	}		
}

void SH100CTRL_CheckOutputJacks()
{
	SH100HW_OutputJacks_t outJacksState = SH100HW_GetOutputJacks();
 c86:	67 d3       	rcall	.+1742   	; 0x1356 <SH100HW_GetOutputJacks>
	
	switch(outJacksState)
 c88:	81 30       	cpi	r24, 0x01	; 1
 c8a:	89 f0       	breq	.+34     	; 0xcae <SH100CTRL_CheckOutputJacks+0x28>
 c8c:	28 f0       	brcs	.+10     	; 0xc98 <SH100CTRL_CheckOutputJacks+0x12>
 c8e:	82 30       	cpi	r24, 0x02	; 2
 c90:	c1 f0       	breq	.+48     	; 0xcc2 <SH100CTRL_CheckOutputJacks+0x3c>
 c92:	83 30       	cpi	r24, 0x03	; 3
 c94:	01 f1       	breq	.+64     	; 0xcd6 <SH100CTRL_CheckOutputJacks+0x50>
 c96:	08 95       	ret
	{
		case OUT_NONE:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c98:	ea d3       	rcall	.+2004   	; 0x146e <MIDICTRL_MidiMode>
 c9a:	81 11       	cpse	r24, r1
 c9c:	06 c0       	rjmp	.+12     	; 0xcaa <SH100CTRL_CheckOutputJacks+0x24>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 c9e:	60 e0       	ldi	r22, 0x00	; 0
 ca0:	87 e0       	ldi	r24, 0x07	; 7
 ca2:	b9 d1       	rcall	.+882    	; 0x1016 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 ca4:	61 e0       	ldi	r22, 0x01	; 1
 ca6:	88 e0       	ldi	r24, 0x08	; 8
 ca8:	b6 d1       	rcall	.+876    	; 0x1016 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 caa:	f0 d3       	rcall	.+2016   	; 0x148c <SH100CTRL_MuteAmp>
			break;
 cac:	08 95       	ret
		}
		case OUT_16OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 cae:	df d3       	rcall	.+1982   	; 0x146e <MIDICTRL_MidiMode>
 cb0:	81 11       	cpse	r24, r1
 cb2:	17 c0       	rjmp	.+46     	; 0xce2 <SH100CTRL_CheckOutputJacks+0x5c>
			{
				SH100CTRL_UnmuteAmp();
 cb4:	c2 d3       	rcall	.+1924   	; 0x143a <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_16OHM);
 cb6:	81 e0       	ldi	r24, 0x01	; 1
 cb8:	ef d3       	rcall	.+2014   	; 0x1498 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 cba:	61 e0       	ldi	r22, 0x01	; 1
 cbc:	87 e0       	ldi	r24, 0x07	; 7
 cbe:	ab d1       	rcall	.+854    	; 0x1016 <SH100HW_SetNewLedState>
 cc0:	08 95       	ret
			}			
			break;
		}
		case OUT_8OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 cc2:	d5 d3       	rcall	.+1962   	; 0x146e <MIDICTRL_MidiMode>
 cc4:	81 11       	cpse	r24, r1
 cc6:	0d c0       	rjmp	.+26     	; 0xce2 <SH100CTRL_CheckOutputJacks+0x5c>
			{
				SH100CTRL_UnmuteAmp();
 cc8:	b8 d3       	rcall	.+1904   	; 0x143a <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_8OHM);
 cca:	80 e0       	ldi	r24, 0x00	; 0
 ccc:	e5 d3       	rcall	.+1994   	; 0x1498 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 cce:	61 e0       	ldi	r22, 0x01	; 1
 cd0:	87 e0       	ldi	r24, 0x07	; 7
 cd2:	a1 d1       	rcall	.+834    	; 0x1016 <SH100HW_SetNewLedState>
 cd4:	08 95       	ret

			break;
		}
		case OUT_BOTH:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 cd6:	cb d3       	rcall	.+1942   	; 0x146e <MIDICTRL_MidiMode>
 cd8:	81 11       	cpse	r24, r1
 cda:	03 c0       	rjmp	.+6      	; 0xce2 <SH100CTRL_CheckOutputJacks+0x5c>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
 cdc:	63 e0       	ldi	r22, 0x03	; 3
 cde:	87 e0       	ldi	r24, 0x07	; 7
 ce0:	9a d1       	rcall	.+820    	; 0x1016 <SH100HW_SetNewLedState>
 ce2:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000ade <SH100HW_Init>:
SH100HW_Buttons_t buttonsState;
void readButtonsState();
void writeShiftRegs(uint16_t data);

void SH100HW_Init()
{
 ade:	1f 93       	push	r17
 ae0:	cf 93       	push	r28
 ae2:	df 93       	push	r29
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 ae4:	55 b1       	in	r21, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 ae6:	84 b1       	in	r24, 0x04	; 4
 ae8:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 aea:	28 b1       	in	r18, 0x08	; 8
 aec:	20 61       	ori	r18, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 aee:	97 b1       	in	r25, 0x07	; 7
 af0:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 af2:	3b b1       	in	r19, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 af4:	4a b1       	in	r20, 0x0a	; 10
 af6:	40 6e       	ori	r20, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 af8:	3b 71       	andi	r19, 0x1B	; 27
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 afa:	4b 7e       	andi	r20, 0xEB	; 235
 afc:	4a b9       	out	0x0a, r20	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 afe:	30 61       	ori	r19, 0x10	; 16
 b00:	3b b9       	out	0x0b, r19	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 b02:	9b 7d       	andi	r25, 0xDB	; 219
 b04:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 b06:	21 7d       	andi	r18, 0xD1	; 209
 b08:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 b0a:	9a 60       	ori	r25, 0x0A	; 10
 b0c:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 b0e:	95 2f       	mov	r25, r21
 b10:	90 7d       	andi	r25, 0xD0	; 208
 b12:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 b14:	84 60       	ori	r24, 0x04	; 4
 b16:	84 b9       	out	0x04, r24	; 4
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 b18:	10 e0       	ldi	r17, 0x00	; 0
 b1a:	0c c0       	rjmp	.+24     	; 0xb34 <SH100HW_Init+0x56>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
 b1c:	c1 2f       	mov	r28, r17
 b1e:	d0 e0       	ldi	r29, 0x00	; 0
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	36 df       	rcall	.-404    	; 0x992 <__simple_malloc>
 b26:	cc 0f       	add	r28, r28
 b28:	dd 1f       	adc	r29, r29
 b2a:	cf 5b       	subi	r28, 0xBF	; 191
 b2c:	de 4f       	sbci	r29, 0xFE	; 254
 b2e:	99 83       	std	Y+1, r25	; 0x01
 b30:	88 83       	st	Y, r24
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 b32:	1f 5f       	subi	r17, 0xFF	; 255
 b34:	12 31       	cpi	r17, 0x12	; 18
 b36:	90 f3       	brcs	.-28     	; 0xb1c <SH100HW_Init+0x3e>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
	
	// ADC settings
	ADMUX = (1<<REFS0) | (1<<ADLAR); // AREF ext pin, Left-adjustment result
 b38:	80 e6       	ldi	r24, 0x60	; 96
 b3a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	DIDR0 = 0x01; // Disable digital io on PC0
 b3e:	81 e0       	ldi	r24, 0x01	; 1
 b40:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7fe07e>
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, INT enable, prescaler = 64
 b44:	8e e8       	ldi	r24, 0x8E	; 142
 b46:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
}
 b4a:	df 91       	pop	r29
 b4c:	cf 91       	pop	r28
 b4e:	1f 91       	pop	r17
 b50:	08 95       	ret

Disassembly of section .text.SH100HW_GetButtonsState:

000013c6 <SH100HW_GetButtonsState>:

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
    13c6:	2f e0       	ldi	r18, 0x0F	; 15
    13c8:	e2 e3       	ldi	r30, 0x32	; 50
    13ca:	f1 e0       	ldi	r31, 0x01	; 1
    13cc:	dc 01       	movw	r26, r24
    13ce:	01 90       	ld	r0, Z+
    13d0:	0d 92       	st	X+, r0
    13d2:	2a 95       	dec	r18
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <SH100HW_GetButtonsState+0x8>
}
    13d6:	08 95       	ret

Disassembly of section .text.SH100HW_SetCh:

00000de4 <SH100HW_SetCh>:

void SH100HW_SetCh(uint8_t chNum)
{
	switch(chNum)
 de4:	81 30       	cpi	r24, 0x01	; 1
 de6:	69 f0       	breq	.+26     	; 0xe02 <SH100HW_SetCh+0x1e>
 de8:	28 f0       	brcs	.+10     	; 0xdf4 <SH100HW_SetCh+0x10>
 dea:	82 30       	cpi	r24, 0x02	; 2
 dec:	91 f0       	breq	.+36     	; 0xe12 <SH100HW_SetCh+0x2e>
 dee:	83 30       	cpi	r24, 0x03	; 3
 df0:	c1 f0       	breq	.+48     	; 0xe22 <SH100HW_SetCh+0x3e>
 df2:	08 95       	ret
	{
		case 0:
		{
			RELAY_13_24 = REL_OFF;
 df4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 df8:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 dfc:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <RELAY_2_4>
			break;
 e00:	08 95       	ret
		}
		case 1:
		{
			RELAY_13_24 = REL_ON;
 e02:	81 e0       	ldi	r24, 0x01	; 1
 e04:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 e08:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 e0c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <RELAY_2_4>
			break;
 e10:	08 95       	ret
		}
		case 2:
		{
			RELAY_13_24 = REL_OFF;
 e12:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_ON;
 e16:	81 e0       	ldi	r24, 0x01	; 1
 e18:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 e1c:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <RELAY_2_4>
			break;
 e20:	08 95       	ret
		}
		case 3:
		{
			RELAY_13_24 = REL_ON;
 e22:	81 e0       	ldi	r24, 0x01	; 1
 e24:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 e28:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_ON;
 e2c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <RELAY_2_4>
 e30:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

0000133e <SH100HW_LoopEn>:
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
	RELAY_LOOP = isEnabled;
    133e:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <RELAY_LOOP>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1342:	88 23       	and	r24, r24
    1344:	21 f0       	breq	.+8      	; 0x134e <SH100HW_LoopEn+0x10>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1346:	85 b1       	in	r24, 0x05	; 5
    1348:	84 60       	ori	r24, 0x04	; 4
    134a:	85 b9       	out	0x05, r24	; 5
    134c:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    134e:	85 b1       	in	r24, 0x05	; 5
    1350:	8b 7f       	andi	r24, 0xFB	; 251
    1352:	85 b9       	out	0x05, r24	; 5
    1354:	08 95       	ret

Disassembly of section .text.SH100HW_SetAB:

00001492 <SH100HW_SetAB>:
	ioport_set_pin_level(PIN_RELAY_LOOP, RELAY_LOOP);
}

void SH100HW_SetAB(bool isBEn)
{
	RELAY_AB = isBEn;
    1492:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <RELAY_AB>
    1496:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

00001016 <SH100HW_SetNewLedState>:
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
    101a:	e8 2f       	mov	r30, r24
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	df 01       	movw	r26, r30
    1020:	19 96       	adiw	r26, 0x09	; 9
    1022:	aa 0f       	add	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	af 5b       	subi	r26, 0xBF	; 191
    1028:	be 4f       	sbci	r27, 0xFE	; 254
    102a:	0d 90       	ld	r0, X+
    102c:	bc 91       	ld	r27, X
    102e:	a0 2d       	mov	r26, r0
    1030:	ee 0f       	add	r30, r30
    1032:	ff 1f       	adc	r31, r31
    1034:	ef 5b       	subi	r30, 0xBF	; 191
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
    1038:	c0 81       	ld	r28, Z
    103a:	d1 81       	ldd	r29, Z+1	; 0x01
    103c:	88 81       	ld	r24, Y
    103e:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
    1040:	01 90       	ld	r0, Z+
    1042:	f0 81       	ld	r31, Z
    1044:	e0 2d       	mov	r30, r0
    1046:	60 83       	st	Z, r22
}
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

00001212 <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	fc 01       	movw	r30, r24
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	ef 5b       	subi	r30, 0xBF	; 191
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	a0 81       	ld	r26, Z
    1220:	b1 81       	ldd	r27, Z+1	; 0x01
    1222:	fc 01       	movw	r30, r24
    1224:	39 96       	adiw	r30, 0x09	; 9
    1226:	ee 0f       	add	r30, r30
    1228:	ff 1f       	adc	r31, r31
    122a:	ef 5b       	subi	r30, 0xBF	; 191
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	80 81       	ld	r24, Z
    1236:	8c 93       	st	X, r24
    1238:	08 95       	ret

Disassembly of section .text.SH100HW_GetOutputJacks:

00001356 <SH100HW_GetOutputJacks>:
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    1356:	21 e0       	ldi	r18, 0x01	; 1
    1358:	18 9b       	sbis	0x03, 0	; 3
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	91 e0       	ldi	r25, 0x01	; 1
    135e:	19 9b       	sbis	0x03, 1	; 3
    1360:	90 e0       	ldi	r25, 0x00	; 0

SH100HW_OutputJacks_t SH100HW_GetOutputJacks()
{
	bool is16Ohm = ioport_get_pin_level(PIN_M16_DETECT);
	bool is8Ohm = ioport_get_pin_level(PIN_M8_DETECT);
	return ((is16Ohm) | (is8Ohm<<1));
    1362:	89 2f       	mov	r24, r25
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
}
    136a:	82 2b       	or	r24, r18
    136c:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAState:

00001260 <SH100HW_SetPAState>:
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1260:	81 11       	cpse	r24, r1
    1262:	04 c0       	rjmp	.+8      	; 0x126c <SH100HW_SetPAState+0xc>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1264:	98 b1       	in	r25, 0x08	; 8
    1266:	92 60       	ori	r25, 0x02	; 2
    1268:	98 b9       	out	0x08, r25	; 8
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <SH100HW_SetPAState+0x12>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    126c:	98 b1       	in	r25, 0x08	; 8
    126e:	9d 7f       	andi	r25, 0xFD	; 253
    1270:	98 b9       	out	0x08, r25	; 8
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1272:	88 23       	and	r24, r24
    1274:	21 f0       	breq	.+8      	; 0x127e <SH100HW_SetPAState+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1276:	88 b1       	in	r24, 0x08	; 8
    1278:	88 60       	ori	r24, 0x08	; 8
    127a:	88 b9       	out	0x08, r24	; 8
    127c:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    127e:	88 b1       	in	r24, 0x08	; 8
    1280:	87 7f       	andi	r24, 0xF7	; 247
    1282:	88 b9       	out	0x08, r24	; 8
    1284:	08 95       	ret

Disassembly of section .text.SH100HW_SetOutputMode:

00001498 <SH100HW_SetOutputMode>:
	ioport_set_pin_level(PIN_RELE_W, state);
}

void SH100HW_SetOutputMode(SH100HW_PAMode_t mode)
{
	RELAY_8_16 = mode;
    1498:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <RELAY_8_16>
    149c:	08 95       	ret

Disassembly of section .text.readButtonsState:

00000568 <readButtonsState>:
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	ac c0       	rjmp	.+344    	; 0x6c4 <readButtonsState+0x15c>
	{
		
		switch(cnt)
 56c:	48 2f       	mov	r20, r24
 56e:	50 e0       	ldi	r21, 0x00	; 0
 570:	48 30       	cpi	r20, 0x08	; 8
 572:	51 05       	cpc	r21, r1
 574:	08 f0       	brcs	.+2      	; 0x578 <readButtonsState+0x10>
 576:	a5 c0       	rjmp	.+330    	; 0x6c2 <readButtonsState+0x15a>
 578:	fa 01       	movw	r30, r20
 57a:	ef 55       	subi	r30, 0x5F	; 95
 57c:	ff 4f       	sbci	r31, 0xFF	; 255
 57e:	09 94       	ijmp
 580:	3b b1       	in	r19, 0x0b	; 11
 582:	3f 7d       	andi	r19, 0xDF	; 223
 584:	3b b9       	out	0x0b, r19	; 11
 586:	3b b1       	in	r19, 0x0b	; 11
 588:	3f 7b       	andi	r19, 0xBF	; 191
 58a:	3b b9       	out	0x0b, r19	; 11
 58c:	3b b1       	in	r19, 0x0b	; 11
 58e:	3f 77       	andi	r19, 0x7F	; 127
 590:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 592:	31 e0       	ldi	r19, 0x01	; 1
 594:	4c 9b       	sbis	0x09, 4	; 9
 596:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = ioport_get_pin_level(PIN_MIDI_SWITCH);
 598:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <buttonsState+0x1>
 59c:	31 e0       	ldi	r19, 0x01	; 1
 59e:	35 9b       	sbis	0x06, 5	; 6
 5a0:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 5a2:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <buttonsState+0xc>
				break;
 5a6:	8d c0       	rjmp	.+282    	; 0x6c2 <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5a8:	2b b1       	in	r18, 0x0b	; 11
 5aa:	20 62       	ori	r18, 0x20	; 32
 5ac:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5ae:	2b b1       	in	r18, 0x0b	; 11
 5b0:	2f 7b       	andi	r18, 0xBF	; 191
 5b2:	2b b9       	out	0x0b, r18	; 11
 5b4:	2b b1       	in	r18, 0x0b	; 11
 5b6:	2f 77       	andi	r18, 0x7F	; 127
 5b8:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5ba:	21 e0       	ldi	r18, 0x01	; 1
 5bc:	4c 9b       	sbis	0x09, 4	; 9
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	31 e0       	ldi	r19, 0x01	; 1
 5c2:	4a 9b       	sbis	0x09, 2	; 9
 5c4:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = ioport_get_pin_level(PIN_BUTTONS);
 5c6:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <buttonsState+0x7>
 5ca:	31 e0       	ldi	r19, 0x01	; 1
 5cc:	35 9b       	sbis	0x06, 5	; 6
 5ce:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 5d0:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <buttonsState+0xe>
				break;
 5d4:	76 c0       	rjmp	.+236    	; 0x6c2 <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5d6:	9b b1       	in	r25, 0x0b	; 11
 5d8:	9f 7d       	andi	r25, 0xDF	; 223
 5da:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5dc:	9b b1       	in	r25, 0x0b	; 11
 5de:	90 64       	ori	r25, 0x40	; 64
 5e0:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5e2:	9b b1       	in	r25, 0x0b	; 11
 5e4:	9f 77       	andi	r25, 0x7F	; 127
 5e6:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	4c 9b       	sbis	0x09, 4	; 9
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	31 e0       	ldi	r19, 0x01	; 1
 5f0:	4a 9b       	sbis	0x09, 2	; 9
 5f2:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnLoop = ioport_get_pin_level(PIN_BUTTONS);
 5f4:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <buttonsState+0x8>
 5f8:	31 e0       	ldi	r19, 0x01	; 1
 5fa:	35 9b       	sbis	0x06, 5	; 6
 5fc:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 5fe:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <buttonsState+0xb>
				break;
 602:	5f c0       	rjmp	.+190    	; 0x6c2 <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 604:	3b b1       	in	r19, 0x0b	; 11
 606:	30 62       	ori	r19, 0x20	; 32
 608:	3b b9       	out	0x0b, r19	; 11
 60a:	3b b1       	in	r19, 0x0b	; 11
 60c:	30 64       	ori	r19, 0x40	; 64
 60e:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 610:	3b b1       	in	r19, 0x0b	; 11
 612:	3f 77       	andi	r19, 0x7F	; 127
 614:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 616:	31 e0       	ldi	r19, 0x01	; 1
 618:	4c 9b       	sbis	0x09, 4	; 9
 61a:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = ioport_get_pin_level(PIN_MIDI_SWITCH);
 61c:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <buttonsState+0x2>
 620:	31 e0       	ldi	r19, 0x01	; 1
 622:	35 9b       	sbis	0x06, 5	; 6
 624:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 626:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <buttonsState+0x9>
				break;
 62a:	4b c0       	rjmp	.+150    	; 0x6c2 <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 62c:	3b b1       	in	r19, 0x0b	; 11
 62e:	3f 7d       	andi	r19, 0xDF	; 223
 630:	3b b9       	out	0x0b, r19	; 11
 632:	3b b1       	in	r19, 0x0b	; 11
 634:	3f 7b       	andi	r19, 0xBF	; 191
 636:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 638:	3b b1       	in	r19, 0x0b	; 11
 63a:	30 68       	ori	r19, 0x80	; 128
 63c:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 63e:	a1 e0       	ldi	r26, 0x01	; 1
 640:	4c 9b       	sbis	0x09, 4	; 9
 642:	a0 e0       	ldi	r26, 0x00	; 0
 644:	31 e0       	ldi	r19, 0x01	; 1
 646:	4a 9b       	sbis	0x09, 2	; 9
 648:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh2 = ioport_get_pin_level(PIN_BUTTONS);
 64a:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <buttonsState+0x4>
 64e:	31 e0       	ldi	r19, 0x01	; 1
 650:	35 9b       	sbis	0x06, 5	; 6
 652:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 654:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <buttonsState+0xa>
				break;
 658:	34 c0       	rjmp	.+104    	; 0x6c2 <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 65a:	3b b1       	in	r19, 0x0b	; 11
 65c:	30 62       	ori	r19, 0x20	; 32
 65e:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 660:	3b b1       	in	r19, 0x0b	; 11
 662:	3f 7b       	andi	r19, 0xBF	; 191
 664:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 666:	3b b1       	in	r19, 0x0b	; 11
 668:	30 68       	ori	r19, 0x80	; 128
 66a:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 66c:	31 e0       	ldi	r19, 0x01	; 1
 66e:	4a 9b       	sbis	0x09, 2	; 9
 670:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = ioport_get_pin_level(PIN_BUTTONS);
 672:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <buttonsState+0x5>
				break;
 676:	25 c0       	rjmp	.+74     	; 0x6c2 <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 678:	9b b1       	in	r25, 0x0b	; 11
 67a:	9f 7d       	andi	r25, 0xDF	; 223
 67c:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 67e:	9b b1       	in	r25, 0x0b	; 11
 680:	90 64       	ori	r25, 0x40	; 64
 682:	9b b9       	out	0x0b, r25	; 11
 684:	9b b1       	in	r25, 0x0b	; 11
 686:	90 68       	ori	r25, 0x80	; 128
 688:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 68a:	91 e0       	ldi	r25, 0x01	; 1
 68c:	4c 9b       	sbis	0x09, 4	; 9
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	31 e0       	ldi	r19, 0x01	; 1
 692:	4a 9b       	sbis	0x09, 2	; 9
 694:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh4 = ioport_get_pin_level(PIN_BUTTONS);
 696:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <buttonsState+0x6>
 69a:	31 e0       	ldi	r19, 0x01	; 1
 69c:	35 9b       	sbis	0x06, 5	; 6
 69e:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 6a0:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <buttonsState+0xd>
				break;
 6a4:	0e c0       	rjmp	.+28     	; 0x6c2 <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6a6:	3b b1       	in	r19, 0x0b	; 11
 6a8:	30 62       	ori	r19, 0x20	; 32
 6aa:	3b b9       	out	0x0b, r19	; 11
 6ac:	3b b1       	in	r19, 0x0b	; 11
 6ae:	30 64       	ori	r19, 0x40	; 64
 6b0:	3b b9       	out	0x0b, r19	; 11
 6b2:	3b b1       	in	r19, 0x0b	; 11
 6b4:	30 68       	ori	r19, 0x80	; 128
 6b6:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6b8:	31 e0       	ldi	r19, 0x01	; 1
 6ba:	4a 9b       	sbis	0x09, 2	; 9
 6bc:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = ioport_get_pin_level(PIN_BUTTONS);
 6be:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <buttonsState+0x3>
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
 6c4:	88 30       	cpi	r24, 0x08	; 8
 6c6:	08 f4       	brcc	.+2      	; 0x6ca <readButtonsState+0x162>
 6c8:	51 cf       	rjmp	.-350    	; 0x56c <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 6ca:	89 2f       	mov	r24, r25
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	22 0f       	add	r18, r18
 6de:	33 1f       	adc	r19, r19
 6e0:	22 0f       	add	r18, r18
 6e2:	33 1f       	adc	r19, r19
 6e4:	8a 2b       	or	r24, r26
 6e6:	82 2b       	or	r24, r18
 6e8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <buttonsState>
 6ec:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

00000f56 <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
 f56:	ac 01       	movw	r20, r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 f58:	88 b1       	in	r24, 0x08	; 8
 f5a:	8f 7e       	andi	r24, 0xEF	; 239
 f5c:	88 b9       	out	0x08, r24	; 8
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
 f5e:	20 e0       	ldi	r18, 0x00	; 0
 f60:	12 c0       	rjmp	.+36     	; 0xf86 <writeShiftRegs+0x30>
 f62:	95 b1       	in	r25, 0x05	; 5
 f64:	9f 7d       	andi	r25, 0xDF	; 223
 f66:	95 b9       	out	0x05, r25	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 f68:	55 23       	and	r21, r21
 f6a:	24 f4       	brge	.+8      	; 0xf74 <writeShiftRegs+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 f6c:	85 b1       	in	r24, 0x05	; 5
 f6e:	88 60       	ori	r24, 0x08	; 8
 f70:	85 b9       	out	0x05, r24	; 5
 f72:	03 c0       	rjmp	.+6      	; 0xf7a <writeShiftRegs+0x24>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 f74:	85 b1       	in	r24, 0x05	; 5
 f76:	87 7f       	andi	r24, 0xF7	; 247
 f78:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 f7a:	95 b1       	in	r25, 0x05	; 5
 f7c:	90 62       	ori	r25, 0x20	; 32
 f7e:	95 b9       	out	0x05, r25	; 5
	{
		ioport_set_pin_level(PIN_SCK, 0);
		ioport_set_pin_level(PIN_MOSI, (data & 0x8000));
		ioport_set_pin_level(PIN_SCK, 1);
		data = data << 1;
 f80:	44 0f       	add	r20, r20
 f82:	55 1f       	adc	r21, r21
}

void writeShiftRegs(uint16_t data)
{
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
 f84:	2f 5f       	subi	r18, 0xFF	; 255
 f86:	20 31       	cpi	r18, 0x10	; 16
 f88:	60 f3       	brcs	.-40     	; 0xf62 <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 f8a:	85 b1       	in	r24, 0x05	; 5
 f8c:	8f 7d       	andi	r24, 0xDF	; 223
 f8e:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 f90:	88 b1       	in	r24, 0x08	; 8
 f92:	80 61       	ori	r24, 0x10	; 16
 f94:	88 b9       	out	0x08, r24	; 8
 f96:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000001dc <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	29 97       	sbiw	r28, 0x09	; 9
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	readButtonsState();
 1f0:	bb d1       	rcall	.+886    	; 0x568 <readButtonsState>
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 1f2:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <blinkCounter>
 1f6:	89 e2       	ldi	r24, 0x29	; 41
 1f8:	98 9f       	mul	r25, r24
 1fa:	81 2d       	mov	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	39 2f       	mov	r19, r25
 204:	29 e1       	ldi	r18, 0x19	; 25
 206:	82 9f       	mul	r24, r18
 208:	30 19       	sub	r19, r0
 20a:	11 24       	eor	r1, r1
 20c:	31 11       	cpse	r19, r1
 20e:	08 c0       	rjmp	.+16     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 210:	99 23       	and	r25, r25
 212:	31 f0       	breq	.+12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
	{
		fastBlink = !fastBlink;
 214:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <fastBlink>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	82 27       	eor	r24, r18
 21c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <fastBlink>
	}
	
	if(blinkCounter == 50)
 220:	92 33       	cpi	r25, 0x32	; 50
 222:	51 f4       	brne	.+20     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
	{
		blinkCounter = 0;
 224:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <blinkCounter>
		slowBlink = !slowBlink;
 228:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <slowBlink>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	89 27       	eor	r24, r25
 230:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	47 c0       	rjmp	.+142    	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <blinkCounter>
 23e:	fa cf       	rjmp	.-12     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 240:	82 2f       	mov	r24, r18
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ef 5b       	subi	r30, 0xBF	; 191
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	01 90       	ld	r0, Z+
 250:	f0 81       	ld	r31, Z
 252:	e0 2d       	mov	r30, r0
 254:	30 81       	ld	r19, Z
 256:	31 30       	cpi	r19, 0x01	; 1
 258:	71 f0       	breq	.+28     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
 25a:	28 f0       	brcs	.+10     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 25c:	32 30       	cpi	r19, 0x02	; 2
 25e:	a1 f0       	breq	.+40     	; 0x288 <__EEPROM_REGION_LENGTH__+0x88>
 260:	33 30       	cpi	r19, 0x03	; 3
 262:	e1 f0       	breq	.+56     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 264:	28 c0       	rjmp	.+80     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			case LED_OFF: isLedOn[i] = false; break;
 266:	e1 e0       	ldi	r30, 0x01	; 1
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ec 0f       	add	r30, r28
 26c:	fd 1f       	adc	r31, r29
 26e:	e8 0f       	add	r30, r24
 270:	f9 1f       	adc	r31, r25
 272:	10 82       	st	Z, r1
 274:	27 c0       	rjmp	.+78     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			case LED_ON: isLedOn[i] = true; break;
 276:	e1 e0       	ldi	r30, 0x01	; 1
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	e8 0f       	add	r30, r24
 280:	f9 1f       	adc	r31, r25
 282:	31 e0       	ldi	r19, 0x01	; 1
 284:	30 83       	st	Z, r19
 286:	1e c0       	rjmp	.+60     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 288:	e1 e0       	ldi	r30, 0x01	; 1
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ec 0f       	add	r30, r28
 28e:	fd 1f       	adc	r31, r29
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <fastBlink>
 298:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 29c:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <slowBlink>
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e8 0f       	add	r30, r24
 2aa:	f9 1f       	adc	r31, r25
 2ac:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	83 27       	eor	r24, r19
 2b2:	88 87       	std	Y+8, r24	; 0x08
				break;
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			}	
			default: isLedOn[i] = LED_OFF;
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ec 0f       	add	r30, r28
 2bc:	fd 1f       	adc	r31, r29
 2be:	e8 0f       	add	r30, r24
 2c0:	f9 1f       	adc	r31, r25
 2c2:	10 82       	st	Z, r1
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
 2c6:	29 30       	cpi	r18, 0x09	; 9
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 2ca:	ba cf       	rjmp	.-140    	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2cc:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 2d0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <RELAY_1_3>
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2da:	ac 01       	movw	r20, r24
 2dc:	42 2b       	or	r20, r18
 2de:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 2e0:	9b 81       	ldd	r25, Y+3	; 0x03
 2e2:	89 2f       	mov	r24, r25
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 2ee:	82 2b       	or	r24, r18
 2f0:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 2f2:	29 81       	ldd	r18, Y+1	; 0x01
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 302:	82 2b       	or	r24, r18
 304:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 306:	2a 81       	ldd	r18, Y+2	; 0x02
 308:	50 e1       	ldi	r21, 0x10	; 16
 30a:	25 9f       	mul	r18, r21
 30c:	90 01       	movw	r18, r0
 30e:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 310:	28 2b       	or	r18, r24
 312:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 314:	4c 81       	ldd	r20, Y+4	; 0x04
 316:	80 e2       	ldi	r24, 0x20	; 32
 318:	48 9f       	mul	r20, r24
 31a:	a0 01       	movw	r20, r0
 31c:	11 24       	eor	r1, r1
 31e:	24 2b       	or	r18, r20
 320:	35 2b       	or	r19, r21
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 322:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <RELAY_8_16>
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	48 9f       	mul	r20, r24
 32a:	a0 01       	movw	r20, r0
 32c:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 32e:	24 2b       	or	r18, r20
 330:	35 2b       	or	r19, r21
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 332:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <RELAY_2_4>
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	98 2f       	mov	r25, r24
 33a:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 33c:	28 2b       	or	r18, r24
 33e:	39 2b       	or	r19, r25
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 340:	8e 81       	ldd	r24, Y+6	; 0x06
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	98 2f       	mov	r25, r24
 346:	88 27       	eor	r24, r24
 348:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 34a:	28 2b       	or	r18, r24
 34c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 34e:	8f 81       	ldd	r24, Y+7	; 0x07
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	98 2f       	mov	r25, r24
 354:	88 27       	eor	r24, r24
 356:	99 0f       	add	r25, r25
 358:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 35a:	28 2b       	or	r18, r24
 35c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 35e:	88 85       	ldd	r24, Y+8	; 0x08
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	98 2f       	mov	r25, r24
 364:	88 27       	eor	r24, r24
 366:	99 0f       	add	r25, r25
 368:	99 0f       	add	r25, r25
 36a:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 36c:	28 2b       	or	r18, r24
 36e:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 370:	99 85       	ldd	r25, Y+9	; 0x09
 372:	89 2f       	mov	r24, r25
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	98 2f       	mov	r25, r24
 378:	88 27       	eor	r24, r24
 37a:	92 95       	swap	r25
 37c:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 37e:	28 2b       	or	r18, r24
 380:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
 382:	4d 81       	ldd	r20, Y+5	; 0x05
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	54 2f       	mov	r21, r20
 388:	44 27       	eor	r20, r20
 38a:	52 95       	swap	r21
 38c:	55 0f       	add	r21, r21
 38e:	50 7e       	andi	r21, 0xE0	; 224
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 390:	24 2b       	or	r18, r20
 392:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
								((uint16_t)RELAY_AB << (8+6)) |
 394:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <RELAY_AB>
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 e4       	ldi	r25, 0x40	; 64
 39c:	89 9f       	mul	r24, r25
 39e:	90 2d       	mov	r25, r0
 3a0:	88 27       	eor	r24, r24
 3a2:	11 24       	eor	r1, r1
								(0 << (8+7));

	writeShiftRegs(resultSendWord);
 3a4:	82 2b       	or	r24, r18
 3a6:	93 2b       	or	r25, r19
 3a8:	d6 d5       	rcall	.+2988   	; 0xf56 <writeShiftRegs>
 3aa:	29 96       	adiw	r28, 0x09	; 9
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

Disassembly of section .text.UART_init:

0000136e <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    136e:	88 ed       	ldi	r24, 0xD8	; 216
    1370:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00); 
    1374:	86 e0       	ldi	r24, 0x06	; 6
    1376:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0;
    137a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=19;
    137e:	83 e1       	ldi	r24, 0x13	; 19
    1380:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    1384:	08 95       	ret

Disassembly of section .text.__vector_18:

00000bc0 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 bc0:	1f 92       	push	r1
 bc2:	0f 92       	push	r0
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	0f 92       	push	r0
 bc8:	11 24       	eor	r1, r1
 bca:	8f 93       	push	r24
 bcc:	9f 93       	push	r25
 bce:	ef 93       	push	r30
 bd0:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 bd2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 bd6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 bda:	8c 71       	andi	r24, 0x1C	; 28
 bdc:	d1 f4       	brne	.+52     	; 0xc12 <__vector_18+0x52>
	{
		rx_buffer0[rx_wr_index++] = data;
 bde:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_wr_index>
 be2:	81 e0       	ldi	r24, 0x01	; 1
 be4:	8e 0f       	add	r24, r30
 be6:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <rx_wr_index>
 bea:	f0 e0       	ldi	r31, 0x00	; 0
 bec:	ef 58       	subi	r30, 0x8F	; 143
 bee:	fe 4f       	sbci	r31, 0xFE	; 254
 bf0:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 bf2:	80 31       	cpi	r24, 0x10	; 16
 bf4:	11 f4       	brne	.+4      	; 0xbfa <__vector_18+0x3a>
 bf6:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 bfa:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_counter>
 bfe:	8f 5f       	subi	r24, 0xFF	; 255
 c00:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <rx_counter>
 c04:	80 31       	cpi	r24, 0x10	; 16
 c06:	29 f4       	brne	.+10     	; 0xc12 <__vector_18+0x52>
		{
			rx_counter=0;
 c08:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rx_counter>
			rx_buffer_overflow=1;
 c0c:	81 e0       	ldi	r24, 0x01	; 1
 c0e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_buffer_overflow>
		}
	}
}
 c12:	ff 91       	pop	r31
 c14:	ef 91       	pop	r30
 c16:	9f 91       	pop	r25
 c18:	8f 91       	pop	r24
 c1a:	0f 90       	pop	r0
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	0f 90       	pop	r0
 c20:	1f 90       	pop	r1
 c22:	18 95       	reti

Disassembly of section .text.UART_PopWord:

00001128 <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
    1128:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_counter>
    112c:	88 23       	and	r24, r24
    112e:	e1 f3       	breq	.-8      	; 0x1128 <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
    1130:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <rx_rd_index>
    1134:	91 e0       	ldi	r25, 0x01	; 1
    1136:	9e 0f       	add	r25, r30
    1138:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <rx_rd_index>
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	ef 58       	subi	r30, 0x8F	; 143
    1140:	fe 4f       	sbci	r31, 0xFE	; 254
    1142:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
    1144:	90 31       	cpi	r25, 0x10	; 16
    1146:	11 f4       	brne	.+4      	; 0x114c <UART_PopWord+0x24>
    1148:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
    114c:	f8 94       	cli
	--rx_counter;
    114e:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_counter>
    1152:	91 50       	subi	r25, 0x01	; 1
    1154:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <rx_counter>
	cpu_irq_enable();
    1158:	78 94       	sei
	return data;
}
    115a:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000013fa <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_counter>
    1400:	91 11       	cpse	r25, r1
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <UART_RxBufferNotEmpty+0xc>
    1404:	80 e0       	ldi	r24, 0x00	; 0
}
    1406:	08 95       	ret

Disassembly of section .text.__vector_20:

00000d92 <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 d92:	1f 92       	push	r1
 d94:	0f 92       	push	r0
 d96:	0f b6       	in	r0, 0x3f	; 63
 d98:	0f 92       	push	r0
 d9a:	11 24       	eor	r1, r1
 d9c:	8f 93       	push	r24
 d9e:	ef 93       	push	r30
 da0:	ff 93       	push	r31
	if (tx_counter)
 da2:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_counter>
 da6:	88 23       	and	r24, r24
 da8:	a9 f0       	breq	.+42     	; 0xdd4 <__vector_20+0x42>
	{
		--tx_counter;
 daa:	81 50       	subi	r24, 0x01	; 1
 dac:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 db0:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <tx_rd_index>
 db4:	81 e0       	ldi	r24, 0x01	; 1
 db6:	8e 0f       	add	r24, r30
 db8:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tx_rd_index>
 dbc:	f0 e0       	ldi	r31, 0x00	; 0
 dbe:	e8 59       	subi	r30, 0x98	; 152
 dc0:	fe 4f       	sbci	r31, 0xFE	; 254
 dc2:	80 81       	ld	r24, Z
 dc4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 dc8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tx_rd_index>
 dcc:	88 30       	cpi	r24, 0x08	; 8
 dce:	11 f4       	brne	.+4      	; 0xdd4 <__vector_20+0x42>
 dd0:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <tx_rd_index>
		#endif
	}
}
 dd4:	ff 91       	pop	r31
 dd6:	ef 91       	pop	r30
 dd8:	8f 91       	pop	r24
 dda:	0f 90       	pop	r0
 ddc:	0f be       	out	0x3f, r0	; 63
 dde:	0f 90       	pop	r0
 de0:	1f 90       	pop	r1
 de2:	18 95       	reti

Disassembly of section .text.UART_PushWord:

00000f10 <UART_PushWord>:

// Write a character to the USART Transmitter buffer
void UART_PushWord(uint8_t c)
{	
	while (tx_counter == TX_BUFFER_SIZE);
 f10:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <tx_counter>
 f14:	98 30       	cpi	r25, 0x08	; 8
 f16:	e1 f3       	breq	.-8      	; 0xf10 <UART_PushWord>
	
	cpu_irq_disable();
 f18:	f8 94       	cli
	
	if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
 f1a:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <tx_counter>
 f1e:	91 11       	cpse	r25, r1
 f20:	04 c0       	rjmp	.+8      	; 0xf2a <UART_PushWord+0x1a>
 f22:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
 f26:	25 fd       	sbrc	r18, 5
 f28:	12 c0       	rjmp	.+36     	; 0xf4e <UART_PushWord+0x3e>
	{
		tx_buffer[tx_wr_index++] = c;
 f2a:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <tx_wr_index>
 f2e:	21 e0       	ldi	r18, 0x01	; 1
 f30:	2e 0f       	add	r18, r30
 f32:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <tx_wr_index>
 f36:	f0 e0       	ldi	r31, 0x00	; 0
 f38:	e8 59       	subi	r30, 0x98	; 152
 f3a:	fe 4f       	sbci	r31, 0xFE	; 254
 f3c:	80 83       	st	Z, r24
		
		#if TX_BUFFER_SIZE0 != 256
			if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
 f3e:	28 30       	cpi	r18, 0x08	; 8
 f40:	11 f4       	brne	.+4      	; 0xf46 <UART_PushWord+0x36>
 f42:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <tx_wr_index>
		#endif
		
		++tx_counter;
 f46:	9f 5f       	subi	r25, 0xFF	; 255
 f48:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <tx_counter>
 f4c:	02 c0       	rjmp	.+4      	; 0xf52 <UART_PushWord+0x42>
	}
	else UDR0=c;
 f4e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	cpu_irq_enable();
 f52:	78 94       	sei
 f54:	08 95       	ret

Disassembly of section .text.libgcc:

00001386 <__xload_4>:
    1386:	57 fd       	sbrc	r21, 7
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <__xload_4+0xe>
    138a:	65 91       	lpm	r22, Z+
    138c:	75 91       	lpm	r23, Z+
    138e:	85 91       	lpm	r24, Z+
    1390:	95 91       	lpm	r25, Z+
    1392:	08 95       	ret
    1394:	61 91       	ld	r22, Z+
    1396:	71 91       	ld	r23, Z+
    1398:	81 91       	ld	r24, Z+
    139a:	91 91       	ld	r25, Z+
    139c:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000014aa <_fini>:
    14aa:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000014ac <__funcs_on_exit>:
    14ac:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000014ae <__simulator_exit>:
    14ae:	08 95       	ret

Disassembly of section .text.exit:

00001408 <exit>:
    1408:	ec 01       	movw	r28, r24
    140a:	50 d0       	rcall	.+160    	; 0x14ac <__funcs_on_exit>
    140c:	4e d0       	rcall	.+156    	; 0x14aa <_fini>
    140e:	ce 01       	movw	r24, r28
    1410:	4e d0       	rcall	.+156    	; 0x14ae <__simulator_exit>
    1412:	ce 01       	movw	r24, r28
    1414:	4d d0       	rcall	.+154    	; 0x14b0 <_Exit>

Disassembly of section .text.__simple_malloc:

00000992 <__simple_malloc>:
 992:	a2 e0       	ldi	r26, 0x02	; 2
 994:	b0 e0       	ldi	r27, 0x00	; 0
 996:	ee ec       	ldi	r30, 0xCE	; 206
 998:	f4 e0       	ldi	r31, 0x04	; 4
 99a:	63 c3       	rjmp	.+1734   	; 0x1062 <__prologue_saves__+0x14>
 99c:	8c 01       	movw	r16, r24
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	01 15       	cp	r16, r1
 9a4:	11 05       	cpc	r17, r1
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__simple_malloc+0x18>
 9a8:	53 c0       	rjmp	.+166    	; 0xa50 <__simple_malloc+0xbe>
 9aa:	89 2b       	or	r24, r25
 9ac:	71 f0       	breq	.+28     	; 0x9ca <__simple_malloc+0x38>
 9ae:	02 30       	cpi	r16, 0x02	; 2
 9b0:	11 05       	cpc	r17, r1
 9b2:	10 f4       	brcc	.+4      	; 0x9b8 <__simple_malloc+0x26>
 9b4:	02 e0       	ldi	r16, 0x02	; 2
 9b6:	10 e0       	ldi	r17, 0x00	; 0
 9b8:	c8 01       	movw	r24, r16
 9ba:	22 db       	rcall	.-2492   	; 0x0 <__vectors>
 9bc:	00 97       	sbiw	r24, 0x00	; 0
 9be:	09 f0       	breq	.+2      	; 0x9c2 <__simple_malloc+0x30>
 9c0:	4e c0       	rjmp	.+156    	; 0xa5e <__simple_malloc+0xcc>
 9c2:	92 e0       	ldi	r25, 0x02	; 2
 9c4:	e9 2e       	mov	r14, r25
 9c6:	f1 2c       	mov	r15, r1
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <__simple_malloc+0x40>
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	e8 2e       	mov	r14, r24
 9ce:	80 e0       	ldi	r24, 0x00	; 0
 9d0:	f8 2e       	mov	r15, r24
 9d2:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <end.1483>
 9d6:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <end.1483+0x1>
 9da:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <cur.1482>
 9de:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <cur.1482+0x1>
 9e2:	82 1b       	sub	r24, r18
 9e4:	93 0b       	sbc	r25, r19
 9e6:	67 01       	movw	r12, r14
 9e8:	c0 0e       	add	r12, r16
 9ea:	d1 1e       	adc	r13, r17
 9ec:	80 17       	cp	r24, r16
 9ee:	91 07       	cpc	r25, r17
 9f0:	e8 f4       	brcc	.+58     	; 0xa2c <__simple_malloc+0x9a>
 9f2:	da 82       	std	Y+2, r13	; 0x02
 9f4:	c9 82       	std	Y+1, r12	; 0x01
 9f6:	ce 01       	movw	r24, r28
 9f8:	01 96       	adiw	r24, 0x01	; 1
 9fa:	ab d0       	rcall	.+342    	; 0xb52 <__expand_heap>
 9fc:	00 97       	sbiw	r24, 0x00	; 0
 9fe:	19 f4       	brne	.+6      	; 0xa06 <__simple_malloc+0x74>
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	2c c0       	rjmp	.+88     	; 0xa5e <__simple_malloc+0xcc>
 a06:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <end.1483>
 a0a:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <end.1483+0x1>
 a0e:	82 17       	cp	r24, r18
 a10:	93 07       	cpc	r25, r19
 a12:	21 f0       	breq	.+8      	; 0xa1c <__simple_malloc+0x8a>
 a14:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <cur.1482+0x1>
 a18:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <cur.1482>
 a1c:	29 81       	ldd	r18, Y+1	; 0x01
 a1e:	3a 81       	ldd	r19, Y+2	; 0x02
 a20:	82 0f       	add	r24, r18
 a22:	93 1f       	adc	r25, r19
 a24:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <end.1483+0x1>
 a28:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <end.1483>
 a2c:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <cur.1482>
 a30:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <cur.1482+0x1>
 a34:	cf 01       	movw	r24, r30
 a36:	e1 14       	cp	r14, r1
 a38:	f1 04       	cpc	r15, r1
 a3a:	19 f0       	breq	.+6      	; 0xa42 <__simple_malloc+0xb0>
 a3c:	02 96       	adiw	r24, 0x02	; 2
 a3e:	11 83       	std	Z+1, r17	; 0x01
 a40:	00 83       	st	Z, r16
 a42:	ce 0e       	add	r12, r30
 a44:	df 1e       	adc	r13, r31
 a46:	d0 92 a1 01 	sts	0x01A1, r13	; 0x8001a1 <cur.1482+0x1>
 a4a:	c0 92 a0 01 	sts	0x01A0, r12	; 0x8001a0 <cur.1482>
 a4e:	07 c0       	rjmp	.+14     	; 0xa5e <__simple_malloc+0xcc>
 a50:	00 97       	sbiw	r24, 0x00	; 0
 a52:	09 f0       	breq	.+2      	; 0xa56 <__simple_malloc+0xc4>
 a54:	af cf       	rjmp	.-162    	; 0x9b4 <__simple_malloc+0x22>
 a56:	7c 01       	movw	r14, r24
 a58:	01 e0       	ldi	r16, 0x01	; 1
 a5a:	10 e0       	ldi	r17, 0x00	; 0
 a5c:	ba cf       	rjmp	.-140    	; 0x9d2 <__simple_malloc+0x40>
 a5e:	22 96       	adiw	r28, 0x02	; 2
 a60:	e8 e0       	ldi	r30, 0x08	; 8
 a62:	51 c3       	rjmp	.+1698   	; 0x1106 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

000014b0 <_Exit>:
    14b0:	91 d6       	rcall	.+3362   	; 0x21d4 <__TEXT_REGION_LENGTH__+0x1d4>

Disassembly of section .text.__expand_heap:

00000b52 <__expand_heap>:
 b52:	fc 01       	movw	r30, r24
 b54:	40 81       	ld	r20, Z
 b56:	51 81       	ldd	r21, Z+1	; 0x01
 b58:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__brkval>
 b5c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__brkval+0x1>
 b60:	89 2b       	or	r24, r25
 b62:	41 f4       	brne	.+16     	; 0xb74 <__expand_heap+0x22>
 b64:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__malloc_heap_start>
 b68:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__malloc_heap_start+0x1>
 b6c:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__brkval+0x1>
 b70:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__brkval>
 b74:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__malloc_heap_end>
 b78:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__malloc_heap_end+0x1>
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	19 f4       	brne	.+6      	; 0xb86 <__expand_heap+0x34>
 b80:	8d b7       	in	r24, 0x3d	; 61
 b82:	9e b7       	in	r25, 0x3e	; 62
 b84:	80 97       	sbiw	r24, 0x20	; 32
 b86:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__brkval>
 b8a:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__brkval+0x1>
 b8e:	28 17       	cp	r18, r24
 b90:	39 07       	cpc	r19, r25
 b92:	48 f0       	brcs	.+18     	; 0xba6 <__expand_heap+0x54>
 b94:	8c e0       	ldi	r24, 0x0C	; 12
 b96:	90 e0       	ldi	r25, 0x00	; 0
 b98:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__errno_val+0x1>
 b9c:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__errno_val>
 ba0:	80 e0       	ldi	r24, 0x00	; 0
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	08 95       	ret
 ba6:	82 1b       	sub	r24, r18
 ba8:	93 0b       	sbc	r25, r19
 baa:	84 17       	cp	r24, r20
 bac:	95 07       	cpc	r25, r21
 bae:	90 f3       	brcs	.-28     	; 0xb94 <__expand_heap+0x42>
 bb0:	42 0f       	add	r20, r18
 bb2:	53 1f       	adc	r21, r19
 bb4:	50 93 a3 01 	sts	0x01A3, r21	; 0x8001a3 <__brkval+0x1>
 bb8:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <__brkval>
 bbc:	c9 01       	movw	r24, r18
 bbe:	08 95       	ret

Disassembly of section .text.avrlibc:

00001286 <eeprom_read_block>:
    1286:	ba 01       	movw	r22, r20
    1288:	a9 01       	movw	r20, r18
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22

0000128e <eeprom_read_blraw>:
    128e:	fc 01       	movw	r30, r24
    1290:	f9 99       	sbic	0x1f, 1	; 31
    1292:	fe cf       	rjmp	.-4      	; 0x1290 <eeprom_read_blraw+0x2>
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <eeprom_read_blraw+0x14>
    1296:	f2 bd       	out	0x22, r31	; 34
    1298:	e1 bd       	out	0x21, r30	; 33
    129a:	f8 9a       	sbi	0x1f, 0	; 31
    129c:	31 96       	adiw	r30, 0x01	; 1
    129e:	00 b4       	in	r0, 0x20	; 32
    12a0:	0d 92       	st	X+, r0
    12a2:	41 50       	subi	r20, 0x01	; 1
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	b8 f7       	brcc	.-18     	; 0x1296 <eeprom_read_blraw+0x8>
    12a8:	08 95       	ret

Disassembly of section .text.avrlibc:

000013d8 <eeprom_read_byte>:
    13d8:	cb 01       	movw	r24, r22
    13da:	f9 99       	sbic	0x1f, 1	; 31
    13dc:	fe cf       	rjmp	.-4      	; 0x13da <eeprom_read_byte+0x2>
    13de:	92 bd       	out	0x22, r25	; 34
    13e0:	81 bd       	out	0x21, r24	; 33
    13e2:	f8 9a       	sbi	0x1f, 0	; 31
    13e4:	99 27       	eor	r25, r25
    13e6:	80 b5       	in	r24, 0x20	; 32
    13e8:	08 95       	ret

Disassembly of section .text.avrlibc:

00001446 <eeprom_read_word>:
    1446:	cb 01       	movw	r24, r22
    1448:	a8 e1       	ldi	r26, 0x18	; 24
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	42 e0       	ldi	r20, 0x02	; 2
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	1e cf       	rjmp	.-452    	; 0x128e <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000115c <eeprom_write_block>:
    115c:	cf 92       	push	r12
    115e:	df 92       	push	r13
    1160:	ef 92       	push	r14
    1162:	6b 01       	movw	r12, r22
    1164:	e8 2e       	mov	r14, r24
    1166:	ca 01       	movw	r24, r20
    1168:	42 2f       	mov	r20, r18
    116a:	73 2f       	mov	r23, r19
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <eeprom_write_block+0x24>
    116e:	f6 01       	movw	r30, r12
    1170:	5e 2d       	mov	r21, r14
    1172:	74 d1       	rcall	.+744    	; 0x145c <__xload_1>
    1174:	26 2f       	mov	r18, r22
    1176:	ca d0       	rcall	.+404    	; 0x130c <eeprom_write_r18>
    1178:	3f ef       	ldi	r19, 0xFF	; 255
    117a:	c3 1a       	sub	r12, r19
    117c:	d3 0a       	sbc	r13, r19
    117e:	e3 0a       	sbc	r14, r19
    1180:	41 50       	subi	r20, 0x01	; 1
    1182:	70 40       	sbci	r23, 0x00	; 0
    1184:	a0 f7       	brcc	.-24     	; 0x116e <eeprom_write_block+0x12>
    1186:	ef 90       	pop	r14
    1188:	df 90       	pop	r13
    118a:	cf 90       	pop	r12
    118c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000130a <eeprom_write_byte>:
    130a:	26 2f       	mov	r18, r22

0000130c <eeprom_write_r18>:
    130c:	f9 99       	sbic	0x1f, 1	; 31
    130e:	fe cf       	rjmp	.-4      	; 0x130c <eeprom_write_r18>
    1310:	1f ba       	out	0x1f, r1	; 31
    1312:	92 bd       	out	0x22, r25	; 34
    1314:	81 bd       	out	0x21, r24	; 33
    1316:	20 bd       	out	0x20, r18	; 32
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	fa 9a       	sbi	0x1f, 2	; 31
    131e:	f9 9a       	sbi	0x1f, 1	; 31
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	01 96       	adiw	r24, 0x01	; 1
    1324:	08 95       	ret

Disassembly of section .text.avrlibc:

0000149e <eeprom_write_word>:
    149e:	35 df       	rcall	.-406    	; 0x130a <eeprom_write_byte>
    14a0:	27 2f       	mov	r18, r23
    14a2:	34 cf       	rjmp	.-408    	; 0x130c <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

0000104e <__prologue_saves__>:
    104e:	2f 92       	push	r2
    1050:	3f 92       	push	r3
    1052:	4f 92       	push	r4
    1054:	5f 92       	push	r5
    1056:	6f 92       	push	r6
    1058:	7f 92       	push	r7
    105a:	8f 92       	push	r8
    105c:	9f 92       	push	r9
    105e:	af 92       	push	r10
    1060:	bf 92       	push	r11
    1062:	cf 92       	push	r12
    1064:	df 92       	push	r13
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	ca 1b       	sub	r28, r26
    1078:	db 0b       	sbc	r29, r27
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000010f2 <__epilogue_restores__>:
    10f2:	2a 88       	ldd	r2, Y+18	; 0x12
    10f4:	39 88       	ldd	r3, Y+17	; 0x11
    10f6:	48 88       	ldd	r4, Y+16	; 0x10
    10f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    10fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    10fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    1100:	9b 84       	ldd	r9, Y+11	; 0x0b
    1102:	aa 84       	ldd	r10, Y+10	; 0x0a
    1104:	b9 84       	ldd	r11, Y+9	; 0x09
    1106:	c8 84       	ldd	r12, Y+8	; 0x08
    1108:	df 80       	ldd	r13, Y+7	; 0x07
    110a:	ee 80       	ldd	r14, Y+6	; 0x06
    110c:	fd 80       	ldd	r15, Y+5	; 0x05
    110e:	0c 81       	ldd	r16, Y+4	; 0x04
    1110:	1b 81       	ldd	r17, Y+3	; 0x03
    1112:	aa 81       	ldd	r26, Y+2	; 0x02
    1114:	b9 81       	ldd	r27, Y+1	; 0x01
    1116:	ce 0f       	add	r28, r30
    1118:	d1 1d       	adc	r29, r1
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	ed 01       	movw	r28, r26
    1126:	08 95       	ret

Disassembly of section .text.libgcc:

0000145c <__xload_1>:
    145c:	57 fd       	sbrc	r21, 7
    145e:	60 81       	ld	r22, Z
    1460:	57 ff       	sbrs	r21, 7
    1462:	64 91       	lpm	r22, Z
    1464:	08 95       	ret
