
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001826  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800100  00800100  00001826  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001826  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000007e  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000018d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000061d8  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109e  00000000  00000000  00007e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c32  00000000  00000000  00008ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000066c  00000000  00000000  0000aad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000692  00000000  00000000  0000b144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017a8  00000000  00000000  0000b7d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000cf7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  0000166a  0000166a  000017fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000d1c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000036  000011b4  000011b4  00001348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_16 000001c4  000003bc  000003bc  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_4 00000046  00001036  00001036  000011ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.leaveDefSettings_cnt 00000001  008001ab  008001ab  00001826  2**0
                  ALLOC
 19 .bss.swProgrammingMode_cnt 00000001  008001ac  008001ac  00001826  2**0
                  ALLOC
 20 .data.protectionInterval_cnt 00000001  008001ad  00001690  00001824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.MIDI_IsStatusWord 00000008  00001628  00001628  000017bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.MIDI_IsSysRealTime 0000000c  000015ee  000015ee  00001782  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.MIDI_GetStatusType 00000040  00001104  00001104  00001298  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.isEqualCommands 00000014  00001562  00001562  000016f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.loadCommSetFromMemory 0000007a  00000b06  00000b06  00000c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.setMidiLeds 00000052  00000eac  00000eac  00001040  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MIDICTRL_Init 00000028  0000139e  0000139e  00001532  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MIDICTRL_MidiMode 00000006  00001630  00001630  000017c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MIDICTRL_SetProgrammingButton 0000002e  000012bc  000012bc  00001450  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.MIDICTRL_SwitchMode 0000004c  00000f9e  00000f9e  00001132  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.MIDICTRL_SetMidiChannel 00000006  00001636  00001636  000017ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.MIDICTRL_OmniModeEn 00000006  0000163c  0000163c  000017d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.MIDICTRL_MuteCommEn 00000006  00001642  00001642  000017d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.programmBtn 0000004c  00000fea  00000fea  0000117e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.MIDICTRL_SendSwChComm 0000005a  00000df8  00000df8  00000f8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_SendLoopEnComm 00000026  000013ee  000013ee  00001582  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.MIDICTRL_SendSwABComm 00000026  00001414  00001414  000015a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MIDICTRL_StoreUserCommands 00000036  000011ea  000011ea  0000137e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.MIDICTRL_DiscardCommands 00000014  00001576  00001576  0000170a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.indicateMidiError 0000002e  000012ea  000012ea  0000147e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.MIDICTRL_HandleCommand 0000014e  0000085c  0000085c  000009f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_13 0000005c  00000d9c  00000d9c  00000f30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .data.defaultCommands 00000018  00800189  00001674  00001808  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 44 .progmemx.data.muteCommand 00000004  000001d8  000001d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.channelNum 00000001  008001ae  008001ae  00001826  2**0
                  ALLOC
 46 .bss.muteCommandEnabled 00000001  008001af  008001af  00001826  2**0
                  ALLOC
 47 .bss.omniModeEnabled 00000001  008001b0  008001b0  00001826  2**0
                  ALLOC
 48 .text.handleRealTimeStatus 00000004  00001666  00001666  000017fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.MIDI_ParserTask 00000156  00000706  00000706  0000089a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.MIDI_SetRetranslateState 00000006  00001648  00001648  000017dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.MIDI_SendCommand 0000005a  00000e52  00000e52  00000fe6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .bss.state    00000001  008001b1  008001b1  00001826  2**0
                  ALLOC
 53 .data.retranslate 00000001  008001b2  00001691  00001825  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 54 .text.setChannelLeds 00000022  000014a8  000014a8  0000163c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.SH100CTRL_SetAmpLeds 0000002e  00001318  00001318  000014ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.SH100CTRL_StoreAmpState 0000001c  000014ca  000014ca  0000165e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.SH100CTRL_SetLoop 0000002a  00001374  00001374  00001508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.SH100CTRL_SwChannel 0000002e  00001346  00001346  000014da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.SH100CTRL_SwLoop 00000014  0000158a  0000158a  0000171e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SH100CTRL_BtnSwChannel 00000010  000015c2  000015c2  00001756  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.SH100CTRL_SetAB 00000024  00001460  00001460  000015f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100CTRL_SetAmpState 00000064  00000cd4  00000cd4  00000e68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SH100CTRL_Init 0000008a  00000a7c  00000a7c  00000c10  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SH100CTRL_SwAB 0000000c  000015fa  000015fa  0000178e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SH100CTRL_MuteAmp 00000006  0000164e  0000164e  000017e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SH100CTRL_UnmuteAmp 0000000c  00001606  00001606  0000179a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SH100CTRL_CheckOutputJacks 00000072  00000bf4  00000bf4  00000d88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SH100HW_Init 00000074  00000b80  00000b80  00000d14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SH100HW_GetButtonsState 00000012  0000159e  0000159e  00001732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SH100HW_SetCh 0000004e  00000f50  00000f50  000010e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SH100HW_LoopEn 00000018  00001502  00001502  00001696  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SH100HW_SetAB 00000006  00001654  00001654  000017e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.SH100HW_SetNewLedState 00000038  00001144  00001144  000012d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.SH100HW_SetPreviousLedState 00000028  000013c6  000013c6  0000155a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SH100HW_GetOutputJacks 00000018  0000151a  0000151a  000016ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.SH100HW_SetPAState 00000026  0000143a  0000143a  000015ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.SH100HW_SetOutputMode 00000006  0000165a  0000165a  000017ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.readButtonsState 00000186  00000580  00000580  00000714  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.writeShiftRegs 00000042  000010c2  000010c2  00001256  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.SH100HW_MainTask 000001e0  000001dc  000001dc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .bss.fastBlink 00000001  008001b3  008001b3  00001826  2**0
                  ALLOC
 82 .bss.slowBlink 00000001  008001b4  008001b4  00001826  2**0
                  ALLOC
 83 .bss.blinkCounter 00000001  008001b5  008001b5  00001826  2**0
                  ALLOC
 84 .text.UART_init 00000018  00001532  00001532  000016c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_18 00000064  00000d38  00000d38  00000ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.UART_PopWord 00000034  00001256  00001256  000013ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.UART_RxBufferNotEmpty 0000000e  000015d2  000015d2  00001766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_20 00000052  00000efe  00000efe  00001092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.UART_PushWord 00000046  0000107c  0000107c  00001210  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.libgcc  00000018  0000154a  0000154a  000016de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__dummy_fini 00000002  0000166c  0000166c  00001800  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__dummy_funcs_on_exit 00000002  0000166e  0000166e  00001802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__dummy_simulator_exit 00000002  00001670  00001670  00001804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.exit    0000000e  000015e0  000015e0  00001774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.__simple_malloc 000000d2  000009aa  000009aa  00000b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .bss.end.1483 00000002  008001a1  008001a1  00001826  2**0
                  ALLOC
 97 .bss.cur.1482 00000002  008001a3  008001a3  00001826  2**0
                  ALLOC
 98 .text._Exit   00000002  00001672  00001672  00001806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.__expand_heap 0000006e  00000c66  00000c66  00000dfa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .bss.__brkval 00000002  008001a5  008001a5  00001826  2**0
                  ALLOC
101 .data.__malloc_heap_end 00000002  008001a7  0000168c  00001820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
102 .data.__malloc_heap_start 00000002  008001a9  0000168e  00001822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
103 .text.avrlibc 00000024  00001484  00001484  00001618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.avrlibc 00000012  000015b0  000015b0  00001744  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.avrlibc 0000000c  00001612  00001612  000017a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.avrlibc 00000032  0000128a  0000128a  0000141e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.avrlibc 0000001c  000014e6  000014e6  0000167a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.avrlibc 00000006  00001660  00001660  000017f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.libgcc.prologue 00000038  0000117c  0000117c  00001310  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.libgcc.prologue 00000036  00001220  00001220  000013b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.libgcc  0000000a  0000161e  0000161e  000017b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	c3 c0       	rjmp	.+390    	; 0x188 <__ctors_end>
   2:	33 cb       	rjmp	.-2458   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
   4:	32 cb       	rjmp	.-2460   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
   6:	31 cb       	rjmp	.-2462   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
   8:	16 c8       	rjmp	.-4052   	; 0xfffff036 <__eeprom_end+0xff7ef036>
   a:	2f cb       	rjmp	.-2466   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
   c:	2e cb       	rjmp	.-2468   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
   e:	2d cb       	rjmp	.-2470   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  10:	2c cb       	rjmp	.-2472   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  12:	2b cb       	rjmp	.-2474   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  14:	2a cb       	rjmp	.-2476   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  16:	29 cb       	rjmp	.-2478   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  18:	28 cb       	rjmp	.-2480   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  1a:	c0 c6       	rjmp	.+3456   	; 0xd9c <__vector_13>
  1c:	26 cb       	rjmp	.-2484   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  1e:	25 cb       	rjmp	.-2486   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  20:	cd c1       	rjmp	.+922    	; 0x3bc <__vector_16>
  22:	23 cb       	rjmp	.-2490   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  24:	89 c6       	rjmp	.+3346   	; 0xd38 <__vector_18>
  26:	21 cb       	rjmp	.-2494   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  28:	6a c7       	rjmp	.+3796   	; 0xefe <__vector_20>
  2a:	1f cb       	rjmp	.-2498   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  2c:	1e cb       	rjmp	.-2500   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  2e:	1d cb       	rjmp	.-2502   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  30:	1c cb       	rjmp	.-2504   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  32:	1b cb       	rjmp	.-2506   	; 0xfffff66a <__eeprom_end+0xff7ef66a>
  34:	71 c8       	rjmp	.-3870   	; 0xfffff118 <__eeprom_end+0xff7ef118>
  36:	82 c8       	rjmp	.-3836   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  38:	81 c8       	rjmp	.-3838   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  3a:	80 c8       	rjmp	.-3840   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  3c:	7f c8       	rjmp	.-3842   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  3e:	7e c8       	rjmp	.-3844   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  40:	7d c8       	rjmp	.-3846   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  42:	7c c8       	rjmp	.-3848   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  44:	7b c8       	rjmp	.-3850   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  46:	7a c8       	rjmp	.-3852   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  48:	79 c8       	rjmp	.-3854   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  4a:	78 c8       	rjmp	.-3856   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  4c:	77 c8       	rjmp	.-3858   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  4e:	76 c8       	rjmp	.-3860   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  50:	75 c8       	rjmp	.-3862   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  52:	74 c8       	rjmp	.-3864   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  54:	61 c8       	rjmp	.-3902   	; 0xfffff118 <__eeprom_end+0xff7ef118>
  56:	72 c8       	rjmp	.-3868   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  58:	71 c8       	rjmp	.-3870   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  5a:	70 c8       	rjmp	.-3872   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  5c:	6f c8       	rjmp	.-3874   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  5e:	6e c8       	rjmp	.-3876   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  60:	6d c8       	rjmp	.-3878   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  62:	6c c8       	rjmp	.-3880   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  64:	6b c8       	rjmp	.-3882   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  66:	6a c8       	rjmp	.-3884   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  68:	69 c8       	rjmp	.-3886   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  6a:	68 c8       	rjmp	.-3888   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  6c:	67 c8       	rjmp	.-3890   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  6e:	66 c8       	rjmp	.-3892   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  70:	65 c8       	rjmp	.-3894   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  72:	64 c8       	rjmp	.-3896   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  74:	51 c8       	rjmp	.-3934   	; 0xfffff118 <__eeprom_end+0xff7ef118>
  76:	62 c8       	rjmp	.-3900   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  78:	61 c8       	rjmp	.-3902   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  7a:	60 c8       	rjmp	.-3904   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  7c:	5f c8       	rjmp	.-3906   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  7e:	5e c8       	rjmp	.-3908   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  80:	5d c8       	rjmp	.-3910   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  82:	5c c8       	rjmp	.-3912   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  84:	5b c8       	rjmp	.-3914   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  86:	5a c8       	rjmp	.-3916   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  88:	59 c8       	rjmp	.-3918   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  8a:	58 c8       	rjmp	.-3920   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  8c:	57 c8       	rjmp	.-3922   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  8e:	56 c8       	rjmp	.-3924   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  90:	55 c8       	rjmp	.-3926   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  92:	54 c8       	rjmp	.-3928   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  94:	41 c8       	rjmp	.-3966   	; 0xfffff118 <__eeprom_end+0xff7ef118>
  96:	52 c8       	rjmp	.-3932   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  98:	51 c8       	rjmp	.-3934   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  9a:	50 c8       	rjmp	.-3936   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  9c:	4f c8       	rjmp	.-3938   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  9e:	4e c8       	rjmp	.-3940   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  a0:	4d c8       	rjmp	.-3942   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  a2:	4c c8       	rjmp	.-3944   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  a4:	4b c8       	rjmp	.-3946   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  a6:	4a c8       	rjmp	.-3948   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  a8:	49 c8       	rjmp	.-3950   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  aa:	48 c8       	rjmp	.-3952   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ac:	47 c8       	rjmp	.-3954   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ae:	46 c8       	rjmp	.-3956   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  b0:	45 c8       	rjmp	.-3958   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  b2:	44 c8       	rjmp	.-3960   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  b4:	45 c8       	rjmp	.-3958   	; 0xfffff140 <__eeprom_end+0xff7ef140>
  b6:	42 c8       	rjmp	.-3964   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  b8:	41 c8       	rjmp	.-3966   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ba:	40 c8       	rjmp	.-3968   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  bc:	3f c8       	rjmp	.-3970   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  be:	3e c8       	rjmp	.-3972   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  c0:	3d c8       	rjmp	.-3974   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  c2:	3c c8       	rjmp	.-3976   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  c4:	3b c8       	rjmp	.-3978   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  c6:	3a c8       	rjmp	.-3980   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  c8:	39 c8       	rjmp	.-3982   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ca:	38 c8       	rjmp	.-3984   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  cc:	37 c8       	rjmp	.-3986   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ce:	36 c8       	rjmp	.-3988   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  d0:	35 c8       	rjmp	.-3990   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  d2:	34 c8       	rjmp	.-3992   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  d4:	35 c8       	rjmp	.-3990   	; 0xfffff140 <__eeprom_end+0xff7ef140>
  d6:	32 c8       	rjmp	.-3996   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  d8:	31 c8       	rjmp	.-3998   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  da:	30 c8       	rjmp	.-4000   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  dc:	2f c8       	rjmp	.-4002   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  de:	2e c8       	rjmp	.-4004   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  e0:	2d c8       	rjmp	.-4006   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  e2:	2c c8       	rjmp	.-4008   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  e4:	2b c8       	rjmp	.-4010   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  e6:	2a c8       	rjmp	.-4012   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  e8:	29 c8       	rjmp	.-4014   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ea:	28 c8       	rjmp	.-4016   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ec:	27 c8       	rjmp	.-4018   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  ee:	26 c8       	rjmp	.-4020   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  f0:	25 c8       	rjmp	.-4022   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  f2:	24 c8       	rjmp	.-4024   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  f4:	11 c8       	rjmp	.-4062   	; 0xfffff118 <__eeprom_end+0xff7ef118>
  f6:	22 c8       	rjmp	.-4028   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  f8:	21 c8       	rjmp	.-4030   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  fa:	20 c8       	rjmp	.-4032   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  fc:	1f c8       	rjmp	.-4034   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
  fe:	1e c8       	rjmp	.-4036   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 100:	1d c8       	rjmp	.-4038   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 102:	1c c8       	rjmp	.-4040   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 104:	1b c8       	rjmp	.-4042   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 106:	1a c8       	rjmp	.-4044   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 108:	19 c8       	rjmp	.-4046   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 10a:	18 c8       	rjmp	.-4048   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 10c:	17 c8       	rjmp	.-4050   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 10e:	16 c8       	rjmp	.-4052   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 110:	15 c8       	rjmp	.-4054   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 112:	14 c8       	rjmp	.-4056   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 114:	0f c8       	rjmp	.-4066   	; 0xfffff134 <__eeprom_end+0xff7ef134>
 116:	14 c8       	rjmp	.-4056   	; 0xfffff140 <__eeprom_end+0xff7ef140>
 118:	ff c7       	rjmp	.+4094   	; 0x1118 <MIDI_GetStatusType+0x14>
 11a:	12 c8       	rjmp	.-4060   	; 0xfffff140 <__eeprom_end+0xff7ef140>
 11c:	0f c8       	rjmp	.-4066   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 11e:	0e c8       	rjmp	.-4068   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 120:	0d c8       	rjmp	.-4070   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 122:	0a c8       	rjmp	.-4076   	; 0xfffff138 <__eeprom_end+0xff7ef138>
 124:	fb c7       	rjmp	.+4086   	; 0x111c <MIDI_GetStatusType+0x18>
 126:	0a c8       	rjmp	.-4076   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 128:	fb c7       	rjmp	.+4086   	; 0x1120 <MIDI_GetStatusType+0x1c>
 12a:	fc c7       	rjmp	.+4088   	; 0x1124 <MIDI_GetStatusType+0x20>
 12c:	fd c7       	rjmp	.+4090   	; 0x1128 <MIDI_GetStatusType+0x24>
 12e:	06 c8       	rjmp	.-4084   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 130:	fd c7       	rjmp	.+4090   	; 0x112c <MIDI_GetStatusType+0x28>
 132:	fe c7       	rjmp	.+4092   	; 0x1130 <MIDI_GetStatusType+0x2c>
 134:	f4 c2       	rjmp	.+1512   	; 0x71e <MIDI_ParserTask+0x18>
 136:	00 c3       	rjmp	.+1536   	; 0x738 <MIDI_ParserTask+0x32>
 138:	3f c3       	rjmp	.+1662   	; 0x7b8 <MIDI_ParserTask+0xb2>
 13a:	72 c3       	rjmp	.+1764   	; 0x820 <MIDI_ParserTask+0x11a>
 13c:	52 c3       	rjmp	.+1700   	; 0x7e2 <MIDI_ParserTask+0xdc>
 13e:	81 c3       	rjmp	.+1794   	; 0x842 <MIDI_ParserTask+0x13c>
 140:	84 c3       	rjmp	.+1800   	; 0x84a <MIDI_ParserTask+0x144>
 142:	2a c2       	rjmp	.+1108   	; 0x598 <readButtonsState+0x18>
 144:	3d c2       	rjmp	.+1146   	; 0x5c0 <readButtonsState+0x40>
 146:	53 c2       	rjmp	.+1190   	; 0x5ee <readButtonsState+0x6e>
 148:	69 c2       	rjmp	.+1234   	; 0x61c <readButtonsState+0x9c>
 14a:	7c c2       	rjmp	.+1272   	; 0x644 <readButtonsState+0xc4>
 14c:	92 c2       	rjmp	.+1316   	; 0x672 <readButtonsState+0xf2>
 14e:	a0 c2       	rjmp	.+1344   	; 0x690 <readButtonsState+0x110>
 150:	b6 c2       	rjmp	.+1388   	; 0x6be <readButtonsState+0x13e>

00000152 <.dinit>:
 152:	01 00       	.word	0x0001	; ????
 154:	01 89       	ldd	r16, Z+17	; 0x11
 156:	80 01       	movw	r16, r0
 158:	89 01       	movw	r16, r18
 15a:	a1 00       	.word	0x00a1	; ????
 15c:	16 74       	andi	r17, 0x46	; 70
 15e:	01 a1       	ldd	r16, Z+33	; 0x21
 160:	01 a7       	std	Z+41, r16	; 0x29
 162:	80 01       	movw	r16, r0
 164:	a7 01       	movw	r20, r14
 166:	ab 00       	.word	0x00ab	; ????
 168:	16 8c       	ldd	r1, Z+30	; 0x1e
 16a:	01 ab       	std	Z+49, r16	; 0x31
 16c:	01 ad       	ldd	r16, Z+57	; 0x39
 16e:	80 01       	movw	r16, r0
 170:	ad 01       	movw	r20, r26
 172:	ae 00       	.word	0x00ae	; ????
 174:	16 90       	elpm	r1, Z
 176:	01 ae       	std	Z+57, r0	; 0x39
 178:	01 b2       	in	r0, 0x11	; 17
 17a:	80 01       	movw	r16, r0
 17c:	b2 01       	movw	r22, r4
 17e:	b3 00       	.word	0x00b3	; ????
 180:	16 91       	elpm	r17, Z
 182:	01 b3       	in	r16, 0x11	; 17
 184:	01 b6       	in	r0, 0x31	; 49
 186:	80 00       	.word	0x0080	; ????

00000188 <__ctors_end>:
 188:	11 24       	eor	r1, r1
 18a:	1f be       	out	0x3f, r1	; 63
 18c:	cf ef       	ldi	r28, 0xFF	; 255
 18e:	d4 e0       	ldi	r29, 0x04	; 4
 190:	de bf       	out	0x3e, r29	; 62
 192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
 194:	e2 e5       	ldi	r30, 0x52	; 82
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <__do_clear_bss+0x8>
 19c:	b5 91       	lpm	r27, Z+
 19e:	a5 91       	lpm	r26, Z+
 1a0:	35 91       	lpm	r19, Z+
 1a2:	25 91       	lpm	r18, Z+
 1a4:	05 91       	lpm	r16, Z+
 1a6:	07 fd       	sbrc	r16, 7
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <__do_clear_bss>
 1aa:	95 91       	lpm	r25, Z+
 1ac:	85 91       	lpm	r24, Z+
 1ae:	ef 01       	movw	r28, r30
 1b0:	f9 2f       	mov	r31, r25
 1b2:	e8 2f       	mov	r30, r24
 1b4:	05 90       	lpm	r0, Z+
 1b6:	0d 92       	st	X+, r0
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <__do_copy_data+0x20>
 1be:	fe 01       	movw	r30, r28
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <__do_clear_bss+0x8>

000001c2 <__do_clear_bss>:
 1c2:	1d 92       	st	X+, r1
 1c4:	a2 17       	cp	r26, r18
 1c6:	b3 07       	cpc	r27, r19
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <__do_clear_bss>
 1ca:	e7 38       	cpi	r30, 0x87	; 135
 1cc:	f4 07       	cpc	r31, r20
 1ce:	31 f7       	brne	.-52     	; 0x19c <__do_copy_data+0x8>
 1d0:	f1 d7       	rcall	.+4066   	; 0x11b4 <main>
 1d2:	06 ca       	rjmp	.-3060   	; 0xfffff5e0 <__eeprom_end+0xff7ef5e0>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>

Disassembly of section .text:

0000166a <__bad_interrupt>:
    166a:	ca c4       	rjmp	.+2452   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.main:

000011b4 <main>:
#include "sh100_hardware.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
    11b4:	be d1       	rcall	.+892    	; 0x1532 <UART_init>
	SH100HW_Init();
    11b6:	e4 dc       	rcall	.-1592   	; 0xb80 <SH100HW_Init>
	SH100CTRL_Init();
    11b8:	61 dc       	rcall	.-1854   	; 0xa7c <SH100CTRL_Init>
	MIDICTRL_Init();
    11ba:	f1 d0       	rcall	.+482    	; 0x139e <MIDICTRL_Init>
	
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    11bc:	85 b5       	in	r24, 0x25	; 37
    11be:	85 60       	ori	r24, 0x05	; 5
    11c0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    11c2:	ee e6       	ldi	r30, 0x6E	; 110
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	81 60       	ori	r24, 0x01	; 1
    11ca:	80 83       	st	Z, r24
	TCNT0 = 100;
    11cc:	84 e6       	ldi	r24, 0x64	; 100
    11ce:	86 bd       	out	0x26, r24	; 38
	
	// PCINT10, interrupt for PC2 pin(SW detect)
	PCICR |= 0x02;
    11d0:	e8 e6       	ldi	r30, 0x68	; 104
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	80 83       	st	Z, r24
	PCMSK1 |= 0x04;
    11da:	ec e6       	ldi	r30, 0x6C	; 108
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	84 60       	ori	r24, 0x04	; 4
    11e2:	80 83       	st	Z, r24
	
	cpu_irq_enable();
    11e4:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
    11e6:	8f da       	rcall	.-2786   	; 0x706 <MIDI_ParserTask>
    11e8:	fe cf       	rjmp	.-4      	; 0x11e6 <main+0x32>

Disassembly of section .text.__vector_16:

000003bc <__vector_16>:
uint8_t protectionInterval_cnt = PROTECTION_INTERVAL;
uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

ISR(TIMER0_OVF_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	2f 97       	sbiw	r28, 0x0f	; 15
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 3ec:	f7 de       	rcall	.-530    	; 0x1dc <SH100HW_MainTask>
	SH100CTRL_CheckOutputJacks();
 3ee:	02 d4       	rcall	.+2052   	; 0xbf4 <SH100CTRL_CheckOutputJacks>
	
	SH100HW_Buttons_t pressedButtons = SH100HW_GetButtonsState();
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	d4 d8       	rcall	.-3672   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	1e d9       	rcall	.-3524   	; 0xfffff636 <__eeprom_end+0xff7ef636>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 3fa:	9a 81       	ldd	r25, Y+2	; 0x02
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	91 11       	cpse	r25, r1
 400:	01 c0       	rjmp	.+2      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	1b d9       	rcall	.-3530   	; 0xfffff63c <__eeprom_end+0xff7ef63c>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 406:	9b 81       	ldd	r25, Y+3	; 0x03
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	91 11       	cpse	r25, r1
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	18 d9       	rcall	.-3536   	; 0xfffff642 <__eeprom_end+0xff7ef642>
	
	// FOOTSWITCH handling
	
	if(protectionInterval_cnt == 0)
 412:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <protectionInterval_cnt>
 416:	81 11       	cpse	r24, r1
 418:	97 c0       	rjmp	.+302    	; 0x548 <__stack+0x49>
	{		
		//=============BTN CH1==========================
		if(pressedButtons.btnCh1 == BT_ON)
 41a:	8c 81       	ldd	r24, Y+4	; 0x04
 41c:	81 11       	cpse	r24, r1
 41e:	27 c0       	rjmp	.+78     	; 0x46e <__DATA_REGION_LENGTH__+0x6e>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 420:	84 e1       	ldi	r24, 0x14	; 20
 422:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			if(swProgrammingMode_cnt == SWITCH_MODE_DELAY)
 426:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <swProgrammingMode_cnt>
 42a:	8a 30       	cpi	r24, 0x0A	; 10
 42c:	69 f4       	brne	.+26     	; 0x448 <__DATA_REGION_LENGTH__+0x48>
			{
				swProgrammingMode_cnt = 0;
 42e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <swProgrammingMode_cnt>
				//enter prog mode, or save settings
				if(MIDICTRL_MidiMode() == RUNNING)
 432:	fe d8       	rcall	.-3588   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 434:	81 11       	cpse	r24, r1
 436:	04 c0       	rjmp	.+8      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
				{
					MIDICTRL_SwitchMode(PROGRAMMING);
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	b1 d5       	rcall	.+2914   	; 0xf9e <MIDICTRL_SwitchMode>
					SH100CTRL_MuteAmp();
 43c:	08 d9       	rcall	.-3568   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
 43e:	87 c0       	rjmp	.+270    	; 0x54e <__stack+0x4f>
				}
				else
				{
					MIDICTRL_StoreUserCommands();
 440:	d4 d6       	rcall	.+3496   	; 0x11ea <MIDICTRL_StoreUserCommands>
					SH100CTRL_SetAmpLeds();
 442:	6a d7       	rcall	.+3796   	; 0x1318 <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 444:	e0 d8       	rcall	.-3648   	; 0xfffff606 <__eeprom_end+0xff7ef606>
 446:	83 c0       	rjmp	.+262    	; 0x54e <__stack+0x4f>
				}
			}
			else
			{		
				if(swProgrammingMode_cnt == 0)
 448:	81 11       	cpse	r24, r1
 44a:	0b c0       	rjmp	.+22     	; 0x462 <__DATA_REGION_LENGTH__+0x62>
				{
					switch(MIDICTRL_MidiMode())
 44c:	f1 d8       	rcall	.-3614   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 44e:	88 23       	and	r24, r24
 450:	19 f0       	breq	.+6      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	21 f0       	breq	.+8      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
 456:	05 c0       	rjmp	.+10     	; 0x462 <__DATA_REGION_LENGTH__+0x62>
					{
						case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL1); break;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	b3 d8       	rcall	.-3738   	; 0xfffff5c2 <__eeprom_end+0xff7ef5c2>
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__DATA_REGION_LENGTH__+0x62>
						case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	2d d7       	rcall	.+3674   	; 0x12bc <MIDICTRL_SetProgrammingButton>
					}
				}
				swProgrammingMode_cnt++;
 462:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <swProgrammingMode_cnt>
 466:	8f 5f       	subi	r24, 0xFF	; 255
 468:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <swProgrammingMode_cnt>
 46c:	70 c0       	rjmp	.+224    	; 0x54e <__stack+0x4f>
			}
			return;
		}
		else swProgrammingMode_cnt=0;	
 46e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <swProgrammingMode_cnt>
		
		//=============BTN CH2==========================
		if(pressedButtons.btnCh2 == BT_ON)
 472:	8d 81       	ldd	r24, Y+5	; 0x05
 474:	81 11       	cpse	r24, r1
 476:	0f c0       	rjmp	.+30     	; 0x496 <__DATA_REGION_LENGTH__+0x96>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 478:	84 e1       	ldi	r24, 0x14	; 20
 47a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 47e:	d8 d8       	rcall	.-3664   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 480:	88 23       	and	r24, r24
 482:	19 f0       	breq	.+6      	; 0x48a <__DATA_REGION_LENGTH__+0x8a>
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	21 f0       	breq	.+8      	; 0x490 <__DATA_REGION_LENGTH__+0x90>
 488:	62 c0       	rjmp	.+196    	; 0x54e <__stack+0x4f>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL2); break;
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	9a d8       	rcall	.-3788   	; 0xfffff5c2 <__eeprom_end+0xff7ef5c2>
 48e:	5f c0       	rjmp	.+190    	; 0x54e <__stack+0x4f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	14 d7       	rcall	.+3624   	; 0x12bc <MIDICTRL_SetProgrammingButton>
 494:	5c c0       	rjmp	.+184    	; 0x54e <__stack+0x4f>
			}
			return;
		}
		
		//=============BTN CH3==========================
		if(pressedButtons.btnCh3 == BT_ON)
 496:	8e 81       	ldd	r24, Y+6	; 0x06
 498:	81 11       	cpse	r24, r1
 49a:	0f c0       	rjmp	.+30     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 49c:	84 e1       	ldi	r24, 0x14	; 20
 49e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 4a2:	c6 d8       	rcall	.-3700   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 4a4:	88 23       	and	r24, r24
 4a6:	19 f0       	breq	.+6      	; 0x4ae <__DATA_REGION_LENGTH__+0xae>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	21 f0       	breq	.+8      	; 0x4b4 <__DATA_REGION_LENGTH__+0xb4>
 4ac:	50 c0       	rjmp	.+160    	; 0x54e <__stack+0x4f>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL3); break;
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	88 d8       	rcall	.-3824   	; 0xfffff5c2 <__eeprom_end+0xff7ef5c2>
 4b2:	4d c0       	rjmp	.+154    	; 0x54e <__stack+0x4f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	02 d7       	rcall	.+3588   	; 0x12bc <MIDICTRL_SetProgrammingButton>
 4b8:	4a c0       	rjmp	.+148    	; 0x54e <__stack+0x4f>
			}
			return;
		}
		
		//=============BTN CH4==========================
		if(pressedButtons.btnCh4 == BT_ON)
 4ba:	8f 81       	ldd	r24, Y+7	; 0x07
 4bc:	81 11       	cpse	r24, r1
 4be:	0f c0       	rjmp	.+30     	; 0x4de <__DATA_REGION_LENGTH__+0xde>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 4c0:	84 e1       	ldi	r24, 0x14	; 20
 4c2:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 4c6:	b4 d8       	rcall	.-3736   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 4c8:	88 23       	and	r24, r24
 4ca:	19 f0       	breq	.+6      	; 0x4d2 <__DATA_REGION_LENGTH__+0xd2>
 4cc:	81 30       	cpi	r24, 0x01	; 1
 4ce:	21 f0       	breq	.+8      	; 0x4d8 <__DATA_REGION_LENGTH__+0xd8>
 4d0:	3e c0       	rjmp	.+124    	; 0x54e <__stack+0x4f>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL4); break;
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	76 d8       	rcall	.-3860   	; 0xfffff5c2 <__eeprom_end+0xff7ef5c2>
 4d6:	3b c0       	rjmp	.+118    	; 0x54e <__stack+0x4f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	f0 d6       	rcall	.+3552   	; 0x12bc <MIDICTRL_SetProgrammingButton>
 4dc:	38 c0       	rjmp	.+112    	; 0x54e <__stack+0x4f>
			}
			return;
		}
		
		//=============BTN LOOP=========================
		if(pressedButtons.btnLoop == BT_ON)
 4de:	89 85       	ldd	r24, Y+9	; 0x09
 4e0:	81 11       	cpse	r24, r1
 4e2:	0e c0       	rjmp	.+28     	; 0x500 <__stack+0x1>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 4e4:	84 e1       	ldi	r24, 0x14	; 20
 4e6:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 4ea:	a2 d8       	rcall	.-3772   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 4ec:	88 23       	and	r24, r24
 4ee:	19 f0       	breq	.+6      	; 0x4f6 <__DATA_REGION_LENGTH__+0xf6>
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	19 f0       	breq	.+6      	; 0x4fa <__DATA_REGION_LENGTH__+0xfa>
 4f4:	2c c0       	rjmp	.+88     	; 0x54e <__stack+0x4f>
			{
				case RUNNING:
				{
					SH100CTRL_SwLoop();
 4f6:	49 d8       	rcall	.-3950   	; 0xfffff58a <__eeprom_end+0xff7ef58a>
					//protectionInterval_cnt = PROTECTION_INTERVAL;
					break;
 4f8:	2a c0       	rjmp	.+84     	; 0x54e <__stack+0x4f>
				}
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 4fa:	84 e0       	ldi	r24, 0x04	; 4
 4fc:	df d6       	rcall	.+3518   	; 0x12bc <MIDICTRL_SetProgrammingButton>
 4fe:	27 c0       	rjmp	.+78     	; 0x54e <__stack+0x4f>
			}
			return;
		}
			
		//=============BTN AB===========================
		if(pressedButtons.btnAB == BT_ON)
 500:	88 85       	ldd	r24, Y+8	; 0x08
 502:	81 11       	cpse	r24, r1
 504:	1e c0       	rjmp	.+60     	; 0x542 <__stack+0x43>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 506:	84 e1       	ldi	r24, 0x14	; 20
 508:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			if(leaveDefSettings_cnt == SWITCH_MODE_DELAY)
 50c:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <leaveDefSettings_cnt>
 510:	8a 30       	cpi	r24, 0x0A	; 10
 512:	49 f4       	brne	.+18     	; 0x526 <__stack+0x27>
			{
				if(MIDICTRL_MidiMode() == PROGRAMMING)
 514:	8d d8       	rcall	.-3814   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	d1 f4       	brne	.+52     	; 0x54e <__stack+0x4f>
				{
					leaveDefSettings_cnt = 0;
 51a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <leaveDefSettings_cnt>
					MIDICTRL_DiscardCommands();
 51e:	2b d8       	rcall	.-4010   	; 0xfffff576 <__eeprom_end+0xff7ef576>
					SH100CTRL_SetAmpLeds();
 520:	fb d6       	rcall	.+3574   	; 0x1318 <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 522:	71 d8       	rcall	.-3870   	; 0xfffff606 <__eeprom_end+0xff7ef606>
 524:	14 c0       	rjmp	.+40     	; 0x54e <__stack+0x4f>
				}
			}
			else
			{
				leaveDefSettings_cnt++;
 526:	8f 5f       	subi	r24, 0xFF	; 255
 528:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <leaveDefSettings_cnt>
				switch(MIDICTRL_MidiMode())
 52c:	81 d8       	rcall	.-3838   	; 0xfffff630 <__eeprom_end+0xff7ef630>
 52e:	88 23       	and	r24, r24
 530:	19 f0       	breq	.+6      	; 0x538 <__stack+0x39>
 532:	81 30       	cpi	r24, 0x01	; 1
 534:	19 f0       	breq	.+6      	; 0x53c <__stack+0x3d>
 536:	0b c0       	rjmp	.+22     	; 0x54e <__stack+0x4f>
				{
					case RUNNING: 
					{
						SH100CTRL_SwAB(); 
 538:	60 d8       	rcall	.-3904   	; 0xfffff5fa <__eeprom_end+0xff7ef5fa>
						//protectionInterval_cnt = PROTECTION_INTERVAL;
						break;
 53a:	09 c0       	rjmp	.+18     	; 0x54e <__stack+0x4f>
					}
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 53c:	85 e0       	ldi	r24, 0x05	; 5
 53e:	be d6       	rcall	.+3452   	; 0x12bc <MIDICTRL_SetProgrammingButton>
 540:	06 c0       	rjmp	.+12     	; 0x54e <__stack+0x4f>
				}
			}
			return;
		}
		else leaveDefSettings_cnt=0;
 542:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <leaveDefSettings_cnt>
 546:	03 c0       	rjmp	.+6      	; 0x54e <__stack+0x4f>
	}
	else
	{
		protectionInterval_cnt--;
 548:	81 50       	subi	r24, 0x01	; 1
 54a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
	}
}
 54e:	2f 96       	adiw	r28, 0x0f	; 15
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	f8 94       	cli
 554:	de bf       	out	0x3e, r29	; 62
 556:	0f be       	out	0x3f, r0	; 63
 558:	cd bf       	out	0x3d, r28	; 61
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	ff 91       	pop	r31
 560:	ef 91       	pop	r30
 562:	bf 91       	pop	r27
 564:	af 91       	pop	r26
 566:	9f 91       	pop	r25
 568:	8f 91       	pop	r24
 56a:	7f 91       	pop	r23
 56c:	6f 91       	pop	r22
 56e:	5f 91       	pop	r21
 570:	4f 91       	pop	r20
 572:	3f 91       	pop	r19
 574:	2f 91       	pop	r18
 576:	0f 90       	pop	r0
 578:	0f be       	out	0x3f, r0	; 63
 57a:	0f 90       	pop	r0
 57c:	1f 90       	pop	r1
 57e:	18 95       	reti

Disassembly of section .text.__vector_4:

00001036 <__vector_4>:

ISR(PCINT1_vect)
{
    1036:	1f 92       	push	r1
    1038:	0f 92       	push	r0
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	0f 92       	push	r0
    103e:	11 24       	eor	r1, r1
    1040:	2f 93       	push	r18
    1042:	3f 93       	push	r19
    1044:	4f 93       	push	r20
    1046:	5f 93       	push	r21
    1048:	6f 93       	push	r22
    104a:	7f 93       	push	r23
    104c:	8f 93       	push	r24
    104e:	9f 93       	push	r25
    1050:	af 93       	push	r26
    1052:	bf 93       	push	r27
    1054:	ef 93       	push	r30
    1056:	ff 93       	push	r31
	// Power off
	// need to check pin level?
	SH100CTRL_StoreAmpState();
    1058:	38 d2       	rcall	.+1136   	; 0x14ca <SH100CTRL_StoreAmpState>
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

00001628 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    1628:	88 1f       	adc	r24, r24
    162a:	88 27       	eor	r24, r24
    162c:	88 1f       	adc	r24, r24
    162e:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

000015ee <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    15ee:	91 e0       	ldi	r25, 0x01	; 1
    15f0:	88 3f       	cpi	r24, 0xF8	; 248
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <MIDI_IsSysRealTime+0x8>
    15f4:	90 e0       	ldi	r25, 0x00	; 0
}
    15f6:	89 2f       	mov	r24, r25
    15f8:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00001104 <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	fc 01       	movw	r30, r24
    1108:	e0 58       	subi	r30, 0x80	; 128
    110a:	f1 09       	sbc	r31, r1
    110c:	e0 38       	cpi	r30, 0x80	; 128
    110e:	f1 05       	cpc	r31, r1
    1110:	a8 f4       	brcc	.+42     	; 0x113c <MIDI_GetStatusType+0x38>
    1112:	e6 5e       	subi	r30, 0xE6	; 230
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
    1120:	83 e0       	ldi	r24, 0x03	; 3
    1122:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
    1124:	83 e0       	ldi	r24, 0x03	; 3
    1126:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
    1128:	83 e0       	ldi	r24, 0x03	; 3
    112a:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
    1130:	83 e0       	ldi	r24, 0x03	; 3
    1132:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
    1134:	84 e0       	ldi	r24, 0x04	; 4
    1136:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
    1138:	85 e0       	ldi	r24, 0x05	; 5
    113a:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
    1140:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
    1142:	08 95       	ret

Disassembly of section .text.isEqualCommands:

00001562 <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    1562:	62 13       	cpse	r22, r18
    1564:	04 c0       	rjmp	.+8      	; 0x156e <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data2) return false;	
    1566:	85 17       	cp	r24, r21
    1568:	21 f0       	breq	.+8      	; 0x1572 <isEqualCommands+0x10>
    156a:	80 e0       	ldi	r24, 0x00	; 0
    156c:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data2) return false;	
	return true;
    1572:	81 e0       	ldi	r24, 0x01	; 1
}
    1574:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

00000b06 <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
 b0a:	cd b7       	in	r28, 0x3d	; 61
 b0c:	de b7       	in	r29, 0x3e	; 62
 b0e:	68 97       	sbiw	r28, 0x18	; 24
 b10:	0f b6       	in	r0, 0x3f	; 63
 b12:	f8 94       	cli
 b14:	de bf       	out	0x3e, r29	; 62
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word((uint16_t*)0x02);
 b1a:	62 e0       	ldi	r22, 0x02	; 2
 b1c:	70 e0       	ldi	r23, 0x00	; 0
 b1e:	80 e8       	ldi	r24, 0x80	; 128
 b20:	78 d5       	rcall	.+2800   	; 0x1612 <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 b22:	8b 3a       	cpi	r24, 0xAB	; 171
 b24:	9c 4a       	sbci	r25, 0xAC	; 172
 b26:	c1 f4       	brne	.+48     	; 0xb58 <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 b28:	46 e1       	ldi	r20, 0x16	; 22
 b2a:	50 e0       	ldi	r21, 0x00	; 0
 b2c:	60 e8       	ldi	r22, 0x80	; 128
 b2e:	28 e1       	ldi	r18, 0x18	; 24
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	ce 01       	movw	r24, r28
 b34:	01 96       	adiw	r24, 0x01	; 1
 b36:	a6 d4       	rcall	.+2380   	; 0x1484 <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 b38:	88 e1       	ldi	r24, 0x18	; 24
 b3a:	fe 01       	movw	r30, r28
 b3c:	31 96       	adiw	r30, 0x01	; 1
 b3e:	a8 e0       	ldi	r26, 0x08	; 8
 b40:	b1 e0       	ldi	r27, 0x01	; 1
 b42:	01 90       	ld	r0, Z+
 b44:	0d 92       	st	X+, r0
 b46:	8a 95       	dec	r24
 b48:	e1 f7       	brne	.-8      	; 0xb42 <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 b4a:	6e e0       	ldi	r22, 0x0E	; 14
 b4c:	70 e0       	ldi	r23, 0x00	; 0
 b4e:	80 e8       	ldi	r24, 0x80	; 128
 b50:	2f d5       	rcall	.+2654   	; 0x15b0 <eeprom_read_byte>
 b52:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
 b56:	0b c0       	rjmp	.+22     	; 0xb6e <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 b58:	88 e1       	ldi	r24, 0x18	; 24
 b5a:	e9 e8       	ldi	r30, 0x89	; 137
 b5c:	f1 e0       	ldi	r31, 0x01	; 1
 b5e:	a8 e0       	ldi	r26, 0x08	; 8
 b60:	b1 e0       	ldi	r27, 0x01	; 1
 b62:	01 90       	ld	r0, Z+
 b64:	0d 92       	st	X+, r0
 b66:	8a 95       	dec	r24
 b68:	e1 f7       	brne	.-8      	; 0xb62 <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 b6a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
	}
}
 b6e:	68 96       	adiw	r28, 0x18	; 24
 b70:	0f b6       	in	r0, 0x3f	; 63
 b72:	f8 94       	cli
 b74:	de bf       	out	0x3e, r29	; 62
 b76:	0f be       	out	0x3f, r0	; 63
 b78:	cd bf       	out	0x3d, r28	; 61
 b7a:	df 91       	pop	r29
 b7c:	cf 91       	pop	r28
 b7e:	08 95       	ret

Disassembly of section .text.setMidiLeds:

00000eac <setMidiLeds>:

void setMidiLeds()
{
 eac:	cf 93       	push	r28
	if(mode == PROGRAMMING)
 eae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 eb2:	81 30       	cpi	r24, 0x01	; 1
 eb4:	11 f5       	brne	.+68     	; 0xefa <setMidiLeds+0x4e>
 eb6:	18 c0       	rjmp	.+48     	; 0xee8 <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
 eb8:	ec 2f       	mov	r30, r28
 eba:	f0 e0       	ldi	r31, 0x00	; 0
 ebc:	ef 5f       	subi	r30, 0xFF	; 255
 ebe:	fe 4f       	sbci	r31, 0xFE	; 254
 ec0:	80 81       	ld	r24, Z
 ec2:	81 30       	cpi	r24, 0x01	; 1
 ec4:	41 f0       	breq	.+16     	; 0xed6 <setMidiLeds+0x2a>
 ec6:	18 f0       	brcs	.+6      	; 0xece <setMidiLeds+0x22>
 ec8:	82 30       	cpi	r24, 0x02	; 2
 eca:	49 f0       	breq	.+18     	; 0xede <setMidiLeds+0x32>
 ecc:	0b c0       	rjmp	.+22     	; 0xee4 <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
 ece:	60 e0       	ldi	r22, 0x00	; 0
 ed0:	8c 2f       	mov	r24, r28
 ed2:	38 d1       	rcall	.+624    	; 0x1144 <SH100HW_SetNewLedState>
 ed4:	07 c0       	rjmp	.+14     	; 0xee4 <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
 ed6:	62 e0       	ldi	r22, 0x02	; 2
 ed8:	8c 2f       	mov	r24, r28
 eda:	34 d1       	rcall	.+616    	; 0x1144 <SH100HW_SetNewLedState>
 edc:	03 c0       	rjmp	.+6      	; 0xee4 <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
 ede:	61 e0       	ldi	r22, 0x01	; 1
 ee0:	8c 2f       	mov	r24, r28
 ee2:	30 d1       	rcall	.+608    	; 0x1144 <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
 ee4:	cf 5f       	subi	r28, 0xFF	; 255
 ee6:	01 c0       	rjmp	.+2      	; 0xeea <setMidiLeds+0x3e>
 ee8:	c0 e0       	ldi	r28, 0x00	; 0
 eea:	c6 30       	cpi	r28, 0x06	; 6
 eec:	28 f3       	brcs	.-54     	; 0xeb8 <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
 eee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 ef2:	8f 3f       	cpi	r24, 0xFF	; 255
 ef4:	11 f0       	breq	.+4      	; 0xefa <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
 ef6:	61 e0       	ldi	r22, 0x01	; 1
 ef8:	25 d1       	rcall	.+586    	; 0x1144 <SH100HW_SetNewLedState>
		}
	}
}
 efa:	cf 91       	pop	r28
 efc:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

0000139e <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x00; // psc = 1024 if on
    139e:	e1 e8       	ldi	r30, 0x81	; 129
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
    13a6:	ef e6       	ldi	r30, 0x6F	; 111
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	81 60       	ori	r24, 0x01	; 1
    13ae:	80 83       	st	Z, r24
	TCNT1 = 0;
    13b0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    13b4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	loadCommSetFromMemory();
    13be:	a3 db       	rcall	.-2234   	; 0xb06 <loadCommSetFromMemory>
	mode = RUNNING;
    13c0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    13c4:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

00001630 <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    1630:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    1634:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

000012bc <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
    12bc:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <currentProgBtn>
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	f9 01       	movw	r30, r18
    12c4:	ef 5f       	subi	r30, 0xFF	; 255
    12c6:	fe 4f       	sbci	r31, 0xFE	; 254
    12c8:	90 81       	ld	r25, Z
    12ca:	91 30       	cpi	r25, 0x01	; 1
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
    12ce:	f9 01       	movw	r30, r18
    12d0:	ef 5f       	subi	r30, 0xFF	; 255
    12d2:	fe 4f       	sbci	r31, 0xFE	; 254
    12d4:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
    12d6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
    12da:	e8 2f       	mov	r30, r24
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	ef 5f       	subi	r30, 0xFF	; 255
    12e0:	fe 4f       	sbci	r31, 0xFE	; 254
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 83       	st	Z, r24
	setMidiLeds();
    12e6:	e2 dd       	rcall	.-1084   	; 0xeac <setMidiLeds>
    12e8:	08 95       	ret

Disassembly of section .text.MIDICTRL_SwitchMode:

00000f9e <MIDICTRL_SwitchMode>:
	loadCommSetFromMemory();
	mode = RUNNING;
}

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
 f9e:	cf 93       	push	r28
 fa0:	c8 2f       	mov	r28, r24
	if(mode == RUNNING)
 fa2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 fa6:	81 11       	cpse	r24, r1
 fa8:	18 c0       	rjmp	.+48     	; 0xfda <MIDICTRL_SwitchMode+0x3c>
	{
		MIDI_SetRetranslateState(false);
 faa:	4e d3       	rcall	.+1692   	; 0x1648 <MIDI_SetRetranslateState>
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
 fac:	80 e0       	ldi	r24, 0x00	; 0
 fae:	06 c0       	rjmp	.+12     	; 0xfbc <MIDICTRL_SwitchMode+0x1e>
			midiProgBtnState[i] = PROG_CLEAR;
 fb0:	e8 2f       	mov	r30, r24
 fb2:	f0 e0       	ldi	r31, 0x00	; 0
 fb4:	ef 5f       	subi	r30, 0xFF	; 255
 fb6:	fe 4f       	sbci	r31, 0xFE	; 254
 fb8:	10 82       	st	Z, r1
{	
	if(mode == RUNNING)
	{
		MIDI_SetRetranslateState(false);
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
 fba:	8f 5f       	subi	r24, 0xFF	; 255
 fbc:	86 30       	cpi	r24, 0x06	; 6
 fbe:	c0 f3       	brcs	.-16     	; 0xfb0 <MIDICTRL_SwitchMode+0x12>
			midiProgBtnState[i] = PROG_CLEAR;
		
		MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
 fc0:	80 e0       	ldi	r24, 0x00	; 0
 fc2:	7c d1       	rcall	.+760    	; 0x12bc <MIDICTRL_SetProgrammingButton>
		setMidiLeds();
 fc4:	73 df       	rcall	.-282    	; 0xeac <setMidiLeds>
		
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
 fc6:	63 e0       	ldi	r22, 0x03	; 3
 fc8:	87 e0       	ldi	r24, 0x07	; 7
 fca:	bc d0       	rcall	.+376    	; 0x1144 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
 fcc:	63 e0       	ldi	r22, 0x03	; 3
 fce:	88 e0       	ldi	r24, 0x08	; 8
 fd0:	b9 d0       	rcall	.+370    	; 0x1144 <SH100HW_SetNewLedState>
		
		SH100HW_SetNewLedState(LED_B, LED_OFF);
 fd2:	60 e0       	ldi	r22, 0x00	; 0
 fd4:	86 e0       	ldi	r24, 0x06	; 6
 fd6:	b6 d0       	rcall	.+364    	; 0x1144 <SH100HW_SetNewLedState>
 fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <MIDICTRL_SwitchMode+0x44>
	}
	else
	{
		//SH100HW_SetPreviousLedState(LED_PWR_GRN);
		//SH100HW_SetPreviousLedState(LED_PWR_RED);
		SH100HW_SetPreviousLedState(LED_B);
 fda:	86 e0       	ldi	r24, 0x06	; 6
 fdc:	f4 d1       	rcall	.+1000   	; 0x13c6 <SH100HW_SetPreviousLedState>
		
		MIDI_SetRetranslateState(true);
 fde:	81 e0       	ldi	r24, 0x01	; 1
 fe0:	33 d3       	rcall	.+1638   	; 0x1648 <MIDI_SetRetranslateState>
	}
	mode = newMode;
 fe2:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <mode>
}
 fe6:	cf 91       	pop	r28
 fe8:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

00001636 <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    1636:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <channelNum>
    163a:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

0000163c <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    163c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <omniModeEnabled>
    1640:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

00001642 <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    1642:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <muteCommandEnabled>
    1646:	08 95       	ret

Disassembly of section .text.programmBtn:

00000fea <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
     fea:	cf 92       	push	r12
     fec:	df 92       	push	r13
     fee:	ef 92       	push	r14
     ff0:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	f9 01       	movw	r30, r18
     ff6:	ef 5f       	subi	r30, 0xFF	; 255
     ff8:	fe 4f       	sbci	r31, 0xFE	; 254
     ffa:	90 81       	ld	r25, Z
     ffc:	91 30       	cpi	r25, 0x01	; 1
     ffe:	b9 f4       	brne	.+46     	; 0x102e <programmBtn+0x44>
    1000:	6a 01       	movw	r12, r20
    1002:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
    1004:	fa 01       	movw	r30, r20
    1006:	84 91       	lpm	r24, Z
    1008:	e7 fc       	sbrc	r14, 7
    100a:	80 81       	ld	r24, Z
    100c:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	c8 0e       	add	r12, r24
    1012:	d1 1c       	adc	r13, r1
    1014:	e1 1c       	adc	r14, r1
    1016:	f6 01       	movw	r30, r12
    1018:	84 91       	lpm	r24, Z
    101a:	e7 fc       	sbrc	r14, 7
    101c:	80 81       	ld	r24, Z
    101e:	12 96       	adiw	r26, 0x02	; 2
    1020:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
    1022:	f9 01       	movw	r30, r18
    1024:	ef 5f       	subi	r30, 0xFF	; 255
    1026:	fe 4f       	sbci	r31, 0xFE	; 254
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	80 83       	st	Z, r24
		setMidiLeds();
    102c:	3f df       	rcall	.-386    	; 0xeac <setMidiLeds>
	}
}
    102e:	ef 90       	pop	r14
    1030:	df 90       	pop	r13
    1032:	cf 90       	pop	r12
    1034:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwChComm:

00000df8 <MIDICTRL_SendSwChComm>:

void MIDICTRL_SendSwChComm(uint8_t chNum)
{
	if(mode == RUNNING)
 df8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mode>
 dfc:	91 11       	cpse	r25, r1
 dfe:	28 c0       	rjmp	.+80     	; 0xe50 <MIDICTRL_SendSwChComm+0x58>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
 e00:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <commandSet>
 e04:	91 30       	cpi	r25, 0x01	; 1
 e06:	19 f4       	brne	.+6      	; 0xe0e <MIDICTRL_SendSwChComm+0x16>
 e08:	e8 e0       	ldi	r30, 0x08	; 8
 e0a:	f1 e0       	ldi	r31, 0x01	; 1
 e0c:	02 c0       	rjmp	.+4      	; 0xe12 <MIDICTRL_SendSwChComm+0x1a>
		else currentCommandBlock = &defaultCommands;
 e0e:	e9 e8       	ldi	r30, 0x89	; 137
 e10:	f1 e0       	ldi	r31, 0x01	; 1
		
		switch(chNum)
 e12:	81 30       	cpi	r24, 0x01	; 1
 e14:	61 f0       	breq	.+24     	; 0xe2e <MIDICTRL_SendSwChComm+0x36>
 e16:	28 f0       	brcs	.+10     	; 0xe22 <MIDICTRL_SendSwChComm+0x2a>
 e18:	82 30       	cpi	r24, 0x02	; 2
 e1a:	79 f0       	breq	.+30     	; 0xe3a <MIDICTRL_SendSwChComm+0x42>
 e1c:	83 30       	cpi	r24, 0x03	; 3
 e1e:	99 f0       	breq	.+38     	; 0xe46 <MIDICTRL_SendSwChComm+0x4e>
 e20:	08 95       	ret
		{
			case SH100_CHANNEL1: MIDI_SendCommand(currentCommandBlock->channel1); break;
 e22:	60 81       	ld	r22, Z
 e24:	71 81       	ldd	r23, Z+1	; 0x01
 e26:	82 81       	ldd	r24, Z+2	; 0x02
 e28:	93 81       	ldd	r25, Z+3	; 0x03
 e2a:	13 d0       	rcall	.+38     	; 0xe52 <MIDI_SendCommand>
 e2c:	08 95       	ret
			case SH100_CHANNEL2: MIDI_SendCommand(currentCommandBlock->channel2); break;
 e2e:	64 81       	ldd	r22, Z+4	; 0x04
 e30:	75 81       	ldd	r23, Z+5	; 0x05
 e32:	86 81       	ldd	r24, Z+6	; 0x06
 e34:	97 81       	ldd	r25, Z+7	; 0x07
 e36:	0d d0       	rcall	.+26     	; 0xe52 <MIDI_SendCommand>
 e38:	08 95       	ret
			case SH100_CHANNEL3: MIDI_SendCommand(currentCommandBlock->channel3); break;
 e3a:	60 85       	ldd	r22, Z+8	; 0x08
 e3c:	71 85       	ldd	r23, Z+9	; 0x09
 e3e:	82 85       	ldd	r24, Z+10	; 0x0a
 e40:	93 85       	ldd	r25, Z+11	; 0x0b
 e42:	07 d0       	rcall	.+14     	; 0xe52 <MIDI_SendCommand>
 e44:	08 95       	ret
			case SH100_CHANNEL4: MIDI_SendCommand(currentCommandBlock->channel4); break;
 e46:	64 85       	ldd	r22, Z+12	; 0x0c
 e48:	75 85       	ldd	r23, Z+13	; 0x0d
 e4a:	86 85       	ldd	r24, Z+14	; 0x0e
 e4c:	97 85       	ldd	r25, Z+15	; 0x0f
 e4e:	01 d0       	rcall	.+2      	; 0xe52 <MIDI_SendCommand>
 e50:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendLoopEnComm:

000013ee <MIDICTRL_SendLoopEnComm>:
	}
}

void MIDICTRL_SendLoopEnComm()
{
	if(mode == RUNNING)
    13ee:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    13f2:	81 11       	cpse	r24, r1
    13f4:	0e c0       	rjmp	.+28     	; 0x1412 <MIDICTRL_SendLoopEnComm+0x24>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    13f6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	19 f4       	brne	.+6      	; 0x1404 <MIDICTRL_SendLoopEnComm+0x16>
    13fe:	e8 e0       	ldi	r30, 0x08	; 8
    1400:	f1 e0       	ldi	r31, 0x01	; 1
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <MIDICTRL_SendLoopEnComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    1404:	e9 e8       	ldi	r30, 0x89	; 137
    1406:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->loopOn);
    1408:	60 89       	ldd	r22, Z+16	; 0x10
    140a:	71 89       	ldd	r23, Z+17	; 0x11
    140c:	82 89       	ldd	r24, Z+18	; 0x12
    140e:	93 89       	ldd	r25, Z+19	; 0x13
    1410:	20 dd       	rcall	.-1472   	; 0xe52 <MIDI_SendCommand>
    1412:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwABComm:

00001414 <MIDICTRL_SendSwABComm>:
	}
}

void MIDICTRL_SendSwABComm()
{
	if(mode == RUNNING)
    1414:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    1418:	81 11       	cpse	r24, r1
    141a:	0e c0       	rjmp	.+28     	; 0x1438 <MIDICTRL_SendSwABComm+0x24>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    141c:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	19 f4       	brne	.+6      	; 0x142a <MIDICTRL_SendSwABComm+0x16>
    1424:	e8 e0       	ldi	r30, 0x08	; 8
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	02 c0       	rjmp	.+4      	; 0x142e <MIDICTRL_SendSwABComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    142a:	e9 e8       	ldi	r30, 0x89	; 137
    142c:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->outAB);
    142e:	64 89       	ldd	r22, Z+20	; 0x14
    1430:	75 89       	ldd	r23, Z+21	; 0x15
    1432:	86 89       	ldd	r24, Z+22	; 0x16
    1434:	97 89       	ldd	r25, Z+23	; 0x17
    1436:	0d dd       	rcall	.-1510   	; 0xe52 <MIDI_SendCommand>
    1438:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

000011ea <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
    11ea:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	b1 f4       	brne	.+44     	; 0x121e <MIDICTRL_StoreUserCommands+0x34>
	{
		commandSet = USER;
    11f2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
		
		eeprom_write_word((uint16_t*)0x02, MEMORY_MAGIC_WORD);
    11f6:	6b ea       	ldi	r22, 0xAB	; 171
    11f8:	7c ea       	ldi	r23, 0xAC	; 172
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	30 d2       	rcall	.+1120   	; 0x1660 <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
    1200:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <commandSet>
    1204:	8e e0       	ldi	r24, 0x0E	; 14
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	6e d1       	rcall	.+732    	; 0x14e6 <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
    120a:	68 e0       	ldi	r22, 0x08	; 8
    120c:	71 e0       	ldi	r23, 0x01	; 1
    120e:	80 e8       	ldi	r24, 0x80	; 128
    1210:	28 e1       	ldi	r18, 0x18	; 24
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	4f e0       	ldi	r20, 0x0F	; 15
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	38 d0       	rcall	.+112    	; 0x128a <eeprom_write_block>
		
		mode = RUNNING;
    121a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    121e:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

00001576 <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    1576:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	29 f4       	brne	.+10     	; 0x1588 <MIDICTRL_DiscardCommands+0x12>
	{
		commandSet = DEFAULT;
    157e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
		loadCommSetFromMemory();
    1582:	c1 da       	rcall	.-2686   	; 0xb06 <loadCommSetFromMemory>
		mode = RUNNING;
    1584:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    1588:	08 95       	ret

Disassembly of section .text.indicateMidiError:

000012ea <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 255 - 100;
    12ea:	8b e9       	ldi	r24, 0x9B	; 155
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    12f2:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TCCR1B |= 0x05; // psc = 1024, timer on
    12f6:	e1 e8       	ldi	r30, 0x81	; 129
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	85 60       	ori	r24, 0x05	; 5
    12fe:	80 83       	st	Z, r24
	currentErrBtnId = currentProgBtn;
    1300:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
    1304:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
    1308:	d1 dd       	rcall	.-1118   	; 0xeac <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	87 e0       	ldi	r24, 0x07	; 7
    130e:	1a df       	rcall	.-460    	; 0x1144 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	88 e0       	ldi	r24, 0x08	; 8
    1314:	17 df       	rcall	.-466    	; 0x1144 <SH100HW_SetNewLedState>
    1316:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

0000085c <MIDICTRL_HandleCommand>:
		MIDI_SendCommand(currentCommandBlock->outAB);
	}
}

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
 85c:	cf 93       	push	r28
 85e:	df 93       	push	r29
 860:	00 d0       	rcall	.+0      	; 0x862 <MIDICTRL_HandleCommand+0x6>
 862:	00 d0       	rcall	.+0      	; 0x864 <MIDICTRL_HandleCommand+0x8>
 864:	cd b7       	in	r28, 0x3d	; 61
 866:	de b7       	in	r29, 0x3e	; 62
 868:	69 83       	std	Y+1, r22	; 0x01
 86a:	7a 83       	std	Y+2, r23	; 0x02
 86c:	8b 83       	std	Y+3, r24	; 0x03
 86e:	9c 83       	std	Y+4, r25	; 0x04
	switch(mode)
 870:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 874:	88 23       	and	r24, r24
 876:	19 f0       	breq	.+6      	; 0x87e <MIDICTRL_HandleCommand+0x22>
 878:	81 30       	cpi	r24, 0x01	; 1
 87a:	d9 f1       	breq	.+118    	; 0x8f2 <MIDICTRL_HandleCommand+0x96>
 87c:	8f c0       	rjmp	.+286    	; 0x99c <MIDICTRL_HandleCommand+0x140>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 87e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <omniModeEnabled>
 882:	81 11       	cpse	r24, r1
 884:	05 c0       	rjmp	.+10     	; 0x890 <MIDICTRL_HandleCommand+0x34>
			{
				if(channelNum != command.channel) return;
 886:	9a 81       	ldd	r25, Y+2	; 0x02
 888:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <channelNum>
 88c:	98 13       	cpse	r25, r24
 88e:	86 c0       	rjmp	.+268    	; 0x99c <MIDICTRL_HandleCommand+0x140>
			}
			
			if(muteCommandEnabled)
 890:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <muteCommandEnabled>
 894:	88 23       	and	r24, r24
 896:	a9 f0       	breq	.+42     	; 0x8c2 <MIDICTRL_HandleCommand+0x66>
			{
				if(isEqualCommands(command, muteCommand)) 
 898:	88 ed       	ldi	r24, 0xD8	; 216
 89a:	91 e0       	ldi	r25, 0x01	; 1
 89c:	a0 e0       	ldi	r26, 0x00	; 0
 89e:	fc 01       	movw	r30, r24
 8a0:	5a 2f       	mov	r21, r26
 8a2:	53 d6       	rcall	.+3238   	; 0x154a <__xload_4>
 8a4:	9b 01       	movw	r18, r22
 8a6:	ac 01       	movw	r20, r24
 8a8:	69 81       	ldd	r22, Y+1	; 0x01
 8aa:	7a 81       	ldd	r23, Y+2	; 0x02
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	9c 81       	ldd	r25, Y+4	; 0x04
 8b0:	58 d6       	rcall	.+3248   	; 0x1562 <isEqualCommands>
 8b2:	88 23       	and	r24, r24
 8b4:	31 f0       	breq	.+12     	; 0x8c2 <MIDICTRL_HandleCommand+0x66>
				{
					if(command.data2>0) SH100CTRL_MuteAmp();
 8b6:	8c 81       	ldd	r24, Y+4	; 0x04
 8b8:	88 23       	and	r24, r24
 8ba:	11 f0       	breq	.+4      	; 0x8c0 <MIDICTRL_HandleCommand+0x64>
 8bc:	c8 d6       	rcall	.+3472   	; 0x164e <SH100CTRL_MuteAmp>
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <MIDICTRL_HandleCommand+0x66>
					else SH100CTRL_UnmuteAmp();
 8c0:	a2 d6       	rcall	.+3396   	; 0x1606 <SH100CTRL_UnmuteAmp>
				}
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 8c2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
 8c6:	81 30       	cpi	r24, 0x01	; 1
 8c8:	19 f4       	brne	.+6      	; 0x8d0 <MIDICTRL_HandleCommand+0x74>
 8ca:	e8 e0       	ldi	r30, 0x08	; 8
 8cc:	f1 e0       	ldi	r31, 0x01	; 1
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <MIDICTRL_HandleCommand+0x78>
			else currentCommandBlock = &defaultCommands;
 8d0:	e9 e8       	ldi	r30, 0x89	; 137
 8d2:	f1 e0       	ldi	r31, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) SH100CTRL_SwChannel(0); return;
 8d4:	20 81       	ld	r18, Z
 8d6:	31 81       	ldd	r19, Z+1	; 0x01
 8d8:	42 81       	ldd	r20, Z+2	; 0x02
 8da:	53 81       	ldd	r21, Z+3	; 0x03
 8dc:	69 81       	ldd	r22, Y+1	; 0x01
 8de:	7a 81       	ldd	r23, Y+2	; 0x02
 8e0:	8b 81       	ldd	r24, Y+3	; 0x03
 8e2:	9c 81       	ldd	r25, Y+4	; 0x04
 8e4:	3e d6       	rcall	.+3196   	; 0x1562 <isEqualCommands>
 8e6:	88 23       	and	r24, r24
 8e8:	09 f4       	brne	.+2      	; 0x8ec <MIDICTRL_HandleCommand+0x90>
 8ea:	58 c0       	rjmp	.+176    	; 0x99c <MIDICTRL_HandleCommand+0x140>
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	2b d5       	rcall	.+2646   	; 0x1346 <SH100CTRL_SwChannel>
 8f0:	55 c0       	rjmp	.+170    	; 0x99c <MIDICTRL_HandleCommand+0x140>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command.status == MIDI_COMM_PROGRAM_CHANGE)
 8f2:	89 81       	ldd	r24, Y+1	; 0x01
 8f4:	80 3c       	cpi	r24, 0xC0	; 192
 8f6:	81 f5       	brne	.+96     	; 0x958 <MIDICTRL_HandleCommand+0xfc>
			{
				switch(currentProgBtn)
 8f8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 8fc:	81 30       	cpi	r24, 0x01	; 1
 8fe:	79 f0       	breq	.+30     	; 0x91e <MIDICTRL_HandleCommand+0xc2>
 900:	28 f0       	brcs	.+10     	; 0x90c <MIDICTRL_HandleCommand+0xb0>
 902:	82 30       	cpi	r24, 0x02	; 2
 904:	a9 f0       	breq	.+42     	; 0x930 <MIDICTRL_HandleCommand+0xd4>
 906:	83 30       	cpi	r24, 0x03	; 3
 908:	e1 f0       	breq	.+56     	; 0x942 <MIDICTRL_HandleCommand+0xe6>
 90a:	24 c0       	rjmp	.+72     	; 0x954 <MIDICTRL_HandleCommand+0xf8>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), &command, MIDI_PROG_BTN_CH1); break;
 90c:	ae 01       	movw	r20, r28
 90e:	4f 5f       	subi	r20, 0xFF	; 255
 910:	5f 4f       	sbci	r21, 0xFF	; 255
 912:	60 e8       	ldi	r22, 0x80	; 128
 914:	20 e0       	ldi	r18, 0x00	; 0
 916:	88 e0       	ldi	r24, 0x08	; 8
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	67 d3       	rcall	.+1742   	; 0xfea <programmBtn>
 91c:	3f c0       	rjmp	.+126    	; 0x99c <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), &command, MIDI_PROG_BTN_CH2); break;
 91e:	ae 01       	movw	r20, r28
 920:	4f 5f       	subi	r20, 0xFF	; 255
 922:	5f 4f       	sbci	r21, 0xFF	; 255
 924:	60 e8       	ldi	r22, 0x80	; 128
 926:	21 e0       	ldi	r18, 0x01	; 1
 928:	8c e0       	ldi	r24, 0x0C	; 12
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	5e d3       	rcall	.+1724   	; 0xfea <programmBtn>
 92e:	36 c0       	rjmp	.+108    	; 0x99c <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), &command, MIDI_PROG_BTN_CH3); break;
 930:	ae 01       	movw	r20, r28
 932:	4f 5f       	subi	r20, 0xFF	; 255
 934:	5f 4f       	sbci	r21, 0xFF	; 255
 936:	60 e8       	ldi	r22, 0x80	; 128
 938:	22 e0       	ldi	r18, 0x02	; 2
 93a:	80 e1       	ldi	r24, 0x10	; 16
 93c:	91 e0       	ldi	r25, 0x01	; 1
 93e:	55 d3       	rcall	.+1706   	; 0xfea <programmBtn>
 940:	2d c0       	rjmp	.+90     	; 0x99c <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), &command, MIDI_PROG_BTN_CH4); break;
 942:	ae 01       	movw	r20, r28
 944:	4f 5f       	subi	r20, 0xFF	; 255
 946:	5f 4f       	sbci	r21, 0xFF	; 255
 948:	60 e8       	ldi	r22, 0x80	; 128
 94a:	23 e0       	ldi	r18, 0x03	; 3
 94c:	84 e1       	ldi	r24, 0x14	; 20
 94e:	91 e0       	ldi	r25, 0x01	; 1
 950:	4c d3       	rcall	.+1688   	; 0xfea <programmBtn>
 952:	24 c0       	rjmp	.+72     	; 0x99c <MIDICTRL_HandleCommand+0x140>
					default: indicateMidiError(); break; 
 954:	ca d4       	rcall	.+2452   	; 0x12ea <indicateMidiError>
 956:	22 c0       	rjmp	.+68     	; 0x99c <MIDICTRL_HandleCommand+0x140>
				}
			}
			else if(command.status == MIDI_COMM_CONTROL_CHANGE)
 958:	80 3b       	cpi	r24, 0xB0	; 176
 95a:	f9 f4       	brne	.+62     	; 0x99a <MIDICTRL_HandleCommand+0x13e>
			{
				if(command.data1 == muteCommand.data1)
 95c:	8b 81       	ldd	r24, Y+3	; 0x03
 95e:	87 30       	cpi	r24, 0x07	; 7
 960:	11 f4       	brne	.+4      	; 0x966 <MIDICTRL_HandleCommand+0x10a>
				{
					indicateMidiError();
 962:	c3 d4       	rcall	.+2438   	; 0x12ea <indicateMidiError>
 964:	1b c0       	rjmp	.+54     	; 0x99c <MIDICTRL_HandleCommand+0x140>
				}
				else
				{
					switch(currentProgBtn)
 966:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 96a:	84 30       	cpi	r24, 0x04	; 4
 96c:	59 f0       	breq	.+22     	; 0x984 <MIDICTRL_HandleCommand+0x128>
 96e:	85 30       	cpi	r24, 0x05	; 5
 970:	91 f4       	brne	.+36     	; 0x996 <MIDICTRL_HandleCommand+0x13a>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), &command, MIDI_PROG_BTN_AB); break;
 972:	ae 01       	movw	r20, r28
 974:	4f 5f       	subi	r20, 0xFF	; 255
 976:	5f 4f       	sbci	r21, 0xFF	; 255
 978:	60 e8       	ldi	r22, 0x80	; 128
 97a:	25 e0       	ldi	r18, 0x05	; 5
 97c:	8c e1       	ldi	r24, 0x1C	; 28
 97e:	91 e0       	ldi	r25, 0x01	; 1
 980:	34 d3       	rcall	.+1640   	; 0xfea <programmBtn>
 982:	0c c0       	rjmp	.+24     	; 0x99c <MIDICTRL_HandleCommand+0x140>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), &command, MIDI_PROG_BTN_LOOP); break;
 984:	ae 01       	movw	r20, r28
 986:	4f 5f       	subi	r20, 0xFF	; 255
 988:	5f 4f       	sbci	r21, 0xFF	; 255
 98a:	60 e8       	ldi	r22, 0x80	; 128
 98c:	24 e0       	ldi	r18, 0x04	; 4
 98e:	88 e1       	ldi	r24, 0x18	; 24
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	2b d3       	rcall	.+1622   	; 0xfea <programmBtn>
 994:	03 c0       	rjmp	.+6      	; 0x99c <MIDICTRL_HandleCommand+0x140>
						default: indicateMidiError(); break;
 996:	a9 d4       	rcall	.+2386   	; 0x12ea <indicateMidiError>
 998:	01 c0       	rjmp	.+2      	; 0x99c <MIDICTRL_HandleCommand+0x140>
					}
				}
			}
			else
			{
				indicateMidiError();
 99a:	a7 d4       	rcall	.+2382   	; 0x12ea <indicateMidiError>
			}			
			break;
		}
	}	
}
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	0f 90       	pop	r0
 9a2:	0f 90       	pop	r0
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	08 95       	ret

Disassembly of section .text.__vector_13:

00000d9c <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
 d9c:	1f 92       	push	r1
 d9e:	0f 92       	push	r0
 da0:	0f b6       	in	r0, 0x3f	; 63
 da2:	0f 92       	push	r0
 da4:	11 24       	eor	r1, r1
 da6:	2f 93       	push	r18
 da8:	3f 93       	push	r19
 daa:	4f 93       	push	r20
 dac:	5f 93       	push	r21
 dae:	6f 93       	push	r22
 db0:	7f 93       	push	r23
 db2:	8f 93       	push	r24
 db4:	9f 93       	push	r25
 db6:	af 93       	push	r26
 db8:	bf 93       	push	r27
 dba:	ef 93       	push	r30
 dbc:	ff 93       	push	r31
	TCCR1B |= 0x00; // psc = 0, timer off
 dbe:	e1 e8       	ldi	r30, 0x81	; 129
 dc0:	f0 e0       	ldi	r31, 0x00	; 0
 dc2:	80 81       	ld	r24, Z
 dc4:	80 83       	st	Z, r24
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
 dc6:	8f ef       	ldi	r24, 0xFF	; 255
 dc8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
 dcc:	6f d0       	rcall	.+222    	; 0xeac <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
 dce:	87 e0       	ldi	r24, 0x07	; 7
 dd0:	fa d2       	rcall	.+1524   	; 0x13c6 <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
 dd2:	88 e0       	ldi	r24, 0x08	; 8
 dd4:	f8 d2       	rcall	.+1520   	; 0x13c6 <SH100HW_SetPreviousLedState>
 dd6:	ff 91       	pop	r31
 dd8:	ef 91       	pop	r30
 dda:	bf 91       	pop	r27
 ddc:	af 91       	pop	r26
 dde:	9f 91       	pop	r25
 de0:	8f 91       	pop	r24
 de2:	7f 91       	pop	r23
 de4:	6f 91       	pop	r22
 de6:	5f 91       	pop	r21
 de8:	4f 91       	pop	r20
 dea:	3f 91       	pop	r19
 dec:	2f 91       	pop	r18
 dee:	0f 90       	pop	r0
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	0f 90       	pop	r0
 df4:	1f 90       	pop	r1
 df6:	18 95       	reti

Disassembly of section .text.handleRealTimeStatus:

00001666 <handleRealTimeStatus>:
	HADLE_SYS_EX
}state = RESET;

void handleRealTimeStatus(MIDI_Status_t status)
{
	UART_PushWord(status);
    1666:	0a dd       	rcall	.-1516   	; 0x107c <UART_PushWord>
    1668:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

00000706 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 706:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <state>
 70a:	8e 2f       	mov	r24, r30
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	87 30       	cpi	r24, 0x07	; 7
 710:	91 05       	cpc	r25, r1
 712:	08 f0       	brcs	.+2      	; 0x716 <MIDI_ParserTask+0x10>
 714:	a2 c0       	rjmp	.+324    	; 0x85a <MIDI_ParserTask+0x154>
 716:	fc 01       	movw	r30, r24
 718:	e6 56       	subi	r30, 0x66	; 102
 71a:	ff 4f       	sbci	r31, 0xFF	; 255
 71c:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 71e:	e4 e2       	ldi	r30, 0x24	; 36
 720:	f1 e0       	ldi	r31, 0x01	; 1
 722:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 724:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 726:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 728:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 72c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 736:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 738:	4c d7       	rcall	.+3736   	; 0x15d2 <UART_RxBufferNotEmpty>
 73a:	88 23       	and	r24, r24
 73c:	09 f4       	brne	.+2      	; 0x740 <MIDI_ParserTask+0x3a>
 73e:	8d c0       	rjmp	.+282    	; 0x85a <MIDI_ParserTask+0x154>
			{
				recievedWord = UART_PopWord();
 740:	8a d5       	rcall	.+2836   	; 0x1256 <UART_PopWord>
 742:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 746:	53 d7       	rcall	.+3750   	; 0x15ee <MIDI_IsSysRealTime>
 748:	88 23       	and	r24, r24
 74a:	21 f0       	breq	.+8      	; 0x754 <MIDI_ParserTask+0x4e>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
 74c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 750:	8a d7       	rcall	.+3860   	; 0x1666 <handleRealTimeStatus>
					return;
 752:	08 95       	ret
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 754:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 758:	67 d7       	rcall	.+3790   	; 0x1628 <MIDI_IsStatusWord>
 75a:	88 23       	and	r24, r24
 75c:	21 f0       	breq	.+8      	; 0x766 <MIDI_ParserTask+0x60>
				{					
					state = DISPATCH_STATUS;
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 764:	20 c0       	rjmp	.+64     	; 0x7a6 <MIDI_ParserTask+0xa0>
				}
				else
				{
					switch(currentStatusType)
 766:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <currentStatusType>
 76a:	82 30       	cpi	r24, 0x02	; 2
 76c:	49 f0       	breq	.+18     	; 0x780 <MIDI_ParserTask+0x7a>
 76e:	18 f4       	brcc	.+6      	; 0x776 <MIDI_ParserTask+0x70>
 770:	81 30       	cpi	r24, 0x01	; 1
 772:	51 f0       	breq	.+20     	; 0x788 <MIDI_ParserTask+0x82>
 774:	15 c0       	rjmp	.+42     	; 0x7a0 <MIDI_ParserTask+0x9a>
 776:	84 30       	cpi	r24, 0x04	; 4
 778:	59 f0       	breq	.+22     	; 0x790 <MIDI_ParserTask+0x8a>
 77a:	85 30       	cpi	r24, 0x05	; 5
 77c:	69 f0       	breq	.+26     	; 0x798 <MIDI_ParserTask+0x92>
 77e:	10 c0       	rjmp	.+32     	; 0x7a0 <MIDI_ParserTask+0x9a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 780:	84 e0       	ldi	r24, 0x04	; 4
 782:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 786:	0f c0       	rjmp	.+30     	; 0x7a6 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 78e:	0b c0       	rjmp	.+22     	; 0x7a6 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 790:	85 e0       	ldi	r24, 0x05	; 5
 792:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 796:	07 c0       	rjmp	.+14     	; 0x7a6 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 798:	86 e0       	ldi	r24, 0x06	; 6
 79a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <MIDI_ParserTask+0xa0>
						default: state = WAIT_WORD;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
					}
				}
				
				if(retranslate)
 7a6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <retranslate>
 7aa:	88 23       	and	r24, r24
 7ac:	09 f4       	brne	.+2      	; 0x7b0 <MIDI_ParserTask+0xaa>
 7ae:	55 c0       	rjmp	.+170    	; 0x85a <MIDI_ParserTask+0x154>
				{
					UART_PushWord(recievedWord);
 7b0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 7b4:	63 d4       	rcall	.+2246   	; 0x107c <UART_PushWord>
 7b6:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 7b8:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <recievedWord>
 7bc:	89 2f       	mov	r24, r25
 7be:	82 95       	swap	r24
 7c0:	8f 70       	andi	r24, 0x0F	; 15
 7c2:	e4 e2       	ldi	r30, 0x24	; 36
 7c4:	f1 e0       	ldi	r31, 0x01	; 1
 7c6:	80 83       	st	Z, r24
			currentCommand.channel = recievedWord & 0x0F;
 7c8:	9f 70       	andi	r25, 0x0F	; 15
 7ca:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 7cc:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 7ce:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 7d0:	99 d4       	rcall	.+2354   	; 0x1104 <MIDI_GetStatusType>
 7d2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 7d6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 7e0:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 7e2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <isSecondDataWord>
 7e6:	88 23       	and	r24, r24
 7e8:	81 f0       	breq	.+32     	; 0x80a <MIDI_ParserTask+0x104>
			{
				currentCommand.data2 = recievedWord;
 7ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 7ee:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <currentCommand+0x3>
				isSecondDataWord = false;			
 7f2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 7f6:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 7fa:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 7fe:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 802:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 806:	2a d0       	rcall	.+84     	; 0x85c <MIDICTRL_HandleCommand>
 808:	07 c0       	rjmp	.+14     	; 0x818 <MIDI_ParserTask+0x112>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 80a:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 80e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
				isSecondDataWord = true;
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isSecondDataWord>
			}
			state = WAIT_WORD;
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 81e:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 820:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 824:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 828:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 82c:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 830:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 834:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 838:	11 d0       	rcall	.+34     	; 0x85c <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 840:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 848:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 84a:	e4 e2       	ldi	r30, 0x24	; 36
 84c:	f1 e0       	ldi	r31, 0x01	; 1
 84e:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 850:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 852:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 85a:	08 95       	ret

Disassembly of section .text.MIDI_SetRetranslateState:

00001648 <MIDI_SetRetranslateState>:
	}
}

void MIDI_SetRetranslateState(bool enabled)
{
	retranslate = enabled;
    1648:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <retranslate>
    164c:	08 95       	ret

Disassembly of section .text.MIDI_SendCommand:

00000e52 <MIDI_SendCommand>:
}

void MIDI_SendCommand(MIDI_Command_t command)
{
 e52:	1f 93       	push	r17
 e54:	cf 93       	push	r28
 e56:	df 93       	push	r29
 e58:	c6 2f       	mov	r28, r22
 e5a:	d8 2f       	mov	r29, r24
 e5c:	19 2f       	mov	r17, r25
	switch(MIDI_GetStatusType(command.status))
 e5e:	86 2f       	mov	r24, r22
 e60:	51 d1       	rcall	.+674    	; 0x1104 <MIDI_GetStatusType>
 e62:	83 30       	cpi	r24, 0x03	; 3
 e64:	59 f0       	breq	.+22     	; 0xe7c <MIDI_SendCommand+0x2a>
 e66:	28 f4       	brcc	.+10     	; 0xe72 <MIDI_SendCommand+0x20>
 e68:	81 30       	cpi	r24, 0x01	; 1
 e6a:	59 f0       	breq	.+22     	; 0xe82 <MIDI_SendCommand+0x30>
 e6c:	82 30       	cpi	r24, 0x02	; 2
 e6e:	71 f0       	breq	.+28     	; 0xe8c <MIDI_SendCommand+0x3a>
 e70:	19 c0       	rjmp	.+50     	; 0xea4 <MIDI_SendCommand+0x52>
 e72:	84 30       	cpi	r24, 0x04	; 4
 e74:	91 f0       	breq	.+36     	; 0xe9a <MIDI_SendCommand+0x48>
 e76:	85 30       	cpi	r24, 0x05	; 5
 e78:	99 f0       	breq	.+38     	; 0xea0 <MIDI_SendCommand+0x4e>
 e7a:	14 c0       	rjmp	.+40     	; 0xea4 <MIDI_SendCommand+0x52>
	{
		case MIDI_TYPE_REAL_TIME:
		{
			UART_PushWord(command.status);
 e7c:	8c 2f       	mov	r24, r28
 e7e:	fe d0       	rcall	.+508    	; 0x107c <UART_PushWord>
			break;
 e80:	11 c0       	rjmp	.+34     	; 0xea4 <MIDI_SendCommand+0x52>
		}
		case MIDI_TYPE_ONE_BYTE:
		{
			UART_PushWord(command.status);
 e82:	8c 2f       	mov	r24, r28
 e84:	fb d0       	rcall	.+502    	; 0x107c <UART_PushWord>
			UART_PushWord(command.data1);
 e86:	8d 2f       	mov	r24, r29
 e88:	f9 d0       	rcall	.+498    	; 0x107c <UART_PushWord>
			break;
 e8a:	0c c0       	rjmp	.+24     	; 0xea4 <MIDI_SendCommand+0x52>
		}
		case MIDI_TYPE_TWO_BYTE:
		{
			UART_PushWord(command.status);
 e8c:	8c 2f       	mov	r24, r28
 e8e:	f6 d0       	rcall	.+492    	; 0x107c <UART_PushWord>
			UART_PushWord(command.data1);
 e90:	8d 2f       	mov	r24, r29
 e92:	f4 d0       	rcall	.+488    	; 0x107c <UART_PushWord>
			UART_PushWord(command.data2);
 e94:	81 2f       	mov	r24, r17
 e96:	f2 d0       	rcall	.+484    	; 0x107c <UART_PushWord>
			break;
 e98:	05 c0       	rjmp	.+10     	; 0xea4 <MIDI_SendCommand+0x52>
		}
		case MIDI_TYPE_START_SYS_EX:
		{
			UART_PushWord(command.status);
 e9a:	8c 2f       	mov	r24, r28
 e9c:	ef d0       	rcall	.+478    	; 0x107c <UART_PushWord>
			break;
 e9e:	02 c0       	rjmp	.+4      	; 0xea4 <MIDI_SendCommand+0x52>
		}
		case MIDI_TYPE_STOP_SYS_EX:
		{
			UART_PushWord(command.status);
 ea0:	8c 2f       	mov	r24, r28
 ea2:	ec d0       	rcall	.+472    	; 0x107c <UART_PushWord>
			break;
		}
		case MIDI_TYPE_UNDEFINED: break;
	}
 ea4:	df 91       	pop	r29
 ea6:	cf 91       	pop	r28
 ea8:	1f 91       	pop	r17
 eaa:	08 95       	ret

Disassembly of section .text.setChannelLeds:

000014a8 <setChannelLeds>:
	SH100CTRL_SetAB(ampState.swAB);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	4b de       	rcall	.-874    	; 0x1144 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	48 de       	rcall	.-880    	; 0x1144 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	45 de       	rcall	.-886    	; 0x1144 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	42 de       	rcall	.-892    	; 0x1144 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ampState>
    14c6:	3e de       	rcall	.-900    	; 0x1144 <SH100HW_SetNewLedState>
    14c8:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

00001318 <SH100CTRL_SetAmpLeds>:
}

void SH100CTRL_SetAmpLeds()
{
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
	setChannelLeds();
    131c:	c5 d0       	rcall	.+394    	; 0x14a8 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    131e:	c9 e2       	ldi	r28, 0x29	; 41
    1320:	d1 e0       	ldi	r29, 0x01	; 1
    1322:	e8 81       	ld	r30, Y
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	e7 5d       	subi	r30, 0xD7	; 215
    1328:	fe 4f       	sbci	r31, 0xFE	; 254
    132a:	61 81       	ldd	r22, Z+1	; 0x01
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	0a df       	rcall	.-492    	; 0x1144 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1330:	6d 81       	ldd	r22, Y+5	; 0x05
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	68 27       	eor	r22, r24
    1336:	85 e0       	ldi	r24, 0x05	; 5
    1338:	05 df       	rcall	.-502    	; 0x1144 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    133a:	6d 81       	ldd	r22, Y+5	; 0x05
    133c:	86 e0       	ldi	r24, 0x06	; 6
    133e:	02 df       	rcall	.-508    	; 0x1144 <SH100HW_SetNewLedState>
}
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	08 95       	ret

Disassembly of section .text.SH100CTRL_StoreAmpState:

000014ca <SH100CTRL_StoreAmpState>:

void SH100CTRL_StoreAmpState()
{
	eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
    14ca:	6b ea       	ldi	r22, 0xAB	; 171
    14cc:	7c ea       	ldi	r23, 0xAC	; 172
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	c6 d0       	rcall	.+396    	; 0x1660 <eeprom_write_word>
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
    14d4:	69 e2       	ldi	r22, 0x29	; 41
    14d6:	71 e0       	ldi	r23, 0x01	; 1
    14d8:	80 e8       	ldi	r24, 0x80	; 128
    14da:	26 e0       	ldi	r18, 0x06	; 6
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	48 e0       	ldi	r20, 0x08	; 8
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	d3 de       	rcall	.-602    	; 0x128a <eeprom_write_block>
    14e4:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetLoop:

00001374 <SH100CTRL_SetLoop>:
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
}

void SH100CTRL_SetLoop(bool en)
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
	ampState.loopOn[ampState.channelNum] = en;
    1378:	c9 e2       	ldi	r28, 0x29	; 41
    137a:	d1 e0       	ldi	r29, 0x01	; 1
    137c:	e8 81       	ld	r30, Y
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	e7 5d       	subi	r30, 0xD7	; 215
    1382:	fe 4f       	sbci	r31, 0xFE	; 254
    1384:	81 83       	std	Z+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn[ampState.channelNum]);
    1386:	bd d0       	rcall	.+378    	; 0x1502 <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    1388:	e8 81       	ld	r30, Y
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	e7 5d       	subi	r30, 0xD7	; 215
    138e:	fe 4f       	sbci	r31, 0xFE	; 254
    1390:	61 81       	ldd	r22, Z+1	; 0x01
    1392:	84 e0       	ldi	r24, 0x04	; 4
    1394:	d7 de       	rcall	.-594    	; 0x1144 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendLoopEnComm();
    1396:	2b d0       	rcall	.+86     	; 0x13ee <MIDICTRL_SendLoopEnComm>
}
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

00001346 <SH100CTRL_SwChannel>:
		SH100CTRL_SwLoop();
	}
}

void SH100CTRL_SwChannel(uint8_t chNum)
{
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	c8 2f       	mov	r28, r24
	ampState.channelNum = chNum;
    134e:	09 e2       	ldi	r16, 0x29	; 41
    1350:	11 e0       	ldi	r17, 0x01	; 1
    1352:	d8 01       	movw	r26, r16
    1354:	8c 93       	st	X, r24
	
	SH100HW_SetCh(chNum);
    1356:	fc dd       	rcall	.-1032   	; 0xf50 <SH100HW_SetCh>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    1358:	d8 01       	movw	r26, r16
    135a:	ec 91       	ld	r30, X
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	e7 5d       	subi	r30, 0xD7	; 215
    1360:	fe 4f       	sbci	r31, 0xFE	; 254
    1362:	81 81       	ldd	r24, Z+1	; 0x01
    1364:	07 d0       	rcall	.+14     	; 0x1374 <SH100CTRL_SetLoop>
	setChannelLeds();
    1366:	a0 d0       	rcall	.+320    	; 0x14a8 <setChannelLeds>
	
	MIDICTRL_SendSwChComm(chNum);
    1368:	8c 2f       	mov	r24, r28
    136a:	46 dd       	rcall	.-1396   	; 0xdf8 <MIDICTRL_SendSwChComm>
}
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

0000158a <SH100CTRL_SwLoop>:

void SH100CTRL_SwLoop()
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
    158a:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <ampState>
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	e7 5d       	subi	r30, 0xD7	; 215
    1592:	fe 4f       	sbci	r31, 0xFE	; 254
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	89 27       	eor	r24, r25
    159a:	ec de       	rcall	.-552    	; 0x1374 <SH100CTRL_SetLoop>
    159c:	08 95       	ret

Disassembly of section .text.SH100CTRL_BtnSwChannel:

000015c2 <SH100CTRL_BtnSwChannel>:
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
}

void SH100CTRL_BtnSwChannel(uint8_t chNum)
{
	if(ampState.channelNum != chNum)
    15c2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ampState>
    15c6:	98 17       	cp	r25, r24
    15c8:	11 f0       	breq	.+4      	; 0x15ce <SH100CTRL_BtnSwChannel+0xc>
	{
		SH100CTRL_SwChannel(chNum);
    15ca:	bd de       	rcall	.-646    	; 0x1346 <SH100CTRL_SwChannel>
    15cc:	08 95       	ret
	}
	else
	{
		SH100CTRL_SwLoop();
    15ce:	dd df       	rcall	.-70     	; 0x158a <SH100CTRL_SwLoop>
    15d0:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAB:

00001460 <SH100CTRL_SetAB>:
{
	SH100CTRL_SetAB(!ampState.swAB);
}

void SH100CTRL_SetAB(bool isB)
{
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
	ampState.swAB = isB;
    1464:	c9 e2       	ldi	r28, 0x29	; 41
    1466:	d1 e0       	ldi	r29, 0x01	; 1
    1468:	8d 83       	std	Y+5, r24	; 0x05
	SH100HW_SetAB(ampState.swAB);
    146a:	f4 d0       	rcall	.+488    	; 0x1654 <SH100HW_SetAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    146c:	6d 81       	ldd	r22, Y+5	; 0x05
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	68 27       	eor	r22, r24
    1472:	85 e0       	ldi	r24, 0x05	; 5
    1474:	67 de       	rcall	.-818    	; 0x1144 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    1476:	6d 81       	ldd	r22, Y+5	; 0x05
    1478:	86 e0       	ldi	r24, 0x06	; 6
    147a:	64 de       	rcall	.-824    	; 0x1144 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendSwABComm();
    147c:	cb df       	rcall	.-106    	; 0x1414 <MIDICTRL_SendSwABComm>
}
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

00000cd4 <SH100CTRL_SetAmpState>:
	
	SH100CTRL_SetAmpState(ampState);
}

void SH100CTRL_SetAmpState(SH100_State_t state)
{
 cd4:	0f 93       	push	r16
 cd6:	1f 93       	push	r17
 cd8:	cf 93       	push	r28
 cda:	df 93       	push	r29
 cdc:	00 d0       	rcall	.+0      	; 0xcde <SH100CTRL_SetAmpState+0xa>
 cde:	00 d0       	rcall	.+0      	; 0xce0 <SH100CTRL_SetAmpState+0xc>
 ce0:	00 d0       	rcall	.+0      	; 0xce2 <SH100CTRL_SetAmpState+0xe>
 ce2:	cd b7       	in	r28, 0x3d	; 61
 ce4:	de b7       	in	r29, 0x3e	; 62
 ce6:	49 83       	std	Y+1, r20	; 0x01
 ce8:	5a 83       	std	Y+2, r21	; 0x02
 cea:	6b 83       	std	Y+3, r22	; 0x03
 cec:	7c 83       	std	Y+4, r23	; 0x04
 cee:	8d 83       	std	Y+5, r24	; 0x05
 cf0:	9e 83       	std	Y+6, r25	; 0x06
	ampState = state;
 cf2:	86 e0       	ldi	r24, 0x06	; 6
 cf4:	fe 01       	movw	r30, r28
 cf6:	31 96       	adiw	r30, 0x01	; 1
 cf8:	a9 e2       	ldi	r26, 0x29	; 41
 cfa:	b1 e0       	ldi	r27, 0x01	; 1
 cfc:	01 90       	ld	r0, Z+
 cfe:	0d 92       	st	X+, r0
 d00:	8a 95       	dec	r24
 d02:	e1 f7       	brne	.-8      	; 0xcfc <SH100CTRL_SetAmpState+0x28>
	
	SH100CTRL_SwChannel(ampState.channelNum);
 d04:	09 e2       	ldi	r16, 0x29	; 41
 d06:	11 e0       	ldi	r17, 0x01	; 1
 d08:	d8 01       	movw	r26, r16
 d0a:	8c 91       	ld	r24, X
 d0c:	1c d3       	rcall	.+1592   	; 0x1346 <SH100CTRL_SwChannel>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
 d0e:	d8 01       	movw	r26, r16
 d10:	ec 91       	ld	r30, X
 d12:	f0 e0       	ldi	r31, 0x00	; 0
 d14:	e7 5d       	subi	r30, 0xD7	; 215
 d16:	fe 4f       	sbci	r31, 0xFE	; 254
 d18:	81 81       	ldd	r24, Z+1	; 0x01
 d1a:	2c d3       	rcall	.+1624   	; 0x1374 <SH100CTRL_SetLoop>
	SH100CTRL_SetAB(ampState.swAB);
 d1c:	f8 01       	movw	r30, r16
 d1e:	85 81       	ldd	r24, Z+5	; 0x05
 d20:	9f d3       	rcall	.+1854   	; 0x1460 <SH100CTRL_SetAB>
}
 d22:	26 96       	adiw	r28, 0x06	; 6
 d24:	0f b6       	in	r0, 0x3f	; 63
 d26:	f8 94       	cli
 d28:	de bf       	out	0x3e, r29	; 62
 d2a:	0f be       	out	0x3f, r0	; 63
 d2c:	cd bf       	out	0x3d, r28	; 61
 d2e:	df 91       	pop	r29
 d30:	cf 91       	pop	r28
 d32:	1f 91       	pop	r17
 d34:	0f 91       	pop	r16
 d36:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000a7c <SH100CTRL_Init>:
SH100_State_t ampState;

void setChannelLeds();

void SH100CTRL_Init()
{
 a7c:	cf 93       	push	r28
 a7e:	df 93       	push	r29
 a80:	00 d0       	rcall	.+0      	; 0xa82 <SH100CTRL_Init+0x6>
 a82:	00 d0       	rcall	.+0      	; 0xa84 <SH100CTRL_Init+0x8>
 a84:	00 d0       	rcall	.+0      	; 0xa86 <SH100CTRL_Init+0xa>
 a86:	cd b7       	in	r28, 0x3d	; 61
 a88:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 a8a:	60 e0       	ldi	r22, 0x00	; 0
 a8c:	70 e0       	ldi	r23, 0x00	; 0
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	c0 d5       	rcall	.+2944   	; 0x1612 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 a92:	8b 3a       	cpi	r24, 0xAB	; 171
 a94:	9c 4a       	sbci	r25, 0xAC	; 172
 a96:	91 f4       	brne	.+36     	; 0xabc <SH100CTRL_Init+0x40>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
 a98:	48 e0       	ldi	r20, 0x08	; 8
 a9a:	50 e0       	ldi	r21, 0x00	; 0
 a9c:	60 e8       	ldi	r22, 0x80	; 128
 a9e:	26 e0       	ldi	r18, 0x06	; 6
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	ce 01       	movw	r24, r28
 aa4:	01 96       	adiw	r24, 0x01	; 1
 aa6:	ee d4       	rcall	.+2524   	; 0x1484 <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 aa8:	86 e0       	ldi	r24, 0x06	; 6
 aaa:	fe 01       	movw	r30, r28
 aac:	31 96       	adiw	r30, 0x01	; 1
 aae:	a9 e2       	ldi	r26, 0x29	; 41
 ab0:	b1 e0       	ldi	r27, 0x01	; 1
 ab2:	01 90       	ld	r0, Z+
 ab4:	0d 92       	st	X+, r0
 ab6:	8a 95       	dec	r24
 ab8:	e1 f7       	brne	.-8      	; 0xab2 <SH100CTRL_Init+0x36>
 aba:	0f c0       	rjmp	.+30     	; 0xada <SH100CTRL_Init+0x5e>
	}
	else
	{
		ampState.channelNum = 0;
 abc:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ampState>
		for(int i=0; i<4; i++)
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	05 c0       	rjmp	.+10     	; 0xad0 <SH100CTRL_Init+0x54>
		{
			ampState.loopOn[i] = false;
 ac6:	fc 01       	movw	r30, r24
 ac8:	e7 5d       	subi	r30, 0xD7	; 215
 aca:	fe 4f       	sbci	r31, 0xFE	; 254
 acc:	11 82       	std	Z+1, r1	; 0x01
		ampState = *ampState_ptr;
	}
	else
	{
		ampState.channelNum = 0;
		for(int i=0; i<4; i++)
 ace:	01 96       	adiw	r24, 0x01	; 1
 ad0:	84 30       	cpi	r24, 0x04	; 4
 ad2:	91 05       	cpc	r25, r1
 ad4:	c4 f3       	brlt	.-16     	; 0xac6 <SH100CTRL_Init+0x4a>
		{
			ampState.loopOn[i] = false;
		}		
		ampState.swAB = false;		
 ad6:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <ampState+0x5>
	}
	
	SH100CTRL_SetAmpState(ampState);
 ada:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <ampState>
 ade:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <ampState+0x1>
 ae2:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <ampState+0x2>
 ae6:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <ampState+0x3>
 aea:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ampState+0x4>
 aee:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ampState+0x5>
 af2:	f0 d0       	rcall	.+480    	; 0xcd4 <SH100CTRL_SetAmpState>
}
 af4:	26 96       	adiw	r28, 0x06	; 6
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	f8 94       	cli
 afa:	de bf       	out	0x3e, r29	; 62
 afc:	0f be       	out	0x3f, r0	; 63
 afe:	cd bf       	out	0x3d, r28	; 61
 b00:	df 91       	pop	r29
 b02:	cf 91       	pop	r28
 b04:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

000015fa <SH100CTRL_SwAB>:
	MIDICTRL_SendLoopEnComm();
}

void SH100CTRL_SwAB()
{
	SH100CTRL_SetAB(!ampState.swAB);
    15fa:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ampState+0x5>
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 27       	eor	r24, r25
    1602:	2e df       	rcall	.-420    	; 0x1460 <SH100CTRL_SetAB>
    1604:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

0000164e <SH100CTRL_MuteAmp>:
	MIDICTRL_SendSwABComm();
}

void SH100CTRL_MuteAmp()
{
	SH100HW_SetPAState(OUTPUT_MUTE);
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	f4 de       	rcall	.-536    	; 0x143a <SH100HW_SetPAState>
    1652:	08 95       	ret

Disassembly of section .text.SH100CTRL_UnmuteAmp:

00001606 <SH100CTRL_UnmuteAmp>:
}

void SH100CTRL_UnmuteAmp()
{
	if(SH100HW_GetOutputJacks() != OUT_NONE)
    1606:	89 df       	rcall	.-238    	; 0x151a <SH100HW_GetOutputJacks>
    1608:	88 23       	and	r24, r24
    160a:	11 f0       	breq	.+4      	; 0x1610 <SH100CTRL_UnmuteAmp+0xa>
	{
		SH100HW_SetPAState(OUTPUT_ENABLED);	
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	15 df       	rcall	.-470    	; 0x143a <SH100HW_SetPAState>
    1610:	08 95       	ret

Disassembly of section .text.SH100CTRL_CheckOutputJacks:

00000bf4 <SH100CTRL_CheckOutputJacks>:
	}		
}

void SH100CTRL_CheckOutputJacks()
{
	SH100HW_OutputJacks_t outJacksState = SH100HW_GetOutputJacks();
 bf4:	92 d4       	rcall	.+2340   	; 0x151a <SH100HW_GetOutputJacks>
	
	switch(outJacksState)
 bf6:	81 30       	cpi	r24, 0x01	; 1
 bf8:	89 f0       	breq	.+34     	; 0xc1c <SH100CTRL_CheckOutputJacks+0x28>
 bfa:	28 f0       	brcs	.+10     	; 0xc06 <SH100CTRL_CheckOutputJacks+0x12>
 bfc:	82 30       	cpi	r24, 0x02	; 2
 bfe:	d9 f0       	breq	.+54     	; 0xc36 <SH100CTRL_CheckOutputJacks+0x42>
 c00:	83 30       	cpi	r24, 0x03	; 3
 c02:	31 f1       	breq	.+76     	; 0xc50 <SH100CTRL_CheckOutputJacks+0x5c>
 c04:	08 95       	ret
	{
		case OUT_NONE:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c06:	14 d5       	rcall	.+2600   	; 0x1630 <MIDICTRL_MidiMode>
 c08:	81 11       	cpse	r24, r1
 c0a:	06 c0       	rjmp	.+12     	; 0xc18 <SH100CTRL_CheckOutputJacks+0x24>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 c0c:	60 e0       	ldi	r22, 0x00	; 0
 c0e:	87 e0       	ldi	r24, 0x07	; 7
 c10:	99 d2       	rcall	.+1330   	; 0x1144 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 c12:	61 e0       	ldi	r22, 0x01	; 1
 c14:	88 e0       	ldi	r24, 0x08	; 8
 c16:	96 d2       	rcall	.+1324   	; 0x1144 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 c18:	1a d5       	rcall	.+2612   	; 0x164e <SH100CTRL_MuteAmp>
			break;
 c1a:	08 95       	ret
		}
		case OUT_16OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c1c:	09 d5       	rcall	.+2578   	; 0x1630 <MIDICTRL_MidiMode>
 c1e:	81 11       	cpse	r24, r1
 c20:	21 c0       	rjmp	.+66     	; 0xc64 <SH100CTRL_CheckOutputJacks+0x70>
			{
				SH100CTRL_UnmuteAmp();
 c22:	f1 d4       	rcall	.+2530   	; 0x1606 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_16OHM);
 c24:	81 e0       	ldi	r24, 0x01	; 1
 c26:	19 d5       	rcall	.+2610   	; 0x165a <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 c28:	61 e0       	ldi	r22, 0x01	; 1
 c2a:	87 e0       	ldi	r24, 0x07	; 7
 c2c:	8b d2       	rcall	.+1302   	; 0x1144 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 c2e:	60 e0       	ldi	r22, 0x00	; 0
 c30:	88 e0       	ldi	r24, 0x08	; 8
 c32:	88 d2       	rcall	.+1296   	; 0x1144 <SH100HW_SetNewLedState>
 c34:	08 95       	ret
			}			
			break;
		}
		case OUT_8OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c36:	fc d4       	rcall	.+2552   	; 0x1630 <MIDICTRL_MidiMode>
 c38:	81 11       	cpse	r24, r1
 c3a:	14 c0       	rjmp	.+40     	; 0xc64 <SH100CTRL_CheckOutputJacks+0x70>
			{
				SH100CTRL_UnmuteAmp();
 c3c:	e4 d4       	rcall	.+2504   	; 0x1606 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_8OHM);
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	0c d5       	rcall	.+2584   	; 0x165a <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 c42:	61 e0       	ldi	r22, 0x01	; 1
 c44:	87 e0       	ldi	r24, 0x07	; 7
 c46:	7e d2       	rcall	.+1276   	; 0x1144 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	88 e0       	ldi	r24, 0x08	; 8
 c4c:	7b d2       	rcall	.+1270   	; 0x1144 <SH100HW_SetNewLedState>
 c4e:	08 95       	ret

			break;
		}
		case OUT_BOTH:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c50:	ef d4       	rcall	.+2526   	; 0x1630 <MIDICTRL_MidiMode>
 c52:	81 11       	cpse	r24, r1
 c54:	06 c0       	rjmp	.+12     	; 0xc62 <SH100CTRL_CheckOutputJacks+0x6e>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 c56:	60 e0       	ldi	r22, 0x00	; 0
 c58:	87 e0       	ldi	r24, 0x07	; 7
 c5a:	74 d2       	rcall	.+1256   	; 0x1144 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 c5c:	61 e0       	ldi	r22, 0x01	; 1
 c5e:	88 e0       	ldi	r24, 0x08	; 8
 c60:	71 d2       	rcall	.+1250   	; 0x1144 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp(); //can load be less than 8Ohm?
 c62:	f5 d4       	rcall	.+2538   	; 0x164e <SH100CTRL_MuteAmp>
 c64:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000b80 <SH100HW_Init>:
SH100HW_Buttons_t buttonsState;
void readButtonsState();
void writeShiftRegs(uint16_t data);

void SH100HW_Init()
{
 b80:	1f 93       	push	r17
 b82:	cf 93       	push	r28
 b84:	df 93       	push	r29
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 b86:	55 b1       	in	r21, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 b88:	84 b1       	in	r24, 0x04	; 4
 b8a:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 b8c:	28 b1       	in	r18, 0x08	; 8
 b8e:	20 61       	ori	r18, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 b90:	97 b1       	in	r25, 0x07	; 7
 b92:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 b94:	3b b1       	in	r19, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 b96:	4a b1       	in	r20, 0x0a	; 10
 b98:	40 6e       	ori	r20, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 b9a:	3b 71       	andi	r19, 0x1B	; 27
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 b9c:	4b 7e       	andi	r20, 0xEB	; 235
 b9e:	4a b9       	out	0x0a, r20	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 ba0:	30 61       	ori	r19, 0x10	; 16
 ba2:	3b b9       	out	0x0b, r19	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 ba4:	9b 7d       	andi	r25, 0xDB	; 219
 ba6:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 ba8:	21 7d       	andi	r18, 0xD1	; 209
 baa:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 bac:	9a 60       	ori	r25, 0x0A	; 10
 bae:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 bb0:	95 2f       	mov	r25, r21
 bb2:	90 7d       	andi	r25, 0xD0	; 208
 bb4:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 bb6:	84 60       	ori	r24, 0x04	; 4
 bb8:	84 b9       	out	0x04, r24	; 4
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 bba:	10 e0       	ldi	r17, 0x00	; 0
 bbc:	0c c0       	rjmp	.+24     	; 0xbd6 <SH100HW_Init+0x56>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
 bbe:	c1 2f       	mov	r28, r17
 bc0:	d0 e0       	ldi	r29, 0x00	; 0
 bc2:	81 e0       	ldi	r24, 0x01	; 1
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	f1 de       	rcall	.-542    	; 0x9aa <__simple_malloc>
 bc8:	cc 0f       	add	r28, r28
 bca:	dd 1f       	adc	r29, r29
 bcc:	cc 5b       	subi	r28, 0xBC	; 188
 bce:	de 4f       	sbci	r29, 0xFE	; 254
 bd0:	99 83       	std	Y+1, r25	; 0x01
 bd2:	88 83       	st	Y, r24
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 bd4:	1f 5f       	subi	r17, 0xFF	; 255
 bd6:	12 31       	cpi	r17, 0x12	; 18
 bd8:	90 f3       	brcs	.-28     	; 0xbbe <SH100HW_Init+0x3e>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
	
	// ADC settings
	ADMUX = (1<<REFS0) | (1<<ADLAR); // AREF ext pin, Left-adjustment result
 bda:	80 e6       	ldi	r24, 0x60	; 96
 bdc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	DIDR0 = 0x01; // Disable digital io on PC0
 be0:	81 e0       	ldi	r24, 0x01	; 1
 be2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7fe07e>
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, INT enable, prescaler = 64
 be6:	8e e8       	ldi	r24, 0x8E	; 142
 be8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
}
 bec:	df 91       	pop	r29
 bee:	cf 91       	pop	r28
 bf0:	1f 91       	pop	r17
 bf2:	08 95       	ret

Disassembly of section .text.SH100HW_GetButtonsState:

0000159e <SH100HW_GetButtonsState>:

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
    159e:	2f e0       	ldi	r18, 0x0F	; 15
    15a0:	e5 e3       	ldi	r30, 0x35	; 53
    15a2:	f1 e0       	ldi	r31, 0x01	; 1
    15a4:	dc 01       	movw	r26, r24
    15a6:	01 90       	ld	r0, Z+
    15a8:	0d 92       	st	X+, r0
    15aa:	2a 95       	dec	r18
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <SH100HW_GetButtonsState+0x8>
}
    15ae:	08 95       	ret

Disassembly of section .text.SH100HW_SetCh:

00000f50 <SH100HW_SetCh>:

void SH100HW_SetCh(uint8_t chNum)
{
	switch(chNum)
 f50:	81 30       	cpi	r24, 0x01	; 1
 f52:	69 f0       	breq	.+26     	; 0xf6e <SH100HW_SetCh+0x1e>
 f54:	28 f0       	brcs	.+10     	; 0xf60 <SH100HW_SetCh+0x10>
 f56:	82 30       	cpi	r24, 0x02	; 2
 f58:	91 f0       	breq	.+36     	; 0xf7e <SH100HW_SetCh+0x2e>
 f5a:	83 30       	cpi	r24, 0x03	; 3
 f5c:	c1 f0       	breq	.+48     	; 0xf8e <SH100HW_SetCh+0x3e>
 f5e:	08 95       	ret
	{
		case 0:
		{
			RELAY_13_24 = REL_OFF;
 f60:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 f64:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 f68:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RELAY_2_4>
			break;
 f6c:	08 95       	ret
		}
		case 1:
		{
			RELAY_13_24 = REL_ON;
 f6e:	81 e0       	ldi	r24, 0x01	; 1
 f70:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 f74:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 f78:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RELAY_2_4>
			break;
 f7c:	08 95       	ret
		}
		case 2:
		{
			RELAY_13_24 = REL_OFF;
 f7e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_ON;
 f82:	81 e0       	ldi	r24, 0x01	; 1
 f84:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 f88:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RELAY_2_4>
			break;
 f8c:	08 95       	ret
		}
		case 3:
		{
			RELAY_13_24 = REL_ON;
 f8e:	81 e0       	ldi	r24, 0x01	; 1
 f90:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 f94:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_ON;
 f98:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <RELAY_2_4>
 f9c:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

00001502 <SH100HW_LoopEn>:
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
	RELAY_LOOP = isEnabled;
    1502:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <RELAY_LOOP>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1506:	88 23       	and	r24, r24
    1508:	21 f0       	breq	.+8      	; 0x1512 <SH100HW_LoopEn+0x10>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    150a:	85 b1       	in	r24, 0x05	; 5
    150c:	84 60       	ori	r24, 0x04	; 4
    150e:	85 b9       	out	0x05, r24	; 5
    1510:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1512:	85 b1       	in	r24, 0x05	; 5
    1514:	8b 7f       	andi	r24, 0xFB	; 251
    1516:	85 b9       	out	0x05, r24	; 5
    1518:	08 95       	ret

Disassembly of section .text.SH100HW_SetAB:

00001654 <SH100HW_SetAB>:
	ioport_set_pin_level(PIN_RELAY_LOOP, RELAY_LOOP);
}

void SH100HW_SetAB(bool isBEn)
{
	RELAY_AB = isBEn;
    1654:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <RELAY_AB>
    1658:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

00001144 <SH100HW_SetNewLedState>:
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
    1148:	e8 2f       	mov	r30, r24
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	df 01       	movw	r26, r30
    114e:	19 96       	adiw	r26, 0x09	; 9
    1150:	aa 0f       	add	r26, r26
    1152:	bb 1f       	adc	r27, r27
    1154:	ac 5b       	subi	r26, 0xBC	; 188
    1156:	be 4f       	sbci	r27, 0xFE	; 254
    1158:	0d 90       	ld	r0, X+
    115a:	bc 91       	ld	r27, X
    115c:	a0 2d       	mov	r26, r0
    115e:	ee 0f       	add	r30, r30
    1160:	ff 1f       	adc	r31, r31
    1162:	ec 5b       	subi	r30, 0xBC	; 188
    1164:	fe 4f       	sbci	r31, 0xFE	; 254
    1166:	c0 81       	ld	r28, Z
    1168:	d1 81       	ldd	r29, Z+1	; 0x01
    116a:	88 81       	ld	r24, Y
    116c:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
    116e:	01 90       	ld	r0, Z+
    1170:	f0 81       	ld	r31, Z
    1172:	e0 2d       	mov	r30, r0
    1174:	60 83       	st	Z, r22
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

000013c6 <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	fc 01       	movw	r30, r24
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	ec 5b       	subi	r30, 0xBC	; 188
    13d0:	fe 4f       	sbci	r31, 0xFE	; 254
    13d2:	a0 81       	ld	r26, Z
    13d4:	b1 81       	ldd	r27, Z+1	; 0x01
    13d6:	fc 01       	movw	r30, r24
    13d8:	39 96       	adiw	r30, 0x09	; 9
    13da:	ee 0f       	add	r30, r30
    13dc:	ff 1f       	adc	r31, r31
    13de:	ec 5b       	subi	r30, 0xBC	; 188
    13e0:	fe 4f       	sbci	r31, 0xFE	; 254
    13e2:	01 90       	ld	r0, Z+
    13e4:	f0 81       	ld	r31, Z
    13e6:	e0 2d       	mov	r30, r0
    13e8:	80 81       	ld	r24, Z
    13ea:	8c 93       	st	X, r24
    13ec:	08 95       	ret

Disassembly of section .text.SH100HW_GetOutputJacks:

0000151a <SH100HW_GetOutputJacks>:
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    151a:	21 e0       	ldi	r18, 0x01	; 1
    151c:	18 9b       	sbis	0x03, 0	; 3
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	91 e0       	ldi	r25, 0x01	; 1
    1522:	19 9b       	sbis	0x03, 1	; 3
    1524:	90 e0       	ldi	r25, 0x00	; 0

SH100HW_OutputJacks_t SH100HW_GetOutputJacks()
{
	bool is16Ohm = ioport_get_pin_level(PIN_M16_DETECT);
	bool is8Ohm = ioport_get_pin_level(PIN_M8_DETECT);
	return ((is16Ohm) | (is8Ohm<<1));
    1526:	89 2f       	mov	r24, r25
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
}
    152e:	82 2b       	or	r24, r18
    1530:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAState:

0000143a <SH100HW_SetPAState>:
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    143a:	81 11       	cpse	r24, r1
    143c:	04 c0       	rjmp	.+8      	; 0x1446 <SH100HW_SetPAState+0xc>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    143e:	98 b1       	in	r25, 0x08	; 8
    1440:	92 60       	ori	r25, 0x02	; 2
    1442:	98 b9       	out	0x08, r25	; 8
    1444:	03 c0       	rjmp	.+6      	; 0x144c <SH100HW_SetPAState+0x12>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1446:	98 b1       	in	r25, 0x08	; 8
    1448:	9d 7f       	andi	r25, 0xFD	; 253
    144a:	98 b9       	out	0x08, r25	; 8
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    144c:	88 23       	and	r24, r24
    144e:	21 f0       	breq	.+8      	; 0x1458 <SH100HW_SetPAState+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1450:	88 b1       	in	r24, 0x08	; 8
    1452:	88 60       	ori	r24, 0x08	; 8
    1454:	88 b9       	out	0x08, r24	; 8
    1456:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1458:	88 b1       	in	r24, 0x08	; 8
    145a:	87 7f       	andi	r24, 0xF7	; 247
    145c:	88 b9       	out	0x08, r24	; 8
    145e:	08 95       	ret

Disassembly of section .text.SH100HW_SetOutputMode:

0000165a <SH100HW_SetOutputMode>:
	ioport_set_pin_level(PIN_RELE_W, state);
}

void SH100HW_SetOutputMode(SH100HW_PAMode_t mode)
{
	RELAY_8_16 = mode;
    165a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <RELAY_8_16>
    165e:	08 95       	ret

Disassembly of section .text.readButtonsState:

00000580 <readButtonsState>:
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	ac c0       	rjmp	.+344    	; 0x6dc <readButtonsState+0x15c>
	{
		
		switch(cnt)
 584:	48 2f       	mov	r20, r24
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	48 30       	cpi	r20, 0x08	; 8
 58a:	51 05       	cpc	r21, r1
 58c:	08 f0       	brcs	.+2      	; 0x590 <readButtonsState+0x10>
 58e:	a5 c0       	rjmp	.+330    	; 0x6da <readButtonsState+0x15a>
 590:	fa 01       	movw	r30, r20
 592:	ef 55       	subi	r30, 0x5F	; 95
 594:	ff 4f       	sbci	r31, 0xFF	; 255
 596:	09 94       	ijmp
 598:	3b b1       	in	r19, 0x0b	; 11
 59a:	3f 7d       	andi	r19, 0xDF	; 223
 59c:	3b b9       	out	0x0b, r19	; 11
 59e:	3b b1       	in	r19, 0x0b	; 11
 5a0:	3f 7b       	andi	r19, 0xBF	; 191
 5a2:	3b b9       	out	0x0b, r19	; 11
 5a4:	3b b1       	in	r19, 0x0b	; 11
 5a6:	3f 77       	andi	r19, 0x7F	; 127
 5a8:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5aa:	31 e0       	ldi	r19, 0x01	; 1
 5ac:	4c 9b       	sbis	0x09, 4	; 9
 5ae:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = ioport_get_pin_level(PIN_MIDI_SWITCH);
 5b0:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <buttonsState+0x1>
 5b4:	31 e0       	ldi	r19, 0x01	; 1
 5b6:	35 9b       	sbis	0x06, 5	; 6
 5b8:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 5ba:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <buttonsState+0xc>
				break;
 5be:	8d c0       	rjmp	.+282    	; 0x6da <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5c0:	2b b1       	in	r18, 0x0b	; 11
 5c2:	20 62       	ori	r18, 0x20	; 32
 5c4:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5c6:	2b b1       	in	r18, 0x0b	; 11
 5c8:	2f 7b       	andi	r18, 0xBF	; 191
 5ca:	2b b9       	out	0x0b, r18	; 11
 5cc:	2b b1       	in	r18, 0x0b	; 11
 5ce:	2f 77       	andi	r18, 0x7F	; 127
 5d0:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5d2:	21 e0       	ldi	r18, 0x01	; 1
 5d4:	4c 9b       	sbis	0x09, 4	; 9
 5d6:	20 e0       	ldi	r18, 0x00	; 0
 5d8:	31 e0       	ldi	r19, 0x01	; 1
 5da:	4a 9b       	sbis	0x09, 2	; 9
 5dc:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = ioport_get_pin_level(PIN_BUTTONS);
 5de:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <buttonsState+0x7>
 5e2:	31 e0       	ldi	r19, 0x01	; 1
 5e4:	35 9b       	sbis	0x06, 5	; 6
 5e6:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 5e8:	30 93 43 01 	sts	0x0143, r19	; 0x800143 <buttonsState+0xe>
				break;
 5ec:	76 c0       	rjmp	.+236    	; 0x6da <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5ee:	9b b1       	in	r25, 0x0b	; 11
 5f0:	9f 7d       	andi	r25, 0xDF	; 223
 5f2:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5f4:	9b b1       	in	r25, 0x0b	; 11
 5f6:	90 64       	ori	r25, 0x40	; 64
 5f8:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5fa:	9b b1       	in	r25, 0x0b	; 11
 5fc:	9f 77       	andi	r25, 0x7F	; 127
 5fe:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 600:	91 e0       	ldi	r25, 0x01	; 1
 602:	4c 9b       	sbis	0x09, 4	; 9
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	31 e0       	ldi	r19, 0x01	; 1
 608:	4a 9b       	sbis	0x09, 2	; 9
 60a:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnLoop = ioport_get_pin_level(PIN_BUTTONS);
 60c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <buttonsState+0x8>
 610:	31 e0       	ldi	r19, 0x01	; 1
 612:	35 9b       	sbis	0x06, 5	; 6
 614:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 616:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <buttonsState+0xb>
				break;
 61a:	5f c0       	rjmp	.+190    	; 0x6da <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 61c:	3b b1       	in	r19, 0x0b	; 11
 61e:	30 62       	ori	r19, 0x20	; 32
 620:	3b b9       	out	0x0b, r19	; 11
 622:	3b b1       	in	r19, 0x0b	; 11
 624:	30 64       	ori	r19, 0x40	; 64
 626:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 628:	3b b1       	in	r19, 0x0b	; 11
 62a:	3f 77       	andi	r19, 0x7F	; 127
 62c:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 62e:	31 e0       	ldi	r19, 0x01	; 1
 630:	4c 9b       	sbis	0x09, 4	; 9
 632:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = ioport_get_pin_level(PIN_MIDI_SWITCH);
 634:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <buttonsState+0x2>
 638:	31 e0       	ldi	r19, 0x01	; 1
 63a:	35 9b       	sbis	0x06, 5	; 6
 63c:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 63e:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <buttonsState+0x9>
				break;
 642:	4b c0       	rjmp	.+150    	; 0x6da <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 644:	3b b1       	in	r19, 0x0b	; 11
 646:	3f 7d       	andi	r19, 0xDF	; 223
 648:	3b b9       	out	0x0b, r19	; 11
 64a:	3b b1       	in	r19, 0x0b	; 11
 64c:	3f 7b       	andi	r19, 0xBF	; 191
 64e:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 650:	3b b1       	in	r19, 0x0b	; 11
 652:	30 68       	ori	r19, 0x80	; 128
 654:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 656:	a1 e0       	ldi	r26, 0x01	; 1
 658:	4c 9b       	sbis	0x09, 4	; 9
 65a:	a0 e0       	ldi	r26, 0x00	; 0
 65c:	31 e0       	ldi	r19, 0x01	; 1
 65e:	4a 9b       	sbis	0x09, 2	; 9
 660:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh2 = ioport_get_pin_level(PIN_BUTTONS);
 662:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <buttonsState+0x4>
 666:	31 e0       	ldi	r19, 0x01	; 1
 668:	35 9b       	sbis	0x06, 5	; 6
 66a:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 66c:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <buttonsState+0xa>
				break;
 670:	34 c0       	rjmp	.+104    	; 0x6da <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 672:	3b b1       	in	r19, 0x0b	; 11
 674:	30 62       	ori	r19, 0x20	; 32
 676:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 678:	3b b1       	in	r19, 0x0b	; 11
 67a:	3f 7b       	andi	r19, 0xBF	; 191
 67c:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 67e:	3b b1       	in	r19, 0x0b	; 11
 680:	30 68       	ori	r19, 0x80	; 128
 682:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 684:	31 e0       	ldi	r19, 0x01	; 1
 686:	4a 9b       	sbis	0x09, 2	; 9
 688:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = ioport_get_pin_level(PIN_BUTTONS);
 68a:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <buttonsState+0x5>
				break;
 68e:	25 c0       	rjmp	.+74     	; 0x6da <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 690:	9b b1       	in	r25, 0x0b	; 11
 692:	9f 7d       	andi	r25, 0xDF	; 223
 694:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 696:	9b b1       	in	r25, 0x0b	; 11
 698:	90 64       	ori	r25, 0x40	; 64
 69a:	9b b9       	out	0x0b, r25	; 11
 69c:	9b b1       	in	r25, 0x0b	; 11
 69e:	90 68       	ori	r25, 0x80	; 128
 6a0:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	4c 9b       	sbis	0x09, 4	; 9
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	31 e0       	ldi	r19, 0x01	; 1
 6aa:	4a 9b       	sbis	0x09, 2	; 9
 6ac:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh4 = ioport_get_pin_level(PIN_BUTTONS);
 6ae:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <buttonsState+0x6>
 6b2:	31 e0       	ldi	r19, 0x01	; 1
 6b4:	35 9b       	sbis	0x06, 5	; 6
 6b6:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 6b8:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <buttonsState+0xd>
				break;
 6bc:	0e c0       	rjmp	.+28     	; 0x6da <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6be:	3b b1       	in	r19, 0x0b	; 11
 6c0:	30 62       	ori	r19, 0x20	; 32
 6c2:	3b b9       	out	0x0b, r19	; 11
 6c4:	3b b1       	in	r19, 0x0b	; 11
 6c6:	30 64       	ori	r19, 0x40	; 64
 6c8:	3b b9       	out	0x0b, r19	; 11
 6ca:	3b b1       	in	r19, 0x0b	; 11
 6cc:	30 68       	ori	r19, 0x80	; 128
 6ce:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6d0:	31 e0       	ldi	r19, 0x01	; 1
 6d2:	4a 9b       	sbis	0x09, 2	; 9
 6d4:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = ioport_get_pin_level(PIN_BUTTONS);
 6d6:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <buttonsState+0x3>
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 6da:	8f 5f       	subi	r24, 0xFF	; 255
 6dc:	88 30       	cpi	r24, 0x08	; 8
 6de:	08 f4       	brcc	.+2      	; 0x6e2 <readButtonsState+0x162>
 6e0:	51 cf       	rjmp	.-350    	; 0x584 <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 6e2:	89 2f       	mov	r24, r25
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	88 0f       	add	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	22 0f       	add	r18, r18
 6f6:	33 1f       	adc	r19, r19
 6f8:	22 0f       	add	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	8a 2b       	or	r24, r26
 6fe:	82 2b       	or	r24, r18
 700:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <buttonsState>
 704:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

000010c2 <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
    10c2:	ac 01       	movw	r20, r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    10c4:	88 b1       	in	r24, 0x08	; 8
    10c6:	8f 7e       	andi	r24, 0xEF	; 239
    10c8:	88 b9       	out	0x08, r24	; 8
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	12 c0       	rjmp	.+36     	; 0x10f2 <writeShiftRegs+0x30>
    10ce:	95 b1       	in	r25, 0x05	; 5
    10d0:	9f 7d       	andi	r25, 0xDF	; 223
    10d2:	95 b9       	out	0x05, r25	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    10d4:	55 23       	and	r21, r21
    10d6:	24 f4       	brge	.+8      	; 0x10e0 <writeShiftRegs+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    10d8:	85 b1       	in	r24, 0x05	; 5
    10da:	88 60       	ori	r24, 0x08	; 8
    10dc:	85 b9       	out	0x05, r24	; 5
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <writeShiftRegs+0x24>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    10e0:	85 b1       	in	r24, 0x05	; 5
    10e2:	87 7f       	andi	r24, 0xF7	; 247
    10e4:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    10e6:	95 b1       	in	r25, 0x05	; 5
    10e8:	90 62       	ori	r25, 0x20	; 32
    10ea:	95 b9       	out	0x05, r25	; 5
	{
		ioport_set_pin_level(PIN_SCK, 0);
		ioport_set_pin_level(PIN_MOSI, (data & 0x8000));
		ioport_set_pin_level(PIN_SCK, 1);
		data = data << 1;
    10ec:	44 0f       	add	r20, r20
    10ee:	55 1f       	adc	r21, r21
}

void writeShiftRegs(uint16_t data)
{
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    10f0:	2f 5f       	subi	r18, 0xFF	; 255
    10f2:	20 31       	cpi	r18, 0x10	; 16
    10f4:	60 f3       	brcs	.-40     	; 0x10ce <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    10f6:	85 b1       	in	r24, 0x05	; 5
    10f8:	8f 7d       	andi	r24, 0xDF	; 223
    10fa:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    10fc:	88 b1       	in	r24, 0x08	; 8
    10fe:	80 61       	ori	r24, 0x10	; 16
    1100:	88 b9       	out	0x08, r24	; 8
    1102:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000001dc <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	29 97       	sbiw	r28, 0x09	; 9
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	readButtonsState();
 1f0:	c7 d1       	rcall	.+910    	; 0x580 <readButtonsState>
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 1f2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <blinkCounter>
 1f6:	89 e2       	ldi	r24, 0x29	; 41
 1f8:	98 9f       	mul	r25, r24
 1fa:	81 2d       	mov	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	39 2f       	mov	r19, r25
 204:	29 e1       	ldi	r18, 0x19	; 25
 206:	82 9f       	mul	r24, r18
 208:	30 19       	sub	r19, r0
 20a:	11 24       	eor	r1, r1
 20c:	31 11       	cpse	r19, r1
 20e:	08 c0       	rjmp	.+16     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 210:	99 23       	and	r25, r25
 212:	31 f0       	breq	.+12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
	{
		fastBlink = !fastBlink;
 214:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <fastBlink>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	82 27       	eor	r24, r18
 21c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fastBlink>
	}
	
	if(blinkCounter == 50)
 220:	92 33       	cpi	r25, 0x32	; 50
 222:	51 f4       	brne	.+20     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
	{
		blinkCounter = 0;
 224:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <blinkCounter>
		slowBlink = !slowBlink;
 228:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <slowBlink>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	89 27       	eor	r24, r25
 230:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	47 c0       	rjmp	.+142    	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <blinkCounter>
 23e:	fa cf       	rjmp	.-12     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 240:	82 2f       	mov	r24, r18
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ec 5b       	subi	r30, 0xBC	; 188
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	01 90       	ld	r0, Z+
 250:	f0 81       	ld	r31, Z
 252:	e0 2d       	mov	r30, r0
 254:	30 81       	ld	r19, Z
 256:	31 30       	cpi	r19, 0x01	; 1
 258:	71 f0       	breq	.+28     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
 25a:	28 f0       	brcs	.+10     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 25c:	32 30       	cpi	r19, 0x02	; 2
 25e:	a1 f0       	breq	.+40     	; 0x288 <__EEPROM_REGION_LENGTH__+0x88>
 260:	33 30       	cpi	r19, 0x03	; 3
 262:	e1 f0       	breq	.+56     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 264:	28 c0       	rjmp	.+80     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			case LED_OFF: isLedOn[i] = false; break;
 266:	e1 e0       	ldi	r30, 0x01	; 1
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ec 0f       	add	r30, r28
 26c:	fd 1f       	adc	r31, r29
 26e:	e8 0f       	add	r30, r24
 270:	f9 1f       	adc	r31, r25
 272:	10 82       	st	Z, r1
 274:	27 c0       	rjmp	.+78     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			case LED_ON: isLedOn[i] = true; break;
 276:	e1 e0       	ldi	r30, 0x01	; 1
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	e8 0f       	add	r30, r24
 280:	f9 1f       	adc	r31, r25
 282:	31 e0       	ldi	r19, 0x01	; 1
 284:	30 83       	st	Z, r19
 286:	1e c0       	rjmp	.+60     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 288:	e1 e0       	ldi	r30, 0x01	; 1
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ec 0f       	add	r30, r28
 28e:	fd 1f       	adc	r31, r29
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <fastBlink>
 298:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 29c:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <slowBlink>
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e8 0f       	add	r30, r24
 2aa:	f9 1f       	adc	r31, r25
 2ac:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	83 27       	eor	r24, r19
 2b2:	88 87       	std	Y+8, r24	; 0x08
				break;
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			}	
			default: isLedOn[i] = LED_OFF;
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ec 0f       	add	r30, r28
 2bc:	fd 1f       	adc	r31, r29
 2be:	e8 0f       	add	r30, r24
 2c0:	f9 1f       	adc	r31, r25
 2c2:	10 82       	st	Z, r1
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
 2c6:	29 30       	cpi	r18, 0x09	; 9
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 2ca:	ba cf       	rjmp	.-140    	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2cc:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 2d0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <RELAY_1_3>
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2da:	ac 01       	movw	r20, r24
 2dc:	42 2b       	or	r20, r18
 2de:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 2e0:	9b 81       	ldd	r25, Y+3	; 0x03
 2e2:	89 2f       	mov	r24, r25
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 2ee:	82 2b       	or	r24, r18
 2f0:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 2f2:	29 81       	ldd	r18, Y+1	; 0x01
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 302:	82 2b       	or	r24, r18
 304:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 306:	2a 81       	ldd	r18, Y+2	; 0x02
 308:	50 e1       	ldi	r21, 0x10	; 16
 30a:	25 9f       	mul	r18, r21
 30c:	90 01       	movw	r18, r0
 30e:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 310:	28 2b       	or	r18, r24
 312:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 314:	4c 81       	ldd	r20, Y+4	; 0x04
 316:	80 e2       	ldi	r24, 0x20	; 32
 318:	48 9f       	mul	r20, r24
 31a:	a0 01       	movw	r20, r0
 31c:	11 24       	eor	r1, r1
 31e:	24 2b       	or	r18, r20
 320:	35 2b       	or	r19, r21
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 322:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <RELAY_8_16>
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	48 9f       	mul	r20, r24
 32a:	a0 01       	movw	r20, r0
 32c:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 32e:	24 2b       	or	r18, r20
 330:	35 2b       	or	r19, r21
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 332:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <RELAY_2_4>
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	98 2f       	mov	r25, r24
 33a:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 33c:	28 2b       	or	r18, r24
 33e:	39 2b       	or	r19, r25
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 340:	8e 81       	ldd	r24, Y+6	; 0x06
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	98 2f       	mov	r25, r24
 346:	88 27       	eor	r24, r24
 348:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 34a:	28 2b       	or	r18, r24
 34c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 34e:	8f 81       	ldd	r24, Y+7	; 0x07
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	98 2f       	mov	r25, r24
 354:	88 27       	eor	r24, r24
 356:	99 0f       	add	r25, r25
 358:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 35a:	28 2b       	or	r18, r24
 35c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 35e:	88 85       	ldd	r24, Y+8	; 0x08
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	98 2f       	mov	r25, r24
 364:	88 27       	eor	r24, r24
 366:	99 0f       	add	r25, r25
 368:	99 0f       	add	r25, r25
 36a:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 36c:	28 2b       	or	r18, r24
 36e:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 370:	99 85       	ldd	r25, Y+9	; 0x09
 372:	89 2f       	mov	r24, r25
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	98 2f       	mov	r25, r24
 378:	88 27       	eor	r24, r24
 37a:	92 95       	swap	r25
 37c:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 37e:	28 2b       	or	r18, r24
 380:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
 382:	4d 81       	ldd	r20, Y+5	; 0x05
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	54 2f       	mov	r21, r20
 388:	44 27       	eor	r20, r20
 38a:	52 95       	swap	r21
 38c:	55 0f       	add	r21, r21
 38e:	50 7e       	andi	r21, 0xE0	; 224
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 390:	24 2b       	or	r18, r20
 392:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
								((uint16_t)RELAY_AB << (8+6)) |
 394:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <RELAY_AB>
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 e4       	ldi	r25, 0x40	; 64
 39c:	89 9f       	mul	r24, r25
 39e:	90 2d       	mov	r25, r0
 3a0:	88 27       	eor	r24, r24
 3a2:	11 24       	eor	r1, r1
								(0 << (8+7));

	writeShiftRegs(resultSendWord);
 3a4:	82 2b       	or	r24, r18
 3a6:	93 2b       	or	r25, r19
 3a8:	8c d6       	rcall	.+3352   	; 0x10c2 <writeShiftRegs>
 3aa:	29 96       	adiw	r28, 0x09	; 9
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

Disassembly of section .text.UART_init:

00001532 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    1532:	88 ed       	ldi	r24, 0xD8	; 216
    1534:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00); 
    1538:	86 e0       	ldi	r24, 0x06	; 6
    153a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0;
    153e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=19;
    1542:	83 e1       	ldi	r24, 0x13	; 19
    1544:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    1548:	08 95       	ret

Disassembly of section .text.__vector_18:

00000d38 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 d38:	1f 92       	push	r1
 d3a:	0f 92       	push	r0
 d3c:	0f b6       	in	r0, 0x3f	; 63
 d3e:	0f 92       	push	r0
 d40:	11 24       	eor	r1, r1
 d42:	8f 93       	push	r24
 d44:	9f 93       	push	r25
 d46:	ef 93       	push	r30
 d48:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 d4a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 d4e:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 d52:	8c 71       	andi	r24, 0x1C	; 28
 d54:	d1 f4       	brne	.+52     	; 0xd8a <__vector_18+0x52>
	{
		rx_buffer0[rx_wr_index++] = data;
 d56:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <rx_wr_index>
 d5a:	81 e0       	ldi	r24, 0x01	; 1
 d5c:	8e 0f       	add	r24, r30
 d5e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <rx_wr_index>
 d62:	f0 e0       	ldi	r31, 0x00	; 0
 d64:	ec 58       	subi	r30, 0x8C	; 140
 d66:	fe 4f       	sbci	r31, 0xFE	; 254
 d68:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 d6a:	80 31       	cpi	r24, 0x10	; 16
 d6c:	11 f4       	brne	.+4      	; 0xd72 <__vector_18+0x3a>
 d6e:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 d72:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_counter>
 d76:	8f 5f       	subi	r24, 0xFF	; 255
 d78:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <rx_counter>
 d7c:	80 31       	cpi	r24, 0x10	; 16
 d7e:	29 f4       	brne	.+10     	; 0xd8a <__vector_18+0x52>
		{
			rx_counter=0;
 d80:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <rx_counter>
			rx_buffer_overflow=1;
 d84:	81 e0       	ldi	r24, 0x01	; 1
 d86:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <rx_buffer_overflow>
		}
	}
}
 d8a:	ff 91       	pop	r31
 d8c:	ef 91       	pop	r30
 d8e:	9f 91       	pop	r25
 d90:	8f 91       	pop	r24
 d92:	0f 90       	pop	r0
 d94:	0f be       	out	0x3f, r0	; 63
 d96:	0f 90       	pop	r0
 d98:	1f 90       	pop	r1
 d9a:	18 95       	reti

Disassembly of section .text.UART_PopWord:

00001256 <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
    1256:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_counter>
    125a:	88 23       	and	r24, r24
    125c:	e1 f3       	breq	.-8      	; 0x1256 <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
    125e:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <rx_rd_index>
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	9e 0f       	add	r25, r30
    1266:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <rx_rd_index>
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	ec 58       	subi	r30, 0x8C	; 140
    126e:	fe 4f       	sbci	r31, 0xFE	; 254
    1270:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
    1272:	90 31       	cpi	r25, 0x10	; 16
    1274:	11 f4       	brne	.+4      	; 0x127a <UART_PopWord+0x24>
    1276:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
    127a:	f8 94       	cli
	--rx_counter;
    127c:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rx_counter>
    1280:	91 50       	subi	r25, 0x01	; 1
    1282:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rx_counter>
	cpu_irq_enable();
    1286:	78 94       	sei
	return data;
}
    1288:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000015d2 <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rx_counter>
    15d8:	91 11       	cpse	r25, r1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <UART_RxBufferNotEmpty+0xc>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
}
    15de:	08 95       	ret

Disassembly of section .text.__vector_20:

00000efe <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 efe:	1f 92       	push	r1
 f00:	0f 92       	push	r0
 f02:	0f b6       	in	r0, 0x3f	; 63
 f04:	0f 92       	push	r0
 f06:	11 24       	eor	r1, r1
 f08:	8f 93       	push	r24
 f0a:	ef 93       	push	r30
 f0c:	ff 93       	push	r31
	if (tx_counter)
 f0e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <tx_counter>
 f12:	88 23       	and	r24, r24
 f14:	a9 f0       	breq	.+42     	; 0xf40 <__vector_20+0x42>
	{
		--tx_counter;
 f16:	81 50       	subi	r24, 0x01	; 1
 f18:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 f1c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <tx_rd_index>
 f20:	81 e0       	ldi	r24, 0x01	; 1
 f22:	8e 0f       	add	r24, r30
 f24:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <tx_rd_index>
 f28:	f0 e0       	ldi	r31, 0x00	; 0
 f2a:	e5 59       	subi	r30, 0x95	; 149
 f2c:	fe 4f       	sbci	r31, 0xFE	; 254
 f2e:	80 81       	ld	r24, Z
 f30:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 f34:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <tx_rd_index>
 f38:	88 30       	cpi	r24, 0x08	; 8
 f3a:	11 f4       	brne	.+4      	; 0xf40 <__vector_20+0x42>
 f3c:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <tx_rd_index>
		#endif
	}
}
 f40:	ff 91       	pop	r31
 f42:	ef 91       	pop	r30
 f44:	8f 91       	pop	r24
 f46:	0f 90       	pop	r0
 f48:	0f be       	out	0x3f, r0	; 63
 f4a:	0f 90       	pop	r0
 f4c:	1f 90       	pop	r1
 f4e:	18 95       	reti

Disassembly of section .text.UART_PushWord:

0000107c <UART_PushWord>:

// Write a character to the USART Transmitter buffer
void UART_PushWord(uint8_t c)
{	
	while (tx_counter == TX_BUFFER_SIZE);
    107c:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <tx_counter>
    1080:	98 30       	cpi	r25, 0x08	; 8
    1082:	e1 f3       	breq	.-8      	; 0x107c <UART_PushWord>
	
	cpu_irq_disable();
    1084:	f8 94       	cli
	
	if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
    1086:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <tx_counter>
    108a:	91 11       	cpse	r25, r1
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <UART_PushWord+0x1a>
    108e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
    1092:	25 fd       	sbrc	r18, 5
    1094:	12 c0       	rjmp	.+36     	; 0x10ba <UART_PushWord+0x3e>
	{
		tx_buffer[tx_wr_index++] = c;
    1096:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <tx_wr_index>
    109a:	21 e0       	ldi	r18, 0x01	; 1
    109c:	2e 0f       	add	r18, r30
    109e:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <tx_wr_index>
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	e5 59       	subi	r30, 0x95	; 149
    10a6:	fe 4f       	sbci	r31, 0xFE	; 254
    10a8:	80 83       	st	Z, r24
		
		#if TX_BUFFER_SIZE0 != 256
			if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
    10aa:	28 30       	cpi	r18, 0x08	; 8
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <UART_PushWord+0x36>
    10ae:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <tx_wr_index>
		#endif
		
		++tx_counter;
    10b2:	9f 5f       	subi	r25, 0xFF	; 255
    10b4:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_counter>
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <UART_PushWord+0x42>
	}
	else UDR0=c;
    10ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	cpu_irq_enable();
    10be:	78 94       	sei
    10c0:	08 95       	ret

Disassembly of section .text.libgcc:

0000154a <__xload_4>:
    154a:	57 fd       	sbrc	r21, 7
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <__xload_4+0xe>
    154e:	65 91       	lpm	r22, Z+
    1550:	75 91       	lpm	r23, Z+
    1552:	85 91       	lpm	r24, Z+
    1554:	95 91       	lpm	r25, Z+
    1556:	08 95       	ret
    1558:	61 91       	ld	r22, Z+
    155a:	71 91       	ld	r23, Z+
    155c:	81 91       	ld	r24, Z+
    155e:	91 91       	ld	r25, Z+
    1560:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000166c <_fini>:
    166c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000166e <__funcs_on_exit>:
    166e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001670 <__simulator_exit>:
    1670:	08 95       	ret

Disassembly of section .text.exit:

000015e0 <exit>:
    15e0:	ec 01       	movw	r28, r24
    15e2:	45 d0       	rcall	.+138    	; 0x166e <__funcs_on_exit>
    15e4:	43 d0       	rcall	.+134    	; 0x166c <_fini>
    15e6:	ce 01       	movw	r24, r28
    15e8:	43 d0       	rcall	.+134    	; 0x1670 <__simulator_exit>
    15ea:	ce 01       	movw	r24, r28
    15ec:	42 d0       	rcall	.+132    	; 0x1672 <_Exit>

Disassembly of section .text.__simple_malloc:

000009aa <__simple_malloc>:
 9aa:	a2 e0       	ldi	r26, 0x02	; 2
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	ea ed       	ldi	r30, 0xDA	; 218
 9b0:	f4 e0       	ldi	r31, 0x04	; 4
 9b2:	ee c3       	rjmp	.+2012   	; 0x1190 <__prologue_saves__+0x14>
 9b4:	8c 01       	movw	r16, r24
 9b6:	80 e0       	ldi	r24, 0x00	; 0
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	01 15       	cp	r16, r1
 9bc:	11 05       	cpc	r17, r1
 9be:	09 f4       	brne	.+2      	; 0x9c2 <__simple_malloc+0x18>
 9c0:	53 c0       	rjmp	.+166    	; 0xa68 <__simple_malloc+0xbe>
 9c2:	89 2b       	or	r24, r25
 9c4:	71 f0       	breq	.+28     	; 0x9e2 <__simple_malloc+0x38>
 9c6:	02 30       	cpi	r16, 0x02	; 2
 9c8:	11 05       	cpc	r17, r1
 9ca:	10 f4       	brcc	.+4      	; 0x9d0 <__simple_malloc+0x26>
 9cc:	02 e0       	ldi	r16, 0x02	; 2
 9ce:	10 e0       	ldi	r17, 0x00	; 0
 9d0:	c8 01       	movw	r24, r16
 9d2:	16 db       	rcall	.-2516   	; 0x0 <__vectors>
 9d4:	00 97       	sbiw	r24, 0x00	; 0
 9d6:	09 f0       	breq	.+2      	; 0x9da <__simple_malloc+0x30>
 9d8:	4e c0       	rjmp	.+156    	; 0xa76 <__simple_malloc+0xcc>
 9da:	92 e0       	ldi	r25, 0x02	; 2
 9dc:	e9 2e       	mov	r14, r25
 9de:	f1 2c       	mov	r15, r1
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__simple_malloc+0x40>
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	e8 2e       	mov	r14, r24
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	f8 2e       	mov	r15, r24
 9ea:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <end.1483>
 9ee:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <end.1483+0x1>
 9f2:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <cur.1482>
 9f6:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <cur.1482+0x1>
 9fa:	82 1b       	sub	r24, r18
 9fc:	93 0b       	sbc	r25, r19
 9fe:	67 01       	movw	r12, r14
 a00:	c0 0e       	add	r12, r16
 a02:	d1 1e       	adc	r13, r17
 a04:	80 17       	cp	r24, r16
 a06:	91 07       	cpc	r25, r17
 a08:	e8 f4       	brcc	.+58     	; 0xa44 <__simple_malloc+0x9a>
 a0a:	da 82       	std	Y+2, r13	; 0x02
 a0c:	c9 82       	std	Y+1, r12	; 0x01
 a0e:	ce 01       	movw	r24, r28
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	29 d1       	rcall	.+594    	; 0xc66 <__expand_heap>
 a14:	00 97       	sbiw	r24, 0x00	; 0
 a16:	19 f4       	brne	.+6      	; 0xa1e <__simple_malloc+0x74>
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	2c c0       	rjmp	.+88     	; 0xa76 <__simple_malloc+0xcc>
 a1e:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <end.1483>
 a22:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <end.1483+0x1>
 a26:	82 17       	cp	r24, r18
 a28:	93 07       	cpc	r25, r19
 a2a:	21 f0       	breq	.+8      	; 0xa34 <__simple_malloc+0x8a>
 a2c:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <cur.1482+0x1>
 a30:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <cur.1482>
 a34:	29 81       	ldd	r18, Y+1	; 0x01
 a36:	3a 81       	ldd	r19, Y+2	; 0x02
 a38:	82 0f       	add	r24, r18
 a3a:	93 1f       	adc	r25, r19
 a3c:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <end.1483+0x1>
 a40:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <end.1483>
 a44:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <cur.1482>
 a48:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <cur.1482+0x1>
 a4c:	cf 01       	movw	r24, r30
 a4e:	e1 14       	cp	r14, r1
 a50:	f1 04       	cpc	r15, r1
 a52:	19 f0       	breq	.+6      	; 0xa5a <__simple_malloc+0xb0>
 a54:	02 96       	adiw	r24, 0x02	; 2
 a56:	11 83       	std	Z+1, r17	; 0x01
 a58:	00 83       	st	Z, r16
 a5a:	ce 0e       	add	r12, r30
 a5c:	df 1e       	adc	r13, r31
 a5e:	d0 92 a4 01 	sts	0x01A4, r13	; 0x8001a4 <cur.1482+0x1>
 a62:	c0 92 a3 01 	sts	0x01A3, r12	; 0x8001a3 <cur.1482>
 a66:	07 c0       	rjmp	.+14     	; 0xa76 <__simple_malloc+0xcc>
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	09 f0       	breq	.+2      	; 0xa6e <__simple_malloc+0xc4>
 a6c:	af cf       	rjmp	.-162    	; 0x9cc <__simple_malloc+0x22>
 a6e:	7c 01       	movw	r14, r24
 a70:	01 e0       	ldi	r16, 0x01	; 1
 a72:	10 e0       	ldi	r17, 0x00	; 0
 a74:	ba cf       	rjmp	.-140    	; 0x9ea <__simple_malloc+0x40>
 a76:	22 96       	adiw	r28, 0x02	; 2
 a78:	e8 e0       	ldi	r30, 0x08	; 8
 a7a:	dc c3       	rjmp	.+1976   	; 0x1234 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

00001672 <_Exit>:
    1672:	b0 d5       	rcall	.+2912   	; 0x21d4 <__TEXT_REGION_LENGTH__+0x1d4>

Disassembly of section .text.__expand_heap:

00000c66 <__expand_heap>:
 c66:	fc 01       	movw	r30, r24
 c68:	40 81       	ld	r20, Z
 c6a:	51 81       	ldd	r21, Z+1	; 0x01
 c6c:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <__brkval>
 c70:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <__brkval+0x1>
 c74:	89 2b       	or	r24, r25
 c76:	41 f4       	brne	.+16     	; 0xc88 <__expand_heap+0x22>
 c78:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__malloc_heap_start>
 c7c:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__malloc_heap_start+0x1>
 c80:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <__brkval+0x1>
 c84:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <__brkval>
 c88:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__malloc_heap_end>
 c8c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__malloc_heap_end+0x1>
 c90:	00 97       	sbiw	r24, 0x00	; 0
 c92:	19 f4       	brne	.+6      	; 0xc9a <__expand_heap+0x34>
 c94:	8d b7       	in	r24, 0x3d	; 61
 c96:	9e b7       	in	r25, 0x3e	; 62
 c98:	80 97       	sbiw	r24, 0x20	; 32
 c9a:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
 c9e:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
 ca2:	28 17       	cp	r18, r24
 ca4:	39 07       	cpc	r19, r25
 ca6:	48 f0       	brcs	.+18     	; 0xcba <__expand_heap+0x54>
 ca8:	8c e0       	ldi	r24, 0x0C	; 12
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <__errno_val+0x1>
 cb0:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <__errno_val>
 cb4:	80 e0       	ldi	r24, 0x00	; 0
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	08 95       	ret
 cba:	82 1b       	sub	r24, r18
 cbc:	93 0b       	sbc	r25, r19
 cbe:	84 17       	cp	r24, r20
 cc0:	95 07       	cpc	r25, r21
 cc2:	90 f3       	brcs	.-28     	; 0xca8 <__expand_heap+0x42>
 cc4:	42 0f       	add	r20, r18
 cc6:	53 1f       	adc	r21, r19
 cc8:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <__brkval+0x1>
 ccc:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <__brkval>
 cd0:	c9 01       	movw	r24, r18
 cd2:	08 95       	ret

Disassembly of section .text.avrlibc:

00001484 <eeprom_read_block>:
    1484:	ba 01       	movw	r22, r20
    1486:	a9 01       	movw	r20, r18
    1488:	dc 01       	movw	r26, r24
    148a:	cb 01       	movw	r24, r22

0000148c <eeprom_read_blraw>:
    148c:	fc 01       	movw	r30, r24
    148e:	f9 99       	sbic	0x1f, 1	; 31
    1490:	fe cf       	rjmp	.-4      	; 0x148e <eeprom_read_blraw+0x2>
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <eeprom_read_blraw+0x14>
    1494:	f2 bd       	out	0x22, r31	; 34
    1496:	e1 bd       	out	0x21, r30	; 33
    1498:	f8 9a       	sbi	0x1f, 0	; 31
    149a:	31 96       	adiw	r30, 0x01	; 1
    149c:	00 b4       	in	r0, 0x20	; 32
    149e:	0d 92       	st	X+, r0
    14a0:	41 50       	subi	r20, 0x01	; 1
    14a2:	50 40       	sbci	r21, 0x00	; 0
    14a4:	b8 f7       	brcc	.-18     	; 0x1494 <eeprom_read_blraw+0x8>
    14a6:	08 95       	ret

Disassembly of section .text.avrlibc:

000015b0 <eeprom_read_byte>:
    15b0:	cb 01       	movw	r24, r22
    15b2:	f9 99       	sbic	0x1f, 1	; 31
    15b4:	fe cf       	rjmp	.-4      	; 0x15b2 <eeprom_read_byte+0x2>
    15b6:	92 bd       	out	0x22, r25	; 34
    15b8:	81 bd       	out	0x21, r24	; 33
    15ba:	f8 9a       	sbi	0x1f, 0	; 31
    15bc:	99 27       	eor	r25, r25
    15be:	80 b5       	in	r24, 0x20	; 32
    15c0:	08 95       	ret

Disassembly of section .text.avrlibc:

00001612 <eeprom_read_word>:
    1612:	cb 01       	movw	r24, r22
    1614:	a8 e1       	ldi	r26, 0x18	; 24
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	42 e0       	ldi	r20, 0x02	; 2
    161a:	50 e0       	ldi	r21, 0x00	; 0
    161c:	37 cf       	rjmp	.-402    	; 0x148c <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000128a <eeprom_write_block>:
    128a:	cf 92       	push	r12
    128c:	df 92       	push	r13
    128e:	ef 92       	push	r14
    1290:	6b 01       	movw	r12, r22
    1292:	e8 2e       	mov	r14, r24
    1294:	ca 01       	movw	r24, r20
    1296:	42 2f       	mov	r20, r18
    1298:	73 2f       	mov	r23, r19
    129a:	09 c0       	rjmp	.+18     	; 0x12ae <eeprom_write_block+0x24>
    129c:	f6 01       	movw	r30, r12
    129e:	5e 2d       	mov	r21, r14
    12a0:	be d1       	rcall	.+892    	; 0x161e <__xload_1>
    12a2:	26 2f       	mov	r18, r22
    12a4:	21 d1       	rcall	.+578    	; 0x14e8 <eeprom_write_r18>
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	c3 1a       	sub	r12, r19
    12aa:	d3 0a       	sbc	r13, r19
    12ac:	e3 0a       	sbc	r14, r19
    12ae:	41 50       	subi	r20, 0x01	; 1
    12b0:	70 40       	sbci	r23, 0x00	; 0
    12b2:	a0 f7       	brcc	.-24     	; 0x129c <eeprom_write_block+0x12>
    12b4:	ef 90       	pop	r14
    12b6:	df 90       	pop	r13
    12b8:	cf 90       	pop	r12
    12ba:	08 95       	ret

Disassembly of section .text.avrlibc:

000014e6 <eeprom_write_byte>:
    14e6:	26 2f       	mov	r18, r22

000014e8 <eeprom_write_r18>:
    14e8:	f9 99       	sbic	0x1f, 1	; 31
    14ea:	fe cf       	rjmp	.-4      	; 0x14e8 <eeprom_write_r18>
    14ec:	1f ba       	out	0x1f, r1	; 31
    14ee:	92 bd       	out	0x22, r25	; 34
    14f0:	81 bd       	out	0x21, r24	; 33
    14f2:	20 bd       	out	0x20, r18	; 32
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	fa 9a       	sbi	0x1f, 2	; 31
    14fa:	f9 9a       	sbi	0x1f, 1	; 31
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	08 95       	ret

Disassembly of section .text.avrlibc:

00001660 <eeprom_write_word>:
    1660:	42 df       	rcall	.-380    	; 0x14e6 <eeprom_write_byte>
    1662:	27 2f       	mov	r18, r23
    1664:	41 cf       	rjmp	.-382    	; 0x14e8 <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

0000117c <__prologue_saves__>:
    117c:	2f 92       	push	r2
    117e:	3f 92       	push	r3
    1180:	4f 92       	push	r4
    1182:	5f 92       	push	r5
    1184:	6f 92       	push	r6
    1186:	7f 92       	push	r7
    1188:	8f 92       	push	r8
    118a:	9f 92       	push	r9
    118c:	af 92       	push	r10
    118e:	bf 92       	push	r11
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	ca 1b       	sub	r28, r26
    11a6:	db 0b       	sbc	r29, r27
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00001220 <__epilogue_restores__>:
    1220:	2a 88       	ldd	r2, Y+18	; 0x12
    1222:	39 88       	ldd	r3, Y+17	; 0x11
    1224:	48 88       	ldd	r4, Y+16	; 0x10
    1226:	5f 84       	ldd	r5, Y+15	; 0x0f
    1228:	6e 84       	ldd	r6, Y+14	; 0x0e
    122a:	7d 84       	ldd	r7, Y+13	; 0x0d
    122c:	8c 84       	ldd	r8, Y+12	; 0x0c
    122e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1230:	aa 84       	ldd	r10, Y+10	; 0x0a
    1232:	b9 84       	ldd	r11, Y+9	; 0x09
    1234:	c8 84       	ldd	r12, Y+8	; 0x08
    1236:	df 80       	ldd	r13, Y+7	; 0x07
    1238:	ee 80       	ldd	r14, Y+6	; 0x06
    123a:	fd 80       	ldd	r15, Y+5	; 0x05
    123c:	0c 81       	ldd	r16, Y+4	; 0x04
    123e:	1b 81       	ldd	r17, Y+3	; 0x03
    1240:	aa 81       	ldd	r26, Y+2	; 0x02
    1242:	b9 81       	ldd	r27, Y+1	; 0x01
    1244:	ce 0f       	add	r28, r30
    1246:	d1 1d       	adc	r29, r1
    1248:	0f b6       	in	r0, 0x3f	; 63
    124a:	f8 94       	cli
    124c:	de bf       	out	0x3e, r29	; 62
    124e:	0f be       	out	0x3f, r0	; 63
    1250:	cd bf       	out	0x3d, r28	; 61
    1252:	ed 01       	movw	r28, r26
    1254:	08 95       	ret

Disassembly of section .text.libgcc:

0000161e <__xload_1>:
    161e:	57 fd       	sbrc	r21, 7
    1620:	60 81       	ld	r22, Z
    1622:	57 ff       	sbrs	r21, 7
    1624:	64 91       	lpm	r22, Z
    1626:	08 95       	ret
