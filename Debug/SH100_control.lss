
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048c  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800100  00800100  0000048c  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000004bb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018be  00000000  00000000  00000589  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000851  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005c6  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000272  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  0000301e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000325a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  000003ee  000003ee  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000006  000003e8  000003e8  0000047c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MIDI_IsStatusWord 00000008  000003e0  000003e0  00000474  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MIDI_IsSysRealTime 0000000c  000003d4  000003d4  00000468  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.MIDI_GetStatusType 00000040  00000344  00000344  000003d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.MIDI_ParserTask 000000f6  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.state    00000001  00800122  00800122  0000048c  2**0
                  ALLOC
 21 .bss.isSecondDataWord 00000001  00800123  00800123  0000048c  2**0
                  ALLOC
 22 .bss.currentStatusType 00000001  00800124  00800124  0000048c  2**0
                  ALLOC
 23 .bss.currentStatus 00000001  00800125  00800125  0000048c  2**0
                  ALLOC
 24 .text.__vector_18 00000064  0000028e  0000028e  00000322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.usart_pop_word 00000034  00000384  00000384  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.isRxBufferNotEmpty 0000000e  000003b8  000003b8  0000044c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__vector_20 00000052  000002f2  000002f2  00000386  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_fini 00000002  000003f0  000003f0  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_funcs_on_exit 00000002  000003f2  000003f2  00000486  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__dummy_simulator_exit 00000002  000003f4  000003f4  00000488  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.exit    0000000e  000003c6  000003c6  0000045a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text._Exit   00000002  000003f6  000003f6  0000048a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	a3 c0       	rjmp	.+326    	; 0x148 <__ctors_end>
   2:	f5 c1       	rjmp	.+1002   	; 0x3ee <__bad_interrupt>
   4:	f4 c1       	rjmp	.+1000   	; 0x3ee <__bad_interrupt>
   6:	f3 c1       	rjmp	.+998    	; 0x3ee <__bad_interrupt>
   8:	f2 c1       	rjmp	.+996    	; 0x3ee <__bad_interrupt>
   a:	f1 c1       	rjmp	.+994    	; 0x3ee <__bad_interrupt>
   c:	f0 c1       	rjmp	.+992    	; 0x3ee <__bad_interrupt>
   e:	ef c1       	rjmp	.+990    	; 0x3ee <__bad_interrupt>
  10:	ee c1       	rjmp	.+988    	; 0x3ee <__bad_interrupt>
  12:	ed c1       	rjmp	.+986    	; 0x3ee <__bad_interrupt>
  14:	ec c1       	rjmp	.+984    	; 0x3ee <__bad_interrupt>
  16:	eb c1       	rjmp	.+982    	; 0x3ee <__bad_interrupt>
  18:	ea c1       	rjmp	.+980    	; 0x3ee <__bad_interrupt>
  1a:	e9 c1       	rjmp	.+978    	; 0x3ee <__bad_interrupt>
  1c:	e8 c1       	rjmp	.+976    	; 0x3ee <__bad_interrupt>
  1e:	e7 c1       	rjmp	.+974    	; 0x3ee <__bad_interrupt>
  20:	e6 c1       	rjmp	.+972    	; 0x3ee <__bad_interrupt>
  22:	e5 c1       	rjmp	.+970    	; 0x3ee <__bad_interrupt>
  24:	34 c1       	rjmp	.+616    	; 0x28e <__vector_18>
  26:	e3 c1       	rjmp	.+966    	; 0x3ee <__bad_interrupt>
  28:	64 c1       	rjmp	.+712    	; 0x2f2 <__vector_20>
  2a:	e1 c1       	rjmp	.+962    	; 0x3ee <__bad_interrupt>
  2c:	e0 c1       	rjmp	.+960    	; 0x3ee <__bad_interrupt>
  2e:	df c1       	rjmp	.+958    	; 0x3ee <__bad_interrupt>
  30:	de c1       	rjmp	.+956    	; 0x3ee <__bad_interrupt>
  32:	dd c1       	rjmp	.+954    	; 0x3ee <__bad_interrupt>
  34:	91 c1       	rjmp	.+802    	; 0x358 <MIDI_GetStatusType+0x14>
  36:	a2 c1       	rjmp	.+836    	; 0x37c <MIDI_GetStatusType+0x38>
  38:	a1 c1       	rjmp	.+834    	; 0x37c <MIDI_GetStatusType+0x38>
  3a:	a0 c1       	rjmp	.+832    	; 0x37c <MIDI_GetStatusType+0x38>
  3c:	9f c1       	rjmp	.+830    	; 0x37c <MIDI_GetStatusType+0x38>
  3e:	9e c1       	rjmp	.+828    	; 0x37c <MIDI_GetStatusType+0x38>
  40:	9d c1       	rjmp	.+826    	; 0x37c <MIDI_GetStatusType+0x38>
  42:	9c c1       	rjmp	.+824    	; 0x37c <MIDI_GetStatusType+0x38>
  44:	9b c1       	rjmp	.+822    	; 0x37c <MIDI_GetStatusType+0x38>
  46:	9a c1       	rjmp	.+820    	; 0x37c <MIDI_GetStatusType+0x38>
  48:	99 c1       	rjmp	.+818    	; 0x37c <MIDI_GetStatusType+0x38>
  4a:	98 c1       	rjmp	.+816    	; 0x37c <MIDI_GetStatusType+0x38>
  4c:	97 c1       	rjmp	.+814    	; 0x37c <MIDI_GetStatusType+0x38>
  4e:	96 c1       	rjmp	.+812    	; 0x37c <MIDI_GetStatusType+0x38>
  50:	95 c1       	rjmp	.+810    	; 0x37c <MIDI_GetStatusType+0x38>
  52:	94 c1       	rjmp	.+808    	; 0x37c <MIDI_GetStatusType+0x38>
  54:	81 c1       	rjmp	.+770    	; 0x358 <MIDI_GetStatusType+0x14>
  56:	92 c1       	rjmp	.+804    	; 0x37c <MIDI_GetStatusType+0x38>
  58:	91 c1       	rjmp	.+802    	; 0x37c <MIDI_GetStatusType+0x38>
  5a:	90 c1       	rjmp	.+800    	; 0x37c <MIDI_GetStatusType+0x38>
  5c:	8f c1       	rjmp	.+798    	; 0x37c <MIDI_GetStatusType+0x38>
  5e:	8e c1       	rjmp	.+796    	; 0x37c <MIDI_GetStatusType+0x38>
  60:	8d c1       	rjmp	.+794    	; 0x37c <MIDI_GetStatusType+0x38>
  62:	8c c1       	rjmp	.+792    	; 0x37c <MIDI_GetStatusType+0x38>
  64:	8b c1       	rjmp	.+790    	; 0x37c <MIDI_GetStatusType+0x38>
  66:	8a c1       	rjmp	.+788    	; 0x37c <MIDI_GetStatusType+0x38>
  68:	89 c1       	rjmp	.+786    	; 0x37c <MIDI_GetStatusType+0x38>
  6a:	88 c1       	rjmp	.+784    	; 0x37c <MIDI_GetStatusType+0x38>
  6c:	87 c1       	rjmp	.+782    	; 0x37c <MIDI_GetStatusType+0x38>
  6e:	86 c1       	rjmp	.+780    	; 0x37c <MIDI_GetStatusType+0x38>
  70:	85 c1       	rjmp	.+778    	; 0x37c <MIDI_GetStatusType+0x38>
  72:	84 c1       	rjmp	.+776    	; 0x37c <MIDI_GetStatusType+0x38>
  74:	71 c1       	rjmp	.+738    	; 0x358 <MIDI_GetStatusType+0x14>
  76:	82 c1       	rjmp	.+772    	; 0x37c <MIDI_GetStatusType+0x38>
  78:	81 c1       	rjmp	.+770    	; 0x37c <MIDI_GetStatusType+0x38>
  7a:	80 c1       	rjmp	.+768    	; 0x37c <MIDI_GetStatusType+0x38>
  7c:	7f c1       	rjmp	.+766    	; 0x37c <MIDI_GetStatusType+0x38>
  7e:	7e c1       	rjmp	.+764    	; 0x37c <MIDI_GetStatusType+0x38>
  80:	7d c1       	rjmp	.+762    	; 0x37c <MIDI_GetStatusType+0x38>
  82:	7c c1       	rjmp	.+760    	; 0x37c <MIDI_GetStatusType+0x38>
  84:	7b c1       	rjmp	.+758    	; 0x37c <MIDI_GetStatusType+0x38>
  86:	7a c1       	rjmp	.+756    	; 0x37c <MIDI_GetStatusType+0x38>
  88:	79 c1       	rjmp	.+754    	; 0x37c <MIDI_GetStatusType+0x38>
  8a:	78 c1       	rjmp	.+752    	; 0x37c <MIDI_GetStatusType+0x38>
  8c:	77 c1       	rjmp	.+750    	; 0x37c <MIDI_GetStatusType+0x38>
  8e:	76 c1       	rjmp	.+748    	; 0x37c <MIDI_GetStatusType+0x38>
  90:	75 c1       	rjmp	.+746    	; 0x37c <MIDI_GetStatusType+0x38>
  92:	74 c1       	rjmp	.+744    	; 0x37c <MIDI_GetStatusType+0x38>
  94:	61 c1       	rjmp	.+706    	; 0x358 <MIDI_GetStatusType+0x14>
  96:	72 c1       	rjmp	.+740    	; 0x37c <MIDI_GetStatusType+0x38>
  98:	71 c1       	rjmp	.+738    	; 0x37c <MIDI_GetStatusType+0x38>
  9a:	70 c1       	rjmp	.+736    	; 0x37c <MIDI_GetStatusType+0x38>
  9c:	6f c1       	rjmp	.+734    	; 0x37c <MIDI_GetStatusType+0x38>
  9e:	6e c1       	rjmp	.+732    	; 0x37c <MIDI_GetStatusType+0x38>
  a0:	6d c1       	rjmp	.+730    	; 0x37c <MIDI_GetStatusType+0x38>
  a2:	6c c1       	rjmp	.+728    	; 0x37c <MIDI_GetStatusType+0x38>
  a4:	6b c1       	rjmp	.+726    	; 0x37c <MIDI_GetStatusType+0x38>
  a6:	6a c1       	rjmp	.+724    	; 0x37c <MIDI_GetStatusType+0x38>
  a8:	69 c1       	rjmp	.+722    	; 0x37c <MIDI_GetStatusType+0x38>
  aa:	68 c1       	rjmp	.+720    	; 0x37c <MIDI_GetStatusType+0x38>
  ac:	67 c1       	rjmp	.+718    	; 0x37c <MIDI_GetStatusType+0x38>
  ae:	66 c1       	rjmp	.+716    	; 0x37c <MIDI_GetStatusType+0x38>
  b0:	65 c1       	rjmp	.+714    	; 0x37c <MIDI_GetStatusType+0x38>
  b2:	64 c1       	rjmp	.+712    	; 0x37c <MIDI_GetStatusType+0x38>
  b4:	65 c1       	rjmp	.+714    	; 0x380 <MIDI_GetStatusType+0x3c>
  b6:	62 c1       	rjmp	.+708    	; 0x37c <MIDI_GetStatusType+0x38>
  b8:	61 c1       	rjmp	.+706    	; 0x37c <MIDI_GetStatusType+0x38>
  ba:	60 c1       	rjmp	.+704    	; 0x37c <MIDI_GetStatusType+0x38>
  bc:	5f c1       	rjmp	.+702    	; 0x37c <MIDI_GetStatusType+0x38>
  be:	5e c1       	rjmp	.+700    	; 0x37c <MIDI_GetStatusType+0x38>
  c0:	5d c1       	rjmp	.+698    	; 0x37c <MIDI_GetStatusType+0x38>
  c2:	5c c1       	rjmp	.+696    	; 0x37c <MIDI_GetStatusType+0x38>
  c4:	5b c1       	rjmp	.+694    	; 0x37c <MIDI_GetStatusType+0x38>
  c6:	5a c1       	rjmp	.+692    	; 0x37c <MIDI_GetStatusType+0x38>
  c8:	59 c1       	rjmp	.+690    	; 0x37c <MIDI_GetStatusType+0x38>
  ca:	58 c1       	rjmp	.+688    	; 0x37c <MIDI_GetStatusType+0x38>
  cc:	57 c1       	rjmp	.+686    	; 0x37c <MIDI_GetStatusType+0x38>
  ce:	56 c1       	rjmp	.+684    	; 0x37c <MIDI_GetStatusType+0x38>
  d0:	55 c1       	rjmp	.+682    	; 0x37c <MIDI_GetStatusType+0x38>
  d2:	54 c1       	rjmp	.+680    	; 0x37c <MIDI_GetStatusType+0x38>
  d4:	55 c1       	rjmp	.+682    	; 0x380 <MIDI_GetStatusType+0x3c>
  d6:	52 c1       	rjmp	.+676    	; 0x37c <MIDI_GetStatusType+0x38>
  d8:	51 c1       	rjmp	.+674    	; 0x37c <MIDI_GetStatusType+0x38>
  da:	50 c1       	rjmp	.+672    	; 0x37c <MIDI_GetStatusType+0x38>
  dc:	4f c1       	rjmp	.+670    	; 0x37c <MIDI_GetStatusType+0x38>
  de:	4e c1       	rjmp	.+668    	; 0x37c <MIDI_GetStatusType+0x38>
  e0:	4d c1       	rjmp	.+666    	; 0x37c <MIDI_GetStatusType+0x38>
  e2:	4c c1       	rjmp	.+664    	; 0x37c <MIDI_GetStatusType+0x38>
  e4:	4b c1       	rjmp	.+662    	; 0x37c <MIDI_GetStatusType+0x38>
  e6:	4a c1       	rjmp	.+660    	; 0x37c <MIDI_GetStatusType+0x38>
  e8:	49 c1       	rjmp	.+658    	; 0x37c <MIDI_GetStatusType+0x38>
  ea:	48 c1       	rjmp	.+656    	; 0x37c <MIDI_GetStatusType+0x38>
  ec:	47 c1       	rjmp	.+654    	; 0x37c <MIDI_GetStatusType+0x38>
  ee:	46 c1       	rjmp	.+652    	; 0x37c <MIDI_GetStatusType+0x38>
  f0:	45 c1       	rjmp	.+650    	; 0x37c <MIDI_GetStatusType+0x38>
  f2:	44 c1       	rjmp	.+648    	; 0x37c <MIDI_GetStatusType+0x38>
  f4:	31 c1       	rjmp	.+610    	; 0x358 <MIDI_GetStatusType+0x14>
  f6:	42 c1       	rjmp	.+644    	; 0x37c <MIDI_GetStatusType+0x38>
  f8:	41 c1       	rjmp	.+642    	; 0x37c <MIDI_GetStatusType+0x38>
  fa:	40 c1       	rjmp	.+640    	; 0x37c <MIDI_GetStatusType+0x38>
  fc:	3f c1       	rjmp	.+638    	; 0x37c <MIDI_GetStatusType+0x38>
  fe:	3e c1       	rjmp	.+636    	; 0x37c <MIDI_GetStatusType+0x38>
 100:	3d c1       	rjmp	.+634    	; 0x37c <MIDI_GetStatusType+0x38>
 102:	3c c1       	rjmp	.+632    	; 0x37c <MIDI_GetStatusType+0x38>
 104:	3b c1       	rjmp	.+630    	; 0x37c <MIDI_GetStatusType+0x38>
 106:	3a c1       	rjmp	.+628    	; 0x37c <MIDI_GetStatusType+0x38>
 108:	39 c1       	rjmp	.+626    	; 0x37c <MIDI_GetStatusType+0x38>
 10a:	38 c1       	rjmp	.+624    	; 0x37c <MIDI_GetStatusType+0x38>
 10c:	37 c1       	rjmp	.+622    	; 0x37c <MIDI_GetStatusType+0x38>
 10e:	36 c1       	rjmp	.+620    	; 0x37c <MIDI_GetStatusType+0x38>
 110:	35 c1       	rjmp	.+618    	; 0x37c <MIDI_GetStatusType+0x38>
 112:	34 c1       	rjmp	.+616    	; 0x37c <MIDI_GetStatusType+0x38>
 114:	2f c1       	rjmp	.+606    	; 0x374 <MIDI_GetStatusType+0x30>
 116:	34 c1       	rjmp	.+616    	; 0x380 <MIDI_GetStatusType+0x3c>
 118:	1f c1       	rjmp	.+574    	; 0x358 <MIDI_GetStatusType+0x14>
 11a:	32 c1       	rjmp	.+612    	; 0x380 <MIDI_GetStatusType+0x3c>
 11c:	2f c1       	rjmp	.+606    	; 0x37c <MIDI_GetStatusType+0x38>
 11e:	2e c1       	rjmp	.+604    	; 0x37c <MIDI_GetStatusType+0x38>
 120:	2d c1       	rjmp	.+602    	; 0x37c <MIDI_GetStatusType+0x38>
 122:	2a c1       	rjmp	.+596    	; 0x378 <MIDI_GetStatusType+0x34>
 124:	1b c1       	rjmp	.+566    	; 0x35c <MIDI_GetStatusType+0x18>
 126:	2a c1       	rjmp	.+596    	; 0x37c <MIDI_GetStatusType+0x38>
 128:	1b c1       	rjmp	.+566    	; 0x360 <MIDI_GetStatusType+0x1c>
 12a:	1c c1       	rjmp	.+568    	; 0x364 <MIDI_GetStatusType+0x20>
 12c:	1d c1       	rjmp	.+570    	; 0x368 <MIDI_GetStatusType+0x24>
 12e:	26 c1       	rjmp	.+588    	; 0x37c <MIDI_GetStatusType+0x38>
 130:	1d c1       	rjmp	.+570    	; 0x36c <MIDI_GetStatusType+0x28>
 132:	1e c1       	rjmp	.+572    	; 0x370 <MIDI_GetStatusType+0x2c>
 134:	3d c0       	rjmp	.+122    	; 0x1b0 <_etext+0x18>
 136:	40 c0       	rjmp	.+128    	; 0x1b8 <_etext+0x20>
 138:	77 c0       	rjmp	.+238    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 13a:	97 c0       	rjmp	.+302    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 13c:	80 c0       	rjmp	.+256    	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 13e:	9d c0       	rjmp	.+314    	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
 140:	a0 c0       	rjmp	.+320    	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>

00000142 <.dinit>:
 142:	01 00       	.word	0x0001	; ????
 144:	01 26       	eor	r0, r17
 146:	80 00       	.word	0x0080	; ????

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	d4 e0       	ldi	r29, 0x04	; 4
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
 154:	e2 e4       	ldi	r30, 0x42	; 66
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	17 c0       	rjmp	.+46     	; 0x18a <__do_clear_bss+0x8>
 15c:	b5 91       	lpm	r27, Z+
 15e:	a5 91       	lpm	r26, Z+
 160:	35 91       	lpm	r19, Z+
 162:	25 91       	lpm	r18, Z+
 164:	05 91       	lpm	r16, Z+
 166:	07 fd       	sbrc	r16, 7
 168:	0c c0       	rjmp	.+24     	; 0x182 <__do_clear_bss>
 16a:	95 91       	lpm	r25, Z+
 16c:	85 91       	lpm	r24, Z+
 16e:	ef 01       	movw	r28, r30
 170:	f9 2f       	mov	r31, r25
 172:	e8 2f       	mov	r30, r24
 174:	05 90       	lpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	a2 17       	cp	r26, r18
 17a:	b3 07       	cpc	r27, r19
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x20>
 17e:	fe 01       	movw	r30, r28
 180:	04 c0       	rjmp	.+8      	; 0x18a <__do_clear_bss+0x8>

00000182 <__do_clear_bss>:
 182:	1d 92       	st	X+, r1
 184:	a2 17       	cp	r26, r18
 186:	b3 07       	cpc	r27, r19
 188:	e1 f7       	brne	.-8      	; 0x182 <__do_clear_bss>
 18a:	e7 34       	cpi	r30, 0x47	; 71
 18c:	f4 07       	cpc	r31, r20
 18e:	31 f7       	brne	.-52     	; 0x15c <__do_copy_data+0x8>
 190:	2b d1       	rcall	.+598    	; 0x3e8 <main>
 192:	19 c1       	rjmp	.+562    	; 0x3c6 <exit>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>

Disassembly of section .text:

000003ee <__bad_interrupt>:
 3ee:	08 ce       	rjmp	.-1008   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000003e8 <main>:

#include "midi_parser.h"

int main(void)
{
	cpu_irq_enable();
 3e8:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
 3ea:	d6 de       	rcall	.-596    	; 0x198 <__data_load_end>
 3ec:	fe cf       	rjmp	.-4      	; 0x3ea <main+0x2>

Disassembly of section .text.MIDI_IsStatusWord:

000003e0 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
 3e0:	88 1f       	adc	r24, r24
 3e2:	88 27       	eor	r24, r24
 3e4:	88 1f       	adc	r24, r24
 3e6:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

000003d4 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
 3d4:	91 e0       	ldi	r25, 0x01	; 1
 3d6:	88 3f       	cpi	r24, 0xF8	; 248
 3d8:	08 f4       	brcc	.+2      	; 0x3dc <MIDI_IsSysRealTime+0x8>
 3da:	90 e0       	ldi	r25, 0x00	; 0
}
 3dc:	89 2f       	mov	r24, r25
 3de:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000344 <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	fc 01       	movw	r30, r24
 348:	e0 58       	subi	r30, 0x80	; 128
 34a:	f1 09       	sbc	r31, r1
 34c:	e0 38       	cpi	r30, 0x80	; 128
 34e:	f1 05       	cpc	r31, r1
 350:	a8 f4       	brcc	.+42     	; 0x37c <MIDI_GetStatusType+0x38>
 352:	e6 5e       	subi	r30, 0xE6	; 230
 354:	ff 4f       	sbci	r31, 0xFF	; 255
 356:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 358:	82 e0       	ldi	r24, 0x02	; 2
 35a:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 368:	83 e0       	ldi	r24, 0x03	; 3
 36a:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 380:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 382:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

00000198 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 198:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <_end>
 19c:	8e 2f       	mov	r24, r30
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	87 30       	cpi	r24, 0x07	; 7
 1a2:	91 05       	cpc	r25, r1
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <MIDI_ParserTask+0x10>
 1a6:	72 c0       	rjmp	.+228    	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
 1a8:	fc 01       	movw	r30, r24
 1aa:	e6 56       	subi	r30, 0x66	; 102
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	09 94       	ijmp
	{
		case RESET:
		{
			state = WAIT_WORD;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
			break;
 1b6:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(isRxBufferNotEmpty())
 1b8:	ff d0       	rcall	.+510    	; 0x3b8 <isRxBufferNotEmpty>
 1ba:	88 23       	and	r24, r24
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <MIDI_ParserTask+0x28>
 1be:	66 c0       	rjmp	.+204    	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
			{
				recievedWord = usart_pop_word();
 1c0:	e1 d0       	rcall	.+450    	; 0x384 <usart_pop_word>
 1c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 1c6:	06 d1       	rcall	.+524    	; 0x3d4 <MIDI_IsSysRealTime>
 1c8:	81 11       	cpse	r24, r1
 1ca:	60 c0       	rjmp	.+192    	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
					return;
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 1cc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <recievedWord>
 1d0:	07 d1       	rcall	.+526    	; 0x3e0 <MIDI_IsStatusWord>
 1d2:	88 23       	and	r24, r24
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <MIDI_ParserTask+0x4e>
				{
					currentStatus = (MIDI_Status_t)recievedWord;	
 1d6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <recievedWord>
 1da:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <currentStatus>
					state = DISPATCH_STATUS;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
 1e4:	08 95       	ret
				}
				else
				{
					switch(currentStatusType)
 1e6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentStatusType>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	49 f0       	breq	.+18     	; 0x200 <__EEPROM_REGION_LENGTH__>
 1ee:	18 f4       	brcc	.+6      	; 0x1f6 <MIDI_ParserTask+0x5e>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	51 f0       	breq	.+20     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 1f6:	84 30       	cpi	r24, 0x04	; 4
 1f8:	59 f0       	breq	.+22     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	69 f0       	breq	.+26     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 1fe:	10 c0       	rjmp	.+32     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 200:	84 e0       	ldi	r24, 0x04	; 4
 202:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
 206:	08 95       	ret
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
 20e:	08 95       	ret
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
 216:	08 95       	ret
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
 21e:	08 95       	ret
						default: state = WAIT_WORD;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
 226:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentStatusType = MIDI_GetStatusType(currentStatus);
 228:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <currentStatus>
 22c:	8b d0       	rcall	.+278    	; 0x344 <MIDI_GetStatusType>
 22e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <currentStatusType>
			isSecondDataWord = false;
 232:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
			break;
 23c:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 23e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <isSecondDataWord>
 242:	88 23       	and	r24, r24
 244:	39 f0       	breq	.+14     	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
			{
				dataWord2 = recievedWord;
 246:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <recievedWord>
 24a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <dataWord2>
				isSecondDataWord = false;
 24e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
 252:	07 c0       	rjmp	.+14     	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
				// handle message
			}
			else
			{
				dataWord1 = recievedWord;
 254:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <recievedWord>
 258:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				isSecondDataWord = true;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isSecondDataWord>
			}
			state = WAIT_WORD;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
			break;
 268:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			dataWord1 = recievedWord;
 26a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <recievedWord>
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			// handle message
			state = WAIT_WORD;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
			break;
 278:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
			break;
 280:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentStatus = MIDI_COMM_UNDEFINED;
 282:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <currentStatus>
			state = WAIT_WORD;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <_end>
 28c:	08 95       	ret

Disassembly of section .text.__vector_18:

0000028e <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 2a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 2a4:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 2a8:	8c 71       	andi	r24, 0x1C	; 28
 2aa:	d1 f4       	brne	.+52     	; 0x2e0 <__vector_18+0x52>
	{
		rx_buffer0[rx_wr_index++] = data;
 2ac:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <rx_wr_index>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	8e 0f       	add	r24, r30
 2b4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <rx_wr_index>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e1 5f       	subi	r30, 0xF1	; 241
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 2c0:	80 31       	cpi	r24, 0x10	; 16
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <__vector_18+0x3a>
 2c4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 2c8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx_counter>
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rx_counter>
 2d2:	80 31       	cpi	r24, 0x10	; 16
 2d4:	29 f4       	brne	.+10     	; 0x2e0 <__vector_18+0x52>
		{
			rx_counter=0;
 2d6:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <rx_counter>
			rx_buffer_overflow=1;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rx_buffer_overflow>
		}
	}
}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

Disassembly of section .text.usart_pop_word:

00000384 <usart_pop_word>:

uint8_t usart_pop_word()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
 384:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rx_counter>
 388:	88 23       	and	r24, r24
 38a:	e1 f3       	breq	.-8      	; 0x384 <usart_pop_word>
	
	data = rx_buffer0[rx_rd_index++];
 38c:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <rx_rd_index>
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	9e 0f       	add	r25, r30
 394:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <rx_rd_index>
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	e1 5f       	subi	r30, 0xF1	; 241
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
 3a0:	90 31       	cpi	r25, 0x10	; 16
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <usart_pop_word+0x24>
 3a4:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <rx_rd_index>
	#endif
	
	cpu_irq_disable();
 3a8:	f8 94       	cli
	--rx_counter;
 3aa:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rx_counter>
 3ae:	91 50       	subi	r25, 0x01	; 1
 3b0:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <rx_counter>
	cpu_irq_enable();
 3b4:	78 94       	sei
	return data;
}
 3b6:	08 95       	ret

Disassembly of section .text.isRxBufferNotEmpty:

000003b8 <isRxBufferNotEmpty>:

bool isRxBufferNotEmpty()
{
	return (bool)rx_counter;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <rx_counter>
 3be:	91 11       	cpse	r25, r1
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <isRxBufferNotEmpty+0xc>
 3c2:	80 e0       	ldi	r24, 0x00	; 0
}
 3c4:	08 95       	ret

Disassembly of section .text.__vector_20:

000002f2 <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	8f 93       	push	r24
 2fe:	ef 93       	push	r30
 300:	ff 93       	push	r31
	if (tx_counter)
 302:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tx_counter>
 306:	88 23       	and	r24, r24
 308:	a9 f0       	breq	.+42     	; 0x334 <__vector_20+0x42>
	{
		--tx_counter;
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 310:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <tx_rd_index>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	8e 0f       	add	r24, r30
 318:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <tx_rd_index>
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ea 5f       	subi	r30, 0xFA	; 250
 320:	fe 4f       	sbci	r31, 0xFE	; 254
 322:	80 81       	ld	r24, Z
 324:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 328:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <tx_rd_index>
 32c:	88 30       	cpi	r24, 0x08	; 8
 32e:	11 f4       	brne	.+4      	; 0x334 <__vector_20+0x42>
 330:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <tx_rd_index>
		#endif
	}
}
 334:	ff 91       	pop	r31
 336:	ef 91       	pop	r30
 338:	8f 91       	pop	r24
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

Disassembly of section .text.__dummy_fini:

000003f0 <_fini>:
 3f0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000003f2 <__funcs_on_exit>:
 3f2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000003f4 <__simulator_exit>:
 3f4:	08 95       	ret

Disassembly of section .text.exit:

000003c6 <exit>:
 3c6:	ec 01       	movw	r28, r24
 3c8:	14 d0       	rcall	.+40     	; 0x3f2 <__funcs_on_exit>
 3ca:	12 d0       	rcall	.+36     	; 0x3f0 <_fini>
 3cc:	ce 01       	movw	r24, r28
 3ce:	12 d0       	rcall	.+36     	; 0x3f4 <__simulator_exit>
 3d0:	ce 01       	movw	r24, r28
 3d2:	11 d0       	rcall	.+34     	; 0x3f6 <_Exit>

Disassembly of section .text._Exit:

000003f6 <_Exit>:
 3f6:	ce de       	rcall	.-612    	; 0x194 <_exit>
