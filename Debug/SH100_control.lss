
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001650  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001d8  00000000  00000000  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800100  00800100  00001650  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001650  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000007e  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000338  00000000  00000000  00001700  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005fda  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001064  00000000  00000000  00007a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b1f  00000000  00000000  00008a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000060c  00000000  00000000  0000a598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000629  00000000  00000000  0000aba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000161c  00000000  00000000  0000b1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000220  00000000  00000000  0000c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00001494  00001494  00001628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000036  00001080  00001080  00001214  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_16 000001a4  000003bc  000003bc  00000550  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_4 00000046  00000ec2  00000ec2  00001056  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.leaveDefSettings_cnt 00000001  008001a8  008001a8  00001650  2**0
                  ALLOC
 19 .bss.swProgrammingMode_cnt 00000001  008001a9  008001a9  00001650  2**0
                  ALLOC
 20 .data.protectionInterval_cnt 00000001  008001aa  000014ba  0000164e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.MIDI_IsStatusWord 00000008  00001452  00001452  000015e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.MIDI_IsSysRealTime 0000000c  00001402  00001402  00001596  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.MIDI_GetStatusType 00000040  00000f90  00000f90  00001124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.isEqualCommands 00000014  0000139a  0000139a  0000152e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.loadCommSetFromMemory 0000007a  00000a5c  00000a5c  00000bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.setMidiLeds 00000052  00000d38  00000d38  00000ecc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MIDICTRL_Init 00000028  000011e4  000011e4  00001378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MIDICTRL_MidiMode 00000006  0000145a  0000145a  000015ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MIDICTRL_SetProgrammingButton 0000002e  00001188  00001188  0000131c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.MIDICTRL_SwitchMode 0000004c  00000e2a  00000e2a  00000fbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.MIDICTRL_SetMidiChannel 00000006  00001460  00001460  000015f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.MIDICTRL_OmniModeEn 00000006  00001466  00001466  000015fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.MIDICTRL_MuteCommEn 00000006  0000146c  0000146c  00001600  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.programmBtn 0000004c  00000e76  00000e76  0000100a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.MIDICTRL_StoreUserCommands 00000036  000010b6  000010b6  0000124a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_DiscardCommands 00000014  000013ae  000013ae  00001542  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.indicateMidiError 0000002e  000011b6  000011b6  0000134a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MIDICTRL_HandleCommand 0000014e  0000083c  0000083c  000009d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__vector_13 0000005c  00000cdc  00000cdc  00000e70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .data.defaultCommands 00000018  00800186  0000149e  00001632  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 41 .progmemx.data.muteCommand 00000004  000001d8  000001d8  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 42 .bss.channelNum 00000001  008001ab  008001ab  00001650  2**0
                  ALLOC
 43 .bss.muteCommandEnabled 00000001  008001ac  008001ac  00001650  2**0
                  ALLOC
 44 .bss.omniModeEnabled 00000001  008001ad  008001ad  00001650  2**0
                  ALLOC
 45 .text.handleRealTimeStatus 00000004  00001490  00001490  00001624  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.MIDI_ParserTask 00000156  000006e6  000006e6  0000087a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.MIDI_SetRetranslateState 00000006  00001472  00001472  00001606  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .bss.state    00000001  008001ae  008001ae  00001650  2**0
                  ALLOC
 49 .data.retranslate 00000001  008001af  000014bb  0000164f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 50 .text.setChannelLeds 00000022  000012c8  000012c8  0000145c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.SH100CTRL_SetAmpLeds 00000026  00001234  00001234  000013c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.SH100CTRL_SwChannel 0000000a  0000143e  0000143e  000015d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.SH100CTRL_SetLoop 00000018  00001322  00001322  000014b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.SH100CTRL_SetAB 00000024  00001280  00001280  00001414  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.SH100CTRL_SwLoop 0000000c  0000140e  0000140e  000015a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.SH100CTRL_SwAB 0000000c  0000141a  0000141a  000015ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.SH100CTRL_MuteAmp 00000006  00001478  00001478  0000160c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.SH100CTRL_UnmuteAmp 0000000c  00001426  00001426  000015ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.SH100CTRL_SetAmpState 00000040  00000fd0  00000fd0  00001164  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SH100CTRL_Init 00000062  00000c1c  00000c1c  00000db0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.SH100CTRL_StoreAmpState 0000001c  000012ea  000012ea  0000147e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100CTRL_CheckOutputJacks 0000005e  00000c7e  00000c7e  00000e12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SH100HW_Init 00000074  00000ad6  00000ad6  00000c6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SH100HW_GetButtonsState 00000012  000013c2  000013c2  00001556  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SH100HW_SwitchCh 0000004e  00000ddc  00000ddc  00000f70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SH100HW_LoopEn 00000018  0000133a  0000133a  000014ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SH100HW_SetAB 00000006  0000147e  0000147e  00001612  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SH100HW_SetNewLedState 00000038  00001010  00001010  000011a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SH100HW_SetPreviousLedState 00000028  0000120c  0000120c  000013a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SH100HW_GetOutputJacks 00000018  00001352  00001352  000014e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SH100HW_SetPAState 00000026  0000125a  0000125a  000013ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SH100HW_SetOutputMode 00000006  00001484  00001484  00001618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.readButtonsState 00000186  00000560  00000560  000006f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.writeShiftRegs 00000042  00000f4e  00000f4e  000010e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SH100HW_MainTask 000001e0  000001dc  000001dc  00000370  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .bss.fastBlink 00000001  008001b0  008001b0  00001650  2**0
                  ALLOC
 77 .bss.slowBlink 00000001  008001b1  008001b1  00001650  2**0
                  ALLOC
 78 .bss.blinkCounter 00000001  008001b2  008001b2  00001650  2**0
                  ALLOC
 79 .text.UART_init 00000018  0000136a  0000136a  000014fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__vector_18 00000064  00000bb8  00000bb8  00000d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.UART_PopWord 00000034  00001122  00001122  000012b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.UART_RxBufferNotEmpty 0000000e  000013e6  000013e6  0000157a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.__vector_20 00000052  00000d8a  00000d8a  00000f1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.UART_PushWord 00000046  00000f08  00000f08  0000109c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.libgcc  00000018  00001382  00001382  00001516  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.__dummy_fini 00000002  00001496  00001496  0000162a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__dummy_funcs_on_exit 00000002  00001498  00001498  0000162c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__dummy_simulator_exit 00000002  0000149a  0000149a  0000162e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.exit    0000000e  000013f4  000013f4  00001588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.__simple_malloc 000000d2  0000098a  0000098a  00000b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .bss.end.1483 00000002  0080019e  0080019e  00001650  2**0
                  ALLOC
 92 .bss.cur.1482 00000002  008001a0  008001a0  00001650  2**0
                  ALLOC
 93 .text._Exit   00000002  0000149c  0000149c  00001630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__expand_heap 0000006e  00000b4a  00000b4a  00000cde  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .bss.__brkval 00000002  008001a2  008001a2  00001650  2**0
                  ALLOC
 96 .data.__malloc_heap_end 00000002  008001a4  000014b6  0000164a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 97 .data.__malloc_heap_start 00000002  008001a6  000014b8  0000164c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 98 .text.avrlibc 00000024  000012a4  000012a4  00001438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.avrlibc 00000012  000013d4  000013d4  00001568  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.avrlibc 0000000c  00001432  00001432  000015c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text.avrlibc 00000032  00001156  00001156  000012ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.avrlibc 0000001c  00001306  00001306  0000149a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.avrlibc 00000006  0000148a  0000148a  0000161e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.libgcc.prologue 00000038  00001048  00001048  000011dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.libgcc.prologue 00000036  000010ec  000010ec  00001280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.libgcc  0000000a  00001448  00001448  000015dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	c3 c0       	rjmp	.+390    	; 0x188 <__ctors_end>
   2:	48 ca       	rjmp	.-2928   	; 0xfffff494 <__eeprom_end+0xff7ef494>
   4:	47 ca       	rjmp	.-2930   	; 0xfffff494 <__eeprom_end+0xff7ef494>
   6:	46 ca       	rjmp	.-2932   	; 0xfffff494 <__eeprom_end+0xff7ef494>
   8:	5c c7       	rjmp	.+3768   	; 0xec2 <__vector_4>
   a:	44 ca       	rjmp	.-2936   	; 0xfffff494 <__eeprom_end+0xff7ef494>
   c:	43 ca       	rjmp	.-2938   	; 0xfffff494 <__eeprom_end+0xff7ef494>
   e:	42 ca       	rjmp	.-2940   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  10:	41 ca       	rjmp	.-2942   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  12:	40 ca       	rjmp	.-2944   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  14:	3f ca       	rjmp	.-2946   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  16:	3e ca       	rjmp	.-2948   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  18:	3d ca       	rjmp	.-2950   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  1a:	60 c6       	rjmp	.+3264   	; 0xcdc <__vector_13>
  1c:	3b ca       	rjmp	.-2954   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  1e:	3a ca       	rjmp	.-2956   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  20:	cd c1       	rjmp	.+922    	; 0x3bc <__vector_16>
  22:	38 ca       	rjmp	.-2960   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  24:	c9 c5       	rjmp	.+2962   	; 0xbb8 <__vector_18>
  26:	36 ca       	rjmp	.-2964   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  28:	b0 c6       	rjmp	.+3424   	; 0xd8a <__vector_20>
  2a:	34 ca       	rjmp	.-2968   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  2c:	33 ca       	rjmp	.-2970   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  2e:	32 ca       	rjmp	.-2972   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  30:	31 ca       	rjmp	.-2974   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  32:	30 ca       	rjmp	.-2976   	; 0xfffff494 <__eeprom_end+0xff7ef494>
  34:	b7 c7       	rjmp	.+3950   	; 0xfa4 <MIDI_GetStatusType+0x14>
  36:	c8 c7       	rjmp	.+3984   	; 0xfc8 <MIDI_GetStatusType+0x38>
  38:	c7 c7       	rjmp	.+3982   	; 0xfc8 <MIDI_GetStatusType+0x38>
  3a:	c6 c7       	rjmp	.+3980   	; 0xfc8 <MIDI_GetStatusType+0x38>
  3c:	c5 c7       	rjmp	.+3978   	; 0xfc8 <MIDI_GetStatusType+0x38>
  3e:	c4 c7       	rjmp	.+3976   	; 0xfc8 <MIDI_GetStatusType+0x38>
  40:	c3 c7       	rjmp	.+3974   	; 0xfc8 <MIDI_GetStatusType+0x38>
  42:	c2 c7       	rjmp	.+3972   	; 0xfc8 <MIDI_GetStatusType+0x38>
  44:	c1 c7       	rjmp	.+3970   	; 0xfc8 <MIDI_GetStatusType+0x38>
  46:	c0 c7       	rjmp	.+3968   	; 0xfc8 <MIDI_GetStatusType+0x38>
  48:	bf c7       	rjmp	.+3966   	; 0xfc8 <MIDI_GetStatusType+0x38>
  4a:	be c7       	rjmp	.+3964   	; 0xfc8 <MIDI_GetStatusType+0x38>
  4c:	bd c7       	rjmp	.+3962   	; 0xfc8 <MIDI_GetStatusType+0x38>
  4e:	bc c7       	rjmp	.+3960   	; 0xfc8 <MIDI_GetStatusType+0x38>
  50:	bb c7       	rjmp	.+3958   	; 0xfc8 <MIDI_GetStatusType+0x38>
  52:	ba c7       	rjmp	.+3956   	; 0xfc8 <MIDI_GetStatusType+0x38>
  54:	a7 c7       	rjmp	.+3918   	; 0xfa4 <MIDI_GetStatusType+0x14>
  56:	b8 c7       	rjmp	.+3952   	; 0xfc8 <MIDI_GetStatusType+0x38>
  58:	b7 c7       	rjmp	.+3950   	; 0xfc8 <MIDI_GetStatusType+0x38>
  5a:	b6 c7       	rjmp	.+3948   	; 0xfc8 <MIDI_GetStatusType+0x38>
  5c:	b5 c7       	rjmp	.+3946   	; 0xfc8 <MIDI_GetStatusType+0x38>
  5e:	b4 c7       	rjmp	.+3944   	; 0xfc8 <MIDI_GetStatusType+0x38>
  60:	b3 c7       	rjmp	.+3942   	; 0xfc8 <MIDI_GetStatusType+0x38>
  62:	b2 c7       	rjmp	.+3940   	; 0xfc8 <MIDI_GetStatusType+0x38>
  64:	b1 c7       	rjmp	.+3938   	; 0xfc8 <MIDI_GetStatusType+0x38>
  66:	b0 c7       	rjmp	.+3936   	; 0xfc8 <MIDI_GetStatusType+0x38>
  68:	af c7       	rjmp	.+3934   	; 0xfc8 <MIDI_GetStatusType+0x38>
  6a:	ae c7       	rjmp	.+3932   	; 0xfc8 <MIDI_GetStatusType+0x38>
  6c:	ad c7       	rjmp	.+3930   	; 0xfc8 <MIDI_GetStatusType+0x38>
  6e:	ac c7       	rjmp	.+3928   	; 0xfc8 <MIDI_GetStatusType+0x38>
  70:	ab c7       	rjmp	.+3926   	; 0xfc8 <MIDI_GetStatusType+0x38>
  72:	aa c7       	rjmp	.+3924   	; 0xfc8 <MIDI_GetStatusType+0x38>
  74:	97 c7       	rjmp	.+3886   	; 0xfa4 <MIDI_GetStatusType+0x14>
  76:	a8 c7       	rjmp	.+3920   	; 0xfc8 <MIDI_GetStatusType+0x38>
  78:	a7 c7       	rjmp	.+3918   	; 0xfc8 <MIDI_GetStatusType+0x38>
  7a:	a6 c7       	rjmp	.+3916   	; 0xfc8 <MIDI_GetStatusType+0x38>
  7c:	a5 c7       	rjmp	.+3914   	; 0xfc8 <MIDI_GetStatusType+0x38>
  7e:	a4 c7       	rjmp	.+3912   	; 0xfc8 <MIDI_GetStatusType+0x38>
  80:	a3 c7       	rjmp	.+3910   	; 0xfc8 <MIDI_GetStatusType+0x38>
  82:	a2 c7       	rjmp	.+3908   	; 0xfc8 <MIDI_GetStatusType+0x38>
  84:	a1 c7       	rjmp	.+3906   	; 0xfc8 <MIDI_GetStatusType+0x38>
  86:	a0 c7       	rjmp	.+3904   	; 0xfc8 <MIDI_GetStatusType+0x38>
  88:	9f c7       	rjmp	.+3902   	; 0xfc8 <MIDI_GetStatusType+0x38>
  8a:	9e c7       	rjmp	.+3900   	; 0xfc8 <MIDI_GetStatusType+0x38>
  8c:	9d c7       	rjmp	.+3898   	; 0xfc8 <MIDI_GetStatusType+0x38>
  8e:	9c c7       	rjmp	.+3896   	; 0xfc8 <MIDI_GetStatusType+0x38>
  90:	9b c7       	rjmp	.+3894   	; 0xfc8 <MIDI_GetStatusType+0x38>
  92:	9a c7       	rjmp	.+3892   	; 0xfc8 <MIDI_GetStatusType+0x38>
  94:	87 c7       	rjmp	.+3854   	; 0xfa4 <MIDI_GetStatusType+0x14>
  96:	98 c7       	rjmp	.+3888   	; 0xfc8 <MIDI_GetStatusType+0x38>
  98:	97 c7       	rjmp	.+3886   	; 0xfc8 <MIDI_GetStatusType+0x38>
  9a:	96 c7       	rjmp	.+3884   	; 0xfc8 <MIDI_GetStatusType+0x38>
  9c:	95 c7       	rjmp	.+3882   	; 0xfc8 <MIDI_GetStatusType+0x38>
  9e:	94 c7       	rjmp	.+3880   	; 0xfc8 <MIDI_GetStatusType+0x38>
  a0:	93 c7       	rjmp	.+3878   	; 0xfc8 <MIDI_GetStatusType+0x38>
  a2:	92 c7       	rjmp	.+3876   	; 0xfc8 <MIDI_GetStatusType+0x38>
  a4:	91 c7       	rjmp	.+3874   	; 0xfc8 <MIDI_GetStatusType+0x38>
  a6:	90 c7       	rjmp	.+3872   	; 0xfc8 <MIDI_GetStatusType+0x38>
  a8:	8f c7       	rjmp	.+3870   	; 0xfc8 <MIDI_GetStatusType+0x38>
  aa:	8e c7       	rjmp	.+3868   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ac:	8d c7       	rjmp	.+3866   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ae:	8c c7       	rjmp	.+3864   	; 0xfc8 <MIDI_GetStatusType+0x38>
  b0:	8b c7       	rjmp	.+3862   	; 0xfc8 <MIDI_GetStatusType+0x38>
  b2:	8a c7       	rjmp	.+3860   	; 0xfc8 <MIDI_GetStatusType+0x38>
  b4:	8b c7       	rjmp	.+3862   	; 0xfcc <MIDI_GetStatusType+0x3c>
  b6:	88 c7       	rjmp	.+3856   	; 0xfc8 <MIDI_GetStatusType+0x38>
  b8:	87 c7       	rjmp	.+3854   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ba:	86 c7       	rjmp	.+3852   	; 0xfc8 <MIDI_GetStatusType+0x38>
  bc:	85 c7       	rjmp	.+3850   	; 0xfc8 <MIDI_GetStatusType+0x38>
  be:	84 c7       	rjmp	.+3848   	; 0xfc8 <MIDI_GetStatusType+0x38>
  c0:	83 c7       	rjmp	.+3846   	; 0xfc8 <MIDI_GetStatusType+0x38>
  c2:	82 c7       	rjmp	.+3844   	; 0xfc8 <MIDI_GetStatusType+0x38>
  c4:	81 c7       	rjmp	.+3842   	; 0xfc8 <MIDI_GetStatusType+0x38>
  c6:	80 c7       	rjmp	.+3840   	; 0xfc8 <MIDI_GetStatusType+0x38>
  c8:	7f c7       	rjmp	.+3838   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ca:	7e c7       	rjmp	.+3836   	; 0xfc8 <MIDI_GetStatusType+0x38>
  cc:	7d c7       	rjmp	.+3834   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ce:	7c c7       	rjmp	.+3832   	; 0xfc8 <MIDI_GetStatusType+0x38>
  d0:	7b c7       	rjmp	.+3830   	; 0xfc8 <MIDI_GetStatusType+0x38>
  d2:	7a c7       	rjmp	.+3828   	; 0xfc8 <MIDI_GetStatusType+0x38>
  d4:	7b c7       	rjmp	.+3830   	; 0xfcc <MIDI_GetStatusType+0x3c>
  d6:	78 c7       	rjmp	.+3824   	; 0xfc8 <MIDI_GetStatusType+0x38>
  d8:	77 c7       	rjmp	.+3822   	; 0xfc8 <MIDI_GetStatusType+0x38>
  da:	76 c7       	rjmp	.+3820   	; 0xfc8 <MIDI_GetStatusType+0x38>
  dc:	75 c7       	rjmp	.+3818   	; 0xfc8 <MIDI_GetStatusType+0x38>
  de:	74 c7       	rjmp	.+3816   	; 0xfc8 <MIDI_GetStatusType+0x38>
  e0:	73 c7       	rjmp	.+3814   	; 0xfc8 <MIDI_GetStatusType+0x38>
  e2:	72 c7       	rjmp	.+3812   	; 0xfc8 <MIDI_GetStatusType+0x38>
  e4:	71 c7       	rjmp	.+3810   	; 0xfc8 <MIDI_GetStatusType+0x38>
  e6:	70 c7       	rjmp	.+3808   	; 0xfc8 <MIDI_GetStatusType+0x38>
  e8:	6f c7       	rjmp	.+3806   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ea:	6e c7       	rjmp	.+3804   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ec:	6d c7       	rjmp	.+3802   	; 0xfc8 <MIDI_GetStatusType+0x38>
  ee:	6c c7       	rjmp	.+3800   	; 0xfc8 <MIDI_GetStatusType+0x38>
  f0:	6b c7       	rjmp	.+3798   	; 0xfc8 <MIDI_GetStatusType+0x38>
  f2:	6a c7       	rjmp	.+3796   	; 0xfc8 <MIDI_GetStatusType+0x38>
  f4:	57 c7       	rjmp	.+3758   	; 0xfa4 <MIDI_GetStatusType+0x14>
  f6:	68 c7       	rjmp	.+3792   	; 0xfc8 <MIDI_GetStatusType+0x38>
  f8:	67 c7       	rjmp	.+3790   	; 0xfc8 <MIDI_GetStatusType+0x38>
  fa:	66 c7       	rjmp	.+3788   	; 0xfc8 <MIDI_GetStatusType+0x38>
  fc:	65 c7       	rjmp	.+3786   	; 0xfc8 <MIDI_GetStatusType+0x38>
  fe:	64 c7       	rjmp	.+3784   	; 0xfc8 <MIDI_GetStatusType+0x38>
 100:	63 c7       	rjmp	.+3782   	; 0xfc8 <MIDI_GetStatusType+0x38>
 102:	62 c7       	rjmp	.+3780   	; 0xfc8 <MIDI_GetStatusType+0x38>
 104:	61 c7       	rjmp	.+3778   	; 0xfc8 <MIDI_GetStatusType+0x38>
 106:	60 c7       	rjmp	.+3776   	; 0xfc8 <MIDI_GetStatusType+0x38>
 108:	5f c7       	rjmp	.+3774   	; 0xfc8 <MIDI_GetStatusType+0x38>
 10a:	5e c7       	rjmp	.+3772   	; 0xfc8 <MIDI_GetStatusType+0x38>
 10c:	5d c7       	rjmp	.+3770   	; 0xfc8 <MIDI_GetStatusType+0x38>
 10e:	5c c7       	rjmp	.+3768   	; 0xfc8 <MIDI_GetStatusType+0x38>
 110:	5b c7       	rjmp	.+3766   	; 0xfc8 <MIDI_GetStatusType+0x38>
 112:	5a c7       	rjmp	.+3764   	; 0xfc8 <MIDI_GetStatusType+0x38>
 114:	55 c7       	rjmp	.+3754   	; 0xfc0 <MIDI_GetStatusType+0x30>
 116:	5a c7       	rjmp	.+3764   	; 0xfcc <MIDI_GetStatusType+0x3c>
 118:	45 c7       	rjmp	.+3722   	; 0xfa4 <MIDI_GetStatusType+0x14>
 11a:	58 c7       	rjmp	.+3760   	; 0xfcc <MIDI_GetStatusType+0x3c>
 11c:	55 c7       	rjmp	.+3754   	; 0xfc8 <MIDI_GetStatusType+0x38>
 11e:	54 c7       	rjmp	.+3752   	; 0xfc8 <MIDI_GetStatusType+0x38>
 120:	53 c7       	rjmp	.+3750   	; 0xfc8 <MIDI_GetStatusType+0x38>
 122:	50 c7       	rjmp	.+3744   	; 0xfc4 <MIDI_GetStatusType+0x34>
 124:	41 c7       	rjmp	.+3714   	; 0xfa8 <MIDI_GetStatusType+0x18>
 126:	50 c7       	rjmp	.+3744   	; 0xfc8 <MIDI_GetStatusType+0x38>
 128:	41 c7       	rjmp	.+3714   	; 0xfac <MIDI_GetStatusType+0x1c>
 12a:	42 c7       	rjmp	.+3716   	; 0xfb0 <MIDI_GetStatusType+0x20>
 12c:	43 c7       	rjmp	.+3718   	; 0xfb4 <MIDI_GetStatusType+0x24>
 12e:	4c c7       	rjmp	.+3736   	; 0xfc8 <MIDI_GetStatusType+0x38>
 130:	43 c7       	rjmp	.+3718   	; 0xfb8 <MIDI_GetStatusType+0x28>
 132:	44 c7       	rjmp	.+3720   	; 0xfbc <MIDI_GetStatusType+0x2c>
 134:	e4 c2       	rjmp	.+1480   	; 0x6fe <MIDI_ParserTask+0x18>
 136:	f0 c2       	rjmp	.+1504   	; 0x718 <MIDI_ParserTask+0x32>
 138:	2f c3       	rjmp	.+1630   	; 0x798 <MIDI_ParserTask+0xb2>
 13a:	62 c3       	rjmp	.+1732   	; 0x800 <MIDI_ParserTask+0x11a>
 13c:	42 c3       	rjmp	.+1668   	; 0x7c2 <MIDI_ParserTask+0xdc>
 13e:	71 c3       	rjmp	.+1762   	; 0x822 <MIDI_ParserTask+0x13c>
 140:	74 c3       	rjmp	.+1768   	; 0x82a <MIDI_ParserTask+0x144>
 142:	1a c2       	rjmp	.+1076   	; 0x578 <readButtonsState+0x18>
 144:	2d c2       	rjmp	.+1114   	; 0x5a0 <readButtonsState+0x40>
 146:	43 c2       	rjmp	.+1158   	; 0x5ce <readButtonsState+0x6e>
 148:	59 c2       	rjmp	.+1202   	; 0x5fc <readButtonsState+0x9c>
 14a:	6c c2       	rjmp	.+1240   	; 0x624 <readButtonsState+0xc4>
 14c:	82 c2       	rjmp	.+1284   	; 0x652 <readButtonsState+0xf2>
 14e:	90 c2       	rjmp	.+1312   	; 0x670 <readButtonsState+0x110>
 150:	a6 c2       	rjmp	.+1356   	; 0x69e <readButtonsState+0x13e>

00000152 <.dinit>:
 152:	01 00       	.word	0x0001	; ????
 154:	01 86       	std	Z+9, r0	; 0x09
 156:	80 01       	movw	r16, r0
 158:	86 01       	movw	r16, r12
 15a:	9e 00       	.word	0x009e	; ????
 15c:	14 9e       	mul	r1, r20
 15e:	01 9e       	mul	r0, r17
 160:	01 a4       	ldd	r0, Z+41	; 0x29
 162:	80 01       	movw	r16, r0
 164:	a4 01       	movw	r20, r8
 166:	a8 00       	.word	0x00a8	; ????
 168:	14 b6       	in	r1, 0x34	; 52
 16a:	01 a8       	ldd	r0, Z+49	; 0x31
 16c:	01 aa       	std	Z+49, r0	; 0x31
 16e:	80 01       	movw	r16, r0
 170:	aa 01       	movw	r20, r20
 172:	ab 00       	.word	0x00ab	; ????
 174:	14 ba       	out	0x14, r1	; 20
 176:	01 ab       	std	Z+49, r16	; 0x31
 178:	01 af       	std	Z+57, r16	; 0x39
 17a:	80 01       	movw	r16, r0
 17c:	af 01       	movw	r20, r30
 17e:	b0 00       	.word	0x00b0	; ????
 180:	14 bb       	out	0x14, r17	; 20
 182:	01 b0       	in	r0, 0x01	; 1
 184:	01 b3       	in	r16, 0x11	; 17
 186:	80 00       	.word	0x0080	; ????

00000188 <__ctors_end>:
 188:	11 24       	eor	r1, r1
 18a:	1f be       	out	0x3f, r1	; 63
 18c:	cf ef       	ldi	r28, 0xFF	; 255
 18e:	d4 e0       	ldi	r29, 0x04	; 4
 190:	de bf       	out	0x3e, r29	; 62
 192:	cd bf       	out	0x3d, r28	; 61

00000194 <__do_copy_data>:
 194:	e2 e5       	ldi	r30, 0x52	; 82
 196:	f1 e0       	ldi	r31, 0x01	; 1
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <__do_clear_bss+0x8>
 19c:	b5 91       	lpm	r27, Z+
 19e:	a5 91       	lpm	r26, Z+
 1a0:	35 91       	lpm	r19, Z+
 1a2:	25 91       	lpm	r18, Z+
 1a4:	05 91       	lpm	r16, Z+
 1a6:	07 fd       	sbrc	r16, 7
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <__do_clear_bss>
 1aa:	95 91       	lpm	r25, Z+
 1ac:	85 91       	lpm	r24, Z+
 1ae:	ef 01       	movw	r28, r30
 1b0:	f9 2f       	mov	r31, r25
 1b2:	e8 2f       	mov	r30, r24
 1b4:	05 90       	lpm	r0, Z+
 1b6:	0d 92       	st	X+, r0
 1b8:	a2 17       	cp	r26, r18
 1ba:	b3 07       	cpc	r27, r19
 1bc:	d9 f7       	brne	.-10     	; 0x1b4 <__do_copy_data+0x20>
 1be:	fe 01       	movw	r30, r28
 1c0:	04 c0       	rjmp	.+8      	; 0x1ca <__do_clear_bss+0x8>

000001c2 <__do_clear_bss>:
 1c2:	1d 92       	st	X+, r1
 1c4:	a2 17       	cp	r26, r18
 1c6:	b3 07       	cpc	r27, r19
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <__do_clear_bss>
 1ca:	e7 38       	cpi	r30, 0x87	; 135
 1cc:	f4 07       	cpc	r31, r20
 1ce:	31 f7       	brne	.-52     	; 0x19c <__do_copy_data+0x8>
 1d0:	57 d7       	rcall	.+3758   	; 0x1080 <main>
 1d2:	10 c9       	rjmp	.-3552   	; 0xfffff3f4 <__eeprom_end+0xff7ef3f4>

000001d4 <_exit>:
 1d4:	f8 94       	cli

000001d6 <__stop_program>:
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <__stop_program>

Disassembly of section .text:

00001494 <__bad_interrupt>:
    1494:	b5 c5       	rjmp	.+2922   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.main:

00001080 <main>:
#include "sh100_hardware.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
    1080:	74 d1       	rcall	.+744    	; 0x136a <UART_init>
	SH100HW_Init();
    1082:	29 dd       	rcall	.-1454   	; 0xad6 <SH100HW_Init>
	SH100CTRL_Init();
    1084:	cb dd       	rcall	.-1130   	; 0xc1c <SH100CTRL_Init>
	MIDICTRL_Init();
    1086:	ae d0       	rcall	.+348    	; 0x11e4 <MIDICTRL_Init>
	
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    1088:	85 b5       	in	r24, 0x25	; 37
    108a:	85 60       	ori	r24, 0x05	; 5
    108c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    108e:	ee e6       	ldi	r30, 0x6E	; 110
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	80 83       	st	Z, r24
	TCNT0 = 100;
    1098:	84 e6       	ldi	r24, 0x64	; 100
    109a:	86 bd       	out	0x26, r24	; 38
	
	// PCINT10, interrupt for PC2 pin(SW detect)
	PCICR |= 0x02;
    109c:	e8 e6       	ldi	r30, 0x68	; 104
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	80 83       	st	Z, r24
	PCMSK1 |= 0x04;
    10a6:	ec e6       	ldi	r30, 0x6C	; 108
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	84 60       	ori	r24, 0x04	; 4
    10ae:	80 83       	st	Z, r24
	
	cpu_irq_enable();
    10b0:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
    10b2:	19 db       	rcall	.-2510   	; 0x6e6 <MIDI_ParserTask>
    10b4:	fe cf       	rjmp	.-4      	; 0x10b2 <main+0x32>

Disassembly of section .text.__vector_16:

000003bc <__vector_16>:
uint8_t protectionInterval_cnt = PROTECTION_INTERVAL;
uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

ISR(TIMER0_OVF_vect)
{
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	2f 93       	push	r18
 3c8:	3f 93       	push	r19
 3ca:	4f 93       	push	r20
 3cc:	5f 93       	push	r21
 3ce:	6f 93       	push	r22
 3d0:	7f 93       	push	r23
 3d2:	8f 93       	push	r24
 3d4:	9f 93       	push	r25
 3d6:	af 93       	push	r26
 3d8:	bf 93       	push	r27
 3da:	ef 93       	push	r30
 3dc:	ff 93       	push	r31
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	2f 97       	sbiw	r28, 0x0f	; 15
 3e8:	de bf       	out	0x3e, r29	; 62
 3ea:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 3ec:	f7 de       	rcall	.-530    	; 0x1dc <SH100HW_MainTask>
	SH100CTRL_CheckOutputJacks();
 3ee:	47 d4       	rcall	.+2190   	; 0xc7e <SH100CTRL_CheckOutputJacks>
	
	SH100HW_Buttons_t pressedButtons = SH100HW_GetButtonsState();
 3f0:	ce 01       	movw	r24, r28
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	e6 d7       	rcall	.+4044   	; 0x13c2 <SH100HW_GetButtonsState>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	33 d8       	rcall	.-3994   	; 0xfffff460 <__eeprom_end+0xff7ef460>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 3fa:	9a 81       	ldd	r25, Y+2	; 0x02
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	91 11       	cpse	r25, r1
 400:	01 c0       	rjmp	.+2      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	30 d8       	rcall	.-4000   	; 0xfffff466 <__eeprom_end+0xff7ef466>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 406:	9b 81       	ldd	r25, Y+3	; 0x03
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	91 11       	cpse	r25, r1
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	2d d8       	rcall	.-4006   	; 0xfffff46c <__eeprom_end+0xff7ef46c>
	
	// FOOTSWITCH handling
	
	if(protectionInterval_cnt == 0)
 412:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <protectionInterval_cnt>
 416:	81 11       	cpse	r24, r1
 418:	87 c0       	rjmp	.+270    	; 0x528 <__stack+0x29>
	{	
		//=============BTN CH1==========================
		if(pressedButtons.btnCh1 == BT_ON)
 41a:	8c 81       	ldd	r24, Y+4	; 0x04
 41c:	81 11       	cpse	r24, r1
 41e:	20 c0       	rjmp	.+64     	; 0x460 <__DATA_REGION_LENGTH__+0x60>
		{
			if(swProgrammingMode_cnt == 200)
 420:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <swProgrammingMode_cnt>
 424:	88 3c       	cpi	r24, 0xC8	; 200
 426:	69 f4       	brne	.+26     	; 0x442 <__DATA_REGION_LENGTH__+0x42>
			{
				swProgrammingMode_cnt = 0;
 428:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <swProgrammingMode_cnt>
				//enter prog mode, or save settings
				if(MIDICTRL_MidiMode() == RUNNING)
 42c:	16 d8       	rcall	.-4052   	; 0xfffff45a <__eeprom_end+0xff7ef45a>
 42e:	81 11       	cpse	r24, r1
 430:	04 c0       	rjmp	.+8      	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
				{
					MIDICTRL_SwitchMode(PROGRAMMING);
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	fa d4       	rcall	.+2548   	; 0xe2a <MIDICTRL_SwitchMode>
					SH100CTRL_MuteAmp();
 436:	20 d8       	rcall	.-4032   	; 0xfffff478 <__eeprom_end+0xff7ef478>
 438:	7a c0       	rjmp	.+244    	; 0x52e <__stack+0x2f>
				}
				else
				{
					MIDICTRL_StoreUserCommands();
 43a:	3d d6       	rcall	.+3194   	; 0x10b6 <MIDICTRL_StoreUserCommands>
					SH100CTRL_SetAmpLeds();
 43c:	fb d6       	rcall	.+3574   	; 0x1234 <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 43e:	f3 d7       	rcall	.+4070   	; 0x1426 <SH100CTRL_UnmuteAmp>
 440:	76 c0       	rjmp	.+236    	; 0x52e <__stack+0x2f>
				}
			}
			else
			{
				swProgrammingMode_cnt++;
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <swProgrammingMode_cnt>
				switch(MIDICTRL_MidiMode())
 448:	08 d8       	rcall	.-4080   	; 0xfffff45a <__eeprom_end+0xff7ef45a>
 44a:	88 23       	and	r24, r24
 44c:	19 f0       	breq	.+6      	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	21 f0       	breq	.+8      	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 452:	6d c0       	rjmp	.+218    	; 0x52e <__stack+0x2f>
				{
					case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL1); break;
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	f3 d7       	rcall	.+4070   	; 0x143e <SH100CTRL_SwChannel>
 458:	6a c0       	rjmp	.+212    	; 0x52e <__stack+0x2f>
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	95 d6       	rcall	.+3370   	; 0x1188 <MIDICTRL_SetProgrammingButton>
 45e:	67 c0       	rjmp	.+206    	; 0x52e <__stack+0x2f>
				}
			}
			return;
		}
		else swProgrammingMode_cnt=0;	
 460:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <swProgrammingMode_cnt>
		
		//=============BTN CH2==========================
		if(pressedButtons.btnCh2 == BT_ON)
 464:	8d 81       	ldd	r24, Y+5	; 0x05
 466:	81 11       	cpse	r24, r1
 468:	0c c0       	rjmp	.+24     	; 0x482 <__DATA_REGION_LENGTH__+0x82>
		{
			switch(MIDICTRL_MidiMode())
 46a:	f7 d7       	rcall	.+4078   	; 0x145a <MIDICTRL_MidiMode>
 46c:	88 23       	and	r24, r24
 46e:	19 f0       	breq	.+6      	; 0x476 <__DATA_REGION_LENGTH__+0x76>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	21 f0       	breq	.+8      	; 0x47c <__DATA_REGION_LENGTH__+0x7c>
 474:	5c c0       	rjmp	.+184    	; 0x52e <__stack+0x2f>
			{
				case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL2); break;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	e2 d7       	rcall	.+4036   	; 0x143e <SH100CTRL_SwChannel>
 47a:	59 c0       	rjmp	.+178    	; 0x52e <__stack+0x2f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	84 d6       	rcall	.+3336   	; 0x1188 <MIDICTRL_SetProgrammingButton>
 480:	56 c0       	rjmp	.+172    	; 0x52e <__stack+0x2f>
			}
			return;
		}
		
		//=============BTN CH3==========================
		if(pressedButtons.btnCh3 == BT_ON)
 482:	8e 81       	ldd	r24, Y+6	; 0x06
 484:	81 11       	cpse	r24, r1
 486:	0c c0       	rjmp	.+24     	; 0x4a0 <__DATA_REGION_LENGTH__+0xa0>
		{
			switch(MIDICTRL_MidiMode())
 488:	e8 d7       	rcall	.+4048   	; 0x145a <MIDICTRL_MidiMode>
 48a:	88 23       	and	r24, r24
 48c:	19 f0       	breq	.+6      	; 0x494 <__DATA_REGION_LENGTH__+0x94>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	21 f0       	breq	.+8      	; 0x49a <__DATA_REGION_LENGTH__+0x9a>
 492:	4d c0       	rjmp	.+154    	; 0x52e <__stack+0x2f>
			{
				case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL3); break;
 494:	82 e0       	ldi	r24, 0x02	; 2
 496:	d3 d7       	rcall	.+4006   	; 0x143e <SH100CTRL_SwChannel>
 498:	4a c0       	rjmp	.+148    	; 0x52e <__stack+0x2f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	75 d6       	rcall	.+3306   	; 0x1188 <MIDICTRL_SetProgrammingButton>
 49e:	47 c0       	rjmp	.+142    	; 0x52e <__stack+0x2f>
			}
			return;
		}
		
		//=============BTN CH4==========================
		if(pressedButtons.btnCh4 == BT_ON)
 4a0:	8f 81       	ldd	r24, Y+7	; 0x07
 4a2:	81 11       	cpse	r24, r1
 4a4:	0c c0       	rjmp	.+24     	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
		{
			switch(MIDICTRL_MidiMode())
 4a6:	d9 d7       	rcall	.+4018   	; 0x145a <MIDICTRL_MidiMode>
 4a8:	88 23       	and	r24, r24
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <__DATA_REGION_LENGTH__+0xb8>
 4b0:	3e c0       	rjmp	.+124    	; 0x52e <__stack+0x2f>
			{
				case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL4); break;
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	c4 d7       	rcall	.+3976   	; 0x143e <SH100CTRL_SwChannel>
 4b6:	3b c0       	rjmp	.+118    	; 0x52e <__stack+0x2f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 4b8:	83 e0       	ldi	r24, 0x03	; 3
 4ba:	66 d6       	rcall	.+3276   	; 0x1188 <MIDICTRL_SetProgrammingButton>
 4bc:	38 c0       	rjmp	.+112    	; 0x52e <__stack+0x2f>
			}
			return;
		}
		
		//=============BTN LOOP=========================
		if(pressedButtons.btnLoop == BT_ON)
 4be:	89 85       	ldd	r24, Y+9	; 0x09
 4c0:	81 11       	cpse	r24, r1
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <__DATA_REGION_LENGTH__+0xe0>
		{
			switch(MIDICTRL_MidiMode())
 4c4:	ca d7       	rcall	.+3988   	; 0x145a <MIDICTRL_MidiMode>
 4c6:	88 23       	and	r24, r24
 4c8:	19 f0       	breq	.+6      	; 0x4d0 <__DATA_REGION_LENGTH__+0xd0>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	31 f0       	breq	.+12     	; 0x4da <__DATA_REGION_LENGTH__+0xda>
 4ce:	2f c0       	rjmp	.+94     	; 0x52e <__stack+0x2f>
			{
				case RUNNING:
				{
					SH100CTRL_SwLoop();
 4d0:	9e d7       	rcall	.+3900   	; 0x140e <SH100CTRL_SwLoop>
					protectionInterval_cnt = PROTECTION_INTERVAL;
 4d2:	84 e1       	ldi	r24, 0x14	; 20
 4d4:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <protectionInterval_cnt>
					break;
 4d8:	2a c0       	rjmp	.+84     	; 0x52e <__stack+0x2f>
				}
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	55 d6       	rcall	.+3242   	; 0x1188 <MIDICTRL_SetProgrammingButton>
 4de:	27 c0       	rjmp	.+78     	; 0x52e <__stack+0x2f>
			}
			return;
		}
			
		//=============BTN AB===========================
		if(pressedButtons.btnAB == BT_ON)
 4e0:	88 85       	ldd	r24, Y+8	; 0x08
 4e2:	81 11       	cpse	r24, r1
 4e4:	1e c0       	rjmp	.+60     	; 0x522 <__stack+0x23>
		{
			if(leaveDefSettings_cnt == 200)
 4e6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <leaveDefSettings_cnt>
 4ea:	88 3c       	cpi	r24, 0xC8	; 200
 4ec:	49 f4       	brne	.+18     	; 0x500 <__stack+0x1>
			{
				if(MIDICTRL_MidiMode() == PROGRAMMING)
 4ee:	b5 d7       	rcall	.+3946   	; 0x145a <MIDICTRL_MidiMode>
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	e9 f4       	brne	.+58     	; 0x52e <__stack+0x2f>
				{
					leaveDefSettings_cnt = 0;
 4f4:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <leaveDefSettings_cnt>
					MIDICTRL_DiscardCommands();
 4f8:	5a d7       	rcall	.+3764   	; 0x13ae <MIDICTRL_DiscardCommands>
					SH100CTRL_SetAmpLeds();
 4fa:	9c d6       	rcall	.+3384   	; 0x1234 <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 4fc:	94 d7       	rcall	.+3880   	; 0x1426 <SH100CTRL_UnmuteAmp>
 4fe:	17 c0       	rjmp	.+46     	; 0x52e <__stack+0x2f>
				}
			}
			else
			{
				leaveDefSettings_cnt++;
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <leaveDefSettings_cnt>
				switch(MIDICTRL_MidiMode())
 506:	a9 d7       	rcall	.+3922   	; 0x145a <MIDICTRL_MidiMode>
 508:	88 23       	and	r24, r24
 50a:	19 f0       	breq	.+6      	; 0x512 <__stack+0x13>
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	31 f0       	breq	.+12     	; 0x51c <__stack+0x1d>
 510:	0e c0       	rjmp	.+28     	; 0x52e <__stack+0x2f>
				{
					case RUNNING: 
					{
						SH100CTRL_SwAB(); 
 512:	83 d7       	rcall	.+3846   	; 0x141a <SH100CTRL_SwAB>
						protectionInterval_cnt = PROTECTION_INTERVAL;
 514:	84 e1       	ldi	r24, 0x14	; 20
 516:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <protectionInterval_cnt>
						break;
 51a:	09 c0       	rjmp	.+18     	; 0x52e <__stack+0x2f>
					}
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 51c:	85 e0       	ldi	r24, 0x05	; 5
 51e:	34 d6       	rcall	.+3176   	; 0x1188 <MIDICTRL_SetProgrammingButton>
 520:	06 c0       	rjmp	.+12     	; 0x52e <__stack+0x2f>
				}
			}
			return;
		}
		else leaveDefSettings_cnt=0;
 522:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <leaveDefSettings_cnt>
 526:	03 c0       	rjmp	.+6      	; 0x52e <__stack+0x2f>
	}
	else
	{
		protectionInterval_cnt--;
 528:	81 50       	subi	r24, 0x01	; 1
 52a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <protectionInterval_cnt>
	}
}
 52e:	2f 96       	adiw	r28, 0x0f	; 15
 530:	0f b6       	in	r0, 0x3f	; 63
 532:	f8 94       	cli
 534:	de bf       	out	0x3e, r29	; 62
 536:	0f be       	out	0x3f, r0	; 63
 538:	cd bf       	out	0x3d, r28	; 61
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	ff 91       	pop	r31
 540:	ef 91       	pop	r30
 542:	bf 91       	pop	r27
 544:	af 91       	pop	r26
 546:	9f 91       	pop	r25
 548:	8f 91       	pop	r24
 54a:	7f 91       	pop	r23
 54c:	6f 91       	pop	r22
 54e:	5f 91       	pop	r21
 550:	4f 91       	pop	r20
 552:	3f 91       	pop	r19
 554:	2f 91       	pop	r18
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

Disassembly of section .text.__vector_4:

00000ec2 <__vector_4>:

ISR(PCINT1_vect)
{
 ec2:	1f 92       	push	r1
 ec4:	0f 92       	push	r0
 ec6:	0f b6       	in	r0, 0x3f	; 63
 ec8:	0f 92       	push	r0
 eca:	11 24       	eor	r1, r1
 ecc:	2f 93       	push	r18
 ece:	3f 93       	push	r19
 ed0:	4f 93       	push	r20
 ed2:	5f 93       	push	r21
 ed4:	6f 93       	push	r22
 ed6:	7f 93       	push	r23
 ed8:	8f 93       	push	r24
 eda:	9f 93       	push	r25
 edc:	af 93       	push	r26
 ede:	bf 93       	push	r27
 ee0:	ef 93       	push	r30
 ee2:	ff 93       	push	r31
	// Power off
	// need to check pin level?
	SH100CTRL_StoreAmpState();
 ee4:	02 d2       	rcall	.+1028   	; 0x12ea <SH100CTRL_StoreAmpState>
 ee6:	ff 91       	pop	r31
 ee8:	ef 91       	pop	r30
 eea:	bf 91       	pop	r27
 eec:	af 91       	pop	r26
 eee:	9f 91       	pop	r25
 ef0:	8f 91       	pop	r24
 ef2:	7f 91       	pop	r23
 ef4:	6f 91       	pop	r22
 ef6:	5f 91       	pop	r21
 ef8:	4f 91       	pop	r20
 efa:	3f 91       	pop	r19
 efc:	2f 91       	pop	r18
 efe:	0f 90       	pop	r0
 f00:	0f be       	out	0x3f, r0	; 63
 f02:	0f 90       	pop	r0
 f04:	1f 90       	pop	r1
 f06:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

00001452 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    1452:	88 1f       	adc	r24, r24
    1454:	88 27       	eor	r24, r24
    1456:	88 1f       	adc	r24, r24
    1458:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00001402 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	88 3f       	cpi	r24, 0xF8	; 248
    1406:	08 f4       	brcc	.+2      	; 0x140a <MIDI_IsSysRealTime+0x8>
    1408:	90 e0       	ldi	r25, 0x00	; 0
}
    140a:	89 2f       	mov	r24, r25
    140c:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000f90 <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 f90:	90 e0       	ldi	r25, 0x00	; 0
 f92:	fc 01       	movw	r30, r24
 f94:	e0 58       	subi	r30, 0x80	; 128
 f96:	f1 09       	sbc	r31, r1
 f98:	e0 38       	cpi	r30, 0x80	; 128
 f9a:	f1 05       	cpc	r31, r1
 f9c:	a8 f4       	brcc	.+42     	; 0xfc8 <MIDI_GetStatusType+0x38>
 f9e:	e6 5e       	subi	r30, 0xE6	; 230
 fa0:	ff 4f       	sbci	r31, 0xFF	; 255
 fa2:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 fa4:	82 e0       	ldi	r24, 0x02	; 2
 fa6:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 fa8:	83 e0       	ldi	r24, 0x03	; 3
 faa:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 fac:	83 e0       	ldi	r24, 0x03	; 3
 fae:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 fb0:	83 e0       	ldi	r24, 0x03	; 3
 fb2:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 fb4:	83 e0       	ldi	r24, 0x03	; 3
 fb6:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 fb8:	83 e0       	ldi	r24, 0x03	; 3
 fba:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 fbc:	83 e0       	ldi	r24, 0x03	; 3
 fbe:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 fc0:	84 e0       	ldi	r24, 0x04	; 4
 fc2:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 fc4:	85 e0       	ldi	r24, 0x05	; 5
 fc6:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 fc8:	80 e0       	ldi	r24, 0x00	; 0
 fca:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 fcc:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 fce:	08 95       	ret

Disassembly of section .text.isEqualCommands:

0000139a <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    139a:	62 13       	cpse	r22, r18
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data2) return false;	
    139e:	85 17       	cp	r24, r21
    13a0:	21 f0       	breq	.+8      	; 0x13aa <isEqualCommands+0x10>
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data2) return false;	
	return true;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
}
    13ac:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

00000a5c <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 a5c:	cf 93       	push	r28
 a5e:	df 93       	push	r29
 a60:	cd b7       	in	r28, 0x3d	; 61
 a62:	de b7       	in	r29, 0x3e	; 62
 a64:	68 97       	sbiw	r28, 0x18	; 24
 a66:	0f b6       	in	r0, 0x3f	; 63
 a68:	f8 94       	cli
 a6a:	de bf       	out	0x3e, r29	; 62
 a6c:	0f be       	out	0x3f, r0	; 63
 a6e:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word((uint16_t*)0x02);
 a70:	62 e0       	ldi	r22, 0x02	; 2
 a72:	70 e0       	ldi	r23, 0x00	; 0
 a74:	80 e8       	ldi	r24, 0x80	; 128
 a76:	dd d4       	rcall	.+2490   	; 0x1432 <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 a78:	8b 3a       	cpi	r24, 0xAB	; 171
 a7a:	9c 4a       	sbci	r25, 0xAC	; 172
 a7c:	c1 f4       	brne	.+48     	; 0xaae <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 a7e:	40 e1       	ldi	r20, 0x10	; 16
 a80:	50 e0       	ldi	r21, 0x00	; 0
 a82:	60 e8       	ldi	r22, 0x80	; 128
 a84:	28 e1       	ldi	r18, 0x18	; 24
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	ce 01       	movw	r24, r28
 a8a:	01 96       	adiw	r24, 0x01	; 1
 a8c:	0b d4       	rcall	.+2070   	; 0x12a4 <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 a8e:	88 e1       	ldi	r24, 0x18	; 24
 a90:	fe 01       	movw	r30, r28
 a92:	31 96       	adiw	r30, 0x01	; 1
 a94:	a8 e0       	ldi	r26, 0x08	; 8
 a96:	b1 e0       	ldi	r27, 0x01	; 1
 a98:	01 90       	ld	r0, Z+
 a9a:	0d 92       	st	X+, r0
 a9c:	8a 95       	dec	r24
 a9e:	e1 f7       	brne	.-8      	; 0xa98 <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 aa0:	6b e0       	ldi	r22, 0x0B	; 11
 aa2:	70 e0       	ldi	r23, 0x00	; 0
 aa4:	80 e8       	ldi	r24, 0x80	; 128
 aa6:	96 d4       	rcall	.+2348   	; 0x13d4 <eeprom_read_byte>
 aa8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
 aac:	0b c0       	rjmp	.+22     	; 0xac4 <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 aae:	88 e1       	ldi	r24, 0x18	; 24
 ab0:	e6 e8       	ldi	r30, 0x86	; 134
 ab2:	f1 e0       	ldi	r31, 0x01	; 1
 ab4:	a8 e0       	ldi	r26, 0x08	; 8
 ab6:	b1 e0       	ldi	r27, 0x01	; 1
 ab8:	01 90       	ld	r0, Z+
 aba:	0d 92       	st	X+, r0
 abc:	8a 95       	dec	r24
 abe:	e1 f7       	brne	.-8      	; 0xab8 <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 ac0:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
	}
}
 ac4:	68 96       	adiw	r28, 0x18	; 24
 ac6:	0f b6       	in	r0, 0x3f	; 63
 ac8:	f8 94       	cli
 aca:	de bf       	out	0x3e, r29	; 62
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	cd bf       	out	0x3d, r28	; 61
 ad0:	df 91       	pop	r29
 ad2:	cf 91       	pop	r28
 ad4:	08 95       	ret

Disassembly of section .text.setMidiLeds:

00000d38 <setMidiLeds>:

void setMidiLeds()
{
 d38:	cf 93       	push	r28
	if(mode == PROGRAMMING)
 d3a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 d3e:	81 30       	cpi	r24, 0x01	; 1
 d40:	11 f5       	brne	.+68     	; 0xd86 <setMidiLeds+0x4e>
 d42:	18 c0       	rjmp	.+48     	; 0xd74 <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
 d44:	ec 2f       	mov	r30, r28
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	ef 5f       	subi	r30, 0xFF	; 255
 d4a:	fe 4f       	sbci	r31, 0xFE	; 254
 d4c:	80 81       	ld	r24, Z
 d4e:	81 30       	cpi	r24, 0x01	; 1
 d50:	41 f0       	breq	.+16     	; 0xd62 <setMidiLeds+0x2a>
 d52:	18 f0       	brcs	.+6      	; 0xd5a <setMidiLeds+0x22>
 d54:	82 30       	cpi	r24, 0x02	; 2
 d56:	49 f0       	breq	.+18     	; 0xd6a <setMidiLeds+0x32>
 d58:	0b c0       	rjmp	.+22     	; 0xd70 <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
 d5a:	60 e0       	ldi	r22, 0x00	; 0
 d5c:	8c 2f       	mov	r24, r28
 d5e:	58 d1       	rcall	.+688    	; 0x1010 <SH100HW_SetNewLedState>
 d60:	07 c0       	rjmp	.+14     	; 0xd70 <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
 d62:	62 e0       	ldi	r22, 0x02	; 2
 d64:	8c 2f       	mov	r24, r28
 d66:	54 d1       	rcall	.+680    	; 0x1010 <SH100HW_SetNewLedState>
 d68:	03 c0       	rjmp	.+6      	; 0xd70 <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
 d6a:	61 e0       	ldi	r22, 0x01	; 1
 d6c:	8c 2f       	mov	r24, r28
 d6e:	50 d1       	rcall	.+672    	; 0x1010 <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
 d70:	cf 5f       	subi	r28, 0xFF	; 255
 d72:	01 c0       	rjmp	.+2      	; 0xd76 <setMidiLeds+0x3e>
 d74:	c0 e0       	ldi	r28, 0x00	; 0
 d76:	c6 30       	cpi	r28, 0x06	; 6
 d78:	28 f3       	brcs	.-54     	; 0xd44 <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
 d7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 d7e:	8f 3f       	cpi	r24, 0xFF	; 255
 d80:	11 f0       	breq	.+4      	; 0xd86 <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
 d82:	61 e0       	ldi	r22, 0x01	; 1
 d84:	45 d1       	rcall	.+650    	; 0x1010 <SH100HW_SetNewLedState>
		}
	}
}
 d86:	cf 91       	pop	r28
 d88:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

000011e4 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x00; // psc = 1024 if on
    11e4:	e1 e8       	ldi	r30, 0x81	; 129
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
    11ec:	ef e6       	ldi	r30, 0x6F	; 111
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	80 83       	st	Z, r24
	TCNT1 = 0;
    11f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    11fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	loadCommSetFromMemory();
    1204:	2b dc       	rcall	.-1962   	; 0xa5c <loadCommSetFromMemory>
	mode = RUNNING;
    1206:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    120a:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

0000145a <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    145a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    145e:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

00001188 <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
    1188:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <currentProgBtn>
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	f9 01       	movw	r30, r18
    1190:	ef 5f       	subi	r30, 0xFF	; 255
    1192:	fe 4f       	sbci	r31, 0xFE	; 254
    1194:	90 81       	ld	r25, Z
    1196:	91 30       	cpi	r25, 0x01	; 1
    1198:	21 f4       	brne	.+8      	; 0x11a2 <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
    119a:	f9 01       	movw	r30, r18
    119c:	ef 5f       	subi	r30, 0xFF	; 255
    119e:	fe 4f       	sbci	r31, 0xFE	; 254
    11a0:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
    11a2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
    11a6:	e8 2f       	mov	r30, r24
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	ef 5f       	subi	r30, 0xFF	; 255
    11ac:	fe 4f       	sbci	r31, 0xFE	; 254
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24
	setMidiLeds();
    11b2:	c2 dd       	rcall	.-1148   	; 0xd38 <setMidiLeds>
    11b4:	08 95       	ret

Disassembly of section .text.MIDICTRL_SwitchMode:

00000e2a <MIDICTRL_SwitchMode>:
	loadCommSetFromMemory();
	mode = RUNNING;
}

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
 e2a:	cf 93       	push	r28
 e2c:	c8 2f       	mov	r28, r24
	if(mode == RUNNING)
 e2e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 e32:	81 11       	cpse	r24, r1
 e34:	18 c0       	rjmp	.+48     	; 0xe66 <MIDICTRL_SwitchMode+0x3c>
	{
		MIDI_SetRetranslateState(false);
 e36:	1d d3       	rcall	.+1594   	; 0x1472 <MIDI_SetRetranslateState>
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
 e38:	80 e0       	ldi	r24, 0x00	; 0
 e3a:	06 c0       	rjmp	.+12     	; 0xe48 <MIDICTRL_SwitchMode+0x1e>
			midiProgBtnState[i] = PROG_CLEAR;
 e3c:	e8 2f       	mov	r30, r24
 e3e:	f0 e0       	ldi	r31, 0x00	; 0
 e40:	ef 5f       	subi	r30, 0xFF	; 255
 e42:	fe 4f       	sbci	r31, 0xFE	; 254
 e44:	10 82       	st	Z, r1
{	
	if(mode == RUNNING)
	{
		MIDI_SetRetranslateState(false);
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
 e46:	8f 5f       	subi	r24, 0xFF	; 255
 e48:	86 30       	cpi	r24, 0x06	; 6
 e4a:	c0 f3       	brcs	.-16     	; 0xe3c <MIDICTRL_SwitchMode+0x12>
			midiProgBtnState[i] = PROG_CLEAR;
		
		MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
 e4c:	80 e0       	ldi	r24, 0x00	; 0
 e4e:	9c d1       	rcall	.+824    	; 0x1188 <MIDICTRL_SetProgrammingButton>
		setMidiLeds();
 e50:	73 df       	rcall	.-282    	; 0xd38 <setMidiLeds>
		
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
 e52:	63 e0       	ldi	r22, 0x03	; 3
 e54:	87 e0       	ldi	r24, 0x07	; 7
 e56:	dc d0       	rcall	.+440    	; 0x1010 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
 e58:	63 e0       	ldi	r22, 0x03	; 3
 e5a:	88 e0       	ldi	r24, 0x08	; 8
 e5c:	d9 d0       	rcall	.+434    	; 0x1010 <SH100HW_SetNewLedState>
		
		SH100HW_SetNewLedState(LED_B, LED_OFF);
 e5e:	60 e0       	ldi	r22, 0x00	; 0
 e60:	86 e0       	ldi	r24, 0x06	; 6
 e62:	d6 d0       	rcall	.+428    	; 0x1010 <SH100HW_SetNewLedState>
 e64:	04 c0       	rjmp	.+8      	; 0xe6e <MIDICTRL_SwitchMode+0x44>
	}
	else
	{
		//SH100HW_SetPreviousLedState(LED_PWR_GRN);
		//SH100HW_SetPreviousLedState(LED_PWR_RED);
		SH100HW_SetPreviousLedState(LED_B);
 e66:	86 e0       	ldi	r24, 0x06	; 6
 e68:	d1 d1       	rcall	.+930    	; 0x120c <SH100HW_SetPreviousLedState>
		
		MIDI_SetRetranslateState(true);
 e6a:	81 e0       	ldi	r24, 0x01	; 1
 e6c:	02 d3       	rcall	.+1540   	; 0x1472 <MIDI_SetRetranslateState>
	}
	mode = newMode;
 e6e:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <mode>
}
 e72:	cf 91       	pop	r28
 e74:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

00001460 <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    1460:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <channelNum>
    1464:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

00001466 <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    1466:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <omniModeEnabled>
    146a:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

0000146c <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    146c:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <muteCommandEnabled>
    1470:	08 95       	ret

Disassembly of section .text.programmBtn:

00000e76 <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
 e76:	cf 92       	push	r12
 e78:	df 92       	push	r13
 e7a:	ef 92       	push	r14
 e7c:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
 e7e:	30 e0       	ldi	r19, 0x00	; 0
 e80:	f9 01       	movw	r30, r18
 e82:	ef 5f       	subi	r30, 0xFF	; 255
 e84:	fe 4f       	sbci	r31, 0xFE	; 254
 e86:	90 81       	ld	r25, Z
 e88:	91 30       	cpi	r25, 0x01	; 1
 e8a:	b9 f4       	brne	.+46     	; 0xeba <programmBtn+0x44>
 e8c:	6a 01       	movw	r12, r20
 e8e:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
 e90:	fa 01       	movw	r30, r20
 e92:	84 91       	lpm	r24, Z
 e94:	e7 fc       	sbrc	r14, 7
 e96:	80 81       	ld	r24, Z
 e98:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
 e9a:	82 e0       	ldi	r24, 0x02	; 2
 e9c:	c8 0e       	add	r12, r24
 e9e:	d1 1c       	adc	r13, r1
 ea0:	e1 1c       	adc	r14, r1
 ea2:	f6 01       	movw	r30, r12
 ea4:	84 91       	lpm	r24, Z
 ea6:	e7 fc       	sbrc	r14, 7
 ea8:	80 81       	ld	r24, Z
 eaa:	12 96       	adiw	r26, 0x02	; 2
 eac:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
 eae:	f9 01       	movw	r30, r18
 eb0:	ef 5f       	subi	r30, 0xFF	; 255
 eb2:	fe 4f       	sbci	r31, 0xFE	; 254
 eb4:	82 e0       	ldi	r24, 0x02	; 2
 eb6:	80 83       	st	Z, r24
		setMidiLeds();
 eb8:	3f df       	rcall	.-386    	; 0xd38 <setMidiLeds>
	}
}
 eba:	ef 90       	pop	r14
 ebc:	df 90       	pop	r13
 ebe:	cf 90       	pop	r12
 ec0:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

000010b6 <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
    10b6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    10ba:	81 30       	cpi	r24, 0x01	; 1
    10bc:	b1 f4       	brne	.+44     	; 0x10ea <MIDICTRL_StoreUserCommands+0x34>
	{
		commandSet = USER;
    10be:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
		
		eeprom_write_word((uint16_t*)0x02, MEMORY_MAGIC_WORD);
    10c2:	6b ea       	ldi	r22, 0xAB	; 171
    10c4:	7c ea       	ldi	r23, 0xAC	; 172
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	df d1       	rcall	.+958    	; 0x148a <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
    10cc:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <commandSet>
    10d0:	8b e0       	ldi	r24, 0x0B	; 11
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	18 d1       	rcall	.+560    	; 0x1306 <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
    10d6:	68 e0       	ldi	r22, 0x08	; 8
    10d8:	71 e0       	ldi	r23, 0x01	; 1
    10da:	80 e8       	ldi	r24, 0x80	; 128
    10dc:	28 e1       	ldi	r18, 0x18	; 24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	4c e0       	ldi	r20, 0x0C	; 12
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	38 d0       	rcall	.+112    	; 0x1156 <eeprom_write_block>
		
		mode = RUNNING;
    10e6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    10ea:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

000013ae <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    13ae:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	29 f4       	brne	.+10     	; 0x13c0 <MIDICTRL_DiscardCommands+0x12>
	{
		commandSet = DEFAULT;
    13b6:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
		loadCommSetFromMemory();
    13ba:	50 db       	rcall	.-2400   	; 0xa5c <loadCommSetFromMemory>
		mode = RUNNING;
    13bc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    13c0:	08 95       	ret

Disassembly of section .text.indicateMidiError:

000011b6 <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 255 - 100;
    11b6:	8b e9       	ldi	r24, 0x9B	; 155
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    11be:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TCCR1B |= 0x05; // psc = 1024 if on
    11c2:	e1 e8       	ldi	r30, 0x81	; 129
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	85 60       	ori	r24, 0x05	; 5
    11ca:	80 83       	st	Z, r24
	currentErrBtnId = currentProgBtn;
    11cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
    11d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	setMidiLeds();
    11d4:	b1 dd       	rcall	.-1182   	; 0xd38 <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    11d6:	60 e0       	ldi	r22, 0x00	; 0
    11d8:	87 e0       	ldi	r24, 0x07	; 7
    11da:	1a df       	rcall	.-460    	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    11dc:	61 e0       	ldi	r22, 0x01	; 1
    11de:	88 e0       	ldi	r24, 0x08	; 8
    11e0:	17 df       	rcall	.-466    	; 0x1010 <SH100HW_SetNewLedState>
    11e2:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

0000083c <MIDICTRL_HandleCommand>:
		setMidiLeds();
	}
}

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
 83c:	cf 93       	push	r28
 83e:	df 93       	push	r29
 840:	00 d0       	rcall	.+0      	; 0x842 <MIDICTRL_HandleCommand+0x6>
 842:	00 d0       	rcall	.+0      	; 0x844 <MIDICTRL_HandleCommand+0x8>
 844:	cd b7       	in	r28, 0x3d	; 61
 846:	de b7       	in	r29, 0x3e	; 62
 848:	69 83       	std	Y+1, r22	; 0x01
 84a:	7a 83       	std	Y+2, r23	; 0x02
 84c:	8b 83       	std	Y+3, r24	; 0x03
 84e:	9c 83       	std	Y+4, r25	; 0x04
	switch(mode)
 850:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 854:	88 23       	and	r24, r24
 856:	19 f0       	breq	.+6      	; 0x85e <MIDICTRL_HandleCommand+0x22>
 858:	81 30       	cpi	r24, 0x01	; 1
 85a:	d9 f1       	breq	.+118    	; 0x8d2 <MIDICTRL_HandleCommand+0x96>
 85c:	8f c0       	rjmp	.+286    	; 0x97c <MIDICTRL_HandleCommand+0x140>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 85e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <omniModeEnabled>
 862:	81 11       	cpse	r24, r1
 864:	05 c0       	rjmp	.+10     	; 0x870 <MIDICTRL_HandleCommand+0x34>
			{
				if(channelNum != command.channel) return;
 866:	9a 81       	ldd	r25, Y+2	; 0x02
 868:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <channelNum>
 86c:	98 13       	cpse	r25, r24
 86e:	86 c0       	rjmp	.+268    	; 0x97c <MIDICTRL_HandleCommand+0x140>
			}
			
			if(muteCommandEnabled)
 870:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <muteCommandEnabled>
 874:	88 23       	and	r24, r24
 876:	a9 f0       	breq	.+42     	; 0x8a2 <MIDICTRL_HandleCommand+0x66>
			{
				if(isEqualCommands(command, muteCommand)) 
 878:	88 ed       	ldi	r24, 0xD8	; 216
 87a:	91 e0       	ldi	r25, 0x01	; 1
 87c:	a0 e0       	ldi	r26, 0x00	; 0
 87e:	fc 01       	movw	r30, r24
 880:	5a 2f       	mov	r21, r26
 882:	7f d5       	rcall	.+2814   	; 0x1382 <__xload_4>
 884:	9b 01       	movw	r18, r22
 886:	ac 01       	movw	r20, r24
 888:	69 81       	ldd	r22, Y+1	; 0x01
 88a:	7a 81       	ldd	r23, Y+2	; 0x02
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	9c 81       	ldd	r25, Y+4	; 0x04
 890:	84 d5       	rcall	.+2824   	; 0x139a <isEqualCommands>
 892:	88 23       	and	r24, r24
 894:	31 f0       	breq	.+12     	; 0x8a2 <MIDICTRL_HandleCommand+0x66>
				{
					if(command.data2>0) SH100CTRL_MuteAmp();
 896:	8c 81       	ldd	r24, Y+4	; 0x04
 898:	88 23       	and	r24, r24
 89a:	11 f0       	breq	.+4      	; 0x8a0 <MIDICTRL_HandleCommand+0x64>
 89c:	ed d5       	rcall	.+3034   	; 0x1478 <SH100CTRL_MuteAmp>
 89e:	01 c0       	rjmp	.+2      	; 0x8a2 <MIDICTRL_HandleCommand+0x66>
					else SH100CTRL_UnmuteAmp();
 8a0:	c2 d5       	rcall	.+2948   	; 0x1426 <SH100CTRL_UnmuteAmp>
				}
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 8a2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
 8a6:	81 30       	cpi	r24, 0x01	; 1
 8a8:	19 f4       	brne	.+6      	; 0x8b0 <MIDICTRL_HandleCommand+0x74>
 8aa:	e8 e0       	ldi	r30, 0x08	; 8
 8ac:	f1 e0       	ldi	r31, 0x01	; 1
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <MIDICTRL_HandleCommand+0x78>
			else currentCommandBlock = &defaultCommands;
 8b0:	e6 e8       	ldi	r30, 0x86	; 134
 8b2:	f1 e0       	ldi	r31, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) SH100CTRL_SwChannel(0); return;
 8b4:	20 81       	ld	r18, Z
 8b6:	31 81       	ldd	r19, Z+1	; 0x01
 8b8:	42 81       	ldd	r20, Z+2	; 0x02
 8ba:	53 81       	ldd	r21, Z+3	; 0x03
 8bc:	69 81       	ldd	r22, Y+1	; 0x01
 8be:	7a 81       	ldd	r23, Y+2	; 0x02
 8c0:	8b 81       	ldd	r24, Y+3	; 0x03
 8c2:	9c 81       	ldd	r25, Y+4	; 0x04
 8c4:	6a d5       	rcall	.+2772   	; 0x139a <isEqualCommands>
 8c6:	88 23       	and	r24, r24
 8c8:	09 f4       	brne	.+2      	; 0x8cc <MIDICTRL_HandleCommand+0x90>
 8ca:	58 c0       	rjmp	.+176    	; 0x97c <MIDICTRL_HandleCommand+0x140>
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	b7 d5       	rcall	.+2926   	; 0x143e <SH100CTRL_SwChannel>
 8d0:	55 c0       	rjmp	.+170    	; 0x97c <MIDICTRL_HandleCommand+0x140>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command.status == MIDI_COMM_PROGRAM_CHANGE)
 8d2:	89 81       	ldd	r24, Y+1	; 0x01
 8d4:	80 3c       	cpi	r24, 0xC0	; 192
 8d6:	81 f5       	brne	.+96     	; 0x938 <MIDICTRL_HandleCommand+0xfc>
			{
				switch(currentProgBtn)
 8d8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 8dc:	81 30       	cpi	r24, 0x01	; 1
 8de:	79 f0       	breq	.+30     	; 0x8fe <MIDICTRL_HandleCommand+0xc2>
 8e0:	28 f0       	brcs	.+10     	; 0x8ec <MIDICTRL_HandleCommand+0xb0>
 8e2:	82 30       	cpi	r24, 0x02	; 2
 8e4:	a9 f0       	breq	.+42     	; 0x910 <MIDICTRL_HandleCommand+0xd4>
 8e6:	83 30       	cpi	r24, 0x03	; 3
 8e8:	e1 f0       	breq	.+56     	; 0x922 <MIDICTRL_HandleCommand+0xe6>
 8ea:	24 c0       	rjmp	.+72     	; 0x934 <MIDICTRL_HandleCommand+0xf8>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), &command, MIDI_PROG_BTN_CH1); break;
 8ec:	ae 01       	movw	r20, r28
 8ee:	4f 5f       	subi	r20, 0xFF	; 255
 8f0:	5f 4f       	sbci	r21, 0xFF	; 255
 8f2:	60 e8       	ldi	r22, 0x80	; 128
 8f4:	20 e0       	ldi	r18, 0x00	; 0
 8f6:	88 e0       	ldi	r24, 0x08	; 8
 8f8:	91 e0       	ldi	r25, 0x01	; 1
 8fa:	bd d2       	rcall	.+1402   	; 0xe76 <programmBtn>
 8fc:	3f c0       	rjmp	.+126    	; 0x97c <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), &command, MIDI_PROG_BTN_CH2); break;
 8fe:	ae 01       	movw	r20, r28
 900:	4f 5f       	subi	r20, 0xFF	; 255
 902:	5f 4f       	sbci	r21, 0xFF	; 255
 904:	60 e8       	ldi	r22, 0x80	; 128
 906:	21 e0       	ldi	r18, 0x01	; 1
 908:	8c e0       	ldi	r24, 0x0C	; 12
 90a:	91 e0       	ldi	r25, 0x01	; 1
 90c:	b4 d2       	rcall	.+1384   	; 0xe76 <programmBtn>
 90e:	36 c0       	rjmp	.+108    	; 0x97c <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), &command, MIDI_PROG_BTN_CH3); break;
 910:	ae 01       	movw	r20, r28
 912:	4f 5f       	subi	r20, 0xFF	; 255
 914:	5f 4f       	sbci	r21, 0xFF	; 255
 916:	60 e8       	ldi	r22, 0x80	; 128
 918:	22 e0       	ldi	r18, 0x02	; 2
 91a:	80 e1       	ldi	r24, 0x10	; 16
 91c:	91 e0       	ldi	r25, 0x01	; 1
 91e:	ab d2       	rcall	.+1366   	; 0xe76 <programmBtn>
 920:	2d c0       	rjmp	.+90     	; 0x97c <MIDICTRL_HandleCommand+0x140>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), &command, MIDI_PROG_BTN_CH4); break;
 922:	ae 01       	movw	r20, r28
 924:	4f 5f       	subi	r20, 0xFF	; 255
 926:	5f 4f       	sbci	r21, 0xFF	; 255
 928:	60 e8       	ldi	r22, 0x80	; 128
 92a:	23 e0       	ldi	r18, 0x03	; 3
 92c:	84 e1       	ldi	r24, 0x14	; 20
 92e:	91 e0       	ldi	r25, 0x01	; 1
 930:	a2 d2       	rcall	.+1348   	; 0xe76 <programmBtn>
 932:	24 c0       	rjmp	.+72     	; 0x97c <MIDICTRL_HandleCommand+0x140>
					default: indicateMidiError(); break; 
 934:	40 d4       	rcall	.+2176   	; 0x11b6 <indicateMidiError>
 936:	22 c0       	rjmp	.+68     	; 0x97c <MIDICTRL_HandleCommand+0x140>
				}
			}
			else if(command.status == MIDI_COMM_CONTROL_CHANGE)
 938:	80 3b       	cpi	r24, 0xB0	; 176
 93a:	f9 f4       	brne	.+62     	; 0x97a <MIDICTRL_HandleCommand+0x13e>
			{
				if(command.data1 == muteCommand.data1)
 93c:	8b 81       	ldd	r24, Y+3	; 0x03
 93e:	87 30       	cpi	r24, 0x07	; 7
 940:	11 f4       	brne	.+4      	; 0x946 <MIDICTRL_HandleCommand+0x10a>
				{
					indicateMidiError();
 942:	39 d4       	rcall	.+2162   	; 0x11b6 <indicateMidiError>
 944:	1b c0       	rjmp	.+54     	; 0x97c <MIDICTRL_HandleCommand+0x140>
				}
				else
				{
					switch(currentProgBtn)
 946:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 94a:	84 30       	cpi	r24, 0x04	; 4
 94c:	59 f0       	breq	.+22     	; 0x964 <MIDICTRL_HandleCommand+0x128>
 94e:	85 30       	cpi	r24, 0x05	; 5
 950:	91 f4       	brne	.+36     	; 0x976 <MIDICTRL_HandleCommand+0x13a>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), &command, MIDI_PROG_BTN_AB); break;
 952:	ae 01       	movw	r20, r28
 954:	4f 5f       	subi	r20, 0xFF	; 255
 956:	5f 4f       	sbci	r21, 0xFF	; 255
 958:	60 e8       	ldi	r22, 0x80	; 128
 95a:	25 e0       	ldi	r18, 0x05	; 5
 95c:	8c e1       	ldi	r24, 0x1C	; 28
 95e:	91 e0       	ldi	r25, 0x01	; 1
 960:	8a d2       	rcall	.+1300   	; 0xe76 <programmBtn>
 962:	0c c0       	rjmp	.+24     	; 0x97c <MIDICTRL_HandleCommand+0x140>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), &command, MIDI_PROG_BTN_LOOP); break;
 964:	ae 01       	movw	r20, r28
 966:	4f 5f       	subi	r20, 0xFF	; 255
 968:	5f 4f       	sbci	r21, 0xFF	; 255
 96a:	60 e8       	ldi	r22, 0x80	; 128
 96c:	24 e0       	ldi	r18, 0x04	; 4
 96e:	88 e1       	ldi	r24, 0x18	; 24
 970:	91 e0       	ldi	r25, 0x01	; 1
 972:	81 d2       	rcall	.+1282   	; 0xe76 <programmBtn>
 974:	03 c0       	rjmp	.+6      	; 0x97c <MIDICTRL_HandleCommand+0x140>
						default: indicateMidiError(); break;
 976:	1f d4       	rcall	.+2110   	; 0x11b6 <indicateMidiError>
 978:	01 c0       	rjmp	.+2      	; 0x97c <MIDICTRL_HandleCommand+0x140>
					}
				}
			}
			else
			{
				indicateMidiError();
 97a:	1d d4       	rcall	.+2106   	; 0x11b6 <indicateMidiError>
			}			
			break;
		}
	}	
}
 97c:	0f 90       	pop	r0
 97e:	0f 90       	pop	r0
 980:	0f 90       	pop	r0
 982:	0f 90       	pop	r0
 984:	df 91       	pop	r29
 986:	cf 91       	pop	r28
 988:	08 95       	ret

Disassembly of section .text.__vector_13:

00000cdc <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
 cdc:	1f 92       	push	r1
 cde:	0f 92       	push	r0
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	0f 92       	push	r0
 ce4:	11 24       	eor	r1, r1
 ce6:	2f 93       	push	r18
 ce8:	3f 93       	push	r19
 cea:	4f 93       	push	r20
 cec:	5f 93       	push	r21
 cee:	6f 93       	push	r22
 cf0:	7f 93       	push	r23
 cf2:	8f 93       	push	r24
 cf4:	9f 93       	push	r25
 cf6:	af 93       	push	r26
 cf8:	bf 93       	push	r27
 cfa:	ef 93       	push	r30
 cfc:	ff 93       	push	r31
	TCCR1B |= 0x00;
 cfe:	e1 e8       	ldi	r30, 0x81	; 129
 d00:	f0 e0       	ldi	r31, 0x00	; 0
 d02:	80 81       	ld	r24, Z
 d04:	80 83       	st	Z, r24
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
 d06:	8f ef       	ldi	r24, 0xFF	; 255
 d08:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	setMidiLeds();
 d0c:	15 d0       	rcall	.+42     	; 0xd38 <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
 d0e:	87 e0       	ldi	r24, 0x07	; 7
 d10:	7d d2       	rcall	.+1274   	; 0x120c <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
 d12:	88 e0       	ldi	r24, 0x08	; 8
 d14:	7b d2       	rcall	.+1270   	; 0x120c <SH100HW_SetPreviousLedState>
 d16:	ff 91       	pop	r31
 d18:	ef 91       	pop	r30
 d1a:	bf 91       	pop	r27
 d1c:	af 91       	pop	r26
 d1e:	9f 91       	pop	r25
 d20:	8f 91       	pop	r24
 d22:	7f 91       	pop	r23
 d24:	6f 91       	pop	r22
 d26:	5f 91       	pop	r21
 d28:	4f 91       	pop	r20
 d2a:	3f 91       	pop	r19
 d2c:	2f 91       	pop	r18
 d2e:	0f 90       	pop	r0
 d30:	0f be       	out	0x3f, r0	; 63
 d32:	0f 90       	pop	r0
 d34:	1f 90       	pop	r1
 d36:	18 95       	reti

Disassembly of section .text.handleRealTimeStatus:

00001490 <handleRealTimeStatus>:
	HADLE_SYS_EX
}state = RESET;

void handleRealTimeStatus(MIDI_Status_t status)
{
	UART_PushWord(status);
    1490:	3b dd       	rcall	.-1418   	; 0xf08 <UART_PushWord>
    1492:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

000006e6 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 6e6:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <state>
 6ea:	8e 2f       	mov	r24, r30
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	87 30       	cpi	r24, 0x07	; 7
 6f0:	91 05       	cpc	r25, r1
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <MIDI_ParserTask+0x10>
 6f4:	a2 c0       	rjmp	.+324    	; 0x83a <MIDI_ParserTask+0x154>
 6f6:	fc 01       	movw	r30, r24
 6f8:	e6 56       	subi	r30, 0x66	; 102
 6fa:	ff 4f       	sbci	r31, 0xFF	; 255
 6fc:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 6fe:	e4 e2       	ldi	r30, 0x24	; 36
 700:	f1 e0       	ldi	r31, 0x01	; 1
 702:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 704:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 706:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 708:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 70c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 716:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 718:	66 d6       	rcall	.+3276   	; 0x13e6 <UART_RxBufferNotEmpty>
 71a:	88 23       	and	r24, r24
 71c:	09 f4       	brne	.+2      	; 0x720 <MIDI_ParserTask+0x3a>
 71e:	8d c0       	rjmp	.+282    	; 0x83a <MIDI_ParserTask+0x154>
			{
				recievedWord = UART_PopWord();
 720:	00 d5       	rcall	.+2560   	; 0x1122 <UART_PopWord>
 722:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 726:	6d d6       	rcall	.+3290   	; 0x1402 <MIDI_IsSysRealTime>
 728:	88 23       	and	r24, r24
 72a:	21 f0       	breq	.+8      	; 0x734 <MIDI_ParserTask+0x4e>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
 72c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 730:	af d6       	rcall	.+3422   	; 0x1490 <handleRealTimeStatus>
					return;
 732:	08 95       	ret
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 734:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 738:	8c d6       	rcall	.+3352   	; 0x1452 <MIDI_IsStatusWord>
 73a:	88 23       	and	r24, r24
 73c:	21 f0       	breq	.+8      	; 0x746 <MIDI_ParserTask+0x60>
				{					
					state = DISPATCH_STATUS;
 73e:	82 e0       	ldi	r24, 0x02	; 2
 740:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 744:	20 c0       	rjmp	.+64     	; 0x786 <MIDI_ParserTask+0xa0>
				}
				else
				{
					switch(currentStatusType)
 746:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <currentStatusType>
 74a:	82 30       	cpi	r24, 0x02	; 2
 74c:	49 f0       	breq	.+18     	; 0x760 <MIDI_ParserTask+0x7a>
 74e:	18 f4       	brcc	.+6      	; 0x756 <MIDI_ParserTask+0x70>
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	51 f0       	breq	.+20     	; 0x768 <MIDI_ParserTask+0x82>
 754:	15 c0       	rjmp	.+42     	; 0x780 <MIDI_ParserTask+0x9a>
 756:	84 30       	cpi	r24, 0x04	; 4
 758:	59 f0       	breq	.+22     	; 0x770 <MIDI_ParserTask+0x8a>
 75a:	85 30       	cpi	r24, 0x05	; 5
 75c:	69 f0       	breq	.+26     	; 0x778 <MIDI_ParserTask+0x92>
 75e:	10 c0       	rjmp	.+32     	; 0x780 <MIDI_ParserTask+0x9a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 760:	84 e0       	ldi	r24, 0x04	; 4
 762:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 766:	0f c0       	rjmp	.+30     	; 0x786 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 768:	83 e0       	ldi	r24, 0x03	; 3
 76a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 76e:	0b c0       	rjmp	.+22     	; 0x786 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 770:	85 e0       	ldi	r24, 0x05	; 5
 772:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 776:	07 c0       	rjmp	.+14     	; 0x786 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 778:	86 e0       	ldi	r24, 0x06	; 6
 77a:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 77e:	03 c0       	rjmp	.+6      	; 0x786 <MIDI_ParserTask+0xa0>
						default: state = WAIT_WORD;
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
					}
				}
				
				if(retranslate)
 786:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <retranslate>
 78a:	88 23       	and	r24, r24
 78c:	09 f4       	brne	.+2      	; 0x790 <MIDI_ParserTask+0xaa>
 78e:	55 c0       	rjmp	.+170    	; 0x83a <MIDI_ParserTask+0x154>
				{
					UART_PushWord(recievedWord);
 790:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 794:	b9 d3       	rcall	.+1906   	; 0xf08 <UART_PushWord>
 796:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 798:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <recievedWord>
 79c:	89 2f       	mov	r24, r25
 79e:	82 95       	swap	r24
 7a0:	8f 70       	andi	r24, 0x0F	; 15
 7a2:	e4 e2       	ldi	r30, 0x24	; 36
 7a4:	f1 e0       	ldi	r31, 0x01	; 1
 7a6:	80 83       	st	Z, r24
			currentCommand.channel = recievedWord & 0x0F;
 7a8:	9f 70       	andi	r25, 0x0F	; 15
 7aa:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 7ac:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 7ae:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 7b0:	ef d3       	rcall	.+2014   	; 0xf90 <MIDI_GetStatusType>
 7b2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 7b6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 7c0:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 7c2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <isSecondDataWord>
 7c6:	88 23       	and	r24, r24
 7c8:	81 f0       	breq	.+32     	; 0x7ea <MIDI_ParserTask+0x104>
			{
				currentCommand.data2 = recievedWord;
 7ca:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 7ce:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <currentCommand+0x3>
				isSecondDataWord = false;			
 7d2:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 7d6:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 7da:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 7de:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 7e2:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 7e6:	2a d0       	rcall	.+84     	; 0x83c <MIDICTRL_HandleCommand>
 7e8:	07 c0       	rjmp	.+14     	; 0x7f8 <MIDI_ParserTask+0x112>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 7ea:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 7ee:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
				isSecondDataWord = true;
 7f2:	81 e0       	ldi	r24, 0x01	; 1
 7f4:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isSecondDataWord>
			}
			state = WAIT_WORD;
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 7fe:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 800:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 804:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 808:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 80c:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 810:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 814:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 818:	11 d0       	rcall	.+34     	; 0x83c <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 820:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
			break;
 828:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 82a:	e4 e2       	ldi	r30, 0x24	; 36
 82c:	f1 e0       	ldi	r31, 0x01	; 1
 82e:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 830:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 832:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <state>
 83a:	08 95       	ret

Disassembly of section .text.MIDI_SetRetranslateState:

00001472 <MIDI_SetRetranslateState>:
	}
}

void MIDI_SetRetranslateState(bool enabled)
{
	retranslate = enabled;
    1472:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <retranslate>
    1476:	08 95       	ret

Disassembly of section .text.setChannelLeds:

000012c8 <setChannelLeds>:
	SH100CTRL_SetAmpState(ampState);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	a1 de       	rcall	.-702    	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	9e de       	rcall	.-708    	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	9b de       	rcall	.-714    	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	83 e0       	ldi	r24, 0x03	; 3
    12de:	98 de       	rcall	.-720    	; 0x1010 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    12e0:	61 e0       	ldi	r22, 0x01	; 1
    12e2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ampState>
    12e6:	94 de       	rcall	.-728    	; 0x1010 <SH100HW_SetNewLedState>
    12e8:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

00001234 <SH100CTRL_SetAmpLeds>:
}

void SH100CTRL_SetAmpLeds()
{
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
	setChannelLeds();
    1238:	47 d0       	rcall	.+142    	; 0x12c8 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
    123a:	c9 e2       	ldi	r28, 0x29	; 41
    123c:	d1 e0       	ldi	r29, 0x01	; 1
    123e:	69 81       	ldd	r22, Y+1	; 0x01
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	e6 de       	rcall	.-564    	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1244:	6a 81       	ldd	r22, Y+2	; 0x02
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	68 27       	eor	r22, r24
    124a:	85 e0       	ldi	r24, 0x05	; 5
    124c:	e1 de       	rcall	.-574    	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    124e:	6a 81       	ldd	r22, Y+2	; 0x02
    1250:	86 e0       	ldi	r24, 0x06	; 6
    1252:	de de       	rcall	.-580    	; 0x1010 <SH100HW_SetNewLedState>
}
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

0000143e <SH100CTRL_SwChannel>:

void SH100CTRL_SwChannel(uint8_t chNum)
{
	ampState.channelNum = chNum;
    143e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ampState>
	
	SH100HW_SwitchCh(chNum);
    1442:	cc dc       	rcall	.-1640   	; 0xddc <SH100HW_SwitchCh>
	setChannelLeds();
    1444:	41 df       	rcall	.-382    	; 0x12c8 <setChannelLeds>
    1446:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetLoop:

00001322 <SH100CTRL_SetLoop>:
}

void SH100CTRL_SetLoop(bool en)
{
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
	ampState.loopOn = en;
    1326:	c9 e2       	ldi	r28, 0x29	; 41
    1328:	d1 e0       	ldi	r29, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn);
    132c:	06 d0       	rcall	.+12     	; 0x133a <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
    132e:	69 81       	ldd	r22, Y+1	; 0x01
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	6e de       	rcall	.-804    	; 0x1010 <SH100HW_SetNewLedState>
}
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAB:

00001280 <SH100CTRL_SetAB>:

void SH100CTRL_SetAB(bool isB)
{
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
	ampState.swAB = isB;
    1284:	c9 e2       	ldi	r28, 0x29	; 41
    1286:	d1 e0       	ldi	r29, 0x01	; 1
    1288:	8a 83       	std	Y+2, r24	; 0x02
	SH100HW_SetAB(ampState.swAB);
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	f8 d0       	rcall	.+496    	; 0x147e <SH100HW_SetAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    128e:	6a 81       	ldd	r22, Y+2	; 0x02
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	68 27       	eor	r22, r24
    1294:	85 e0       	ldi	r24, 0x05	; 5
    1296:	bc de       	rcall	.-648    	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    1298:	6a 81       	ldd	r22, Y+2	; 0x02
    129a:	86 e0       	ldi	r24, 0x06	; 6
    129c:	b9 de       	rcall	.-654    	; 0x1010 <SH100HW_SetNewLedState>
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

0000140e <SH100CTRL_SwLoop>:

void SH100CTRL_SwLoop()
{
	SH100CTRL_SetLoop(!ampState.loopOn);
    140e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <ampState+0x1>
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 27       	eor	r24, r25
    1416:	85 df       	rcall	.-246    	; 0x1322 <SH100CTRL_SetLoop>
    1418:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

0000141a <SH100CTRL_SwAB>:
}

void SH100CTRL_SwAB()
{
	SH100CTRL_SetAB(!ampState.swAB);
    141a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <ampState+0x2>
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	89 27       	eor	r24, r25
    1422:	2e df       	rcall	.-420    	; 0x1280 <SH100CTRL_SetAB>
    1424:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

00001478 <SH100CTRL_MuteAmp>:
}

void SH100CTRL_MuteAmp()
{
	SH100HW_SetPAState(OUTPUT_MUTE);
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	ef de       	rcall	.-546    	; 0x125a <SH100HW_SetPAState>
    147c:	08 95       	ret

Disassembly of section .text.SH100CTRL_UnmuteAmp:

00001426 <SH100CTRL_UnmuteAmp>:
}

void SH100CTRL_UnmuteAmp()
{
	if(SH100HW_GetOutputJacks() != OUT_NONE)
    1426:	95 df       	rcall	.-214    	; 0x1352 <SH100HW_GetOutputJacks>
    1428:	88 23       	and	r24, r24
    142a:	11 f0       	breq	.+4      	; 0x1430 <SH100CTRL_UnmuteAmp+0xa>
	{
		SH100HW_SetPAState(OUTPUT_ENABLED);	
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	15 df       	rcall	.-470    	; 0x125a <SH100HW_SetPAState>
    1430:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

00000fd0 <SH100CTRL_SetAmpState>:
	}		
}

void SH100CTRL_SetAmpState(SH100_State_t state)
{
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
	ampState = state;
     fd4:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <ampState>
     fd8:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <ampState+0x1>
     fdc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ampState+0x2>
	
	SH100HW_SwitchCh(ampState.channelNum);
     fe0:	c9 e2       	ldi	r28, 0x29	; 41
     fe2:	d1 e0       	ldi	r29, 0x01	; 1
     fe4:	86 2f       	mov	r24, r22
     fe6:	fa de       	rcall	.-524    	; 0xddc <SH100HW_SwitchCh>
	SH100HW_LoopEn(ampState.loopOn);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	a7 d1       	rcall	.+846    	; 0x133a <SH100HW_LoopEn>
	SH100HW_SetAB(ampState.swAB);
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	46 d2       	rcall	.+1164   	; 0x147e <SH100HW_SetAB>
	
	setChannelLeds();
     ff2:	6a d1       	rcall	.+724    	; 0x12c8 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
     ff4:	69 81       	ldd	r22, Y+1	; 0x01
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	0b d0       	rcall	.+22     	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
     ffa:	6a 81       	ldd	r22, Y+2	; 0x02
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	68 27       	eor	r22, r24
    1000:	85 e0       	ldi	r24, 0x05	; 5
    1002:	06 d0       	rcall	.+12     	; 0x1010 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    1004:	6a 81       	ldd	r22, Y+2	; 0x02
    1006:	86 e0       	ldi	r24, 0x06	; 6
    1008:	03 d0       	rcall	.+6      	; 0x1010 <SH100HW_SetNewLedState>
}
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000c1c <SH100CTRL_Init>:
#include "sh100_hardware.h"

SH100_State_t ampState;

void SH100CTRL_Init()
{
 c1c:	cf 93       	push	r28
 c1e:	df 93       	push	r29
 c20:	00 d0       	rcall	.+0      	; 0xc22 <SH100CTRL_Init+0x6>
 c22:	0f 92       	push	r0
 c24:	cd b7       	in	r28, 0x3d	; 61
 c26:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 c28:	60 e0       	ldi	r22, 0x00	; 0
 c2a:	70 e0       	ldi	r23, 0x00	; 0
 c2c:	80 e0       	ldi	r24, 0x00	; 0
 c2e:	01 d4       	rcall	.+2050   	; 0x1432 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 c30:	8b 3a       	cpi	r24, 0xAB	; 171
 c32:	9c 4a       	sbci	r25, 0xAC	; 172
 c34:	91 f4       	brne	.+36     	; 0xc5a <SH100CTRL_Init+0x3e>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
 c36:	48 e0       	ldi	r20, 0x08	; 8
 c38:	50 e0       	ldi	r21, 0x00	; 0
 c3a:	60 e8       	ldi	r22, 0x80	; 128
 c3c:	23 e0       	ldi	r18, 0x03	; 3
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	ce 01       	movw	r24, r28
 c42:	01 96       	adiw	r24, 0x01	; 1
 c44:	2f d3       	rcall	.+1630   	; 0x12a4 <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 c46:	89 81       	ldd	r24, Y+1	; 0x01
 c48:	9a 81       	ldd	r25, Y+2	; 0x02
 c4a:	ab 81       	ldd	r26, Y+3	; 0x03
 c4c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ampState>
 c50:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ampState+0x1>
 c54:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <ampState+0x2>
 c58:	05 c0       	rjmp	.+10     	; 0xc64 <SH100CTRL_Init+0x48>
	}
	else
	{
		ampState.channelNum = 0;
 c5a:	e9 e2       	ldi	r30, 0x29	; 41
 c5c:	f1 e0       	ldi	r31, 0x01	; 1
 c5e:	10 82       	st	Z, r1
		ampState.loopOn = false;
 c60:	11 82       	std	Z+1, r1	; 0x01
		ampState.swAB = false;		
 c62:	12 82       	std	Z+2, r1	; 0x02
	}
	
	SH100CTRL_SetAmpState(ampState);
 c64:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <ampState>
 c68:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <ampState+0x1>
 c6c:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ampState+0x2>
 c70:	af d1       	rcall	.+862    	; 0xfd0 <SH100CTRL_SetAmpState>
}
 c72:	0f 90       	pop	r0
 c74:	0f 90       	pop	r0
 c76:	0f 90       	pop	r0
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	08 95       	ret

Disassembly of section .text.SH100CTRL_StoreAmpState:

000012ea <SH100CTRL_StoreAmpState>:
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
}

void SH100CTRL_StoreAmpState()
{
	eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
    12ea:	6b ea       	ldi	r22, 0xAB	; 171
    12ec:	7c ea       	ldi	r23, 0xAC	; 172
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	cb d0       	rcall	.+406    	; 0x148a <eeprom_write_word>
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
    12f4:	69 e2       	ldi	r22, 0x29	; 41
    12f6:	71 e0       	ldi	r23, 0x01	; 1
    12f8:	80 e8       	ldi	r24, 0x80	; 128
    12fa:	23 e0       	ldi	r18, 0x03	; 3
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	48 e0       	ldi	r20, 0x08	; 8
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	29 df       	rcall	.-430    	; 0x1156 <eeprom_write_block>
    1304:	08 95       	ret

Disassembly of section .text.SH100CTRL_CheckOutputJacks:

00000c7e <SH100CTRL_CheckOutputJacks>:
}

void SH100CTRL_CheckOutputJacks()
{
	SH100HW_OutputJacks_t outJacksState = SH100HW_GetOutputJacks();
 c7e:	69 d3       	rcall	.+1746   	; 0x1352 <SH100HW_GetOutputJacks>
	
	switch(outJacksState)
 c80:	81 30       	cpi	r24, 0x01	; 1
 c82:	89 f0       	breq	.+34     	; 0xca6 <SH100CTRL_CheckOutputJacks+0x28>
 c84:	28 f0       	brcs	.+10     	; 0xc90 <SH100CTRL_CheckOutputJacks+0x12>
 c86:	82 30       	cpi	r24, 0x02	; 2
 c88:	c1 f0       	breq	.+48     	; 0xcba <SH100CTRL_CheckOutputJacks+0x3c>
 c8a:	83 30       	cpi	r24, 0x03	; 3
 c8c:	01 f1       	breq	.+64     	; 0xcce <SH100CTRL_CheckOutputJacks+0x50>
 c8e:	08 95       	ret
	{
		case OUT_NONE:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c90:	e4 d3       	rcall	.+1992   	; 0x145a <MIDICTRL_MidiMode>
 c92:	81 11       	cpse	r24, r1
 c94:	06 c0       	rjmp	.+12     	; 0xca2 <SH100CTRL_CheckOutputJacks+0x24>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 c96:	60 e0       	ldi	r22, 0x00	; 0
 c98:	87 e0       	ldi	r24, 0x07	; 7
 c9a:	ba d1       	rcall	.+884    	; 0x1010 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 c9c:	61 e0       	ldi	r22, 0x01	; 1
 c9e:	88 e0       	ldi	r24, 0x08	; 8
 ca0:	b7 d1       	rcall	.+878    	; 0x1010 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 ca2:	ea d3       	rcall	.+2004   	; 0x1478 <SH100CTRL_MuteAmp>
			break;
 ca4:	08 95       	ret
		}
		case OUT_16OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 ca6:	d9 d3       	rcall	.+1970   	; 0x145a <MIDICTRL_MidiMode>
 ca8:	81 11       	cpse	r24, r1
 caa:	17 c0       	rjmp	.+46     	; 0xcda <SH100CTRL_CheckOutputJacks+0x5c>
			{
				SH100CTRL_UnmuteAmp();
 cac:	bc d3       	rcall	.+1912   	; 0x1426 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_16OHM);
 cae:	81 e0       	ldi	r24, 0x01	; 1
 cb0:	e9 d3       	rcall	.+2002   	; 0x1484 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 cb2:	61 e0       	ldi	r22, 0x01	; 1
 cb4:	87 e0       	ldi	r24, 0x07	; 7
 cb6:	ac d1       	rcall	.+856    	; 0x1010 <SH100HW_SetNewLedState>
 cb8:	08 95       	ret
			}			
			break;
		}
		case OUT_8OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 cba:	cf d3       	rcall	.+1950   	; 0x145a <MIDICTRL_MidiMode>
 cbc:	81 11       	cpse	r24, r1
 cbe:	0d c0       	rjmp	.+26     	; 0xcda <SH100CTRL_CheckOutputJacks+0x5c>
			{
				SH100CTRL_UnmuteAmp();
 cc0:	b2 d3       	rcall	.+1892   	; 0x1426 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_8OHM);
 cc2:	80 e0       	ldi	r24, 0x00	; 0
 cc4:	df d3       	rcall	.+1982   	; 0x1484 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 cc6:	61 e0       	ldi	r22, 0x01	; 1
 cc8:	87 e0       	ldi	r24, 0x07	; 7
 cca:	a2 d1       	rcall	.+836    	; 0x1010 <SH100HW_SetNewLedState>
 ccc:	08 95       	ret

			break;
		}
		case OUT_BOTH:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 cce:	c5 d3       	rcall	.+1930   	; 0x145a <MIDICTRL_MidiMode>
 cd0:	81 11       	cpse	r24, r1
 cd2:	03 c0       	rjmp	.+6      	; 0xcda <SH100CTRL_CheckOutputJacks+0x5c>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
 cd4:	63 e0       	ldi	r22, 0x03	; 3
 cd6:	87 e0       	ldi	r24, 0x07	; 7
 cd8:	9b d1       	rcall	.+822    	; 0x1010 <SH100HW_SetNewLedState>
 cda:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000ad6 <SH100HW_Init>:
SH100HW_Buttons_t buttonsState;
void readButtonsState();
void writeShiftRegs(uint16_t data);

void SH100HW_Init()
{
 ad6:	1f 93       	push	r17
 ad8:	cf 93       	push	r28
 ada:	df 93       	push	r29
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 adc:	55 b1       	in	r21, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 ade:	84 b1       	in	r24, 0x04	; 4
 ae0:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 ae2:	28 b1       	in	r18, 0x08	; 8
 ae4:	20 61       	ori	r18, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 ae6:	97 b1       	in	r25, 0x07	; 7
 ae8:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 aea:	3b b1       	in	r19, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 aec:	4a b1       	in	r20, 0x0a	; 10
 aee:	40 6e       	ori	r20, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 af0:	3b 71       	andi	r19, 0x1B	; 27
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 af2:	4b 7e       	andi	r20, 0xEB	; 235
 af4:	4a b9       	out	0x0a, r20	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 af6:	30 61       	ori	r19, 0x10	; 16
 af8:	3b b9       	out	0x0b, r19	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 afa:	9b 7d       	andi	r25, 0xDB	; 219
 afc:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 afe:	21 7d       	andi	r18, 0xD1	; 209
 b00:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 b02:	9a 60       	ori	r25, 0x0A	; 10
 b04:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 b06:	95 2f       	mov	r25, r21
 b08:	90 7d       	andi	r25, 0xD0	; 208
 b0a:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 b0c:	84 60       	ori	r24, 0x04	; 4
 b0e:	84 b9       	out	0x04, r24	; 4
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 b10:	10 e0       	ldi	r17, 0x00	; 0
 b12:	0c c0       	rjmp	.+24     	; 0xb2c <SH100HW_Init+0x56>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
 b14:	c1 2f       	mov	r28, r17
 b16:	d0 e0       	ldi	r29, 0x00	; 0
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	36 df       	rcall	.-404    	; 0x98a <__simple_malloc>
 b1e:	cc 0f       	add	r28, r28
 b20:	dd 1f       	adc	r29, r29
 b22:	cf 5b       	subi	r28, 0xBF	; 191
 b24:	de 4f       	sbci	r29, 0xFE	; 254
 b26:	99 83       	std	Y+1, r25	; 0x01
 b28:	88 83       	st	Y, r24
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 b2a:	1f 5f       	subi	r17, 0xFF	; 255
 b2c:	12 31       	cpi	r17, 0x12	; 18
 b2e:	90 f3       	brcs	.-28     	; 0xb14 <SH100HW_Init+0x3e>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
	
	// ADC settings
	ADMUX = (1<<REFS0) | (1<<ADLAR); // AREF ext pin, Left-adjustment result
 b30:	80 e6       	ldi	r24, 0x60	; 96
 b32:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	DIDR0 = 0x01; // Disable digital io on PC0
 b36:	81 e0       	ldi	r24, 0x01	; 1
 b38:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7fe07e>
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, INT enable, prescaler = 64
 b3c:	8e e8       	ldi	r24, 0x8E	; 142
 b3e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
}
 b42:	df 91       	pop	r29
 b44:	cf 91       	pop	r28
 b46:	1f 91       	pop	r17
 b48:	08 95       	ret

Disassembly of section .text.SH100HW_GetButtonsState:

000013c2 <SH100HW_GetButtonsState>:

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
    13c2:	2f e0       	ldi	r18, 0x0F	; 15
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f1 e0       	ldi	r31, 0x01	; 1
    13c8:	dc 01       	movw	r26, r24
    13ca:	01 90       	ld	r0, Z+
    13cc:	0d 92       	st	X+, r0
    13ce:	2a 95       	dec	r18
    13d0:	e1 f7       	brne	.-8      	; 0x13ca <SH100HW_GetButtonsState+0x8>
}
    13d2:	08 95       	ret

Disassembly of section .text.SH100HW_SwitchCh:

00000ddc <SH100HW_SwitchCh>:

void SH100HW_SwitchCh(uint8_t chNum)
{
	switch(chNum)
 ddc:	81 30       	cpi	r24, 0x01	; 1
 dde:	69 f0       	breq	.+26     	; 0xdfa <SH100HW_SwitchCh+0x1e>
 de0:	28 f0       	brcs	.+10     	; 0xdec <SH100HW_SwitchCh+0x10>
 de2:	82 30       	cpi	r24, 0x02	; 2
 de4:	91 f0       	breq	.+36     	; 0xe0a <SH100HW_SwitchCh+0x2e>
 de6:	83 30       	cpi	r24, 0x03	; 3
 de8:	c1 f0       	breq	.+48     	; 0xe1a <SH100HW_SwitchCh+0x3e>
 dea:	08 95       	ret
	{
		case 0:
		{
			RELAY_13_24 = REL_OFF;
 dec:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 df0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 df4:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <RELAY_2_4>
			break;
 df8:	08 95       	ret
		}
		case 1:
		{
			RELAY_13_24 = REL_ON;
 dfa:	81 e0       	ldi	r24, 0x01	; 1
 dfc:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 e00:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 e04:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <RELAY_2_4>
			break;
 e08:	08 95       	ret
		}
		case 2:
		{
			RELAY_13_24 = REL_OFF;
 e0a:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_ON;
 e0e:	81 e0       	ldi	r24, 0x01	; 1
 e10:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 e14:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <RELAY_2_4>
			break;
 e18:	08 95       	ret
		}
		case 3:
		{
			RELAY_13_24 = REL_ON;
 e1a:	81 e0       	ldi	r24, 0x01	; 1
 e1c:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 e20:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <RELAY_1_3>
			RELAY_2_4 = REL_ON;
 e24:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <RELAY_2_4>
 e28:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

0000133a <SH100HW_LoopEn>:
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
	RELAY_LOOP = isEnabled;
    133a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <RELAY_LOOP>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    133e:	88 23       	and	r24, r24
    1340:	21 f0       	breq	.+8      	; 0x134a <SH100HW_LoopEn+0x10>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1342:	85 b1       	in	r24, 0x05	; 5
    1344:	84 60       	ori	r24, 0x04	; 4
    1346:	85 b9       	out	0x05, r24	; 5
    1348:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    134a:	85 b1       	in	r24, 0x05	; 5
    134c:	8b 7f       	andi	r24, 0xFB	; 251
    134e:	85 b9       	out	0x05, r24	; 5
    1350:	08 95       	ret

Disassembly of section .text.SH100HW_SetAB:

0000147e <SH100HW_SetAB>:
	ioport_set_pin_level(PIN_RELAY_LOOP, RELAY_LOOP);
}

void SH100HW_SetAB(bool isBEn)
{
	RELAY_AB = isBEn;
    147e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <RELAY_AB>
    1482:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

00001010 <SH100HW_SetNewLedState>:
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
    1014:	e8 2f       	mov	r30, r24
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	df 01       	movw	r26, r30
    101a:	19 96       	adiw	r26, 0x09	; 9
    101c:	aa 0f       	add	r26, r26
    101e:	bb 1f       	adc	r27, r27
    1020:	af 5b       	subi	r26, 0xBF	; 191
    1022:	be 4f       	sbci	r27, 0xFE	; 254
    1024:	0d 90       	ld	r0, X+
    1026:	bc 91       	ld	r27, X
    1028:	a0 2d       	mov	r26, r0
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	ef 5b       	subi	r30, 0xBF	; 191
    1030:	fe 4f       	sbci	r31, 0xFE	; 254
    1032:	c0 81       	ld	r28, Z
    1034:	d1 81       	ldd	r29, Z+1	; 0x01
    1036:	88 81       	ld	r24, Y
    1038:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
    103a:	01 90       	ld	r0, Z+
    103c:	f0 81       	ld	r31, Z
    103e:	e0 2d       	mov	r30, r0
    1040:	60 83       	st	Z, r22
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

0000120c <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	fc 01       	movw	r30, r24
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	ef 5b       	subi	r30, 0xBF	; 191
    1216:	fe 4f       	sbci	r31, 0xFE	; 254
    1218:	a0 81       	ld	r26, Z
    121a:	b1 81       	ldd	r27, Z+1	; 0x01
    121c:	fc 01       	movw	r30, r24
    121e:	39 96       	adiw	r30, 0x09	; 9
    1220:	ee 0f       	add	r30, r30
    1222:	ff 1f       	adc	r31, r31
    1224:	ef 5b       	subi	r30, 0xBF	; 191
    1226:	fe 4f       	sbci	r31, 0xFE	; 254
    1228:	01 90       	ld	r0, Z+
    122a:	f0 81       	ld	r31, Z
    122c:	e0 2d       	mov	r30, r0
    122e:	80 81       	ld	r24, Z
    1230:	8c 93       	st	X, r24
    1232:	08 95       	ret

Disassembly of section .text.SH100HW_GetOutputJacks:

00001352 <SH100HW_GetOutputJacks>:
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    1352:	21 e0       	ldi	r18, 0x01	; 1
    1354:	18 9b       	sbis	0x03, 0	; 3
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	19 9b       	sbis	0x03, 1	; 3
    135c:	90 e0       	ldi	r25, 0x00	; 0

SH100HW_OutputJacks_t SH100HW_GetOutputJacks()
{
	bool is16Ohm = ioport_get_pin_level(PIN_M16_DETECT);
	bool is8Ohm = ioport_get_pin_level(PIN_M8_DETECT);
	return ((is16Ohm) | (is8Ohm<<1));
    135e:	89 2f       	mov	r24, r25
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
}
    1366:	82 2b       	or	r24, r18
    1368:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAState:

0000125a <SH100HW_SetPAState>:
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    125a:	81 11       	cpse	r24, r1
    125c:	04 c0       	rjmp	.+8      	; 0x1266 <SH100HW_SetPAState+0xc>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    125e:	98 b1       	in	r25, 0x08	; 8
    1260:	92 60       	ori	r25, 0x02	; 2
    1262:	98 b9       	out	0x08, r25	; 8
    1264:	03 c0       	rjmp	.+6      	; 0x126c <SH100HW_SetPAState+0x12>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1266:	98 b1       	in	r25, 0x08	; 8
    1268:	9d 7f       	andi	r25, 0xFD	; 253
    126a:	98 b9       	out	0x08, r25	; 8
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    126c:	88 23       	and	r24, r24
    126e:	21 f0       	breq	.+8      	; 0x1278 <SH100HW_SetPAState+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1270:	88 b1       	in	r24, 0x08	; 8
    1272:	88 60       	ori	r24, 0x08	; 8
    1274:	88 b9       	out	0x08, r24	; 8
    1276:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1278:	88 b1       	in	r24, 0x08	; 8
    127a:	87 7f       	andi	r24, 0xF7	; 247
    127c:	88 b9       	out	0x08, r24	; 8
    127e:	08 95       	ret

Disassembly of section .text.SH100HW_SetOutputMode:

00001484 <SH100HW_SetOutputMode>:
	ioport_set_pin_level(PIN_RELE_W, state);
}

void SH100HW_SetOutputMode(SH100HW_PAMode_t mode)
{
	RELAY_8_16 = mode;
    1484:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <RELAY_8_16>
    1488:	08 95       	ret

Disassembly of section .text.readButtonsState:

00000560 <readButtonsState>:
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	ac c0       	rjmp	.+344    	; 0x6bc <readButtonsState+0x15c>
	{
		
		switch(cnt)
 564:	48 2f       	mov	r20, r24
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	48 30       	cpi	r20, 0x08	; 8
 56a:	51 05       	cpc	r21, r1
 56c:	08 f0       	brcs	.+2      	; 0x570 <readButtonsState+0x10>
 56e:	a5 c0       	rjmp	.+330    	; 0x6ba <readButtonsState+0x15a>
 570:	fa 01       	movw	r30, r20
 572:	ef 55       	subi	r30, 0x5F	; 95
 574:	ff 4f       	sbci	r31, 0xFF	; 255
 576:	09 94       	ijmp
 578:	3b b1       	in	r19, 0x0b	; 11
 57a:	3f 7d       	andi	r19, 0xDF	; 223
 57c:	3b b9       	out	0x0b, r19	; 11
 57e:	3b b1       	in	r19, 0x0b	; 11
 580:	3f 7b       	andi	r19, 0xBF	; 191
 582:	3b b9       	out	0x0b, r19	; 11
 584:	3b b1       	in	r19, 0x0b	; 11
 586:	3f 77       	andi	r19, 0x7F	; 127
 588:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 58a:	31 e0       	ldi	r19, 0x01	; 1
 58c:	4c 9b       	sbis	0x09, 4	; 9
 58e:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = ioport_get_pin_level(PIN_MIDI_SWITCH);
 590:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <buttonsState+0x1>
 594:	31 e0       	ldi	r19, 0x01	; 1
 596:	35 9b       	sbis	0x06, 5	; 6
 598:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 59a:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <buttonsState+0xc>
				break;
 59e:	8d c0       	rjmp	.+282    	; 0x6ba <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5a0:	2b b1       	in	r18, 0x0b	; 11
 5a2:	20 62       	ori	r18, 0x20	; 32
 5a4:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5a6:	2b b1       	in	r18, 0x0b	; 11
 5a8:	2f 7b       	andi	r18, 0xBF	; 191
 5aa:	2b b9       	out	0x0b, r18	; 11
 5ac:	2b b1       	in	r18, 0x0b	; 11
 5ae:	2f 77       	andi	r18, 0x7F	; 127
 5b0:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	4c 9b       	sbis	0x09, 4	; 9
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	31 e0       	ldi	r19, 0x01	; 1
 5ba:	4a 9b       	sbis	0x09, 2	; 9
 5bc:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = ioport_get_pin_level(PIN_BUTTONS);
 5be:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <buttonsState+0x7>
 5c2:	31 e0       	ldi	r19, 0x01	; 1
 5c4:	35 9b       	sbis	0x06, 5	; 6
 5c6:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 5c8:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <buttonsState+0xe>
				break;
 5cc:	76 c0       	rjmp	.+236    	; 0x6ba <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5ce:	9b b1       	in	r25, 0x0b	; 11
 5d0:	9f 7d       	andi	r25, 0xDF	; 223
 5d2:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5d4:	9b b1       	in	r25, 0x0b	; 11
 5d6:	90 64       	ori	r25, 0x40	; 64
 5d8:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 5da:	9b b1       	in	r25, 0x0b	; 11
 5dc:	9f 77       	andi	r25, 0x7F	; 127
 5de:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	4c 9b       	sbis	0x09, 4	; 9
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	31 e0       	ldi	r19, 0x01	; 1
 5e8:	4a 9b       	sbis	0x09, 2	; 9
 5ea:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnLoop = ioport_get_pin_level(PIN_BUTTONS);
 5ec:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <buttonsState+0x8>
 5f0:	31 e0       	ldi	r19, 0x01	; 1
 5f2:	35 9b       	sbis	0x06, 5	; 6
 5f4:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 5f6:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <buttonsState+0xb>
				break;
 5fa:	5f c0       	rjmp	.+190    	; 0x6ba <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 5fc:	3b b1       	in	r19, 0x0b	; 11
 5fe:	30 62       	ori	r19, 0x20	; 32
 600:	3b b9       	out	0x0b, r19	; 11
 602:	3b b1       	in	r19, 0x0b	; 11
 604:	30 64       	ori	r19, 0x40	; 64
 606:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 608:	3b b1       	in	r19, 0x0b	; 11
 60a:	3f 77       	andi	r19, 0x7F	; 127
 60c:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 60e:	31 e0       	ldi	r19, 0x01	; 1
 610:	4c 9b       	sbis	0x09, 4	; 9
 612:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = ioport_get_pin_level(PIN_MIDI_SWITCH);
 614:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <buttonsState+0x2>
 618:	31 e0       	ldi	r19, 0x01	; 1
 61a:	35 9b       	sbis	0x06, 5	; 6
 61c:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 61e:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <buttonsState+0x9>
				break;
 622:	4b c0       	rjmp	.+150    	; 0x6ba <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 624:	3b b1       	in	r19, 0x0b	; 11
 626:	3f 7d       	andi	r19, 0xDF	; 223
 628:	3b b9       	out	0x0b, r19	; 11
 62a:	3b b1       	in	r19, 0x0b	; 11
 62c:	3f 7b       	andi	r19, 0xBF	; 191
 62e:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 630:	3b b1       	in	r19, 0x0b	; 11
 632:	30 68       	ori	r19, 0x80	; 128
 634:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 636:	a1 e0       	ldi	r26, 0x01	; 1
 638:	4c 9b       	sbis	0x09, 4	; 9
 63a:	a0 e0       	ldi	r26, 0x00	; 0
 63c:	31 e0       	ldi	r19, 0x01	; 1
 63e:	4a 9b       	sbis	0x09, 2	; 9
 640:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh2 = ioport_get_pin_level(PIN_BUTTONS);
 642:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <buttonsState+0x4>
 646:	31 e0       	ldi	r19, 0x01	; 1
 648:	35 9b       	sbis	0x06, 5	; 6
 64a:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 64c:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <buttonsState+0xa>
				break;
 650:	34 c0       	rjmp	.+104    	; 0x6ba <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 652:	3b b1       	in	r19, 0x0b	; 11
 654:	30 62       	ori	r19, 0x20	; 32
 656:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 658:	3b b1       	in	r19, 0x0b	; 11
 65a:	3f 7b       	andi	r19, 0xBF	; 191
 65c:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 65e:	3b b1       	in	r19, 0x0b	; 11
 660:	30 68       	ori	r19, 0x80	; 128
 662:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 664:	31 e0       	ldi	r19, 0x01	; 1
 666:	4a 9b       	sbis	0x09, 2	; 9
 668:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = ioport_get_pin_level(PIN_BUTTONS);
 66a:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <buttonsState+0x5>
				break;
 66e:	25 c0       	rjmp	.+74     	; 0x6ba <readButtonsState+0x15a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 670:	9b b1       	in	r25, 0x0b	; 11
 672:	9f 7d       	andi	r25, 0xDF	; 223
 674:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 676:	9b b1       	in	r25, 0x0b	; 11
 678:	90 64       	ori	r25, 0x40	; 64
 67a:	9b b9       	out	0x0b, r25	; 11
 67c:	9b b1       	in	r25, 0x0b	; 11
 67e:	90 68       	ori	r25, 0x80	; 128
 680:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	4c 9b       	sbis	0x09, 4	; 9
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	31 e0       	ldi	r19, 0x01	; 1
 68a:	4a 9b       	sbis	0x09, 2	; 9
 68c:	30 e0       	ldi	r19, 0x00	; 0
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh4 = ioport_get_pin_level(PIN_BUTTONS);
 68e:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <buttonsState+0x6>
 692:	31 e0       	ldi	r19, 0x01	; 1
 694:	35 9b       	sbis	0x06, 5	; 6
 696:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 698:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <buttonsState+0xd>
				break;
 69c:	0e c0       	rjmp	.+28     	; 0x6ba <readButtonsState+0x15a>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 69e:	3b b1       	in	r19, 0x0b	; 11
 6a0:	30 62       	ori	r19, 0x20	; 32
 6a2:	3b b9       	out	0x0b, r19	; 11
 6a4:	3b b1       	in	r19, 0x0b	; 11
 6a6:	30 64       	ori	r19, 0x40	; 64
 6a8:	3b b9       	out	0x0b, r19	; 11
 6aa:	3b b1       	in	r19, 0x0b	; 11
 6ac:	30 68       	ori	r19, 0x80	; 128
 6ae:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6b0:	31 e0       	ldi	r19, 0x01	; 1
 6b2:	4a 9b       	sbis	0x09, 2	; 9
 6b4:	30 e0       	ldi	r19, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = ioport_get_pin_level(PIN_BUTTONS);
 6b6:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <buttonsState+0x3>
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	88 30       	cpi	r24, 0x08	; 8
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <readButtonsState+0x162>
 6c0:	51 cf       	rjmp	.-350    	; 0x564 <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 6c2:	89 2f       	mov	r24, r25
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	88 0f       	add	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	22 0f       	add	r18, r18
 6d2:	33 1f       	adc	r19, r19
 6d4:	22 0f       	add	r18, r18
 6d6:	33 1f       	adc	r19, r19
 6d8:	22 0f       	add	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	8a 2b       	or	r24, r26
 6de:	82 2b       	or	r24, r18
 6e0:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <buttonsState>
 6e4:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

00000f4e <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
 f4e:	ac 01       	movw	r20, r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 f50:	88 b1       	in	r24, 0x08	; 8
 f52:	8f 7e       	andi	r24, 0xEF	; 239
 f54:	88 b9       	out	0x08, r24	; 8
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
 f56:	20 e0       	ldi	r18, 0x00	; 0
 f58:	12 c0       	rjmp	.+36     	; 0xf7e <writeShiftRegs+0x30>
 f5a:	95 b1       	in	r25, 0x05	; 5
 f5c:	9f 7d       	andi	r25, 0xDF	; 223
 f5e:	95 b9       	out	0x05, r25	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 f60:	55 23       	and	r21, r21
 f62:	24 f4       	brge	.+8      	; 0xf6c <writeShiftRegs+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 f64:	85 b1       	in	r24, 0x05	; 5
 f66:	88 60       	ori	r24, 0x08	; 8
 f68:	85 b9       	out	0x05, r24	; 5
 f6a:	03 c0       	rjmp	.+6      	; 0xf72 <writeShiftRegs+0x24>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 f6c:	85 b1       	in	r24, 0x05	; 5
 f6e:	87 7f       	andi	r24, 0xF7	; 247
 f70:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 f72:	95 b1       	in	r25, 0x05	; 5
 f74:	90 62       	ori	r25, 0x20	; 32
 f76:	95 b9       	out	0x05, r25	; 5
	{
		ioport_set_pin_level(PIN_SCK, 0);
		ioport_set_pin_level(PIN_MOSI, (data & 0x8000));
		ioport_set_pin_level(PIN_SCK, 1);
		data = data << 1;
 f78:	44 0f       	add	r20, r20
 f7a:	55 1f       	adc	r21, r21
}

void writeShiftRegs(uint16_t data)
{
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
 f7c:	2f 5f       	subi	r18, 0xFF	; 255
 f7e:	20 31       	cpi	r18, 0x10	; 16
 f80:	60 f3       	brcs	.-40     	; 0xf5a <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 f82:	85 b1       	in	r24, 0x05	; 5
 f84:	8f 7d       	andi	r24, 0xDF	; 223
 f86:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 f88:	88 b1       	in	r24, 0x08	; 8
 f8a:	80 61       	ori	r24, 0x10	; 16
 f8c:	88 b9       	out	0x08, r24	; 8
 f8e:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000001dc <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	29 97       	sbiw	r28, 0x09	; 9
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	readButtonsState();
 1f0:	b7 d1       	rcall	.+878    	; 0x560 <readButtonsState>
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 1f2:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <blinkCounter>
 1f6:	89 e2       	ldi	r24, 0x29	; 41
 1f8:	98 9f       	mul	r25, r24
 1fa:	81 2d       	mov	r24, r1
 1fc:	11 24       	eor	r1, r1
 1fe:	86 95       	lsr	r24
 200:	86 95       	lsr	r24
 202:	39 2f       	mov	r19, r25
 204:	29 e1       	ldi	r18, 0x19	; 25
 206:	82 9f       	mul	r24, r18
 208:	30 19       	sub	r19, r0
 20a:	11 24       	eor	r1, r1
 20c:	31 11       	cpse	r19, r1
 20e:	08 c0       	rjmp	.+16     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 210:	99 23       	and	r25, r25
 212:	31 f0       	breq	.+12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
	{
		fastBlink = !fastBlink;
 214:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <fastBlink>
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	82 27       	eor	r24, r18
 21c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <fastBlink>
	}
	
	if(blinkCounter == 50)
 220:	92 33       	cpi	r25, 0x32	; 50
 222:	51 f4       	brne	.+20     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
	{
		blinkCounter = 0;
 224:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <blinkCounter>
		slowBlink = !slowBlink;
 228:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <slowBlink>
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	89 27       	eor	r24, r25
 230:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	47 c0       	rjmp	.+142    	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <blinkCounter>
 23e:	fa cf       	rjmp	.-12     	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 240:	82 2f       	mov	r24, r18
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	ee 0f       	add	r30, r30
 248:	ff 1f       	adc	r31, r31
 24a:	ef 5b       	subi	r30, 0xBF	; 191
 24c:	fe 4f       	sbci	r31, 0xFE	; 254
 24e:	01 90       	ld	r0, Z+
 250:	f0 81       	ld	r31, Z
 252:	e0 2d       	mov	r30, r0
 254:	30 81       	ld	r19, Z
 256:	31 30       	cpi	r19, 0x01	; 1
 258:	71 f0       	breq	.+28     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
 25a:	28 f0       	brcs	.+10     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 25c:	32 30       	cpi	r19, 0x02	; 2
 25e:	a1 f0       	breq	.+40     	; 0x288 <__EEPROM_REGION_LENGTH__+0x88>
 260:	33 30       	cpi	r19, 0x03	; 3
 262:	e1 f0       	breq	.+56     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 264:	28 c0       	rjmp	.+80     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
		{
			case LED_OFF: isLedOn[i] = false; break;
 266:	e1 e0       	ldi	r30, 0x01	; 1
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	ec 0f       	add	r30, r28
 26c:	fd 1f       	adc	r31, r29
 26e:	e8 0f       	add	r30, r24
 270:	f9 1f       	adc	r31, r25
 272:	10 82       	st	Z, r1
 274:	27 c0       	rjmp	.+78     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			case LED_ON: isLedOn[i] = true; break;
 276:	e1 e0       	ldi	r30, 0x01	; 1
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ec 0f       	add	r30, r28
 27c:	fd 1f       	adc	r31, r29
 27e:	e8 0f       	add	r30, r24
 280:	f9 1f       	adc	r31, r25
 282:	31 e0       	ldi	r19, 0x01	; 1
 284:	30 83       	st	Z, r19
 286:	1e c0       	rjmp	.+60     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 288:	e1 e0       	ldi	r30, 0x01	; 1
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ec 0f       	add	r30, r28
 28e:	fd 1f       	adc	r31, r29
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	30 91 b0 01 	lds	r19, 0x01B0	; 0x8001b0 <fastBlink>
 298:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 29c:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <slowBlink>
 2a0:	e1 e0       	ldi	r30, 0x01	; 1
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	ec 0f       	add	r30, r28
 2a6:	fd 1f       	adc	r31, r29
 2a8:	e8 0f       	add	r30, r24
 2aa:	f9 1f       	adc	r31, r25
 2ac:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	83 27       	eor	r24, r19
 2b2:	88 87       	std	Y+8, r24	; 0x08
				break;
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
			}	
			default: isLedOn[i] = LED_OFF;
 2b6:	e1 e0       	ldi	r30, 0x01	; 1
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	ec 0f       	add	r30, r28
 2bc:	fd 1f       	adc	r31, r29
 2be:	e8 0f       	add	r30, r24
 2c0:	f9 1f       	adc	r31, r25
 2c2:	10 82       	st	Z, r1
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 2c4:	2f 5f       	subi	r18, 0xFF	; 255
 2c6:	29 30       	cpi	r18, 0x09	; 9
 2c8:	08 f4       	brcc	.+2      	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 2ca:	ba cf       	rjmp	.-140    	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2cc:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 2d0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <RELAY_1_3>
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2da:	ac 01       	movw	r20, r24
 2dc:	42 2b       	or	r20, r18
 2de:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 2e0:	9b 81       	ldd	r25, Y+3	; 0x03
 2e2:	89 2f       	mov	r24, r25
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	88 0f       	add	r24, r24
 2e8:	99 1f       	adc	r25, r25
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 2ee:	82 2b       	or	r24, r18
 2f0:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 2f2:	29 81       	ldd	r18, Y+1	; 0x01
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	22 0f       	add	r18, r18
 2f8:	33 1f       	adc	r19, r19
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	22 0f       	add	r18, r18
 300:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 302:	82 2b       	or	r24, r18
 304:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 306:	2a 81       	ldd	r18, Y+2	; 0x02
 308:	50 e1       	ldi	r21, 0x10	; 16
 30a:	25 9f       	mul	r18, r21
 30c:	90 01       	movw	r18, r0
 30e:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 310:	28 2b       	or	r18, r24
 312:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 314:	4c 81       	ldd	r20, Y+4	; 0x04
 316:	80 e2       	ldi	r24, 0x20	; 32
 318:	48 9f       	mul	r20, r24
 31a:	a0 01       	movw	r20, r0
 31c:	11 24       	eor	r1, r1
 31e:	24 2b       	or	r18, r20
 320:	35 2b       	or	r19, r21
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 322:	40 91 2f 01 	lds	r20, 0x012F	; 0x80012f <RELAY_8_16>
 326:	80 e8       	ldi	r24, 0x80	; 128
 328:	48 9f       	mul	r20, r24
 32a:	a0 01       	movw	r20, r0
 32c:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 32e:	24 2b       	or	r18, r20
 330:	35 2b       	or	r19, r21
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 332:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <RELAY_2_4>
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	98 2f       	mov	r25, r24
 33a:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 33c:	28 2b       	or	r18, r24
 33e:	39 2b       	or	r19, r25
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 340:	8e 81       	ldd	r24, Y+6	; 0x06
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	98 2f       	mov	r25, r24
 346:	88 27       	eor	r24, r24
 348:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 34a:	28 2b       	or	r18, r24
 34c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 34e:	8f 81       	ldd	r24, Y+7	; 0x07
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	98 2f       	mov	r25, r24
 354:	88 27       	eor	r24, r24
 356:	99 0f       	add	r25, r25
 358:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 35a:	28 2b       	or	r18, r24
 35c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 35e:	88 85       	ldd	r24, Y+8	; 0x08
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	98 2f       	mov	r25, r24
 364:	88 27       	eor	r24, r24
 366:	99 0f       	add	r25, r25
 368:	99 0f       	add	r25, r25
 36a:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 36c:	28 2b       	or	r18, r24
 36e:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 370:	99 85       	ldd	r25, Y+9	; 0x09
 372:	89 2f       	mov	r24, r25
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	98 2f       	mov	r25, r24
 378:	88 27       	eor	r24, r24
 37a:	92 95       	swap	r25
 37c:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 37e:	28 2b       	or	r18, r24
 380:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
 382:	4d 81       	ldd	r20, Y+5	; 0x05
 384:	50 e0       	ldi	r21, 0x00	; 0
 386:	54 2f       	mov	r21, r20
 388:	44 27       	eor	r20, r20
 38a:	52 95       	swap	r21
 38c:	55 0f       	add	r21, r21
 38e:	50 7e       	andi	r21, 0xE0	; 224
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 390:	24 2b       	or	r18, r20
 392:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
								((uint16_t)RELAY_AB << (8+6)) |
 394:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <RELAY_AB>
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	90 e4       	ldi	r25, 0x40	; 64
 39c:	89 9f       	mul	r24, r25
 39e:	90 2d       	mov	r25, r0
 3a0:	88 27       	eor	r24, r24
 3a2:	11 24       	eor	r1, r1
								(0 << (8+7));

	writeShiftRegs(resultSendWord);
 3a4:	82 2b       	or	r24, r18
 3a6:	93 2b       	or	r25, r19
 3a8:	d2 d5       	rcall	.+2980   	; 0xf4e <writeShiftRegs>
 3aa:	29 96       	adiw	r28, 0x09	; 9
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

Disassembly of section .text.UART_init:

0000136a <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    136a:	88 ed       	ldi	r24, 0xD8	; 216
    136c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00); 
    1370:	86 e0       	ldi	r24, 0x06	; 6
    1372:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0;
    1376:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=19;
    137a:	83 e1       	ldi	r24, 0x13	; 19
    137c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    1380:	08 95       	ret

Disassembly of section .text.__vector_18:

00000bb8 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 bb8:	1f 92       	push	r1
 bba:	0f 92       	push	r0
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	0f 92       	push	r0
 bc0:	11 24       	eor	r1, r1
 bc2:	8f 93       	push	r24
 bc4:	9f 93       	push	r25
 bc6:	ef 93       	push	r30
 bc8:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 bca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 bce:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 bd2:	8c 71       	andi	r24, 0x1C	; 28
 bd4:	d1 f4       	brne	.+52     	; 0xc0a <__vector_18+0x52>
	{
		rx_buffer0[rx_wr_index++] = data;
 bd6:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_wr_index>
 bda:	81 e0       	ldi	r24, 0x01	; 1
 bdc:	8e 0f       	add	r24, r30
 bde:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <rx_wr_index>
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	ef 58       	subi	r30, 0x8F	; 143
 be6:	fe 4f       	sbci	r31, 0xFE	; 254
 be8:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 bea:	80 31       	cpi	r24, 0x10	; 16
 bec:	11 f4       	brne	.+4      	; 0xbf2 <__vector_18+0x3a>
 bee:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 bf2:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_counter>
 bf6:	8f 5f       	subi	r24, 0xFF	; 255
 bf8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <rx_counter>
 bfc:	80 31       	cpi	r24, 0x10	; 16
 bfe:	29 f4       	brne	.+10     	; 0xc0a <__vector_18+0x52>
		{
			rx_counter=0;
 c00:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rx_counter>
			rx_buffer_overflow=1;
 c04:	81 e0       	ldi	r24, 0x01	; 1
 c06:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_buffer_overflow>
		}
	}
}
 c0a:	ff 91       	pop	r31
 c0c:	ef 91       	pop	r30
 c0e:	9f 91       	pop	r25
 c10:	8f 91       	pop	r24
 c12:	0f 90       	pop	r0
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	0f 90       	pop	r0
 c18:	1f 90       	pop	r1
 c1a:	18 95       	reti

Disassembly of section .text.UART_PopWord:

00001122 <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
    1122:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_counter>
    1126:	88 23       	and	r24, r24
    1128:	e1 f3       	breq	.-8      	; 0x1122 <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
    112a:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <rx_rd_index>
    112e:	91 e0       	ldi	r25, 0x01	; 1
    1130:	9e 0f       	add	r25, r30
    1132:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <rx_rd_index>
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	ef 58       	subi	r30, 0x8F	; 143
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
    113e:	90 31       	cpi	r25, 0x10	; 16
    1140:	11 f4       	brne	.+4      	; 0x1146 <UART_PopWord+0x24>
    1142:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
    1146:	f8 94       	cli
	--rx_counter;
    1148:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_counter>
    114c:	91 50       	subi	r25, 0x01	; 1
    114e:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <rx_counter>
	cpu_irq_enable();
    1152:	78 94       	sei
	return data;
}
    1154:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000013e6 <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_counter>
    13ec:	91 11       	cpse	r25, r1
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <UART_RxBufferNotEmpty+0xc>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
}
    13f2:	08 95       	ret

Disassembly of section .text.__vector_20:

00000d8a <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 d8a:	1f 92       	push	r1
 d8c:	0f 92       	push	r0
 d8e:	0f b6       	in	r0, 0x3f	; 63
 d90:	0f 92       	push	r0
 d92:	11 24       	eor	r1, r1
 d94:	8f 93       	push	r24
 d96:	ef 93       	push	r30
 d98:	ff 93       	push	r31
	if (tx_counter)
 d9a:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_counter>
 d9e:	88 23       	and	r24, r24
 da0:	a9 f0       	breq	.+42     	; 0xdcc <__vector_20+0x42>
	{
		--tx_counter;
 da2:	81 50       	subi	r24, 0x01	; 1
 da4:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 da8:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <tx_rd_index>
 dac:	81 e0       	ldi	r24, 0x01	; 1
 dae:	8e 0f       	add	r24, r30
 db0:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tx_rd_index>
 db4:	f0 e0       	ldi	r31, 0x00	; 0
 db6:	e8 59       	subi	r30, 0x98	; 152
 db8:	fe 4f       	sbci	r31, 0xFE	; 254
 dba:	80 81       	ld	r24, Z
 dbc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 dc0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tx_rd_index>
 dc4:	88 30       	cpi	r24, 0x08	; 8
 dc6:	11 f4       	brne	.+4      	; 0xdcc <__vector_20+0x42>
 dc8:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <tx_rd_index>
		#endif
	}
}
 dcc:	ff 91       	pop	r31
 dce:	ef 91       	pop	r30
 dd0:	8f 91       	pop	r24
 dd2:	0f 90       	pop	r0
 dd4:	0f be       	out	0x3f, r0	; 63
 dd6:	0f 90       	pop	r0
 dd8:	1f 90       	pop	r1
 dda:	18 95       	reti

Disassembly of section .text.UART_PushWord:

00000f08 <UART_PushWord>:

// Write a character to the USART Transmitter buffer
void UART_PushWord(uint8_t c)
{	
	while (tx_counter == TX_BUFFER_SIZE);
 f08:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <tx_counter>
 f0c:	98 30       	cpi	r25, 0x08	; 8
 f0e:	e1 f3       	breq	.-8      	; 0xf08 <UART_PushWord>
	
	cpu_irq_disable();
 f10:	f8 94       	cli
	
	if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
 f12:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <tx_counter>
 f16:	91 11       	cpse	r25, r1
 f18:	04 c0       	rjmp	.+8      	; 0xf22 <UART_PushWord+0x1a>
 f1a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
 f1e:	25 fd       	sbrc	r18, 5
 f20:	12 c0       	rjmp	.+36     	; 0xf46 <UART_PushWord+0x3e>
	{
		tx_buffer[tx_wr_index++] = c;
 f22:	e0 91 83 01 	lds	r30, 0x0183	; 0x800183 <tx_wr_index>
 f26:	21 e0       	ldi	r18, 0x01	; 1
 f28:	2e 0f       	add	r18, r30
 f2a:	20 93 83 01 	sts	0x0183, r18	; 0x800183 <tx_wr_index>
 f2e:	f0 e0       	ldi	r31, 0x00	; 0
 f30:	e8 59       	subi	r30, 0x98	; 152
 f32:	fe 4f       	sbci	r31, 0xFE	; 254
 f34:	80 83       	st	Z, r24
		
		#if TX_BUFFER_SIZE0 != 256
			if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
 f36:	28 30       	cpi	r18, 0x08	; 8
 f38:	11 f4       	brne	.+4      	; 0xf3e <UART_PushWord+0x36>
 f3a:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <tx_wr_index>
		#endif
		
		++tx_counter;
 f3e:	9f 5f       	subi	r25, 0xFF	; 255
 f40:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <tx_counter>
 f44:	02 c0       	rjmp	.+4      	; 0xf4a <UART_PushWord+0x42>
	}
	else UDR0=c;
 f46:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	cpu_irq_enable();
 f4a:	78 94       	sei
 f4c:	08 95       	ret

Disassembly of section .text.libgcc:

00001382 <__xload_4>:
    1382:	57 fd       	sbrc	r21, 7
    1384:	05 c0       	rjmp	.+10     	; 0x1390 <__xload_4+0xe>
    1386:	65 91       	lpm	r22, Z+
    1388:	75 91       	lpm	r23, Z+
    138a:	85 91       	lpm	r24, Z+
    138c:	95 91       	lpm	r25, Z+
    138e:	08 95       	ret
    1390:	61 91       	ld	r22, Z+
    1392:	71 91       	ld	r23, Z+
    1394:	81 91       	ld	r24, Z+
    1396:	91 91       	ld	r25, Z+
    1398:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001496 <_fini>:
    1496:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001498 <__funcs_on_exit>:
    1498:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000149a <__simulator_exit>:
    149a:	08 95       	ret

Disassembly of section .text.exit:

000013f4 <exit>:
    13f4:	ec 01       	movw	r28, r24
    13f6:	50 d0       	rcall	.+160    	; 0x1498 <__funcs_on_exit>
    13f8:	4e d0       	rcall	.+156    	; 0x1496 <_fini>
    13fa:	ce 01       	movw	r24, r28
    13fc:	4e d0       	rcall	.+156    	; 0x149a <__simulator_exit>
    13fe:	ce 01       	movw	r24, r28
    1400:	4d d0       	rcall	.+154    	; 0x149c <_Exit>

Disassembly of section .text.__simple_malloc:

0000098a <__simple_malloc>:
 98a:	a2 e0       	ldi	r26, 0x02	; 2
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	ea ec       	ldi	r30, 0xCA	; 202
 990:	f4 e0       	ldi	r31, 0x04	; 4
 992:	64 c3       	rjmp	.+1736   	; 0x105c <__prologue_saves__+0x14>
 994:	8c 01       	movw	r16, r24
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	01 15       	cp	r16, r1
 99c:	11 05       	cpc	r17, r1
 99e:	09 f4       	brne	.+2      	; 0x9a2 <__simple_malloc+0x18>
 9a0:	53 c0       	rjmp	.+166    	; 0xa48 <__simple_malloc+0xbe>
 9a2:	89 2b       	or	r24, r25
 9a4:	71 f0       	breq	.+28     	; 0x9c2 <__simple_malloc+0x38>
 9a6:	02 30       	cpi	r16, 0x02	; 2
 9a8:	11 05       	cpc	r17, r1
 9aa:	10 f4       	brcc	.+4      	; 0x9b0 <__simple_malloc+0x26>
 9ac:	02 e0       	ldi	r16, 0x02	; 2
 9ae:	10 e0       	ldi	r17, 0x00	; 0
 9b0:	c8 01       	movw	r24, r16
 9b2:	26 db       	rcall	.-2484   	; 0x0 <__TEXT_REGION_ORIGIN__>
 9b4:	00 97       	sbiw	r24, 0x00	; 0
 9b6:	09 f0       	breq	.+2      	; 0x9ba <__simple_malloc+0x30>
 9b8:	4e c0       	rjmp	.+156    	; 0xa56 <__simple_malloc+0xcc>
 9ba:	92 e0       	ldi	r25, 0x02	; 2
 9bc:	e9 2e       	mov	r14, r25
 9be:	f1 2c       	mov	r15, r1
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__simple_malloc+0x40>
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	e8 2e       	mov	r14, r24
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	f8 2e       	mov	r15, r24
 9ca:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <end.1483>
 9ce:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <end.1483+0x1>
 9d2:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <cur.1482>
 9d6:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <cur.1482+0x1>
 9da:	82 1b       	sub	r24, r18
 9dc:	93 0b       	sbc	r25, r19
 9de:	67 01       	movw	r12, r14
 9e0:	c0 0e       	add	r12, r16
 9e2:	d1 1e       	adc	r13, r17
 9e4:	80 17       	cp	r24, r16
 9e6:	91 07       	cpc	r25, r17
 9e8:	e8 f4       	brcc	.+58     	; 0xa24 <__simple_malloc+0x9a>
 9ea:	da 82       	std	Y+2, r13	; 0x02
 9ec:	c9 82       	std	Y+1, r12	; 0x01
 9ee:	ce 01       	movw	r24, r28
 9f0:	01 96       	adiw	r24, 0x01	; 1
 9f2:	ab d0       	rcall	.+342    	; 0xb4a <__expand_heap>
 9f4:	00 97       	sbiw	r24, 0x00	; 0
 9f6:	19 f4       	brne	.+6      	; 0x9fe <__simple_malloc+0x74>
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	2c c0       	rjmp	.+88     	; 0xa56 <__simple_malloc+0xcc>
 9fe:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <end.1483>
 a02:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <end.1483+0x1>
 a06:	82 17       	cp	r24, r18
 a08:	93 07       	cpc	r25, r19
 a0a:	21 f0       	breq	.+8      	; 0xa14 <__simple_malloc+0x8a>
 a0c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <cur.1482+0x1>
 a10:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <cur.1482>
 a14:	29 81       	ldd	r18, Y+1	; 0x01
 a16:	3a 81       	ldd	r19, Y+2	; 0x02
 a18:	82 0f       	add	r24, r18
 a1a:	93 1f       	adc	r25, r19
 a1c:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <end.1483+0x1>
 a20:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <end.1483>
 a24:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <cur.1482>
 a28:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <cur.1482+0x1>
 a2c:	cf 01       	movw	r24, r30
 a2e:	e1 14       	cp	r14, r1
 a30:	f1 04       	cpc	r15, r1
 a32:	19 f0       	breq	.+6      	; 0xa3a <__simple_malloc+0xb0>
 a34:	02 96       	adiw	r24, 0x02	; 2
 a36:	11 83       	std	Z+1, r17	; 0x01
 a38:	00 83       	st	Z, r16
 a3a:	ce 0e       	add	r12, r30
 a3c:	df 1e       	adc	r13, r31
 a3e:	d0 92 a1 01 	sts	0x01A1, r13	; 0x8001a1 <cur.1482+0x1>
 a42:	c0 92 a0 01 	sts	0x01A0, r12	; 0x8001a0 <cur.1482>
 a46:	07 c0       	rjmp	.+14     	; 0xa56 <__simple_malloc+0xcc>
 a48:	00 97       	sbiw	r24, 0x00	; 0
 a4a:	09 f0       	breq	.+2      	; 0xa4e <__simple_malloc+0xc4>
 a4c:	af cf       	rjmp	.-162    	; 0x9ac <__simple_malloc+0x22>
 a4e:	7c 01       	movw	r14, r24
 a50:	01 e0       	ldi	r16, 0x01	; 1
 a52:	10 e0       	ldi	r17, 0x00	; 0
 a54:	ba cf       	rjmp	.-140    	; 0x9ca <__simple_malloc+0x40>
 a56:	22 96       	adiw	r28, 0x02	; 2
 a58:	e8 e0       	ldi	r30, 0x08	; 8
 a5a:	52 c3       	rjmp	.+1700   	; 0x1100 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

0000149c <_Exit>:
    149c:	9b d6       	rcall	.+3382   	; 0x21d4 <__TEXT_REGION_LENGTH__+0x1d4>

Disassembly of section .text.__expand_heap:

00000b4a <__expand_heap>:
 b4a:	fc 01       	movw	r30, r24
 b4c:	40 81       	ld	r20, Z
 b4e:	51 81       	ldd	r21, Z+1	; 0x01
 b50:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__brkval>
 b54:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__brkval+0x1>
 b58:	89 2b       	or	r24, r25
 b5a:	41 f4       	brne	.+16     	; 0xb6c <__expand_heap+0x22>
 b5c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__malloc_heap_start>
 b60:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__malloc_heap_start+0x1>
 b64:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__brkval+0x1>
 b68:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__brkval>
 b6c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__malloc_heap_end>
 b70:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__malloc_heap_end+0x1>
 b74:	00 97       	sbiw	r24, 0x00	; 0
 b76:	19 f4       	brne	.+6      	; 0xb7e <__expand_heap+0x34>
 b78:	8d b7       	in	r24, 0x3d	; 61
 b7a:	9e b7       	in	r25, 0x3e	; 62
 b7c:	80 97       	sbiw	r24, 0x20	; 32
 b7e:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__brkval>
 b82:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__brkval+0x1>
 b86:	28 17       	cp	r18, r24
 b88:	39 07       	cpc	r19, r25
 b8a:	48 f0       	brcs	.+18     	; 0xb9e <__expand_heap+0x54>
 b8c:	8c e0       	ldi	r24, 0x0C	; 12
 b8e:	90 e0       	ldi	r25, 0x00	; 0
 b90:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__errno_val+0x1>
 b94:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__errno_val>
 b98:	80 e0       	ldi	r24, 0x00	; 0
 b9a:	90 e0       	ldi	r25, 0x00	; 0
 b9c:	08 95       	ret
 b9e:	82 1b       	sub	r24, r18
 ba0:	93 0b       	sbc	r25, r19
 ba2:	84 17       	cp	r24, r20
 ba4:	95 07       	cpc	r25, r21
 ba6:	90 f3       	brcs	.-28     	; 0xb8c <__expand_heap+0x42>
 ba8:	42 0f       	add	r20, r18
 baa:	53 1f       	adc	r21, r19
 bac:	50 93 a3 01 	sts	0x01A3, r21	; 0x8001a3 <__brkval+0x1>
 bb0:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <__brkval>
 bb4:	c9 01       	movw	r24, r18
 bb6:	08 95       	ret

Disassembly of section .text.avrlibc:

000012a4 <eeprom_read_block>:
    12a4:	ba 01       	movw	r22, r20
    12a6:	a9 01       	movw	r20, r18
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22

000012ac <eeprom_read_blraw>:
    12ac:	fc 01       	movw	r30, r24
    12ae:	f9 99       	sbic	0x1f, 1	; 31
    12b0:	fe cf       	rjmp	.-4      	; 0x12ae <eeprom_read_blraw+0x2>
    12b2:	06 c0       	rjmp	.+12     	; 0x12c0 <eeprom_read_blraw+0x14>
    12b4:	f2 bd       	out	0x22, r31	; 34
    12b6:	e1 bd       	out	0x21, r30	; 33
    12b8:	f8 9a       	sbi	0x1f, 0	; 31
    12ba:	31 96       	adiw	r30, 0x01	; 1
    12bc:	00 b4       	in	r0, 0x20	; 32
    12be:	0d 92       	st	X+, r0
    12c0:	41 50       	subi	r20, 0x01	; 1
    12c2:	50 40       	sbci	r21, 0x00	; 0
    12c4:	b8 f7       	brcc	.-18     	; 0x12b4 <eeprom_read_blraw+0x8>
    12c6:	08 95       	ret

Disassembly of section .text.avrlibc:

000013d4 <eeprom_read_byte>:
    13d4:	cb 01       	movw	r24, r22
    13d6:	f9 99       	sbic	0x1f, 1	; 31
    13d8:	fe cf       	rjmp	.-4      	; 0x13d6 <eeprom_read_byte+0x2>
    13da:	92 bd       	out	0x22, r25	; 34
    13dc:	81 bd       	out	0x21, r24	; 33
    13de:	f8 9a       	sbi	0x1f, 0	; 31
    13e0:	99 27       	eor	r25, r25
    13e2:	80 b5       	in	r24, 0x20	; 32
    13e4:	08 95       	ret

Disassembly of section .text.avrlibc:

00001432 <eeprom_read_word>:
    1432:	cb 01       	movw	r24, r22
    1434:	a8 e1       	ldi	r26, 0x18	; 24
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	42 e0       	ldi	r20, 0x02	; 2
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	37 cf       	rjmp	.-402    	; 0x12ac <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00001156 <eeprom_write_block>:
    1156:	cf 92       	push	r12
    1158:	df 92       	push	r13
    115a:	ef 92       	push	r14
    115c:	6b 01       	movw	r12, r22
    115e:	e8 2e       	mov	r14, r24
    1160:	ca 01       	movw	r24, r20
    1162:	42 2f       	mov	r20, r18
    1164:	73 2f       	mov	r23, r19
    1166:	09 c0       	rjmp	.+18     	; 0x117a <eeprom_write_block+0x24>
    1168:	f6 01       	movw	r30, r12
    116a:	5e 2d       	mov	r21, r14
    116c:	6d d1       	rcall	.+730    	; 0x1448 <__xload_1>
    116e:	26 2f       	mov	r18, r22
    1170:	cb d0       	rcall	.+406    	; 0x1308 <eeprom_write_r18>
    1172:	3f ef       	ldi	r19, 0xFF	; 255
    1174:	c3 1a       	sub	r12, r19
    1176:	d3 0a       	sbc	r13, r19
    1178:	e3 0a       	sbc	r14, r19
    117a:	41 50       	subi	r20, 0x01	; 1
    117c:	70 40       	sbci	r23, 0x00	; 0
    117e:	a0 f7       	brcc	.-24     	; 0x1168 <eeprom_write_block+0x12>
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	08 95       	ret

Disassembly of section .text.avrlibc:

00001306 <eeprom_write_byte>:
    1306:	26 2f       	mov	r18, r22

00001308 <eeprom_write_r18>:
    1308:	f9 99       	sbic	0x1f, 1	; 31
    130a:	fe cf       	rjmp	.-4      	; 0x1308 <eeprom_write_r18>
    130c:	1f ba       	out	0x1f, r1	; 31
    130e:	92 bd       	out	0x22, r25	; 34
    1310:	81 bd       	out	0x21, r24	; 33
    1312:	20 bd       	out	0x20, r18	; 32
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	fa 9a       	sbi	0x1f, 2	; 31
    131a:	f9 9a       	sbi	0x1f, 1	; 31
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	08 95       	ret

Disassembly of section .text.avrlibc:

0000148a <eeprom_write_word>:
    148a:	3d df       	rcall	.-390    	; 0x1306 <eeprom_write_byte>
    148c:	27 2f       	mov	r18, r23
    148e:	3c cf       	rjmp	.-392    	; 0x1308 <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

00001048 <__prologue_saves__>:
    1048:	2f 92       	push	r2
    104a:	3f 92       	push	r3
    104c:	4f 92       	push	r4
    104e:	5f 92       	push	r5
    1050:	6f 92       	push	r6
    1052:	7f 92       	push	r7
    1054:	8f 92       	push	r8
    1056:	9f 92       	push	r9
    1058:	af 92       	push	r10
    105a:	bf 92       	push	r11
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ef 92       	push	r14
    1062:	ff 92       	push	r15
    1064:	0f 93       	push	r16
    1066:	1f 93       	push	r17
    1068:	cf 93       	push	r28
    106a:	df 93       	push	r29
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	ca 1b       	sub	r28, r26
    1072:	db 0b       	sbc	r29, r27
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000010ec <__epilogue_restores__>:
    10ec:	2a 88       	ldd	r2, Y+18	; 0x12
    10ee:	39 88       	ldd	r3, Y+17	; 0x11
    10f0:	48 88       	ldd	r4, Y+16	; 0x10
    10f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    10f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    10f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    10f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    10fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    10fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    10fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1100:	c8 84       	ldd	r12, Y+8	; 0x08
    1102:	df 80       	ldd	r13, Y+7	; 0x07
    1104:	ee 80       	ldd	r14, Y+6	; 0x06
    1106:	fd 80       	ldd	r15, Y+5	; 0x05
    1108:	0c 81       	ldd	r16, Y+4	; 0x04
    110a:	1b 81       	ldd	r17, Y+3	; 0x03
    110c:	aa 81       	ldd	r26, Y+2	; 0x02
    110e:	b9 81       	ldd	r27, Y+1	; 0x01
    1110:	ce 0f       	add	r28, r30
    1112:	d1 1d       	adc	r29, r1
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	ed 01       	movw	r28, r26
    1120:	08 95       	ret

Disassembly of section .text.libgcc:

00001448 <__xload_1>:
    1448:	57 fd       	sbrc	r21, 7
    144a:	60 81       	ld	r22, Z
    144c:	57 ff       	sbrs	r21, 7
    144e:	64 91       	lpm	r22, Z
    1450:	08 95       	ret
