
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b82  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000073  00800100  00800100  00000b82  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000046  00000000  00000000  00000bb1  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040da  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da5  00000000  00000000  00004ed2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000109a  00000000  00000000  00005c77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00006d14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000386  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d2f  00000000  00000000  000073be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000080ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00000a88  00000a88  00000b5c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008220  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    0000000e  00000a3e  00000a3e  00000b12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MIDI_IsStatusWord 00000008  00000a80  00000a80  00000b54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MIDI_IsSysRealTime 0000000c  00000a68  00000a68  00000b3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.MIDI_GetStatusType 00000040  00000950  00000950  00000a24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.isEqualCommands 00000014  00000a18  00000a18  00000aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.MIDICTRL_Init 0000007e  00000786  00000786  0000085a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.MIDICTRL_HandleCommand 00000080  00000706  00000706  000007da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .data.defaultCommands 00000018  00800173  00000a96  00000b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .progmemx.data.muteCommand 00000004  000001b4  000001b4  00000288  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 24 .bss.channelNum 00000001  0080018b  0080018b  00000b82  2**0
                  ALLOC
 25 .bss.muteCommandEnabled 00000001  0080018c  0080018c  00000b82  2**0
                  ALLOC
 26 .bss.omniModeEnabled 00000001  0080018d  0080018d  00000b82  2**0
                  ALLOC
 27 .text.MIDI_ParserTask 0000013e  0000052e  0000052e  00000602  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .bss.state    00000001  0080018e  0080018e  00000b82  2**0
                  ALLOC
 29 .text.SH100CTRL_Init 00000054  00000864  00000864  00000938  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.SH100CTRL_SwChannel1 00000002  00000a8a  00000a8a  00000b5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.SH100CTRL_MuteAmp 00000002  00000a8c  00000a8c  00000b60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.SH100HW_Init 0000009a  0000066c  0000066c  00000740  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.readButtonsState 00000186  000003a8  000003a8  0000047c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.writeShiftRegs 0000004a  00000906  00000906  000009da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__vector_16 000001f0  000001b8  000001b8  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .bss.fastBlink 00000001  0080018f  0080018f  00000b82  2**0
                  ALLOC
 37 .bss.slowBlink 00000001  00800190  00800190  00000b82  2**0
                  ALLOC
 38 .bss.blinkCounter 00000001  00800191  00800191  00000b82  2**0
                  ALLOC
 39 .text.UART_init 00000018  000009e8  000009e8  00000abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__vector_18 00000060  00000804  00000804  000008d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.UART_PopWord 00000034  00000990  00000990  00000a64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.UART_RxBufferNotEmpty 0000000e  00000a4c  00000a4c  00000b20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_20 0000004e  000008b8  000008b8  0000098c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc  00000018  00000a00  00000a00  00000ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.__dummy_fini 00000002  00000a8e  00000a8e  00000b62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__dummy_funcs_on_exit 00000002  00000a90  00000a90  00000b64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__dummy_simulator_exit 00000002  00000a92  00000a92  00000b66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.exit    0000000e  00000a5a  00000a5a  00000b2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text._Exit   00000002  00000a94  00000a94  00000b68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.avrlibc 00000024  000009c4  000009c4  00000a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.avrlibc 00000012  00000a2c  00000a2c  00000b00  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.avrlibc 0000000c  00000a74  00000a74  00000b48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	b1 c0       	rjmp	.+354    	; 0x164 <__ctors_end>
   2:	42 c5       	rjmp	.+2692   	; 0xa88 <__bad_interrupt>
   4:	41 c5       	rjmp	.+2690   	; 0xa88 <__bad_interrupt>
   6:	40 c5       	rjmp	.+2688   	; 0xa88 <__bad_interrupt>
   8:	3f c5       	rjmp	.+2686   	; 0xa88 <__bad_interrupt>
   a:	3e c5       	rjmp	.+2684   	; 0xa88 <__bad_interrupt>
   c:	3d c5       	rjmp	.+2682   	; 0xa88 <__bad_interrupt>
   e:	3c c5       	rjmp	.+2680   	; 0xa88 <__bad_interrupt>
  10:	3b c5       	rjmp	.+2678   	; 0xa88 <__bad_interrupt>
  12:	3a c5       	rjmp	.+2676   	; 0xa88 <__bad_interrupt>
  14:	39 c5       	rjmp	.+2674   	; 0xa88 <__bad_interrupt>
  16:	38 c5       	rjmp	.+2672   	; 0xa88 <__bad_interrupt>
  18:	37 c5       	rjmp	.+2670   	; 0xa88 <__bad_interrupt>
  1a:	36 c5       	rjmp	.+2668   	; 0xa88 <__bad_interrupt>
  1c:	35 c5       	rjmp	.+2666   	; 0xa88 <__bad_interrupt>
  1e:	34 c5       	rjmp	.+2664   	; 0xa88 <__bad_interrupt>
  20:	cb c0       	rjmp	.+406    	; 0x1b8 <__vector_16>
  22:	32 c5       	rjmp	.+2660   	; 0xa88 <__bad_interrupt>
  24:	ef c3       	rjmp	.+2014   	; 0x804 <__vector_18>
  26:	30 c5       	rjmp	.+2656   	; 0xa88 <__bad_interrupt>
  28:	47 c4       	rjmp	.+2190   	; 0x8b8 <__vector_20>
  2a:	2e c5       	rjmp	.+2652   	; 0xa88 <__bad_interrupt>
  2c:	2d c5       	rjmp	.+2650   	; 0xa88 <__bad_interrupt>
  2e:	2c c5       	rjmp	.+2648   	; 0xa88 <__bad_interrupt>
  30:	2b c5       	rjmp	.+2646   	; 0xa88 <__bad_interrupt>
  32:	2a c5       	rjmp	.+2644   	; 0xa88 <__bad_interrupt>
  34:	97 c4       	rjmp	.+2350   	; 0x964 <MIDI_GetStatusType+0x14>
  36:	a8 c4       	rjmp	.+2384   	; 0x988 <MIDI_GetStatusType+0x38>
  38:	a7 c4       	rjmp	.+2382   	; 0x988 <MIDI_GetStatusType+0x38>
  3a:	a6 c4       	rjmp	.+2380   	; 0x988 <MIDI_GetStatusType+0x38>
  3c:	a5 c4       	rjmp	.+2378   	; 0x988 <MIDI_GetStatusType+0x38>
  3e:	a4 c4       	rjmp	.+2376   	; 0x988 <MIDI_GetStatusType+0x38>
  40:	a3 c4       	rjmp	.+2374   	; 0x988 <MIDI_GetStatusType+0x38>
  42:	a2 c4       	rjmp	.+2372   	; 0x988 <MIDI_GetStatusType+0x38>
  44:	a1 c4       	rjmp	.+2370   	; 0x988 <MIDI_GetStatusType+0x38>
  46:	a0 c4       	rjmp	.+2368   	; 0x988 <MIDI_GetStatusType+0x38>
  48:	9f c4       	rjmp	.+2366   	; 0x988 <MIDI_GetStatusType+0x38>
  4a:	9e c4       	rjmp	.+2364   	; 0x988 <MIDI_GetStatusType+0x38>
  4c:	9d c4       	rjmp	.+2362   	; 0x988 <MIDI_GetStatusType+0x38>
  4e:	9c c4       	rjmp	.+2360   	; 0x988 <MIDI_GetStatusType+0x38>
  50:	9b c4       	rjmp	.+2358   	; 0x988 <MIDI_GetStatusType+0x38>
  52:	9a c4       	rjmp	.+2356   	; 0x988 <MIDI_GetStatusType+0x38>
  54:	87 c4       	rjmp	.+2318   	; 0x964 <MIDI_GetStatusType+0x14>
  56:	98 c4       	rjmp	.+2352   	; 0x988 <MIDI_GetStatusType+0x38>
  58:	97 c4       	rjmp	.+2350   	; 0x988 <MIDI_GetStatusType+0x38>
  5a:	96 c4       	rjmp	.+2348   	; 0x988 <MIDI_GetStatusType+0x38>
  5c:	95 c4       	rjmp	.+2346   	; 0x988 <MIDI_GetStatusType+0x38>
  5e:	94 c4       	rjmp	.+2344   	; 0x988 <MIDI_GetStatusType+0x38>
  60:	93 c4       	rjmp	.+2342   	; 0x988 <MIDI_GetStatusType+0x38>
  62:	92 c4       	rjmp	.+2340   	; 0x988 <MIDI_GetStatusType+0x38>
  64:	91 c4       	rjmp	.+2338   	; 0x988 <MIDI_GetStatusType+0x38>
  66:	90 c4       	rjmp	.+2336   	; 0x988 <MIDI_GetStatusType+0x38>
  68:	8f c4       	rjmp	.+2334   	; 0x988 <MIDI_GetStatusType+0x38>
  6a:	8e c4       	rjmp	.+2332   	; 0x988 <MIDI_GetStatusType+0x38>
  6c:	8d c4       	rjmp	.+2330   	; 0x988 <MIDI_GetStatusType+0x38>
  6e:	8c c4       	rjmp	.+2328   	; 0x988 <MIDI_GetStatusType+0x38>
  70:	8b c4       	rjmp	.+2326   	; 0x988 <MIDI_GetStatusType+0x38>
  72:	8a c4       	rjmp	.+2324   	; 0x988 <MIDI_GetStatusType+0x38>
  74:	77 c4       	rjmp	.+2286   	; 0x964 <MIDI_GetStatusType+0x14>
  76:	88 c4       	rjmp	.+2320   	; 0x988 <MIDI_GetStatusType+0x38>
  78:	87 c4       	rjmp	.+2318   	; 0x988 <MIDI_GetStatusType+0x38>
  7a:	86 c4       	rjmp	.+2316   	; 0x988 <MIDI_GetStatusType+0x38>
  7c:	85 c4       	rjmp	.+2314   	; 0x988 <MIDI_GetStatusType+0x38>
  7e:	84 c4       	rjmp	.+2312   	; 0x988 <MIDI_GetStatusType+0x38>
  80:	83 c4       	rjmp	.+2310   	; 0x988 <MIDI_GetStatusType+0x38>
  82:	82 c4       	rjmp	.+2308   	; 0x988 <MIDI_GetStatusType+0x38>
  84:	81 c4       	rjmp	.+2306   	; 0x988 <MIDI_GetStatusType+0x38>
  86:	80 c4       	rjmp	.+2304   	; 0x988 <MIDI_GetStatusType+0x38>
  88:	7f c4       	rjmp	.+2302   	; 0x988 <MIDI_GetStatusType+0x38>
  8a:	7e c4       	rjmp	.+2300   	; 0x988 <MIDI_GetStatusType+0x38>
  8c:	7d c4       	rjmp	.+2298   	; 0x988 <MIDI_GetStatusType+0x38>
  8e:	7c c4       	rjmp	.+2296   	; 0x988 <MIDI_GetStatusType+0x38>
  90:	7b c4       	rjmp	.+2294   	; 0x988 <MIDI_GetStatusType+0x38>
  92:	7a c4       	rjmp	.+2292   	; 0x988 <MIDI_GetStatusType+0x38>
  94:	67 c4       	rjmp	.+2254   	; 0x964 <MIDI_GetStatusType+0x14>
  96:	78 c4       	rjmp	.+2288   	; 0x988 <MIDI_GetStatusType+0x38>
  98:	77 c4       	rjmp	.+2286   	; 0x988 <MIDI_GetStatusType+0x38>
  9a:	76 c4       	rjmp	.+2284   	; 0x988 <MIDI_GetStatusType+0x38>
  9c:	75 c4       	rjmp	.+2282   	; 0x988 <MIDI_GetStatusType+0x38>
  9e:	74 c4       	rjmp	.+2280   	; 0x988 <MIDI_GetStatusType+0x38>
  a0:	73 c4       	rjmp	.+2278   	; 0x988 <MIDI_GetStatusType+0x38>
  a2:	72 c4       	rjmp	.+2276   	; 0x988 <MIDI_GetStatusType+0x38>
  a4:	71 c4       	rjmp	.+2274   	; 0x988 <MIDI_GetStatusType+0x38>
  a6:	70 c4       	rjmp	.+2272   	; 0x988 <MIDI_GetStatusType+0x38>
  a8:	6f c4       	rjmp	.+2270   	; 0x988 <MIDI_GetStatusType+0x38>
  aa:	6e c4       	rjmp	.+2268   	; 0x988 <MIDI_GetStatusType+0x38>
  ac:	6d c4       	rjmp	.+2266   	; 0x988 <MIDI_GetStatusType+0x38>
  ae:	6c c4       	rjmp	.+2264   	; 0x988 <MIDI_GetStatusType+0x38>
  b0:	6b c4       	rjmp	.+2262   	; 0x988 <MIDI_GetStatusType+0x38>
  b2:	6a c4       	rjmp	.+2260   	; 0x988 <MIDI_GetStatusType+0x38>
  b4:	6b c4       	rjmp	.+2262   	; 0x98c <MIDI_GetStatusType+0x3c>
  b6:	68 c4       	rjmp	.+2256   	; 0x988 <MIDI_GetStatusType+0x38>
  b8:	67 c4       	rjmp	.+2254   	; 0x988 <MIDI_GetStatusType+0x38>
  ba:	66 c4       	rjmp	.+2252   	; 0x988 <MIDI_GetStatusType+0x38>
  bc:	65 c4       	rjmp	.+2250   	; 0x988 <MIDI_GetStatusType+0x38>
  be:	64 c4       	rjmp	.+2248   	; 0x988 <MIDI_GetStatusType+0x38>
  c0:	63 c4       	rjmp	.+2246   	; 0x988 <MIDI_GetStatusType+0x38>
  c2:	62 c4       	rjmp	.+2244   	; 0x988 <MIDI_GetStatusType+0x38>
  c4:	61 c4       	rjmp	.+2242   	; 0x988 <MIDI_GetStatusType+0x38>
  c6:	60 c4       	rjmp	.+2240   	; 0x988 <MIDI_GetStatusType+0x38>
  c8:	5f c4       	rjmp	.+2238   	; 0x988 <MIDI_GetStatusType+0x38>
  ca:	5e c4       	rjmp	.+2236   	; 0x988 <MIDI_GetStatusType+0x38>
  cc:	5d c4       	rjmp	.+2234   	; 0x988 <MIDI_GetStatusType+0x38>
  ce:	5c c4       	rjmp	.+2232   	; 0x988 <MIDI_GetStatusType+0x38>
  d0:	5b c4       	rjmp	.+2230   	; 0x988 <MIDI_GetStatusType+0x38>
  d2:	5a c4       	rjmp	.+2228   	; 0x988 <MIDI_GetStatusType+0x38>
  d4:	5b c4       	rjmp	.+2230   	; 0x98c <MIDI_GetStatusType+0x3c>
  d6:	58 c4       	rjmp	.+2224   	; 0x988 <MIDI_GetStatusType+0x38>
  d8:	57 c4       	rjmp	.+2222   	; 0x988 <MIDI_GetStatusType+0x38>
  da:	56 c4       	rjmp	.+2220   	; 0x988 <MIDI_GetStatusType+0x38>
  dc:	55 c4       	rjmp	.+2218   	; 0x988 <MIDI_GetStatusType+0x38>
  de:	54 c4       	rjmp	.+2216   	; 0x988 <MIDI_GetStatusType+0x38>
  e0:	53 c4       	rjmp	.+2214   	; 0x988 <MIDI_GetStatusType+0x38>
  e2:	52 c4       	rjmp	.+2212   	; 0x988 <MIDI_GetStatusType+0x38>
  e4:	51 c4       	rjmp	.+2210   	; 0x988 <MIDI_GetStatusType+0x38>
  e6:	50 c4       	rjmp	.+2208   	; 0x988 <MIDI_GetStatusType+0x38>
  e8:	4f c4       	rjmp	.+2206   	; 0x988 <MIDI_GetStatusType+0x38>
  ea:	4e c4       	rjmp	.+2204   	; 0x988 <MIDI_GetStatusType+0x38>
  ec:	4d c4       	rjmp	.+2202   	; 0x988 <MIDI_GetStatusType+0x38>
  ee:	4c c4       	rjmp	.+2200   	; 0x988 <MIDI_GetStatusType+0x38>
  f0:	4b c4       	rjmp	.+2198   	; 0x988 <MIDI_GetStatusType+0x38>
  f2:	4a c4       	rjmp	.+2196   	; 0x988 <MIDI_GetStatusType+0x38>
  f4:	37 c4       	rjmp	.+2158   	; 0x964 <MIDI_GetStatusType+0x14>
  f6:	48 c4       	rjmp	.+2192   	; 0x988 <MIDI_GetStatusType+0x38>
  f8:	47 c4       	rjmp	.+2190   	; 0x988 <MIDI_GetStatusType+0x38>
  fa:	46 c4       	rjmp	.+2188   	; 0x988 <MIDI_GetStatusType+0x38>
  fc:	45 c4       	rjmp	.+2186   	; 0x988 <MIDI_GetStatusType+0x38>
  fe:	44 c4       	rjmp	.+2184   	; 0x988 <MIDI_GetStatusType+0x38>
 100:	43 c4       	rjmp	.+2182   	; 0x988 <MIDI_GetStatusType+0x38>
 102:	42 c4       	rjmp	.+2180   	; 0x988 <MIDI_GetStatusType+0x38>
 104:	41 c4       	rjmp	.+2178   	; 0x988 <MIDI_GetStatusType+0x38>
 106:	40 c4       	rjmp	.+2176   	; 0x988 <MIDI_GetStatusType+0x38>
 108:	3f c4       	rjmp	.+2174   	; 0x988 <MIDI_GetStatusType+0x38>
 10a:	3e c4       	rjmp	.+2172   	; 0x988 <MIDI_GetStatusType+0x38>
 10c:	3d c4       	rjmp	.+2170   	; 0x988 <MIDI_GetStatusType+0x38>
 10e:	3c c4       	rjmp	.+2168   	; 0x988 <MIDI_GetStatusType+0x38>
 110:	3b c4       	rjmp	.+2166   	; 0x988 <MIDI_GetStatusType+0x38>
 112:	3a c4       	rjmp	.+2164   	; 0x988 <MIDI_GetStatusType+0x38>
 114:	35 c4       	rjmp	.+2154   	; 0x980 <MIDI_GetStatusType+0x30>
 116:	3a c4       	rjmp	.+2164   	; 0x98c <MIDI_GetStatusType+0x3c>
 118:	25 c4       	rjmp	.+2122   	; 0x964 <MIDI_GetStatusType+0x14>
 11a:	38 c4       	rjmp	.+2160   	; 0x98c <MIDI_GetStatusType+0x3c>
 11c:	35 c4       	rjmp	.+2154   	; 0x988 <MIDI_GetStatusType+0x38>
 11e:	34 c4       	rjmp	.+2152   	; 0x988 <MIDI_GetStatusType+0x38>
 120:	33 c4       	rjmp	.+2150   	; 0x988 <MIDI_GetStatusType+0x38>
 122:	30 c4       	rjmp	.+2144   	; 0x984 <MIDI_GetStatusType+0x34>
 124:	21 c4       	rjmp	.+2114   	; 0x968 <MIDI_GetStatusType+0x18>
 126:	30 c4       	rjmp	.+2144   	; 0x988 <MIDI_GetStatusType+0x38>
 128:	21 c4       	rjmp	.+2114   	; 0x96c <MIDI_GetStatusType+0x1c>
 12a:	22 c4       	rjmp	.+2116   	; 0x970 <MIDI_GetStatusType+0x20>
 12c:	23 c4       	rjmp	.+2118   	; 0x974 <MIDI_GetStatusType+0x24>
 12e:	2c c4       	rjmp	.+2136   	; 0x988 <MIDI_GetStatusType+0x38>
 130:	23 c4       	rjmp	.+2118   	; 0x978 <MIDI_GetStatusType+0x28>
 132:	24 c4       	rjmp	.+2120   	; 0x97c <MIDI_GetStatusType+0x2c>
 134:	08 c2       	rjmp	.+1040   	; 0x546 <MIDI_ParserTask+0x18>
 136:	14 c2       	rjmp	.+1064   	; 0x560 <MIDI_ParserTask+0x32>
 138:	47 c2       	rjmp	.+1166   	; 0x5c8 <MIDI_ParserTask+0x9a>
 13a:	7a c2       	rjmp	.+1268   	; 0x630 <MIDI_ParserTask+0x102>
 13c:	5a c2       	rjmp	.+1204   	; 0x5f2 <MIDI_ParserTask+0xc4>
 13e:	89 c2       	rjmp	.+1298   	; 0x652 <MIDI_ParserTask+0x124>
 140:	8c c2       	rjmp	.+1304   	; 0x65a <MIDI_ParserTask+0x12c>
 142:	3e c1       	rjmp	.+636    	; 0x3c0 <readButtonsState+0x18>
 144:	51 c1       	rjmp	.+674    	; 0x3e8 <readButtonsState+0x40>
 146:	67 c1       	rjmp	.+718    	; 0x416 <__DATA_REGION_LENGTH__+0x16>
 148:	7d c1       	rjmp	.+762    	; 0x444 <__DATA_REGION_LENGTH__+0x44>
 14a:	90 c1       	rjmp	.+800    	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
 14c:	a6 c1       	rjmp	.+844    	; 0x49a <__DATA_REGION_LENGTH__+0x9a>
 14e:	b4 c1       	rjmp	.+872    	; 0x4b8 <__DATA_REGION_LENGTH__+0xb8>
 150:	ca c1       	rjmp	.+916    	; 0x4e6 <__DATA_REGION_LENGTH__+0xe6>

00000152 <.dinit>:
 152:	01 00       	.word	0x0001	; ????
 154:	01 73       	andi	r16, 0x31	; 49
 156:	80 01       	movw	r16, r0
 158:	73 01       	movw	r14, r6
 15a:	8b 00       	.word	0x008b	; ????
 15c:	0a 96       	adiw	r24, 0x0a	; 10
 15e:	01 8b       	std	Z+17, r16	; 0x11
 160:	01 92       	st	Z+, r0
 162:	80 00       	.word	0x0080	; ????

00000164 <__ctors_end>:
 164:	11 24       	eor	r1, r1
 166:	1f be       	out	0x3f, r1	; 63
 168:	cf ef       	ldi	r28, 0xFF	; 255
 16a:	d4 e0       	ldi	r29, 0x04	; 4
 16c:	de bf       	out	0x3e, r29	; 62
 16e:	cd bf       	out	0x3d, r28	; 61

00000170 <__do_copy_data>:
 170:	e2 e5       	ldi	r30, 0x52	; 82
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	17 c0       	rjmp	.+46     	; 0x1a6 <__do_clear_bss+0x8>
 178:	b5 91       	lpm	r27, Z+
 17a:	a5 91       	lpm	r26, Z+
 17c:	35 91       	lpm	r19, Z+
 17e:	25 91       	lpm	r18, Z+
 180:	05 91       	lpm	r16, Z+
 182:	07 fd       	sbrc	r16, 7
 184:	0c c0       	rjmp	.+24     	; 0x19e <__do_clear_bss>
 186:	95 91       	lpm	r25, Z+
 188:	85 91       	lpm	r24, Z+
 18a:	ef 01       	movw	r28, r30
 18c:	f9 2f       	mov	r31, r25
 18e:	e8 2f       	mov	r30, r24
 190:	05 90       	lpm	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	a2 17       	cp	r26, r18
 196:	b3 07       	cpc	r27, r19
 198:	d9 f7       	brne	.-10     	; 0x190 <__do_copy_data+0x20>
 19a:	fe 01       	movw	r30, r28
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <__do_clear_bss+0x8>

0000019e <__do_clear_bss>:
 19e:	1d 92       	st	X+, r1
 1a0:	a2 17       	cp	r26, r18
 1a2:	b3 07       	cpc	r27, r19
 1a4:	e1 f7       	brne	.-8      	; 0x19e <__do_clear_bss>
 1a6:	e3 36       	cpi	r30, 0x63	; 99
 1a8:	f4 07       	cpc	r31, r20
 1aa:	31 f7       	brne	.-52     	; 0x178 <__do_copy_data+0x8>
 1ac:	48 d4       	rcall	.+2192   	; 0xa3e <main>
 1ae:	55 c4       	rjmp	.+2218   	; 0xa5a <exit>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>

Disassembly of section .text:

00000a88 <__bad_interrupt>:
 a88:	bb ca       	rjmp	.-2698   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000a3e <main>:
#include "sh100_hardware.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
 a3e:	d4 df       	rcall	.-88     	; 0x9e8 <UART_init>
	SH100HW_Init();
 a40:	15 de       	rcall	.-982    	; 0x66c <SH100HW_Init>
	SH100CTRL_Init();
 a42:	10 df       	rcall	.-480    	; 0x864 <SH100CTRL_Init>
	MIDICTRL_Init();
 a44:	a0 de       	rcall	.-704    	; 0x786 <MIDICTRL_Init>
	
	cpu_irq_enable();
 a46:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
 a48:	72 dd       	rcall	.-1308   	; 0x52e <MIDI_ParserTask>
 a4a:	fe cf       	rjmp	.-4      	; 0xa48 <main+0xa>

Disassembly of section .text.MIDI_IsStatusWord:

00000a80 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
 a80:	88 1f       	adc	r24, r24
 a82:	88 27       	eor	r24, r24
 a84:	88 1f       	adc	r24, r24
 a86:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00000a68 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
 a68:	91 e0       	ldi	r25, 0x01	; 1
 a6a:	88 3f       	cpi	r24, 0xF8	; 248
 a6c:	08 f4       	brcc	.+2      	; 0xa70 <MIDI_IsSysRealTime+0x8>
 a6e:	90 e0       	ldi	r25, 0x00	; 0
}
 a70:	89 2f       	mov	r24, r25
 a72:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000950 <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	fc 01       	movw	r30, r24
 954:	e0 58       	subi	r30, 0x80	; 128
 956:	f1 09       	sbc	r31, r1
 958:	e0 38       	cpi	r30, 0x80	; 128
 95a:	f1 05       	cpc	r31, r1
 95c:	a8 f4       	brcc	.+42     	; 0x988 <MIDI_GetStatusType+0x38>
 95e:	e6 5e       	subi	r30, 0xE6	; 230
 960:	ff 4f       	sbci	r31, 0xFF	; 255
 962:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 964:	82 e0       	ldi	r24, 0x02	; 2
 966:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 968:	83 e0       	ldi	r24, 0x03	; 3
 96a:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 96c:	83 e0       	ldi	r24, 0x03	; 3
 96e:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 970:	83 e0       	ldi	r24, 0x03	; 3
 972:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 974:	83 e0       	ldi	r24, 0x03	; 3
 976:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 978:	83 e0       	ldi	r24, 0x03	; 3
 97a:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 97c:	83 e0       	ldi	r24, 0x03	; 3
 97e:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 980:	84 e0       	ldi	r24, 0x04	; 4
 982:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 984:	85 e0       	ldi	r24, 0x05	; 5
 986:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 98c:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 98e:	08 95       	ret

Disassembly of section .text.isEqualCommands:

00000a18 <isEqualCommands>:
	}
};

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
 a18:	62 13       	cpse	r22, r18
 a1a:	04 c0       	rjmp	.+8      	; 0xa24 <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data2) return false;	
 a1c:	85 17       	cp	r24, r21
 a1e:	21 f0       	breq	.+8      	; 0xa28 <isEqualCommands+0x10>
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	08 95       	ret
	}
};

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data2) return false;	
	return true;
 a28:	81 e0       	ldi	r24, 0x01	; 1
}
 a2a:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

00000786 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	68 97       	sbiw	r28, 0x18	; 24
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	69 d1       	rcall	.+722    	; 0xa74 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 7a2:	8b 3a       	cpi	r24, 0xAB	; 171
 7a4:	9c 4a       	sbci	r25, 0xAC	; 172
 7a6:	c1 f4       	brne	.+48     	; 0x7d8 <MIDICTRL_Init+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];	
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));		
 7a8:	40 e1       	ldi	r20, 0x10	; 16
 7aa:	50 e0       	ldi	r21, 0x00	; 0
 7ac:	60 e8       	ldi	r22, 0x80	; 128
 7ae:	28 e1       	ldi	r18, 0x18	; 24
 7b0:	30 e0       	ldi	r19, 0x00	; 0
 7b2:	ce 01       	movw	r24, r28
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	06 d1       	rcall	.+524    	; 0x9c4 <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 7b8:	88 e1       	ldi	r24, 0x18	; 24
 7ba:	fe 01       	movw	r30, r28
 7bc:	31 96       	adiw	r30, 0x01	; 1
 7be:	a1 e0       	ldi	r26, 0x01	; 1
 7c0:	b1 e0       	ldi	r27, 0x01	; 1
 7c2:	01 90       	ld	r0, Z+
 7c4:	0d 92       	st	X+, r0
 7c6:	8a 95       	dec	r24
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <MIDICTRL_Init+0x3c>
		
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 7ca:	6b e0       	ldi	r22, 0x0B	; 11
 7cc:	70 e0       	ldi	r23, 0x00	; 0
 7ce:	80 e8       	ldi	r24, 0x80	; 128
 7d0:	2d d1       	rcall	.+602    	; 0xa2c <eeprom_read_byte>
 7d2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <commandSet>
 7d6:	0b c0       	rjmp	.+22     	; 0x7ee <MIDICTRL_Init+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 7d8:	88 e1       	ldi	r24, 0x18	; 24
 7da:	e3 e7       	ldi	r30, 0x73	; 115
 7dc:	f1 e0       	ldi	r31, 0x01	; 1
 7de:	a1 e0       	ldi	r26, 0x01	; 1
 7e0:	b1 e0       	ldi	r27, 0x01	; 1
 7e2:	01 90       	ld	r0, Z+
 7e4:	0d 92       	st	X+, r0
 7e6:	8a 95       	dec	r24
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <MIDICTRL_Init+0x5c>
		commandSet = DEFAULT;	
 7ea:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <commandSet>
	}

	mode = RUNNING;
 7ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 7f2:	68 96       	adiw	r28, 0x18	; 24
 7f4:	0f b6       	in	r0, 0x3f	; 63
 7f6:	f8 94       	cli
 7f8:	de bf       	out	0x3e, r29	; 62
 7fa:	0f be       	out	0x3f, r0	; 63
 7fc:	cd bf       	out	0x3d, r28	; 61
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

00000706 <MIDICTRL_HandleCommand>:

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
	switch(mode)
 70e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 712:	21 11       	cpse	r18, r1
 714:	33 c0       	rjmp	.+102    	; 0x77c <MIDICTRL_HandleCommand+0x76>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 716:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <omniModeEnabled>
 71a:	21 11       	cpse	r18, r1
 71c:	04 c0       	rjmp	.+8      	; 0x726 <MIDICTRL_HandleCommand+0x20>
			{
				if(channelNum != command.channel) return;
 71e:	20 91 8b 01 	lds	r18, 0x018B	; 0x80018b <channelNum>
 722:	72 13       	cpse	r23, r18
 724:	2b c0       	rjmp	.+86     	; 0x77c <MIDICTRL_HandleCommand+0x76>
 726:	09 2f       	mov	r16, r25
 728:	18 2f       	mov	r17, r24
 72a:	c7 2f       	mov	r28, r23
 72c:	d6 2f       	mov	r29, r22
			}
			
			if(muteCommandEnabled)
 72e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <muteCommandEnabled>
 732:	88 23       	and	r24, r24
 734:	79 f0       	breq	.+30     	; 0x754 <MIDICTRL_HandleCommand+0x4e>
			{
				if(isEqualCommands(command, muteCommand)) SH100CTRL_MuteAmp();
 736:	84 eb       	ldi	r24, 0xB4	; 180
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	a0 e0       	ldi	r26, 0x00	; 0
 73c:	fc 01       	movw	r30, r24
 73e:	5a 2f       	mov	r21, r26
 740:	5f d1       	rcall	.+702    	; 0xa00 <__xload_4>
 742:	9b 01       	movw	r18, r22
 744:	ac 01       	movw	r20, r24
 746:	6d 2f       	mov	r22, r29
 748:	7c 2f       	mov	r23, r28
 74a:	81 2f       	mov	r24, r17
 74c:	90 2f       	mov	r25, r16
 74e:	64 d1       	rcall	.+712    	; 0xa18 <isEqualCommands>
 750:	81 11       	cpse	r24, r1
 752:	9c d1       	rcall	.+824    	; 0xa8c <SH100CTRL_MuteAmp>
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 754:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <commandSet>
 758:	81 30       	cpi	r24, 0x01	; 1
 75a:	19 f4       	brne	.+6      	; 0x762 <MIDICTRL_HandleCommand+0x5c>
 75c:	e1 e0       	ldi	r30, 0x01	; 1
 75e:	f1 e0       	ldi	r31, 0x01	; 1
 760:	02 c0       	rjmp	.+4      	; 0x766 <MIDICTRL_HandleCommand+0x60>
			else currentCommandBlock = &defaultCommands;
 762:	e3 e7       	ldi	r30, 0x73	; 115
 764:	f1 e0       	ldi	r31, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) SH100CTRL_SwChannel1(); return;
 766:	20 81       	ld	r18, Z
 768:	31 81       	ldd	r19, Z+1	; 0x01
 76a:	42 81       	ldd	r20, Z+2	; 0x02
 76c:	53 81       	ldd	r21, Z+3	; 0x03
 76e:	6d 2f       	mov	r22, r29
 770:	7c 2f       	mov	r23, r28
 772:	81 2f       	mov	r24, r17
 774:	90 2f       	mov	r25, r16
 776:	50 d1       	rcall	.+672    	; 0xa18 <isEqualCommands>
 778:	81 11       	cpse	r24, r1
 77a:	87 d1       	rcall	.+782    	; 0xa8a <SH100CTRL_SwChannel1>
		case PROGRAMMING:
		{
			break;
		}
	}	
}
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

0000052e <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 52e:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <state>
 532:	8e 2f       	mov	r24, r30
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	87 30       	cpi	r24, 0x07	; 7
 538:	91 05       	cpc	r25, r1
 53a:	08 f0       	brcs	.+2      	; 0x53e <MIDI_ParserTask+0x10>
 53c:	96 c0       	rjmp	.+300    	; 0x66a <MIDI_ParserTask+0x13c>
 53e:	fc 01       	movw	r30, r24
 540:	e6 56       	subi	r30, 0x66	; 102
 542:	ff 4f       	sbci	r31, 0xFF	; 255
 544:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 546:	ec e1       	ldi	r30, 0x1C	; 28
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 54c:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 54e:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 550:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <currentStatusType>
			isSecondDataWord = false;
 554:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
			state = WAIT_WORD;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
			break;
 55e:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 560:	75 d2       	rcall	.+1258   	; 0xa4c <UART_RxBufferNotEmpty>
 562:	88 23       	and	r24, r24
 564:	09 f4       	brne	.+2      	; 0x568 <MIDI_ParserTask+0x3a>
 566:	81 c0       	rjmp	.+258    	; 0x66a <MIDI_ParserTask+0x13c>
			{
				recievedWord = UART_PopWord();
 568:	13 d2       	rcall	.+1062   	; 0x990 <UART_PopWord>
 56a:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 56e:	7c d2       	rcall	.+1272   	; 0xa68 <MIDI_IsSysRealTime>
 570:	81 11       	cpse	r24, r1
 572:	7b c0       	rjmp	.+246    	; 0x66a <MIDI_ParserTask+0x13c>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
					return;
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 574:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 578:	83 d2       	rcall	.+1286   	; 0xa80 <MIDI_IsStatusWord>
 57a:	88 23       	and	r24, r24
 57c:	21 f0       	breq	.+8      	; 0x586 <MIDI_ParserTask+0x58>
				{					
					state = DISPATCH_STATUS;
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 584:	08 95       	ret
				}
				else
				{
					switch(currentStatusType)
 586:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentStatusType>
 58a:	82 30       	cpi	r24, 0x02	; 2
 58c:	49 f0       	breq	.+18     	; 0x5a0 <MIDI_ParserTask+0x72>
 58e:	18 f4       	brcc	.+6      	; 0x596 <MIDI_ParserTask+0x68>
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	51 f0       	breq	.+20     	; 0x5a8 <MIDI_ParserTask+0x7a>
 594:	15 c0       	rjmp	.+42     	; 0x5c0 <MIDI_ParserTask+0x92>
 596:	84 30       	cpi	r24, 0x04	; 4
 598:	59 f0       	breq	.+22     	; 0x5b0 <MIDI_ParserTask+0x82>
 59a:	85 30       	cpi	r24, 0x05	; 5
 59c:	69 f0       	breq	.+26     	; 0x5b8 <MIDI_ParserTask+0x8a>
 59e:	10 c0       	rjmp	.+32     	; 0x5c0 <MIDI_ParserTask+0x92>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 5a0:	84 e0       	ldi	r24, 0x04	; 4
 5a2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 5a6:	08 95       	ret
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 5a8:	83 e0       	ldi	r24, 0x03	; 3
 5aa:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 5ae:	08 95       	ret
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 5b0:	85 e0       	ldi	r24, 0x05	; 5
 5b2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 5b6:	08 95       	ret
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 5b8:	86 e0       	ldi	r24, 0x06	; 6
 5ba:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 5be:	08 95       	ret
						default: state = WAIT_WORD;
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 5c6:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 5c8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <recievedWord>
 5cc:	89 2f       	mov	r24, r25
 5ce:	82 95       	swap	r24
 5d0:	8f 70       	andi	r24, 0x0F	; 15
 5d2:	ec e1       	ldi	r30, 0x1C	; 28
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	80 83       	st	Z, r24
			currentCommand.channel = recievedWord & 0x0F;
 5d8:	9f 70       	andi	r25, 0x0F	; 15
 5da:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 5dc:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 5de:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 5e0:	b7 d1       	rcall	.+878    	; 0x950 <MIDI_GetStatusType>
 5e2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentStatusType>
			isSecondDataWord = false;
 5e6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
			state = WAIT_WORD;
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
			break;
 5f0:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 5f2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <isSecondDataWord>
 5f6:	88 23       	and	r24, r24
 5f8:	81 f0       	breq	.+32     	; 0x61a <MIDI_ParserTask+0xec>
			{
				currentCommand.data2 = recievedWord;
 5fa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 5fe:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <currentCommand+0x3>
				isSecondDataWord = false;			
 602:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 606:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <currentCommand>
 60a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <currentCommand+0x1>
 60e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <currentCommand+0x2>
 612:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <currentCommand+0x3>
 616:	77 d0       	rcall	.+238    	; 0x706 <MIDICTRL_HandleCommand>
 618:	07 c0       	rjmp	.+14     	; 0x628 <MIDI_ParserTask+0xfa>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 61a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 61e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <currentCommand+0x2>
				isSecondDataWord = true;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <isSecondDataWord>
			}
			state = WAIT_WORD;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
			break;
 62e:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 630:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <recievedWord>
 634:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 638:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <currentCommand>
 63c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <currentCommand+0x1>
 640:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <currentCommand+0x2>
 644:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <currentCommand+0x3>
 648:	5e d0       	rcall	.+188    	; 0x706 <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
			break;
 650:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
			break;
 658:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 65a:	ec e1       	ldi	r30, 0x1C	; 28
 65c:	f1 e0       	ldi	r31, 0x01	; 1
 65e:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 660:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 662:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <state>
 66a:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000864 <SH100CTRL_Init>:
{
	
}

void SH100CTRL_SwAB()
{
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
 868:	00 d0       	rcall	.+0      	; 0x86a <SH100CTRL_Init+0x6>
 86a:	0f 92       	push	r0
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	70 e0       	ldi	r23, 0x00	; 0
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	fe d0       	rcall	.+508    	; 0xa74 <eeprom_read_word>
 878:	8b 3a       	cpi	r24, 0xAB	; 171
 87a:	9c 4a       	sbci	r25, 0xAC	; 172
 87c:	91 f4       	brne	.+36     	; 0x8a2 <SH100CTRL_Init+0x3e>
 87e:	40 e1       	ldi	r20, 0x10	; 16
 880:	50 e0       	ldi	r21, 0x00	; 0
 882:	60 e8       	ldi	r22, 0x80	; 128
 884:	23 e0       	ldi	r18, 0x03	; 3
 886:	30 e0       	ldi	r19, 0x00	; 0
 888:	ce 01       	movw	r24, r28
 88a:	01 96       	adiw	r24, 0x01	; 1
 88c:	9b d0       	rcall	.+310    	; 0x9c4 <eeprom_read_block>
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	9a 81       	ldd	r25, Y+2	; 0x02
 892:	ab 81       	ldd	r26, Y+3	; 0x03
 894:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <ampState>
 898:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <ampState+0x1>
 89c:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <ampState+0x2>
 8a0:	05 c0       	rjmp	.+10     	; 0x8ac <SH100CTRL_Init+0x48>
 8a2:	e1 e2       	ldi	r30, 0x21	; 33
 8a4:	f1 e0       	ldi	r31, 0x01	; 1
 8a6:	10 82       	st	Z, r1
 8a8:	11 82       	std	Z+1, r1	; 0x01
 8aa:	12 82       	std	Z+2, r1	; 0x02
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel1:

00000a8a <SH100CTRL_SwChannel1>:
 a8a:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

00000a8c <SH100CTRL_MuteAmp>:
	
}

void SH100CTRL_MuteAmp()
{
 a8c:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

0000066c <SH100HW_Init>:
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 66c:	45 b1       	in	r20, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 66e:	84 b1       	in	r24, 0x04	; 4
 670:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 672:	28 b1       	in	r18, 0x08	; 8
 674:	32 2f       	mov	r19, r18
 676:	30 61       	ori	r19, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 678:	97 b1       	in	r25, 0x07	; 7
 67a:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 67c:	5b b1       	in	r21, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 67e:	2a b1       	in	r18, 0x0a	; 10
 680:	20 6e       	ori	r18, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 682:	2b 7e       	andi	r18, 0xEB	; 235
 684:	9b 7d       	andi	r25, 0xDB	; 219
 686:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 688:	53 70       	andi	r21, 0x03	; 3
 68a:	5b b9       	out	0x0b, r21	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 68c:	28 60       	ori	r18, 0x08	; 8
 68e:	2a b9       	out	0x0a, r18	; 10
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 690:	23 2f       	mov	r18, r19
 692:	21 7d       	andi	r18, 0xD1	; 209
 694:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 696:	9a 60       	ori	r25, 0x0A	; 10
 698:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 69a:	94 2f       	mov	r25, r20
 69c:	90 7d       	andi	r25, 0xD0	; 208
 69e:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 6a0:	84 60       	ori	r24, 0x04	; 4
 6a2:	84 b9       	out	0x04, r24	; 4
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	// Timer0 init
	TCCR0B |= 0x05; // psc = 1024
 6a4:	85 b5       	in	r24, 0x25	; 37
 6a6:	85 60       	ori	r24, 0x05	; 5
 6a8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
 6aa:	ee e6       	ldi	r30, 0x6E	; 110
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	81 60       	ori	r24, 0x01	; 1
 6b2:	80 83       	st	Z, r24
	TCNT0 = 100;
 6b4:	84 e6       	ldi	r24, 0x64	; 100
 6b6:	86 bd       	out	0x26, r24	; 38
	
	// forming led pointers for iteration
	led_ptr[0] = &ledCh1;
 6b8:	e0 e4       	ldi	r30, 0x40	; 64
 6ba:	f1 e0       	ldi	r31, 0x01	; 1
 6bc:	82 e5       	ldi	r24, 0x52	; 82
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	91 83       	std	Z+1, r25	; 0x01
 6c2:	80 83       	st	Z, r24
	led_ptr[1] = &ledCh2;
 6c4:	84 e2       	ldi	r24, 0x24	; 36
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	93 83       	std	Z+3, r25	; 0x03
 6ca:	82 83       	std	Z+2, r24	; 0x02
	led_ptr[2] = &ledCh3;
 6cc:	8a e2       	ldi	r24, 0x2A	; 42
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	95 83       	std	Z+5, r25	; 0x05
 6d2:	84 83       	std	Z+4, r24	; 0x04
	led_ptr[3] = &ledCh4;
 6d4:	87 e2       	ldi	r24, 0x27	; 39
 6d6:	91 e0       	ldi	r25, 0x01	; 1
 6d8:	97 83       	std	Z+7, r25	; 0x07
 6da:	86 83       	std	Z+6, r24	; 0x06
	led_ptr[4] = &ledA;
 6dc:	83 e5       	ldi	r24, 0x53	; 83
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	91 87       	std	Z+9, r25	; 0x09
 6e2:	80 87       	std	Z+8, r24	; 0x08
	led_ptr[5] = &ledB;
 6e4:	88 e2       	ldi	r24, 0x28	; 40
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	93 87       	std	Z+11, r25	; 0x0b
 6ea:	82 87       	std	Z+10, r24	; 0x0a
	led_ptr[6] = &ledLoop;
 6ec:	8c e2       	ldi	r24, 0x2C	; 44
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	95 87       	std	Z+13, r25	; 0x0d
 6f2:	84 87       	std	Z+12, r24	; 0x0c
	led_ptr[7] = &ledPwrGrn;
 6f4:	8d e2       	ldi	r24, 0x2D	; 45
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	97 87       	std	Z+15, r25	; 0x0f
 6fa:	86 87       	std	Z+14, r24	; 0x0e
	led_ptr[8] = &ledPwrRed;
 6fc:	8b e2       	ldi	r24, 0x2B	; 43
 6fe:	91 e0       	ldi	r25, 0x01	; 1
 700:	91 8b       	std	Z+17, r25	; 0x11
 702:	80 8b       	std	Z+16, r24	; 0x10
 704:	08 95       	ret

Disassembly of section .text.readButtonsState:

000003a8 <readButtonsState>:

//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	ac c0       	rjmp	.+344    	; 0x504 <__stack+0x5>
	{
		
		switch(cnt)
 3ac:	48 2f       	mov	r20, r24
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	48 30       	cpi	r20, 0x08	; 8
 3b2:	51 05       	cpc	r21, r1
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <readButtonsState+0x10>
 3b6:	a5 c0       	rjmp	.+330    	; 0x502 <__stack+0x3>
 3b8:	fa 01       	movw	r30, r20
 3ba:	ef 55       	subi	r30, 0x5F	; 95
 3bc:	ff 4f       	sbci	r31, 0xFF	; 255
 3be:	09 94       	ijmp
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 3c0:	3b b1       	in	r19, 0x0b	; 11
 3c2:	3f 7d       	andi	r19, 0xDF	; 223
 3c4:	3b b9       	out	0x0b, r19	; 11
 3c6:	3b b1       	in	r19, 0x0b	; 11
 3c8:	3f 7b       	andi	r19, 0xBF	; 191
 3ca:	3b b9       	out	0x0b, r19	; 11
 3cc:	3b b1       	in	r19, 0x0b	; 11
 3ce:	3f 77       	andi	r19, 0x7F	; 127
 3d0:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 3d2:	31 e0       	ldi	r19, 0x01	; 1
 3d4:	4c 9b       	sbis	0x09, 4	; 9
 3d6:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
 3d8:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <buttonsState+0x1>
 3dc:	31 e0       	ldi	r19, 0x01	; 1
 3de:	35 9b       	sbis	0x06, 5	; 6
 3e0:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_sleeve = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 3e2:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <buttonsState+0xc>
				break;
 3e6:	8d c0       	rjmp	.+282    	; 0x502 <__stack+0x3>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 3e8:	2b b1       	in	r18, 0x0b	; 11
 3ea:	20 62       	ori	r18, 0x20	; 32
 3ec:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 3ee:	2b b1       	in	r18, 0x0b	; 11
 3f0:	2f 7b       	andi	r18, 0xBF	; 191
 3f2:	2b b9       	out	0x0b, r18	; 11
 3f4:	2b b1       	in	r18, 0x0b	; 11
 3f6:	2f 77       	andi	r18, 0x7F	; 127
 3f8:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	4c 9b       	sbis	0x09, 4	; 9
 3fe:	20 e0       	ldi	r18, 0x00	; 0
 400:	31 e0       	ldi	r19, 0x01	; 1
 402:	4a 9b       	sbis	0x09, 2	; 9
 404:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = arch_ioport_get_pin_level(PIN_BUTTONS);
 406:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <buttonsState+0x7>
 40a:	31 e0       	ldi	r19, 0x01	; 1
 40c:	35 9b       	sbis	0x06, 5	; 6
 40e:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_presence = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 410:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <buttonsState+0xe>
				break;
 414:	76 c0       	rjmp	.+236    	; 0x502 <__stack+0x3>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 416:	9b b1       	in	r25, 0x0b	; 11
 418:	9f 7d       	andi	r25, 0xDF	; 223
 41a:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 41c:	9b b1       	in	r25, 0x0b	; 11
 41e:	90 64       	ori	r25, 0x40	; 64
 420:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 422:	9b b1       	in	r25, 0x0b	; 11
 424:	9f 77       	andi	r25, 0x7F	; 127
 426:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	4c 9b       	sbis	0x09, 4	; 9
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	31 e0       	ldi	r19, 0x01	; 1
 430:	4a 9b       	sbis	0x09, 2	; 9
 432:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnLoop = arch_ioport_get_pin_level(PIN_BUTTONS);
 434:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <buttonsState+0x8>
 438:	31 e0       	ldi	r19, 0x01	; 1
 43a:	35 9b       	sbis	0x06, 5	; 6
 43c:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_presence = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 43e:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <buttonsState+0xb>
				break;
 442:	5f c0       	rjmp	.+190    	; 0x502 <__stack+0x3>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 444:	3b b1       	in	r19, 0x0b	; 11
 446:	30 62       	ori	r19, 0x20	; 32
 448:	3b b9       	out	0x0b, r19	; 11
 44a:	3b b1       	in	r19, 0x0b	; 11
 44c:	30 64       	ori	r19, 0x40	; 64
 44e:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 450:	3b b1       	in	r19, 0x0b	; 11
 452:	3f 77       	andi	r19, 0x7F	; 127
 454:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 456:	31 e0       	ldi	r19, 0x01	; 1
 458:	4c 9b       	sbis	0x09, 4	; 9
 45a:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
 45c:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <buttonsState+0x2>
 460:	31 e0       	ldi	r19, 0x01	; 1
 462:	35 9b       	sbis	0x06, 5	; 6
 464:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_sleeve = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 466:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <buttonsState+0x9>
				break;
 46a:	4b c0       	rjmp	.+150    	; 0x502 <__stack+0x3>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 46c:	3b b1       	in	r19, 0x0b	; 11
 46e:	3f 7d       	andi	r19, 0xDF	; 223
 470:	3b b9       	out	0x0b, r19	; 11
 472:	3b b1       	in	r19, 0x0b	; 11
 474:	3f 7b       	andi	r19, 0xBF	; 191
 476:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 478:	3b b1       	in	r19, 0x0b	; 11
 47a:	30 68       	ori	r19, 0x80	; 128
 47c:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 47e:	a1 e0       	ldi	r26, 0x01	; 1
 480:	4c 9b       	sbis	0x09, 4	; 9
 482:	a0 e0       	ldi	r26, 0x00	; 0
 484:	31 e0       	ldi	r19, 0x01	; 1
 486:	4a 9b       	sbis	0x09, 2	; 9
 488:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh2 = arch_ioport_get_pin_level(PIN_BUTTONS);
 48a:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <buttonsState+0x4>
 48e:	31 e0       	ldi	r19, 0x01	; 1
 490:	35 9b       	sbis	0x06, 5	; 6
 492:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_tip = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 494:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <buttonsState+0xa>
				break;
 498:	34 c0       	rjmp	.+104    	; 0x502 <__stack+0x3>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 49a:	3b b1       	in	r19, 0x0b	; 11
 49c:	30 62       	ori	r19, 0x20	; 32
 49e:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 4a0:	3b b1       	in	r19, 0x0b	; 11
 4a2:	3f 7b       	andi	r19, 0xBF	; 191
 4a4:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 4a6:	3b b1       	in	r19, 0x0b	; 11
 4a8:	30 68       	ori	r19, 0x80	; 128
 4aa:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 4ac:	31 e0       	ldi	r19, 0x01	; 1
 4ae:	4a 9b       	sbis	0x09, 2	; 9
 4b0:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = arch_ioport_get_pin_level(PIN_BUTTONS);
 4b2:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <buttonsState+0x5>
				break;
 4b6:	25 c0       	rjmp	.+74     	; 0x502 <__stack+0x3>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 4b8:	9b b1       	in	r25, 0x0b	; 11
 4ba:	9f 7d       	andi	r25, 0xDF	; 223
 4bc:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 4be:	9b b1       	in	r25, 0x0b	; 11
 4c0:	90 64       	ori	r25, 0x40	; 64
 4c2:	9b b9       	out	0x0b, r25	; 11
 4c4:	9b b1       	in	r25, 0x0b	; 11
 4c6:	90 68       	ori	r25, 0x80	; 128
 4c8:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	4c 9b       	sbis	0x09, 4	; 9
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	31 e0       	ldi	r19, 0x01	; 1
 4d2:	4a 9b       	sbis	0x09, 2	; 9
 4d4:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[2] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh4 = arch_ioport_get_pin_level(PIN_BUTTONS);
 4d6:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <buttonsState+0x6>
 4da:	31 e0       	ldi	r19, 0x01	; 1
 4dc:	35 9b       	sbis	0x06, 5	; 6
 4de:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_tip = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 4e0:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <buttonsState+0xd>
				break;
 4e4:	0e c0       	rjmp	.+28     	; 0x502 <__stack+0x3>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 4e6:	3b b1       	in	r19, 0x0b	; 11
 4e8:	30 62       	ori	r19, 0x20	; 32
 4ea:	3b b9       	out	0x0b, r19	; 11
 4ec:	3b b1       	in	r19, 0x0b	; 11
 4ee:	30 64       	ori	r19, 0x40	; 64
 4f0:	3b b9       	out	0x0b, r19	; 11
 4f2:	3b b1       	in	r19, 0x0b	; 11
 4f4:	30 68       	ori	r19, 0x80	; 128
 4f6:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 4f8:	31 e0       	ldi	r19, 0x01	; 1
 4fa:	4a 9b       	sbis	0x09, 2	; 9
 4fc:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = arch_ioport_get_pin_level(PIN_BUTTONS);
 4fe:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <buttonsState+0x3>

//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 502:	8f 5f       	subi	r24, 0xFF	; 255
 504:	88 30       	cpi	r24, 0x08	; 8
 506:	08 f4       	brcc	.+2      	; 0x50a <__stack+0xb>
 508:	51 cf       	rjmp	.-350    	; 0x3ac <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 50a:	89 2f       	mov	r24, r25
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	22 0f       	add	r18, r18
 51a:	33 1f       	adc	r19, r19
 51c:	22 0f       	add	r18, r18
 51e:	33 1f       	adc	r19, r19
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	8a 2b       	or	r24, r26
 526:	82 2b       	or	r24, r18
 528:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <buttonsState>
 52c:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

00000906 <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
 906:	ac 01       	movw	r20, r24
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 908:	88 b1       	in	r24, 0x08	; 8
 90a:	80 61       	ori	r24, 0x10	; 16
 90c:	88 b9       	out	0x08, r24	; 8
	arch_ioport_set_pin_level(PIN_ST, 1);
	for(uint8_t i=0; i<16; i++)
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	16 c0       	rjmp	.+44     	; 0x93e <writeShiftRegs+0x38>
	{
		data = data << i;
 912:	09 2e       	mov	r0, r25
 914:	02 c0       	rjmp	.+4      	; 0x91a <writeShiftRegs+0x14>
 916:	44 0f       	add	r20, r20
 918:	55 1f       	adc	r21, r21
 91a:	0a 94       	dec	r0
 91c:	e2 f7       	brpl	.-8      	; 0x916 <writeShiftRegs+0x10>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 91e:	25 b1       	in	r18, 0x05	; 5
 920:	2f 7d       	andi	r18, 0xDF	; 223
 922:	25 b9       	out	0x05, r18	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 924:	47 ff       	sbrs	r20, 7
 926:	04 c0       	rjmp	.+8      	; 0x930 <writeShiftRegs+0x2a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 928:	85 b1       	in	r24, 0x05	; 5
 92a:	88 60       	ori	r24, 0x08	; 8
 92c:	85 b9       	out	0x05, r24	; 5
 92e:	03 c0       	rjmp	.+6      	; 0x936 <writeShiftRegs+0x30>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 930:	85 b1       	in	r24, 0x05	; 5
 932:	87 7f       	andi	r24, 0xF7	; 247
 934:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 936:	25 b1       	in	r18, 0x05	; 5
 938:	20 62       	ori	r18, 0x20	; 32
 93a:	25 b9       	out	0x05, r18	; 5
}

void writeShiftRegs(uint16_t data)
{
	arch_ioport_set_pin_level(PIN_ST, 1);
	for(uint8_t i=0; i<16; i++)
 93c:	9f 5f       	subi	r25, 0xFF	; 255
 93e:	90 31       	cpi	r25, 0x10	; 16
 940:	40 f3       	brcs	.-48     	; 0x912 <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 942:	85 b1       	in	r24, 0x05	; 5
 944:	8f 7d       	andi	r24, 0xDF	; 223
 946:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 948:	88 b1       	in	r24, 0x08	; 8
 94a:	80 61       	ori	r24, 0x10	; 16
 94c:	88 b9       	out	0x08, r24	; 8
 94e:	08 95       	ret

Disassembly of section .text.__vector_16:

000001b8 <__vector_16>:
}

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
}
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	3f 93       	push	r19
 1c6:	4f 93       	push	r20
 1c8:	5f 93       	push	r21
 1ca:	6f 93       	push	r22
 1cc:	7f 93       	push	r23
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	af 93       	push	r26
 1d4:	bf 93       	push	r27
 1d6:	ef 93       	push	r30
 1d8:	ff 93       	push	r31
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	29 97       	sbiw	r28, 0x09	; 9
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df d0       	rcall	.+446    	; 0x3a8 <readButtonsState>
 1ea:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <blinkCounter>
 1ee:	89 e2       	ldi	r24, 0x29	; 41
 1f0:	98 9f       	mul	r25, r24
 1f2:	81 2d       	mov	r24, r1
 1f4:	11 24       	eor	r1, r1
 1f6:	86 95       	lsr	r24
 1f8:	86 95       	lsr	r24
 1fa:	39 2f       	mov	r19, r25
 1fc:	29 e1       	ldi	r18, 0x19	; 25
 1fe:	82 9f       	mul	r24, r18
 200:	30 19       	sub	r19, r0
 202:	11 24       	eor	r1, r1
 204:	31 11       	cpse	r19, r1
 206:	08 c0       	rjmp	.+16     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 208:	99 23       	and	r25, r25
 20a:	31 f0       	breq	.+12     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 20c:	20 91 8f 01 	lds	r18, 0x018F	; 0x80018f <fastBlink>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	82 27       	eor	r24, r18
 214:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <fastBlink>
 218:	94 36       	cpi	r25, 0x64	; 100
 21a:	51 f4       	brne	.+20     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 21c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <blinkCounter>
 220:	90 91 90 01 	lds	r25, 0x0190	; 0x800190 <slowBlink>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	89 27       	eor	r24, r25
 228:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <slowBlink>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	3c c0       	rjmp	.+120    	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 230:	9f 5f       	subi	r25, 0xFF	; 255
 232:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <blinkCounter>
 236:	fa cf       	rjmp	.-12     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 238:	82 2f       	mov	r24, r18
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	fc 01       	movw	r30, r24
 23e:	ee 0f       	add	r30, r30
 240:	ff 1f       	adc	r31, r31
 242:	e0 5c       	subi	r30, 0xC0	; 192
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	01 90       	ld	r0, Z+
 248:	f0 81       	ld	r31, Z
 24a:	e0 2d       	mov	r30, r0
 24c:	30 81       	ld	r19, Z
 24e:	31 30       	cpi	r19, 0x01	; 1
 250:	71 f0       	breq	.+28     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
 252:	28 f0       	brcs	.+10     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 254:	32 30       	cpi	r19, 0x02	; 2
 256:	a1 f0       	breq	.+40     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>
 258:	33 30       	cpi	r19, 0x03	; 3
 25a:	e1 f0       	breq	.+56     	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
 25c:	24 c0       	rjmp	.+72     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 25e:	e1 e0       	ldi	r30, 0x01	; 1
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	10 82       	st	Z, r1
 26c:	1c c0       	rjmp	.+56     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 26e:	e1 e0       	ldi	r30, 0x01	; 1
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	ec 0f       	add	r30, r28
 274:	fd 1f       	adc	r31, r29
 276:	e8 0f       	add	r30, r24
 278:	f9 1f       	adc	r31, r25
 27a:	31 e0       	ldi	r19, 0x01	; 1
 27c:	30 83       	st	Z, r19
 27e:	13 c0       	rjmp	.+38     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 280:	e1 e0       	ldi	r30, 0x01	; 1
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	ec 0f       	add	r30, r28
 286:	fd 1f       	adc	r31, r29
 288:	e8 0f       	add	r30, r24
 28a:	f9 1f       	adc	r31, r25
 28c:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <fastBlink>
 290:	30 83       	st	Z, r19
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 294:	e1 e0       	ldi	r30, 0x01	; 1
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ec 0f       	add	r30, r28
 29a:	fd 1f       	adc	r31, r29
 29c:	e8 0f       	add	r30, r24
 29e:	f9 1f       	adc	r31, r25
 2a0:	30 91 90 01 	lds	r19, 0x0190	; 0x800190 <slowBlink>
 2a4:	30 83       	st	Z, r19
 2a6:	2f 5f       	subi	r18, 0xFF	; 255
 2a8:	29 30       	cpi	r18, 0x09	; 9
 2aa:	30 f2       	brcs	.-116    	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
 2ac:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <RELAY_13_24>
 2b0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <RELAY_1_3>
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	ac 01       	movw	r20, r24
 2bc:	42 2b       	or	r20, r18
 2be:	9a 01       	movw	r18, r20
 2c0:	9b 81       	ldd	r25, Y+3	; 0x03
 2c2:	89 2f       	mov	r24, r25
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	82 2b       	or	r24, r18
 2d0:	93 2b       	or	r25, r19
 2d2:	29 81       	ldd	r18, Y+1	; 0x01
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	82 2b       	or	r24, r18
 2e4:	93 2b       	or	r25, r19
 2e6:	2a 81       	ldd	r18, Y+2	; 0x02
 2e8:	50 e1       	ldi	r21, 0x10	; 16
 2ea:	25 9f       	mul	r18, r21
 2ec:	90 01       	movw	r18, r0
 2ee:	11 24       	eor	r1, r1
 2f0:	28 2b       	or	r18, r24
 2f2:	39 2b       	or	r19, r25
 2f4:	4c 81       	ldd	r20, Y+4	; 0x04
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	48 9f       	mul	r20, r24
 2fa:	a0 01       	movw	r20, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	24 2b       	or	r18, r20
 300:	35 2b       	or	r19, r21
 302:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <RELAY_8_16>
 306:	80 e8       	ldi	r24, 0x80	; 128
 308:	48 9f       	mul	r20, r24
 30a:	a0 01       	movw	r20, r0
 30c:	11 24       	eor	r1, r1
 30e:	24 2b       	or	r18, r20
 310:	35 2b       	or	r19, r21
 312:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <RELAY_2_4>
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	98 2f       	mov	r25, r24
 31a:	88 27       	eor	r24, r24
 31c:	28 2b       	or	r18, r24
 31e:	39 2b       	or	r19, r25
 320:	8d 81       	ldd	r24, Y+5	; 0x05
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	98 2f       	mov	r25, r24
 326:	88 27       	eor	r24, r24
 328:	99 0f       	add	r25, r25
 32a:	28 2b       	or	r18, r24
 32c:	39 2b       	or	r19, r25
 32e:	8e 81       	ldd	r24, Y+6	; 0x06
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	98 2f       	mov	r25, r24
 334:	88 27       	eor	r24, r24
 336:	99 0f       	add	r25, r25
 338:	99 0f       	add	r25, r25
 33a:	28 2b       	or	r18, r24
 33c:	39 2b       	or	r19, r25
 33e:	98 85       	ldd	r25, Y+8	; 0x08
 340:	89 2f       	mov	r24, r25
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	98 2f       	mov	r25, r24
 346:	88 27       	eor	r24, r24
 348:	99 0f       	add	r25, r25
 34a:	99 0f       	add	r25, r25
 34c:	99 0f       	add	r25, r25
 34e:	28 2b       	or	r18, r24
 350:	39 2b       	or	r19, r25
 352:	49 85       	ldd	r20, Y+9	; 0x09
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	54 2f       	mov	r21, r20
 358:	44 27       	eor	r20, r20
 35a:	52 95       	swap	r21
 35c:	50 7f       	andi	r21, 0xF0	; 240
 35e:	24 2b       	or	r18, r20
 360:	35 2b       	or	r19, r21
 362:	8f 81       	ldd	r24, Y+7	; 0x07
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	98 2f       	mov	r25, r24
 368:	88 27       	eor	r24, r24
 36a:	92 95       	swap	r25
 36c:	99 0f       	add	r25, r25
 36e:	90 7e       	andi	r25, 0xE0	; 224
 370:	82 2b       	or	r24, r18
 372:	93 2b       	or	r25, r19
 374:	c8 d2       	rcall	.+1424   	; 0x906 <writeShiftRegs>
 376:	29 96       	adiw	r28, 0x09	; 9
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

Disassembly of section .text.UART_init:

000009e8 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
 9e8:	88 ed       	ldi	r24, 0xD8	; 216
 9ea:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C=0x06; 
 9ee:	86 e0       	ldi	r24, 0x06	; 6
 9f0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0x00;
 9f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=0x13;
 9f8:	83 e1       	ldi	r24, 0x13	; 19
 9fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
 9fe:	08 95       	ret

Disassembly of section .text.__vector_18:

00000804 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 804:	1f 92       	push	r1
 806:	1f b6       	in	r1, 0x3f	; 63
 808:	1f 92       	push	r1
 80a:	11 24       	eor	r1, r1
 80c:	8f 93       	push	r24
 80e:	9f 93       	push	r25
 810:	ef 93       	push	r30
 812:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 814:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 818:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 81c:	8c 71       	andi	r24, 0x1C	; 28
 81e:	d1 f4       	brne	.+52     	; 0x854 <__vector_18+0x50>
	{
		rx_buffer0[rx_wr_index++] = data;
 820:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <rx_wr_index>
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	8e 0f       	add	r24, r30
 828:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_wr_index>
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	e0 5a       	subi	r30, 0xA0	; 160
 830:	fe 4f       	sbci	r31, 0xFE	; 254
 832:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 834:	80 31       	cpi	r24, 0x10	; 16
 836:	11 f4       	brne	.+4      	; 0x83c <__vector_18+0x38>
 838:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 83c:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_counter>
 840:	8f 5f       	subi	r24, 0xFF	; 255
 842:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <rx_counter>
 846:	80 31       	cpi	r24, 0x10	; 16
 848:	29 f4       	brne	.+10     	; 0x854 <__vector_18+0x50>
		{
			rx_counter=0;
 84a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <rx_counter>
			rx_buffer_overflow=1;
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <rx_buffer_overflow>
		}
	}
}
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	9f 91       	pop	r25
 85a:	8f 91       	pop	r24
 85c:	1f 90       	pop	r1
 85e:	1f be       	out	0x3f, r1	; 63
 860:	1f 90       	pop	r1
 862:	18 95       	reti

Disassembly of section .text.UART_PopWord:

00000990 <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
 990:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_counter>
 994:	88 23       	and	r24, r24
 996:	e1 f3       	breq	.-8      	; 0x990 <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
 998:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <rx_rd_index>
 99c:	91 e0       	ldi	r25, 0x01	; 1
 99e:	9e 0f       	add	r25, r30
 9a0:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <rx_rd_index>
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	e0 5a       	subi	r30, 0xA0	; 160
 9a8:	fe 4f       	sbci	r31, 0xFE	; 254
 9aa:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
 9ac:	90 31       	cpi	r25, 0x10	; 16
 9ae:	11 f4       	brne	.+4      	; 0x9b4 <UART_PopWord+0x24>
 9b0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
 9b4:	f8 94       	cli
	--rx_counter;
 9b6:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <rx_counter>
 9ba:	91 50       	subi	r25, 0x01	; 1
 9bc:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <rx_counter>
	cpu_irq_enable();
 9c0:	78 94       	sei
	return data;
}
 9c2:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

00000a4c <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <rx_counter>
 a52:	91 11       	cpse	r25, r1
 a54:	01 c0       	rjmp	.+2      	; 0xa58 <UART_RxBufferNotEmpty+0xc>
 a56:	80 e0       	ldi	r24, 0x00	; 0
}
 a58:	08 95       	ret

Disassembly of section .text.__vector_20:

000008b8 <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 8b8:	1f 92       	push	r1
 8ba:	1f b6       	in	r1, 0x3f	; 63
 8bc:	1f 92       	push	r1
 8be:	11 24       	eor	r1, r1
 8c0:	8f 93       	push	r24
 8c2:	ef 93       	push	r30
 8c4:	ff 93       	push	r31
	if (tx_counter)
 8c6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <tx_counter>
 8ca:	88 23       	and	r24, r24
 8cc:	a9 f0       	breq	.+42     	; 0x8f8 <__vector_20+0x40>
	{
		--tx_counter;
 8ce:	81 50       	subi	r24, 0x01	; 1
 8d0:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 8d4:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <tx_rd_index>
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	8e 0f       	add	r24, r30
 8dc:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <tx_rd_index>
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	e9 5a       	subi	r30, 0xA9	; 169
 8e4:	fe 4f       	sbci	r31, 0xFE	; 254
 8e6:	80 81       	ld	r24, Z
 8e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 8ec:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <tx_rd_index>
 8f0:	88 30       	cpi	r24, 0x08	; 8
 8f2:	11 f4       	brne	.+4      	; 0x8f8 <__vector_20+0x40>
 8f4:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <tx_rd_index>
		#endif
	}
}
 8f8:	ff 91       	pop	r31
 8fa:	ef 91       	pop	r30
 8fc:	8f 91       	pop	r24
 8fe:	1f 90       	pop	r1
 900:	1f be       	out	0x3f, r1	; 63
 902:	1f 90       	pop	r1
 904:	18 95       	reti

Disassembly of section .text.libgcc:

00000a00 <__xload_4>:
 a00:	57 fd       	sbrc	r21, 7
 a02:	05 c0       	rjmp	.+10     	; 0xa0e <__xload_4+0xe>
 a04:	65 91       	lpm	r22, Z+
 a06:	75 91       	lpm	r23, Z+
 a08:	85 91       	lpm	r24, Z+
 a0a:	95 91       	lpm	r25, Z+
 a0c:	08 95       	ret
 a0e:	61 91       	ld	r22, Z+
 a10:	71 91       	ld	r23, Z+
 a12:	81 91       	ld	r24, Z+
 a14:	91 91       	ld	r25, Z+
 a16:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000a8e <_fini>:
 a8e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000a90 <__funcs_on_exit>:
 a90:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000a92 <__simulator_exit>:
 a92:	08 95       	ret

Disassembly of section .text.exit:

00000a5a <exit>:
 a5a:	ec 01       	movw	r28, r24
 a5c:	19 d0       	rcall	.+50     	; 0xa90 <__funcs_on_exit>
 a5e:	17 d0       	rcall	.+46     	; 0xa8e <_fini>
 a60:	ce 01       	movw	r24, r28
 a62:	17 d0       	rcall	.+46     	; 0xa92 <__simulator_exit>
 a64:	ce 01       	movw	r24, r28
 a66:	16 d0       	rcall	.+44     	; 0xa94 <_Exit>

Disassembly of section .text._Exit:

00000a94 <_Exit>:
 a94:	8d db       	rcall	.-2278   	; 0x1b0 <_exit>

Disassembly of section .text.avrlibc:

000009c4 <eeprom_read_block>:
 9c4:	ba 01       	movw	r22, r20
 9c6:	a9 01       	movw	r20, r18
 9c8:	dc 01       	movw	r26, r24
 9ca:	cb 01       	movw	r24, r22

000009cc <eeprom_read_blraw>:
 9cc:	fc 01       	movw	r30, r24
 9ce:	f9 99       	sbic	0x1f, 1	; 31
 9d0:	fe cf       	rjmp	.-4      	; 0x9ce <eeprom_read_blraw+0x2>
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <eeprom_read_blraw+0x14>
 9d4:	f2 bd       	out	0x22, r31	; 34
 9d6:	e1 bd       	out	0x21, r30	; 33
 9d8:	f8 9a       	sbi	0x1f, 0	; 31
 9da:	31 96       	adiw	r30, 0x01	; 1
 9dc:	00 b4       	in	r0, 0x20	; 32
 9de:	0d 92       	st	X+, r0
 9e0:	41 50       	subi	r20, 0x01	; 1
 9e2:	50 40       	sbci	r21, 0x00	; 0
 9e4:	b8 f7       	brcc	.-18     	; 0x9d4 <eeprom_read_blraw+0x8>
 9e6:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a2c <eeprom_read_byte>:
 a2c:	cb 01       	movw	r24, r22
 a2e:	f9 99       	sbic	0x1f, 1	; 31
 a30:	fe cf       	rjmp	.-4      	; 0xa2e <eeprom_read_byte+0x2>
 a32:	92 bd       	out	0x22, r25	; 34
 a34:	81 bd       	out	0x21, r24	; 33
 a36:	f8 9a       	sbi	0x1f, 0	; 31
 a38:	99 27       	eor	r25, r25
 a3a:	80 b5       	in	r24, 0x20	; 32
 a3c:	08 95       	ret

Disassembly of section .text.avrlibc:

00000a74 <eeprom_read_word>:
 a74:	cb 01       	movw	r24, r22
 a76:	a8 e1       	ldi	r26, 0x18	; 24
 a78:	b0 e0       	ldi	r27, 0x00	; 0
 a7a:	42 e0       	ldi	r20, 0x02	; 2
 a7c:	50 e0       	ldi	r21, 0x00	; 0
 a7e:	a6 cf       	rjmp	.-180    	; 0x9cc <eeprom_read_blraw>
