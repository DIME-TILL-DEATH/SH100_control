
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004c0  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800100  00800100  000004c0  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000000e  00000000  00000000  000004ef  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f4  00000000  00000000  000005bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000086d  00000000  00000000  00001eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060c  00000000  00000000  0000271e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027d  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  000030f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003331  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00000422  00000422  000004b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000033b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000008  00000412  00000412  000004a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MIDI_IsStatusWord 00000008  0000041a  0000041a  000004ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MIDI_IsSysRealTime 0000000c  00000406  00000406  0000049a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.MIDI_GetStatusType 00000040  0000035e  0000035e  000003f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.MIDI_ParserTask 00000110  00000198  00000198  0000022c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .bss.state    00000001  00800125  00800125  000004c0  2**0
                  ALLOC
 21 .text.UART_init 00000018  000003d2  000003d2  00000466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__vector_18 00000064  000002a8  000002a8  0000033c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.UART_PopWord 00000034  0000039e  0000039e  00000432  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.UART_RxBufferNotEmpty 0000000e  000003ea  000003ea  0000047e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_20 00000052  0000030c  0000030c  000003a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.__dummy_fini 00000002  00000424  00000424  000004b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.__dummy_funcs_on_exit 00000002  00000426  00000426  000004ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_simulator_exit 00000002  00000428  00000428  000004bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.exit    0000000e  000003f8  000003f8  0000048c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text._Exit   00000002  0000042a  0000042a  000004be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	a3 c0       	rjmp	.+326    	; 0x148 <__ctors_end>
   2:	0f c2       	rjmp	.+1054   	; 0x422 <__bad_interrupt>
   4:	0e c2       	rjmp	.+1052   	; 0x422 <__bad_interrupt>
   6:	0d c2       	rjmp	.+1050   	; 0x422 <__bad_interrupt>
   8:	0c c2       	rjmp	.+1048   	; 0x422 <__bad_interrupt>
   a:	0b c2       	rjmp	.+1046   	; 0x422 <__bad_interrupt>
   c:	0a c2       	rjmp	.+1044   	; 0x422 <__bad_interrupt>
   e:	09 c2       	rjmp	.+1042   	; 0x422 <__bad_interrupt>
  10:	08 c2       	rjmp	.+1040   	; 0x422 <__bad_interrupt>
  12:	07 c2       	rjmp	.+1038   	; 0x422 <__bad_interrupt>
  14:	06 c2       	rjmp	.+1036   	; 0x422 <__bad_interrupt>
  16:	05 c2       	rjmp	.+1034   	; 0x422 <__bad_interrupt>
  18:	04 c2       	rjmp	.+1032   	; 0x422 <__bad_interrupt>
  1a:	03 c2       	rjmp	.+1030   	; 0x422 <__bad_interrupt>
  1c:	02 c2       	rjmp	.+1028   	; 0x422 <__bad_interrupt>
  1e:	01 c2       	rjmp	.+1026   	; 0x422 <__bad_interrupt>
  20:	00 c2       	rjmp	.+1024   	; 0x422 <__bad_interrupt>
  22:	ff c1       	rjmp	.+1022   	; 0x422 <__bad_interrupt>
  24:	41 c1       	rjmp	.+642    	; 0x2a8 <__vector_18>
  26:	fd c1       	rjmp	.+1018   	; 0x422 <__bad_interrupt>
  28:	71 c1       	rjmp	.+738    	; 0x30c <__vector_20>
  2a:	fb c1       	rjmp	.+1014   	; 0x422 <__bad_interrupt>
  2c:	fa c1       	rjmp	.+1012   	; 0x422 <__bad_interrupt>
  2e:	f9 c1       	rjmp	.+1010   	; 0x422 <__bad_interrupt>
  30:	f8 c1       	rjmp	.+1008   	; 0x422 <__bad_interrupt>
  32:	f7 c1       	rjmp	.+1006   	; 0x422 <__bad_interrupt>
  34:	9e c1       	rjmp	.+828    	; 0x372 <MIDI_GetStatusType+0x14>
  36:	af c1       	rjmp	.+862    	; 0x396 <MIDI_GetStatusType+0x38>
  38:	ae c1       	rjmp	.+860    	; 0x396 <MIDI_GetStatusType+0x38>
  3a:	ad c1       	rjmp	.+858    	; 0x396 <MIDI_GetStatusType+0x38>
  3c:	ac c1       	rjmp	.+856    	; 0x396 <MIDI_GetStatusType+0x38>
  3e:	ab c1       	rjmp	.+854    	; 0x396 <MIDI_GetStatusType+0x38>
  40:	aa c1       	rjmp	.+852    	; 0x396 <MIDI_GetStatusType+0x38>
  42:	a9 c1       	rjmp	.+850    	; 0x396 <MIDI_GetStatusType+0x38>
  44:	a8 c1       	rjmp	.+848    	; 0x396 <MIDI_GetStatusType+0x38>
  46:	a7 c1       	rjmp	.+846    	; 0x396 <MIDI_GetStatusType+0x38>
  48:	a6 c1       	rjmp	.+844    	; 0x396 <MIDI_GetStatusType+0x38>
  4a:	a5 c1       	rjmp	.+842    	; 0x396 <MIDI_GetStatusType+0x38>
  4c:	a4 c1       	rjmp	.+840    	; 0x396 <MIDI_GetStatusType+0x38>
  4e:	a3 c1       	rjmp	.+838    	; 0x396 <MIDI_GetStatusType+0x38>
  50:	a2 c1       	rjmp	.+836    	; 0x396 <MIDI_GetStatusType+0x38>
  52:	a1 c1       	rjmp	.+834    	; 0x396 <MIDI_GetStatusType+0x38>
  54:	8e c1       	rjmp	.+796    	; 0x372 <MIDI_GetStatusType+0x14>
  56:	9f c1       	rjmp	.+830    	; 0x396 <MIDI_GetStatusType+0x38>
  58:	9e c1       	rjmp	.+828    	; 0x396 <MIDI_GetStatusType+0x38>
  5a:	9d c1       	rjmp	.+826    	; 0x396 <MIDI_GetStatusType+0x38>
  5c:	9c c1       	rjmp	.+824    	; 0x396 <MIDI_GetStatusType+0x38>
  5e:	9b c1       	rjmp	.+822    	; 0x396 <MIDI_GetStatusType+0x38>
  60:	9a c1       	rjmp	.+820    	; 0x396 <MIDI_GetStatusType+0x38>
  62:	99 c1       	rjmp	.+818    	; 0x396 <MIDI_GetStatusType+0x38>
  64:	98 c1       	rjmp	.+816    	; 0x396 <MIDI_GetStatusType+0x38>
  66:	97 c1       	rjmp	.+814    	; 0x396 <MIDI_GetStatusType+0x38>
  68:	96 c1       	rjmp	.+812    	; 0x396 <MIDI_GetStatusType+0x38>
  6a:	95 c1       	rjmp	.+810    	; 0x396 <MIDI_GetStatusType+0x38>
  6c:	94 c1       	rjmp	.+808    	; 0x396 <MIDI_GetStatusType+0x38>
  6e:	93 c1       	rjmp	.+806    	; 0x396 <MIDI_GetStatusType+0x38>
  70:	92 c1       	rjmp	.+804    	; 0x396 <MIDI_GetStatusType+0x38>
  72:	91 c1       	rjmp	.+802    	; 0x396 <MIDI_GetStatusType+0x38>
  74:	7e c1       	rjmp	.+764    	; 0x372 <MIDI_GetStatusType+0x14>
  76:	8f c1       	rjmp	.+798    	; 0x396 <MIDI_GetStatusType+0x38>
  78:	8e c1       	rjmp	.+796    	; 0x396 <MIDI_GetStatusType+0x38>
  7a:	8d c1       	rjmp	.+794    	; 0x396 <MIDI_GetStatusType+0x38>
  7c:	8c c1       	rjmp	.+792    	; 0x396 <MIDI_GetStatusType+0x38>
  7e:	8b c1       	rjmp	.+790    	; 0x396 <MIDI_GetStatusType+0x38>
  80:	8a c1       	rjmp	.+788    	; 0x396 <MIDI_GetStatusType+0x38>
  82:	89 c1       	rjmp	.+786    	; 0x396 <MIDI_GetStatusType+0x38>
  84:	88 c1       	rjmp	.+784    	; 0x396 <MIDI_GetStatusType+0x38>
  86:	87 c1       	rjmp	.+782    	; 0x396 <MIDI_GetStatusType+0x38>
  88:	86 c1       	rjmp	.+780    	; 0x396 <MIDI_GetStatusType+0x38>
  8a:	85 c1       	rjmp	.+778    	; 0x396 <MIDI_GetStatusType+0x38>
  8c:	84 c1       	rjmp	.+776    	; 0x396 <MIDI_GetStatusType+0x38>
  8e:	83 c1       	rjmp	.+774    	; 0x396 <MIDI_GetStatusType+0x38>
  90:	82 c1       	rjmp	.+772    	; 0x396 <MIDI_GetStatusType+0x38>
  92:	81 c1       	rjmp	.+770    	; 0x396 <MIDI_GetStatusType+0x38>
  94:	6e c1       	rjmp	.+732    	; 0x372 <MIDI_GetStatusType+0x14>
  96:	7f c1       	rjmp	.+766    	; 0x396 <MIDI_GetStatusType+0x38>
  98:	7e c1       	rjmp	.+764    	; 0x396 <MIDI_GetStatusType+0x38>
  9a:	7d c1       	rjmp	.+762    	; 0x396 <MIDI_GetStatusType+0x38>
  9c:	7c c1       	rjmp	.+760    	; 0x396 <MIDI_GetStatusType+0x38>
  9e:	7b c1       	rjmp	.+758    	; 0x396 <MIDI_GetStatusType+0x38>
  a0:	7a c1       	rjmp	.+756    	; 0x396 <MIDI_GetStatusType+0x38>
  a2:	79 c1       	rjmp	.+754    	; 0x396 <MIDI_GetStatusType+0x38>
  a4:	78 c1       	rjmp	.+752    	; 0x396 <MIDI_GetStatusType+0x38>
  a6:	77 c1       	rjmp	.+750    	; 0x396 <MIDI_GetStatusType+0x38>
  a8:	76 c1       	rjmp	.+748    	; 0x396 <MIDI_GetStatusType+0x38>
  aa:	75 c1       	rjmp	.+746    	; 0x396 <MIDI_GetStatusType+0x38>
  ac:	74 c1       	rjmp	.+744    	; 0x396 <MIDI_GetStatusType+0x38>
  ae:	73 c1       	rjmp	.+742    	; 0x396 <MIDI_GetStatusType+0x38>
  b0:	72 c1       	rjmp	.+740    	; 0x396 <MIDI_GetStatusType+0x38>
  b2:	71 c1       	rjmp	.+738    	; 0x396 <MIDI_GetStatusType+0x38>
  b4:	72 c1       	rjmp	.+740    	; 0x39a <MIDI_GetStatusType+0x3c>
  b6:	6f c1       	rjmp	.+734    	; 0x396 <MIDI_GetStatusType+0x38>
  b8:	6e c1       	rjmp	.+732    	; 0x396 <MIDI_GetStatusType+0x38>
  ba:	6d c1       	rjmp	.+730    	; 0x396 <MIDI_GetStatusType+0x38>
  bc:	6c c1       	rjmp	.+728    	; 0x396 <MIDI_GetStatusType+0x38>
  be:	6b c1       	rjmp	.+726    	; 0x396 <MIDI_GetStatusType+0x38>
  c0:	6a c1       	rjmp	.+724    	; 0x396 <MIDI_GetStatusType+0x38>
  c2:	69 c1       	rjmp	.+722    	; 0x396 <MIDI_GetStatusType+0x38>
  c4:	68 c1       	rjmp	.+720    	; 0x396 <MIDI_GetStatusType+0x38>
  c6:	67 c1       	rjmp	.+718    	; 0x396 <MIDI_GetStatusType+0x38>
  c8:	66 c1       	rjmp	.+716    	; 0x396 <MIDI_GetStatusType+0x38>
  ca:	65 c1       	rjmp	.+714    	; 0x396 <MIDI_GetStatusType+0x38>
  cc:	64 c1       	rjmp	.+712    	; 0x396 <MIDI_GetStatusType+0x38>
  ce:	63 c1       	rjmp	.+710    	; 0x396 <MIDI_GetStatusType+0x38>
  d0:	62 c1       	rjmp	.+708    	; 0x396 <MIDI_GetStatusType+0x38>
  d2:	61 c1       	rjmp	.+706    	; 0x396 <MIDI_GetStatusType+0x38>
  d4:	62 c1       	rjmp	.+708    	; 0x39a <MIDI_GetStatusType+0x3c>
  d6:	5f c1       	rjmp	.+702    	; 0x396 <MIDI_GetStatusType+0x38>
  d8:	5e c1       	rjmp	.+700    	; 0x396 <MIDI_GetStatusType+0x38>
  da:	5d c1       	rjmp	.+698    	; 0x396 <MIDI_GetStatusType+0x38>
  dc:	5c c1       	rjmp	.+696    	; 0x396 <MIDI_GetStatusType+0x38>
  de:	5b c1       	rjmp	.+694    	; 0x396 <MIDI_GetStatusType+0x38>
  e0:	5a c1       	rjmp	.+692    	; 0x396 <MIDI_GetStatusType+0x38>
  e2:	59 c1       	rjmp	.+690    	; 0x396 <MIDI_GetStatusType+0x38>
  e4:	58 c1       	rjmp	.+688    	; 0x396 <MIDI_GetStatusType+0x38>
  e6:	57 c1       	rjmp	.+686    	; 0x396 <MIDI_GetStatusType+0x38>
  e8:	56 c1       	rjmp	.+684    	; 0x396 <MIDI_GetStatusType+0x38>
  ea:	55 c1       	rjmp	.+682    	; 0x396 <MIDI_GetStatusType+0x38>
  ec:	54 c1       	rjmp	.+680    	; 0x396 <MIDI_GetStatusType+0x38>
  ee:	53 c1       	rjmp	.+678    	; 0x396 <MIDI_GetStatusType+0x38>
  f0:	52 c1       	rjmp	.+676    	; 0x396 <MIDI_GetStatusType+0x38>
  f2:	51 c1       	rjmp	.+674    	; 0x396 <MIDI_GetStatusType+0x38>
  f4:	3e c1       	rjmp	.+636    	; 0x372 <MIDI_GetStatusType+0x14>
  f6:	4f c1       	rjmp	.+670    	; 0x396 <MIDI_GetStatusType+0x38>
  f8:	4e c1       	rjmp	.+668    	; 0x396 <MIDI_GetStatusType+0x38>
  fa:	4d c1       	rjmp	.+666    	; 0x396 <MIDI_GetStatusType+0x38>
  fc:	4c c1       	rjmp	.+664    	; 0x396 <MIDI_GetStatusType+0x38>
  fe:	4b c1       	rjmp	.+662    	; 0x396 <MIDI_GetStatusType+0x38>
 100:	4a c1       	rjmp	.+660    	; 0x396 <MIDI_GetStatusType+0x38>
 102:	49 c1       	rjmp	.+658    	; 0x396 <MIDI_GetStatusType+0x38>
 104:	48 c1       	rjmp	.+656    	; 0x396 <MIDI_GetStatusType+0x38>
 106:	47 c1       	rjmp	.+654    	; 0x396 <MIDI_GetStatusType+0x38>
 108:	46 c1       	rjmp	.+652    	; 0x396 <MIDI_GetStatusType+0x38>
 10a:	45 c1       	rjmp	.+650    	; 0x396 <MIDI_GetStatusType+0x38>
 10c:	44 c1       	rjmp	.+648    	; 0x396 <MIDI_GetStatusType+0x38>
 10e:	43 c1       	rjmp	.+646    	; 0x396 <MIDI_GetStatusType+0x38>
 110:	42 c1       	rjmp	.+644    	; 0x396 <MIDI_GetStatusType+0x38>
 112:	41 c1       	rjmp	.+642    	; 0x396 <MIDI_GetStatusType+0x38>
 114:	3c c1       	rjmp	.+632    	; 0x38e <MIDI_GetStatusType+0x30>
 116:	41 c1       	rjmp	.+642    	; 0x39a <MIDI_GetStatusType+0x3c>
 118:	2c c1       	rjmp	.+600    	; 0x372 <MIDI_GetStatusType+0x14>
 11a:	3f c1       	rjmp	.+638    	; 0x39a <MIDI_GetStatusType+0x3c>
 11c:	3c c1       	rjmp	.+632    	; 0x396 <MIDI_GetStatusType+0x38>
 11e:	3b c1       	rjmp	.+630    	; 0x396 <MIDI_GetStatusType+0x38>
 120:	3a c1       	rjmp	.+628    	; 0x396 <MIDI_GetStatusType+0x38>
 122:	37 c1       	rjmp	.+622    	; 0x392 <MIDI_GetStatusType+0x34>
 124:	28 c1       	rjmp	.+592    	; 0x376 <MIDI_GetStatusType+0x18>
 126:	37 c1       	rjmp	.+622    	; 0x396 <MIDI_GetStatusType+0x38>
 128:	28 c1       	rjmp	.+592    	; 0x37a <MIDI_GetStatusType+0x1c>
 12a:	29 c1       	rjmp	.+594    	; 0x37e <MIDI_GetStatusType+0x20>
 12c:	2a c1       	rjmp	.+596    	; 0x382 <MIDI_GetStatusType+0x24>
 12e:	33 c1       	rjmp	.+614    	; 0x396 <MIDI_GetStatusType+0x38>
 130:	2a c1       	rjmp	.+596    	; 0x386 <MIDI_GetStatusType+0x28>
 132:	2b c1       	rjmp	.+598    	; 0x38a <MIDI_GetStatusType+0x2c>
 134:	3d c0       	rjmp	.+122    	; 0x1b0 <_etext+0x18>
 136:	49 c0       	rjmp	.+146    	; 0x1ca <_etext+0x32>
 138:	7c c0       	rjmp	.+248    	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 13a:	a1 c0       	rjmp	.+322    	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
 13c:	8a c0       	rjmp	.+276    	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 13e:	a7 c0       	rjmp	.+334    	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
 140:	aa c0       	rjmp	.+340    	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>

00000142 <.dinit>:
 142:	01 00       	.word	0x0001	; ????
 144:	01 26       	eor	r0, r17
 146:	80 00       	.word	0x0080	; ????

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	d4 e0       	ldi	r29, 0x04	; 4
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
 154:	e2 e4       	ldi	r30, 0x42	; 66
 156:	f1 e0       	ldi	r31, 0x01	; 1
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	17 c0       	rjmp	.+46     	; 0x18a <__do_clear_bss+0x8>
 15c:	b5 91       	lpm	r27, Z+
 15e:	a5 91       	lpm	r26, Z+
 160:	35 91       	lpm	r19, Z+
 162:	25 91       	lpm	r18, Z+
 164:	05 91       	lpm	r16, Z+
 166:	07 fd       	sbrc	r16, 7
 168:	0c c0       	rjmp	.+24     	; 0x182 <__do_clear_bss>
 16a:	95 91       	lpm	r25, Z+
 16c:	85 91       	lpm	r24, Z+
 16e:	ef 01       	movw	r28, r30
 170:	f9 2f       	mov	r31, r25
 172:	e8 2f       	mov	r30, r24
 174:	05 90       	lpm	r0, Z+
 176:	0d 92       	st	X+, r0
 178:	a2 17       	cp	r26, r18
 17a:	b3 07       	cpc	r27, r19
 17c:	d9 f7       	brne	.-10     	; 0x174 <__do_copy_data+0x20>
 17e:	fe 01       	movw	r30, r28
 180:	04 c0       	rjmp	.+8      	; 0x18a <__do_clear_bss+0x8>

00000182 <__do_clear_bss>:
 182:	1d 92       	st	X+, r1
 184:	a2 17       	cp	r26, r18
 186:	b3 07       	cpc	r27, r19
 188:	e1 f7       	brne	.-8      	; 0x182 <__do_clear_bss>
 18a:	e7 34       	cpi	r30, 0x47	; 71
 18c:	f4 07       	cpc	r31, r20
 18e:	31 f7       	brne	.-52     	; 0x15c <__do_copy_data+0x8>
 190:	40 d1       	rcall	.+640    	; 0x412 <main>
 192:	32 c1       	rjmp	.+612    	; 0x3f8 <exit>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>

Disassembly of section .text:

00000422 <__bad_interrupt>:
 422:	ee cd       	rjmp	.-1060   	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

00000412 <main>:
#include "uart.h"
#include "midi_parser.h"

int main(void)
{
	UART_init();
 412:	df df       	rcall	.-66     	; 0x3d2 <UART_init>
	
	
	cpu_irq_enable();
 414:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
 416:	c0 de       	rcall	.-640    	; 0x198 <__data_load_end>
 418:	fe cf       	rjmp	.-4      	; 0x416 <main+0x4>

Disassembly of section .text.MIDI_IsStatusWord:

0000041a <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
 41a:	88 1f       	adc	r24, r24
 41c:	88 27       	eor	r24, r24
 41e:	88 1f       	adc	r24, r24
 420:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00000406 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	88 3f       	cpi	r24, 0xF8	; 248
 40a:	08 f4       	brcc	.+2      	; 0x40e <MIDI_IsSysRealTime+0x8>
 40c:	90 e0       	ldi	r25, 0x00	; 0
}
 40e:	89 2f       	mov	r24, r25
 410:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

0000035e <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	fc 01       	movw	r30, r24
 362:	e0 58       	subi	r30, 0x80	; 128
 364:	f1 09       	sbc	r31, r1
 366:	e0 38       	cpi	r30, 0x80	; 128
 368:	f1 05       	cpc	r31, r1
 36a:	a8 f4       	brcc	.+42     	; 0x396 <MIDI_GetStatusType+0x38>
 36c:	e6 5e       	subi	r30, 0xE6	; 230
 36e:	ff 4f       	sbci	r31, 0xFF	; 255
 370:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 37e:	83 e0       	ldi	r24, 0x03	; 3
 380:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 382:	83 e0       	ldi	r24, 0x03	; 3
 384:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 392:	85 e0       	ldi	r24, 0x05	; 5
 394:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 39a:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 39c:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

00000198 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 198:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <_end>
 19c:	8e 2f       	mov	r24, r30
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	87 30       	cpi	r24, 0x07	; 7
 1a2:	91 05       	cpc	r25, r1
 1a4:	08 f0       	brcs	.+2      	; 0x1a8 <MIDI_ParserTask+0x10>
 1a6:	7f c0       	rjmp	.+254    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
 1a8:	fc 01       	movw	r30, r24
 1aa:	e6 56       	subi	r30, 0x66	; 102
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 1b0:	e2 e0       	ldi	r30, 0x02	; 2
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 1b6:	11 82       	std	Z+1, r1	; 0x01
			currentCommand.data2 = 0;
 1b8:	12 82       	std	Z+2, r1	; 0x02
			currentStatusType = MIDI_TYPE_UNDEFINED;
 1ba:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <currentStatusType>
			isSecondDataWord = false;
 1be:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isSecondDataWord>
			state = WAIT_WORD;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
			break;
 1c8:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 1ca:	0f d1       	rcall	.+542    	; 0x3ea <UART_RxBufferNotEmpty>
 1cc:	88 23       	and	r24, r24
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <MIDI_ParserTask+0x3a>
 1d0:	6a c0       	rjmp	.+212    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
			{
				recievedWord = UART_PopWord();
 1d2:	e5 d0       	rcall	.+458    	; 0x39e <UART_PopWord>
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				if(MIDI_IsSysRealTime(recievedWord))
 1d8:	16 d1       	rcall	.+556    	; 0x406 <MIDI_IsSysRealTime>
 1da:	81 11       	cpse	r24, r1
 1dc:	64 c0       	rjmp	.+200    	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
					return;
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1e2:	1b d1       	rcall	.+566    	; 0x41a <MIDI_IsStatusWord>
 1e4:	88 23       	and	r24, r24
 1e6:	21 f0       	breq	.+8      	; 0x1f0 <MIDI_ParserTask+0x58>
				{					
					state = DISPATCH_STATUS;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
 1ee:	08 95       	ret
				}
				else
				{
					switch(currentStatusType)
 1f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <currentStatusType>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	49 f0       	breq	.+18     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 1f8:	18 f4       	brcc	.+6      	; 0x200 <__EEPROM_REGION_LENGTH__>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	51 f0       	breq	.+20     	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 1fe:	15 c0       	rjmp	.+42     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	59 f0       	breq	.+22     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 204:	85 30       	cpi	r24, 0x05	; 5
 206:	69 f0       	breq	.+26     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 208:	10 c0       	rjmp	.+32     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
 210:	08 95       	ret
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 212:	83 e0       	ldi	r24, 0x03	; 3
 214:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
 218:	08 95       	ret
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
 220:	08 95       	ret
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
 228:	08 95       	ret
						default: state = WAIT_WORD;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
 230:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)recievedWord;
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 236:	e2 e0       	ldi	r30, 0x02	; 2
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	80 83       	st	Z, r24
			currentCommand.data1 = 0;
 23c:	11 82       	std	Z+1, r1	; 0x01
			currentCommand.data2 = 0;
 23e:	12 82       	std	Z+2, r1	; 0x02
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 240:	8e d0       	rcall	.+284    	; 0x35e <MIDI_GetStatusType>
 242:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <currentStatusType>
			isSecondDataWord = false;
 246:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isSecondDataWord>
			state = WAIT_WORD;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
			break;
 250:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 252:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <isSecondDataWord>
 256:	88 23       	and	r24, r24
 258:	39 f0       	breq	.+14     	; 0x268 <__EEPROM_REGION_LENGTH__+0x68>
			{
				currentCommand.data2 = recievedWord;
 25a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 25e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentCommand+0x2>
				isSecondDataWord = false;
 262:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <isSecondDataWord>
 266:	07 c0       	rjmp	.+14     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
				// handle message
			}
			else
			{
				currentCommand.data1 = recievedWord;
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 26c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currentCommand+0x1>
				isSecondDataWord = true;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <isSecondDataWord>
			}
			state = WAIT_WORD;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
			break;
 27c:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 282:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <currentCommand+0x1>
			// handle message
			state = WAIT_WORD;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
			break;
 28c:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
			break;
 294:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 296:	e2 e0       	ldi	r30, 0x02	; 2
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 29c:	11 82       	std	Z+1, r1	; 0x01
			currentCommand.data2 = 0;
 29e:	12 82       	std	Z+2, r1	; 0x02
			state = WAIT_WORD;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_end>
 2a6:	08 95       	ret

Disassembly of section .text.UART_init:

000003d2 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
 3d2:	88 ed       	ldi	r24, 0xD8	; 216
 3d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C=0x06; 
 3d8:	86 e0       	ldi	r24, 0x06	; 6
 3da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0x00;
 3de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=0x13;
 3e2:	83 e1       	ldi	r24, 0x13	; 19
 3e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
 3e8:	08 95       	ret

Disassembly of section .text.__vector_18:

000002a8 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	11 24       	eor	r1, r1
 2b2:	8f 93       	push	r24
 2b4:	9f 93       	push	r25
 2b6:	ef 93       	push	r30
 2b8:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 2ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 2be:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 2c2:	8c 71       	andi	r24, 0x1C	; 28
 2c4:	d1 f4       	brne	.+52     	; 0x2fa <__vector_18+0x52>
	{
		rx_buffer0[rx_wr_index++] = data;
 2c6:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <rx_wr_index>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	8e 0f       	add	r24, r30
 2ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rx_wr_index>
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ee 5e       	subi	r30, 0xEE	; 238
 2d6:	fe 4f       	sbci	r31, 0xFE	; 254
 2d8:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 2da:	80 31       	cpi	r24, 0x10	; 16
 2dc:	11 f4       	brne	.+4      	; 0x2e2 <__vector_18+0x3a>
 2de:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 2e2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rx_counter>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
 2e8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rx_counter>
 2ec:	80 31       	cpi	r24, 0x10	; 16
 2ee:	29 f4       	brne	.+10     	; 0x2fa <__vector_18+0x52>
		{
			rx_counter=0;
 2f0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <rx_counter>
			rx_buffer_overflow=1;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <rx_buffer_overflow>
		}
	}
}
 2fa:	ff 91       	pop	r31
 2fc:	ef 91       	pop	r30
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	0f 90       	pop	r0
 304:	0f be       	out	0x3f, r0	; 63
 306:	0f 90       	pop	r0
 308:	1f 90       	pop	r1
 30a:	18 95       	reti

Disassembly of section .text.UART_PopWord:

0000039e <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
 39e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rx_counter>
 3a2:	88 23       	and	r24, r24
 3a4:	e1 f3       	breq	.-8      	; 0x39e <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
 3a6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <rx_rd_index>
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	9e 0f       	add	r25, r30
 3ae:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <rx_rd_index>
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ee 5e       	subi	r30, 0xEE	; 238
 3b6:	fe 4f       	sbci	r31, 0xFE	; 254
 3b8:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
 3ba:	90 31       	cpi	r25, 0x10	; 16
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <UART_PopWord+0x24>
 3be:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
 3c2:	f8 94       	cli
	--rx_counter;
 3c4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx_counter>
 3c8:	91 50       	subi	r25, 0x01	; 1
 3ca:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <rx_counter>
	cpu_irq_enable();
 3ce:	78 94       	sei
	return data;
}
 3d0:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000003ea <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <rx_counter>
 3f0:	91 11       	cpse	r25, r1
 3f2:	01 c0       	rjmp	.+2      	; 0x3f6 <UART_RxBufferNotEmpty+0xc>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
}
 3f6:	08 95       	ret

Disassembly of section .text.__vector_20:

0000030c <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 30c:	1f 92       	push	r1
 30e:	0f 92       	push	r0
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	0f 92       	push	r0
 314:	11 24       	eor	r1, r1
 316:	8f 93       	push	r24
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	if (tx_counter)
 31c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <tx_counter>
 320:	88 23       	and	r24, r24
 322:	a9 f0       	breq	.+42     	; 0x34e <__vector_20+0x42>
	{
		--tx_counter;
 324:	81 50       	subi	r24, 0x01	; 1
 326:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 32a:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <tx_rd_index>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	8e 0f       	add	r24, r30
 332:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <tx_rd_index>
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	e7 5f       	subi	r30, 0xF7	; 247
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
 33c:	80 81       	ld	r24, Z
 33e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 342:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <tx_rd_index>
 346:	88 30       	cpi	r24, 0x08	; 8
 348:	11 f4       	brne	.+4      	; 0x34e <__vector_20+0x42>
 34a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <tx_rd_index>
		#endif
	}
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	8f 91       	pop	r24
 354:	0f 90       	pop	r0
 356:	0f be       	out	0x3f, r0	; 63
 358:	0f 90       	pop	r0
 35a:	1f 90       	pop	r1
 35c:	18 95       	reti

Disassembly of section .text.__dummy_fini:

00000424 <_fini>:
 424:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000426 <__funcs_on_exit>:
 426:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000428 <__simulator_exit>:
 428:	08 95       	ret

Disassembly of section .text.exit:

000003f8 <exit>:
 3f8:	ec 01       	movw	r28, r24
 3fa:	15 d0       	rcall	.+42     	; 0x426 <__funcs_on_exit>
 3fc:	13 d0       	rcall	.+38     	; 0x424 <_fini>
 3fe:	ce 01       	movw	r24, r28
 400:	13 d0       	rcall	.+38     	; 0x428 <__simulator_exit>
 402:	ce 01       	movw	r24, r28
 404:	12 d0       	rcall	.+36     	; 0x42a <_Exit>

Disassembly of section .text._Exit:

0000042a <_Exit>:
 42a:	b4 de       	rcall	.-664    	; 0x194 <_exit>
