
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001ad2  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800100  00800100  00001ad2  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001ad2  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000a8  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006bdb  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119e  00000000  00000000  00008b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f74  00000000  00000000  00009cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  0000bc48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072c  00000000  00000000  0000c360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a33  00000000  00000000  0000ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000e4bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00001914  00001914  00001aa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000e740  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__portable_avr_delay_cycles 00000016  000017ea  000017ea  0000197e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.initTest 000000d8  0000094c  0000094c  00000ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000003a  00001398  00001398  0000152c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_16 000001c0  000004b2  000004b2  00000646  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_4 00000046  0000124c  0000124c  000013e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_21 000000c2  00000af6  00000af6  00000c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.measSwitch 00000001  008001b0  008001b0  00001ad2  2**0
                  ALLOC
 22 .bss.leaveDefSettings_cnt 00000001  008001b1  008001b1  00001ad2  2**0
                  ALLOC
 23 .bss.swProgrammingMode_cnt 00000001  008001b2  008001b2  00001ad2  2**0
                  ALLOC
 24 .data.protectionInterval_cnt 00000001  008001b3  0000193c  00001ad0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss.isAmpStarted 00000001  008001b4  008001b4  00001ad2  2**0
                  ALLOC
 26 .text.MIDI_IsStatusWord 00000008  000018ca  000018ca  00001a5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MIDI_IsSysRealTime 0000000c  00001886  00001886  00001a1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MIDI_GetStatusType 00000070  00000e14  00000e14  00000fa8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.isEqualCommands 00000042  000012d8  000012d8  0000146c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.loadCommSetFromMemory 0000007a  00000bb8  00000bb8  00000d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.setMidiLeds 00000052  0000107e  0000107e  00001212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.MIDICTRL_Init 00000028  0000167c  0000167c  00001810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.MIDICTRL_MidiMode 00000006  000018da  000018da  00001a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.MIDICTRL_SetProgrammingButton 0000002e  00001546  00001546  000016da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.MIDICTRL_SwitchMode 0000004c  0000116c  0000116c  00001300  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_SetMidiChannel 00000006  000018e0  000018e0  00001a74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.MIDICTRL_OmniModeEn 00000006  000018e6  000018e6  00001a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MIDICTRL_MuteCommEn 00000006  000018ec  000018ec  00001a80  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.programmBtn 0000004c  000011b8  000011b8  0000134c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.MIDICTRL_SendSwChComm 0000006a  00000ef2  00000ef2  00001086  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.MIDICTRL_SendLoopEnComm 0000002a  000015fe  000015fe  00001792  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.MIDICTRL_SendSwABComm 0000002a  00001628  00001628  000017bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.MIDICTRL_StoreUserCommands 00000036  00001442  00001442  000015d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.MIDICTRL_DiscardCommands 0000001a  0000176e  0000176e  00001902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.indicateMidiError 0000002e  00001574  00001574  00001708  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.MIDICTRL_HandleCommand 000001ec  000000dc  000000dc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__vector_13 0000005c  00001022  00001022  000011b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .data.defaultCommands 00000018  0080018e  00001920  00001ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 49 .progmemx.data.muteCommand 00000004  000000d8  000000d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 50 .bss.channelNum 00000001  008001b5  008001b5  00001ad2  2**0
                  ALLOC
 51 .bss.muteCommandEnabled 00000001  008001b6  008001b6  00001ad2  2**0
                  ALLOC
 52 .bss.omniModeEnabled 00000001  008001b7  008001b7  00001ad2  2**0
                  ALLOC
 53 .text.handleRealTimeStatus 00000004  00001910  00001910  00001aa4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.MIDI_ParserTask 00000142  0000080a  0000080a  0000099e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.MIDI_SetRetranslateState 00000006  000018f2  000018f2  00001a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.MIDI_SendCommand 00000078  00000cac  00000cac  00000e40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .bss.state    00000001  008001b8  008001b8  00001ad2  2**0
                  ALLOC
 58 .data.retranslate 00000001  008001b9  0000193d  00001ad1  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 59 .text.setChannelLeds 00000022  00001714  00001714  000018a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SH100CTRL_SetAmpLeds 0000002e  000015a2  000015a2  00001736  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.SH100CTRL_StoreAmpState 0000001c  00001736  00001736  000018ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100CTRL_SetLoop 0000002a  00001652  00001652  000017e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SH100CTRL_SwChannel 0000002e  000015d0  000015d0  00001764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SH100CTRL_SwLoop 00000014  00001800  00001800  00001994  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SH100CTRL_BtnSwChannel 00000010  0000184c  0000184c  000019e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SH100CTRL_SetAB 00000024  000016cc  000016cc  00001860  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SH100CTRL_SetAmpState 00000032  000014e2  000014e2  00001676  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SH100CTRL_Init 00000078  00000d24  00000d24  00000eb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SH100CTRL_SwAB 0000000c  00001892  00001892  00001a26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SH100CTRL_MuteAmp 00000006  000018f8  000018f8  00001a8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SH100CTRL_UnmuteAmp 0000000c  0000189e  0000189e  00001a32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SH100CTRL_CheckOutputJacks 00000078  00000d9c  00000d9c  00000f30  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.SH100HW_Init 00000066  00000f5c  00000f5c  000010f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.SH100HW_SetPAFailure 0000000e  0000185c  0000185c  000019f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SH100HW_GetPAFailure 0000000a  000018b6  000018b6  00001a4a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.SH100HW_GetButtonsState 00000012  00001828  00001828  000019bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.SH100HW_SetCh 0000004e  000010d0  000010d0  00001264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.SH100HW_LoopEn 00000018  000017a2  000017a2  00001936  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.SH100HW_SetAB 00000006  000018fe  000018fe  00001a92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.SH100HW_SetNewLedState 00000038  000013d2  000013d2  00001566  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.SH100HW_SetPreviousLedState 00000028  000016a4  000016a4  00001838  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.SH100HW_GetOutputJacks 00000018  000017ba  000017ba  0000194e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.SH100HW_SetPAState 0000003c  0000135c  0000135c  000014f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.SH100HW_SetOutputMode 00000006  00001904  00001904  00001a98  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.SH100HW_StartADConvertion 00000014  00001814  00001814  000019a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.readButtonsState 00000198  00000672  00000672  00000806  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.writeShiftRegs 00000042  0000131a  0000131a  000014ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.SH100HW_MainTask 000001ea  000002c8  000002c8  0000045c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .bss.fastBlink 00000001  008001ba  008001ba  00001ad2  2**0
                  ALLOC
 90 .bss.slowBlink 00000001  008001bb  008001bb  00001ad2  2**0
                  ALLOC
 91 .bss.blinkCounter 00000001  008001bc  008001bc  00001ad2  2**0
                  ALLOC
 92 .text.board_init 00000002  00001916  00001916  00001aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.UART_init 00000018  000017d2  000017d2  00001966  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__vector_18 00000060  00000fc2  00000fc2  00001156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.UART_PopWord 00000034  000014ae  000014ae  00001642  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.UART_RxBufferNotEmpty 0000000e  0000186a  0000186a  000019fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__vector_20 0000004e  0000111e  0000111e  000012b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.UART_PushWord 00000046  00001292  00001292  00001426  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text         0000007a  00000c32  00000c32  00000dc6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text         00000008  000018d2  000018d2  00001a66  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text         00000048  00001204  00001204  00001398  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.libgcc  0000001a  00001788  00001788  0000191c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.__dummy_fini 00000002  00001918  00001918  00001aac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__dummy_funcs_on_exit 00000002  0000191a  0000191a  00001aae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__dummy_simulator_exit 00000002  0000191c  0000191c  00001ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.exit    0000000e  00001878  00001878  00001a0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.__simple_malloc 000000d2  00000a24  00000a24  00000bb8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .bss.end.1483 00000002  008001a6  008001a6  00001ad2  2**0
                  ALLOC
109 .bss.cur.1482 00000002  008001a8  008001a8  00001ad2  2**0
                  ALLOC
110 .text._Exit   00000002  0000191e  0000191e  00001ab2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.__expand_heap 0000006e  00000e84  00000e84  00001018  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .bss.__brkval 00000002  008001aa  008001aa  00001ad2  2**0
                  ALLOC
113 .data.__malloc_heap_end 00000002  008001ac  00001938  00001acc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
114 .data.__malloc_heap_start 00000002  008001ae  0000193a  00001ace  2**0
                  CONTENTS, ALLOC, LOAD, DATA
115 .text.avrlibc 00000024  000016f0  000016f0  00001884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.avrlibc 00000012  0000183a  0000183a  000019ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.avrlibc 0000000c  000018aa  000018aa  00001a3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.avrlibc 00000032  00001514  00001514  000016a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.avrlibc 0000001c  00001752  00001752  000018e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.avrlibc 00000006  0000190a  0000190a  00001a9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.libgcc.prologue 00000038  0000140a  0000140a  0000159e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.libgcc.prologue 00000036  00001478  00001478  0000160c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.libgcc  0000000a  000018c0  000018c0  00001a54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	43 c0       	rjmp	.+134    	; 0x88 <__ctors_end>
   2:	88 cc       	rjmp	.-1776   	; 0xfffff914 <__eeprom_end+0xff7ef914>
   4:	87 cc       	rjmp	.-1778   	; 0xfffff914 <__eeprom_end+0xff7ef914>
   6:	86 cc       	rjmp	.-1780   	; 0xfffff914 <__eeprom_end+0xff7ef914>
   8:	21 c9       	rjmp	.-3518   	; 0xfffff24c <__eeprom_end+0xff7ef24c>
   a:	84 cc       	rjmp	.-1784   	; 0xfffff914 <__eeprom_end+0xff7ef914>
   c:	83 cc       	rjmp	.-1786   	; 0xfffff914 <__eeprom_end+0xff7ef914>
   e:	82 cc       	rjmp	.-1788   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  10:	81 cc       	rjmp	.-1790   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  12:	80 cc       	rjmp	.-1792   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  14:	7f cc       	rjmp	.-1794   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  16:	7e cc       	rjmp	.-1796   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  18:	7d cc       	rjmp	.-1798   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  1a:	03 c8       	rjmp	.-4090   	; 0xfffff022 <__eeprom_end+0xff7ef022>
  1c:	7b cc       	rjmp	.-1802   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  1e:	7a cc       	rjmp	.-1804   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  20:	48 c2       	rjmp	.+1168   	; 0x4b2 <__vector_16>
  22:	78 cc       	rjmp	.-1808   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  24:	ce c7       	rjmp	.+3996   	; 0xfc2 <__vector_18>
  26:	76 cc       	rjmp	.-1812   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  28:	7a c8       	rjmp	.-3852   	; 0xfffff11e <__eeprom_end+0xff7ef11e>
  2a:	65 c5       	rjmp	.+2762   	; 0xaf6 <__vector_21>
  2c:	73 cc       	rjmp	.-1818   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  2e:	72 cc       	rjmp	.-1820   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  30:	71 cc       	rjmp	.-1822   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  32:	70 cc       	rjmp	.-1824   	; 0xfffff914 <__eeprom_end+0xff7ef914>
  34:	f6 c3       	rjmp	.+2028   	; 0x822 <MIDI_ParserTask+0x18>
  36:	02 c4       	rjmp	.+2052   	; 0x83c <MIDI_ParserTask+0x32>
  38:	41 c4       	rjmp	.+2178   	; 0x8bc <MIDI_ParserTask+0xb2>
  3a:	6f c4       	rjmp	.+2270   	; 0x91a <MIDI_ParserTask+0x110>
  3c:	54 c4       	rjmp	.+2216   	; 0x8e6 <MIDI_ParserTask+0xdc>
  3e:	79 c4       	rjmp	.+2290   	; 0x932 <MIDI_ParserTask+0x128>
  40:	7c c4       	rjmp	.+2296   	; 0x93a <MIDI_ParserTask+0x130>
  42:	23 c3       	rjmp	.+1606   	; 0x68a <readButtonsState+0x18>
  44:	36 c3       	rjmp	.+1644   	; 0x6b2 <readButtonsState+0x40>
  46:	4c c3       	rjmp	.+1688   	; 0x6e0 <readButtonsState+0x6e>
  48:	63 c3       	rjmp	.+1734   	; 0x710 <readButtonsState+0x9e>
  4a:	76 c3       	rjmp	.+1772   	; 0x738 <readButtonsState+0xc6>
  4c:	8d c3       	rjmp	.+1818   	; 0x768 <readButtonsState+0xf6>
  4e:	9b c3       	rjmp	.+1846   	; 0x786 <readButtonsState+0x114>
  50:	b2 c3       	rjmp	.+1892   	; 0x7b6 <readButtonsState+0x144>

00000052 <.dinit>:
  52:	01 00       	.word	0x0001	; ????
  54:	01 8e       	std	Z+25, r0	; 0x19
  56:	80 01       	movw	r16, r0
  58:	8e 01       	movw	r16, r28
  5a:	a6 00       	.word	0x00a6	; ????
  5c:	19 20       	and	r1, r9
  5e:	01 a6       	std	Z+41, r0	; 0x29
  60:	01 ac       	ldd	r0, Z+57	; 0x39
  62:	80 01       	movw	r16, r0
  64:	ac 01       	movw	r20, r24
  66:	b0 00       	.word	0x00b0	; ????
  68:	19 38       	cpi	r17, 0x89	; 137
  6a:	01 b0       	in	r0, 0x01	; 1
  6c:	01 b3       	in	r16, 0x11	; 17
  6e:	80 01       	movw	r16, r0
  70:	b3 01       	movw	r22, r6
  72:	b4 00       	.word	0x00b4	; ????
  74:	19 3c       	cpi	r17, 0xC9	; 201
  76:	01 b4       	in	r0, 0x21	; 33
  78:	01 b9       	out	0x01, r16	; 1
  7a:	80 01       	movw	r16, r0
  7c:	b9 01       	movw	r22, r18
  7e:	ba 00       	.word	0x00ba	; ????
  80:	19 3d       	cpi	r17, 0xD9	; 217
  82:	01 ba       	out	0x11, r0	; 17
  84:	01 bd       	out	0x21, r16	; 33
  86:	80 00       	.word	0x0080	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d4 e0       	ldi	r29, 0x04	; 4
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	e2 e5       	ldi	r30, 0x52	; 82
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	17 c0       	rjmp	.+46     	; 0xca <__do_clear_bss+0x8>
  9c:	b5 91       	lpm	r27, Z+
  9e:	a5 91       	lpm	r26, Z+
  a0:	35 91       	lpm	r19, Z+
  a2:	25 91       	lpm	r18, Z+
  a4:	05 91       	lpm	r16, Z+
  a6:	07 fd       	sbrc	r16, 7
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <__do_clear_bss>
  aa:	95 91       	lpm	r25, Z+
  ac:	85 91       	lpm	r24, Z+
  ae:	ef 01       	movw	r28, r30
  b0:	f9 2f       	mov	r31, r25
  b2:	e8 2f       	mov	r30, r24
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x20>
  be:	fe 01       	movw	r30, r28
  c0:	04 c0       	rjmp	.+8      	; 0xca <__do_clear_bss+0x8>

000000c2 <__do_clear_bss>:
  c2:	1d 92       	st	X+, r1
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__do_clear_bss>
  ca:	e7 38       	cpi	r30, 0x87	; 135
  cc:	f4 07       	cpc	r31, r20
  ce:	31 f7       	brne	.-52     	; 0x9c <__do_copy_data+0x8>
  d0:	63 d9       	rcall	.-3386   	; 0xfffff398 <__eeprom_end+0xff7ef398>
  d2:	d2 cb       	rjmp	.-2140   	; 0xfffff878 <__eeprom_end+0xff7ef878>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>

Disassembly of section .text:

00001914 <__bad_interrupt>:
    1914:	75 c3       	rjmp	.+1770   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.__portable_avr_delay_cycles:

000017ea <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    17ec:	61 50       	subi	r22, 0x01	; 1
    17ee:	71 09       	sbc	r23, r1
    17f0:	81 09       	sbc	r24, r1
    17f2:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    17f4:	61 15       	cp	r22, r1
    17f6:	71 05       	cpc	r23, r1
    17f8:	81 05       	cpc	r24, r1
    17fa:	91 05       	cpc	r25, r1
    17fc:	b9 f7       	brne	.-18     	; 0x17ec <__portable_avr_delay_cycles+0x2>
    17fe:	08 95       	ret

Disassembly of section .text.initTest:

0000094c <initTest>:
bool isAmpStarted = false;
int16_t negVdd;
int16_t posVdd;
void initTest()
{
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_FAST_BLINKING);
 94c:	62 e0       	ldi	r22, 0x02	; 2
 94e:	87 e0       	ldi	r24, 0x07	; 7
 950:	40 d5       	rcall	.+2688   	; 0x13d2 <SH100HW_SetNewLedState>
	delay_ms(20000);
 952:	66 ed       	ldi	r22, 0xD6	; 214
 954:	7c ed       	ldi	r23, 0xDC	; 220
 956:	82 e3       	ldi	r24, 0x32	; 50
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	47 d7       	rcall	.+3726   	; 0x17ea <__portable_avr_delay_cycles>
	
	SH100HW_StartADConvertion(ADC_V_SIGNAL);
 95c:	86 e0       	ldi	r24, 0x06	; 6
 95e:	5a d7       	rcall	.+3764   	; 0x1814 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 960:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 964:	86 fd       	sbrc	r24, 6
 966:	fc cf       	rjmp	.-8      	; 0x960 <initTest+0x14>
		
	int32_t outLineValue = ADC;
 968:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 96c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 970:	cb 01       	movw	r24, r22
 972:	a0 e0       	ldi	r26, 0x00	; 0
 974:	b0 e0       	ldi	r27, 0x00	; 0
	
	if(fabs(outLineValue - 0x3FF/2) > 100)
 976:	bc 01       	movw	r22, r24
 978:	cd 01       	movw	r24, r26
 97a:	6f 5f       	subi	r22, 0xFF	; 255
 97c:	71 40       	sbci	r23, 0x01	; 1
 97e:	81 09       	sbc	r24, r1
 980:	91 09       	sbc	r25, r1
 982:	59 d1       	rcall	.+690    	; 0xc36 <__floatsisf>
 984:	9f 77       	andi	r25, 0x7F	; 127
 986:	20 e0       	ldi	r18, 0x00	; 0
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	48 ec       	ldi	r20, 0xC8	; 200
 98c:	52 e4       	ldi	r21, 0x42	; 66
 98e:	a1 d7       	rcall	.+3906   	; 0x18d2 <__gesf2>
 990:	18 16       	cp	r1, r24
 992:	4c f4       	brge	.+18     	; 0x9a6 <initTest+0x5a>
	{
		// DC on output!
		SH100HW_SetPAFailure(true);
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	62 d7       	rcall	.+3780   	; 0x185c <SH100HW_SetPAFailure>
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	87 e0       	ldi	r24, 0x07	; 7
 99c:	1a d5       	rcall	.+2612   	; 0x13d2 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 99e:	62 e0       	ldi	r22, 0x02	; 2
 9a0:	88 e0       	ldi	r24, 0x08	; 8
 9a2:	17 d5       	rcall	.+2606   	; 0x13d2 <SH100HW_SetNewLedState>
 9a4:	ff cf       	rjmp	.-2      	; 0x9a4 <initTest+0x58>
		while(1) {}
	}
	
	SH100HW_StartADConvertion(ADC_V_NEGATIVE);
 9a6:	87 e0       	ldi	r24, 0x07	; 7
 9a8:	35 d7       	rcall	.+3690   	; 0x1814 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 9aa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 9ae:	86 fd       	sbrc	r24, 6
 9b0:	fc cf       	rjmp	.-8      	; 0x9aa <initTest+0x5e>
		
	negVdd = ADC;
 9b2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 9b6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 9ba:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	SH100HW_StartADConvertion(ADC_V_POSITIVE);
 9c2:	80 e0       	ldi	r24, 0x00	; 0
 9c4:	27 d7       	rcall	.+3662   	; 0x1814 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 9c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 9ca:	86 fd       	sbrc	r24, 6
 9cc:	fc cf       	rjmp	.-8      	; 0x9c6 <initTest+0x7a>
		
	posVdd = ADC;
 9ce:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 9d2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 9d6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <posVdd+0x1>
 9da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <posVdd>
	
	if(fabs(negVdd-posVdd) > 100)
 9de:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 9e2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 9e6:	68 1b       	sub	r22, r24
 9e8:	79 0b       	sbc	r23, r25
 9ea:	07 2e       	mov	r0, r23
 9ec:	00 0c       	add	r0, r0
 9ee:	88 0b       	sbc	r24, r24
 9f0:	99 0b       	sbc	r25, r25
 9f2:	21 d1       	rcall	.+578    	; 0xc36 <__floatsisf>
 9f4:	9f 77       	andi	r25, 0x7F	; 127
 9f6:	20 e0       	ldi	r18, 0x00	; 0
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	48 ec       	ldi	r20, 0xC8	; 200
 9fc:	52 e4       	ldi	r21, 0x42	; 66
 9fe:	69 d7       	rcall	.+3794   	; 0x18d2 <__gesf2>
 a00:	18 16       	cp	r1, r24
 a02:	4c f4       	brge	.+18     	; 0xa16 <initTest+0xca>
	{
		// one of Vdd rail is out
		SH100HW_SetPAFailure(true);
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	2a d7       	rcall	.+3668   	; 0x185c <SH100HW_SetPAFailure>
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 a08:	60 e0       	ldi	r22, 0x00	; 0
 a0a:	87 e0       	ldi	r24, 0x07	; 7
 a0c:	e2 d4       	rcall	.+2500   	; 0x13d2 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 a0e:	62 e0       	ldi	r22, 0x02	; 2
 a10:	88 e0       	ldi	r24, 0x08	; 8
 a12:	df d4       	rcall	.+2494   	; 0x13d2 <SH100HW_SetNewLedState>
 a14:	ff cf       	rjmp	.-2      	; 0xa14 <initTest+0xc8>
		while(1) {}
	}
		
	SH100HW_SetPAFailure(false);
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	21 d7       	rcall	.+3650   	; 0x185c <SH100HW_SetPAFailure>
	SH100CTRL_CheckOutputJacks();
 a1a:	c0 d1       	rcall	.+896    	; 0xd9c <SH100CTRL_CheckOutputJacks>
	isAmpStarted = true;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <isAmpStarted>
 a22:	08 95       	ret

Disassembly of section .text.main:

00001398 <main>:
}

int main(void)
{
	board_init();
    1398:	be d2       	rcall	.+1404   	; 0x1916 <board_init>
	
	UART_init();
    139a:	1b d2       	rcall	.+1078   	; 0x17d2 <UART_init>
	SH100HW_Init();
    139c:	df dd       	rcall	.-1090   	; 0xf5c <SH100HW_Init>
	SH100CTRL_Init();
    139e:	c2 dc       	rcall	.-1660   	; 0xd24 <SH100CTRL_Init>
	MIDICTRL_Init();
    13a0:	6d d1       	rcall	.+730    	; 0x167c <MIDICTRL_Init>
	
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    13a2:	85 b5       	in	r24, 0x25	; 37
    13a4:	85 60       	ori	r24, 0x05	; 5
    13a6:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    13a8:	ee e6       	ldi	r30, 0x6E	; 110
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	80 83       	st	Z, r24
	TCNT0 = 100;
    13b2:	84 e6       	ldi	r24, 0x64	; 100
    13b4:	86 bd       	out	0x26, r24	; 38
	
	// PCINT10, interrupt for PC2 pin(SW detect)
	PCICR |= 0x02;
    13b6:	e8 e6       	ldi	r30, 0x68	; 104
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	82 60       	ori	r24, 0x02	; 2
    13be:	80 83       	st	Z, r24
	PCMSK1 |= 0x04;
    13c0:	ec e6       	ldi	r30, 0x6C	; 108
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	84 60       	ori	r24, 0x04	; 4
    13c8:	80 83       	st	Z, r24
	
	cpu_irq_enable();
    13ca:	78 94       	sei
	
	initTest();
    13cc:	bf da       	rcall	.-2690   	; 0x94c <initTest>
		
    while(1)
    {
		MIDI_ParserTask();
    13ce:	1d da       	rcall	.-3014   	; 0x80a <MIDI_ParserTask>
    13d0:	fe cf       	rjmp	.-4      	; 0x13ce <main+0x36>

Disassembly of section .text.__vector_16:

000004b2 <__vector_16>:
uint8_t protectionInterval_cnt = PROTECTION_INTERVAL;
uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

ISR(TIMER0_OVF_vect)
{
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
 4dc:	2f 97       	sbiw	r28, 0x0f	; 15
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 4e2:	f2 de       	rcall	.-540    	; 0x2c8 <SH100HW_MainTask>
	
	if(isAmpStarted)
 4e4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <isAmpStarted>
 4e8:	88 23       	and	r24, r24
 4ea:	19 f0       	breq	.+6      	; 0x4f2 <__vector_16+0x40>
	{
		SH100CTRL_CheckOutputJacks();
 4ec:	57 d4       	rcall	.+2222   	; 0xd9c <SH100CTRL_CheckOutputJacks>
		SH100HW_StartADConvertion(ADC_V_NEGATIVE);
 4ee:	87 e0       	ldi	r24, 0x07	; 7
 4f0:	91 d9       	rcall	.-3294   	; 0xfffff814 <__eeprom_end+0xff7ef814>
	}
	
	SH100HW_Buttons_t pressedButtons = SH100HW_GetButtonsState();
 4f2:	ce 01       	movw	r24, r28
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	98 d9       	rcall	.-3280   	; 0xfffff828 <__eeprom_end+0xff7ef828>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	f2 d9       	rcall	.-3100   	; 0xfffff8e0 <__eeprom_end+0xff7ef8e0>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	f3 d9       	rcall	.-3098   	; 0xfffff8e6 <__eeprom_end+0xff7ef8e6>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	f4 d9       	rcall	.-3096   	; 0xfffff8ec <__eeprom_end+0xff7ef8ec>
	
	// FOOTSWITCH handling
	
	if(protectionInterval_cnt == 0)
 504:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <protectionInterval_cnt>
 508:	81 11       	cpse	r24, r1
 50a:	97 c0       	rjmp	.+302    	; 0x63a <__stack+0x13b>
	{		
		//=============BTN CH1==========================
		if(pressedButtons.btnCh1 == BT_ON)
 50c:	8c 81       	ldd	r24, Y+4	; 0x04
 50e:	81 11       	cpse	r24, r1
 510:	27 c0       	rjmp	.+78     	; 0x560 <__stack+0x61>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 512:	84 e1       	ldi	r24, 0x14	; 20
 514:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			if(swProgrammingMode_cnt == SWITCH_MODE_DELAY)
 518:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <swProgrammingMode_cnt>
 51c:	8a 30       	cpi	r24, 0x0A	; 10
 51e:	69 f4       	brne	.+26     	; 0x53a <__stack+0x3b>
			{
				swProgrammingMode_cnt = 0;
 520:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <swProgrammingMode_cnt>
				//enter prog mode, or save settings
				if(MIDICTRL_MidiMode() == RUNNING)
 524:	da d9       	rcall	.-3148   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 526:	81 11       	cpse	r24, r1
 528:	04 c0       	rjmp	.+8      	; 0x532 <__stack+0x33>
				{
					MIDICTRL_SwitchMode(PROGRAMMING);
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	1f d6       	rcall	.+3134   	; 0x116c <MIDICTRL_SwitchMode>
					SH100CTRL_MuteAmp();
 52e:	e4 d9       	rcall	.-3128   	; 0xfffff8f8 <__eeprom_end+0xff7ef8f8>
 530:	87 c0       	rjmp	.+270    	; 0x640 <__stack+0x141>
				}
				else
				{
					MIDICTRL_StoreUserCommands();
 532:	87 d7       	rcall	.+3854   	; 0x1442 <MIDICTRL_StoreUserCommands>
					SH100CTRL_SetAmpLeds();
 534:	36 d8       	rcall	.-3988   	; 0xfffff5a2 <__eeprom_end+0xff7ef5a2>
					SH100CTRL_UnmuteAmp();
 536:	b3 d9       	rcall	.-3226   	; 0xfffff89e <__eeprom_end+0xff7ef89e>
 538:	83 c0       	rjmp	.+262    	; 0x640 <__stack+0x141>
				}
			}
			else
			{		
				if(swProgrammingMode_cnt == 0)
 53a:	81 11       	cpse	r24, r1
 53c:	0b c0       	rjmp	.+22     	; 0x554 <__stack+0x55>
				{
					switch(MIDICTRL_MidiMode())
 53e:	cd d9       	rcall	.-3174   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 540:	88 23       	and	r24, r24
 542:	19 f0       	breq	.+6      	; 0x54a <__stack+0x4b>
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	21 f0       	breq	.+8      	; 0x550 <__stack+0x51>
 548:	05 c0       	rjmp	.+10     	; 0x554 <__stack+0x55>
					{
						case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL1); break;
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	7f d9       	rcall	.-3330   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
 54e:	02 c0       	rjmp	.+4      	; 0x554 <__stack+0x55>
						case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	f9 d7       	rcall	.+4082   	; 0x1546 <MIDICTRL_SetProgrammingButton>
					}
				}
				swProgrammingMode_cnt++;
 554:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <swProgrammingMode_cnt>
 558:	8f 5f       	subi	r24, 0xFF	; 255
 55a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <swProgrammingMode_cnt>
 55e:	70 c0       	rjmp	.+224    	; 0x640 <__stack+0x141>
			}
			return;
		}
		else swProgrammingMode_cnt=0;	
 560:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <swProgrammingMode_cnt>
		
		//=============BTN CH2==========================
		if(pressedButtons.btnCh2 == BT_ON)
 564:	8d 81       	ldd	r24, Y+5	; 0x05
 566:	81 11       	cpse	r24, r1
 568:	0f c0       	rjmp	.+30     	; 0x588 <__stack+0x89>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 56a:	84 e1       	ldi	r24, 0x14	; 20
 56c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 570:	b4 d9       	rcall	.-3224   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 572:	88 23       	and	r24, r24
 574:	19 f0       	breq	.+6      	; 0x57c <__stack+0x7d>
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	21 f0       	breq	.+8      	; 0x582 <__stack+0x83>
 57a:	62 c0       	rjmp	.+196    	; 0x640 <__stack+0x141>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL2); break;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	66 d9       	rcall	.-3380   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
 580:	5f c0       	rjmp	.+190    	; 0x640 <__stack+0x141>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	e0 d7       	rcall	.+4032   	; 0x1546 <MIDICTRL_SetProgrammingButton>
 586:	5c c0       	rjmp	.+184    	; 0x640 <__stack+0x141>
			}
			return;
		}
		
		//=============BTN CH3==========================
		if(pressedButtons.btnCh3 == BT_ON)
 588:	8e 81       	ldd	r24, Y+6	; 0x06
 58a:	81 11       	cpse	r24, r1
 58c:	0f c0       	rjmp	.+30     	; 0x5ac <__stack+0xad>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 58e:	84 e1       	ldi	r24, 0x14	; 20
 590:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 594:	a2 d9       	rcall	.-3260   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 596:	88 23       	and	r24, r24
 598:	19 f0       	breq	.+6      	; 0x5a0 <__stack+0xa1>
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	21 f0       	breq	.+8      	; 0x5a6 <__stack+0xa7>
 59e:	50 c0       	rjmp	.+160    	; 0x640 <__stack+0x141>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL3); break;
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	54 d9       	rcall	.-3416   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
 5a4:	4d c0       	rjmp	.+154    	; 0x640 <__stack+0x141>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	ce d7       	rcall	.+3996   	; 0x1546 <MIDICTRL_SetProgrammingButton>
 5aa:	4a c0       	rjmp	.+148    	; 0x640 <__stack+0x141>
			}
			return;
		}
		
		//=============BTN CH4==========================
		if(pressedButtons.btnCh4 == BT_ON)
 5ac:	8f 81       	ldd	r24, Y+7	; 0x07
 5ae:	81 11       	cpse	r24, r1
 5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <__stack+0xd1>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5b2:	84 e1       	ldi	r24, 0x14	; 20
 5b4:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 5b8:	90 d9       	rcall	.-3296   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 5ba:	88 23       	and	r24, r24
 5bc:	19 f0       	breq	.+6      	; 0x5c4 <__stack+0xc5>
 5be:	81 30       	cpi	r24, 0x01	; 1
 5c0:	21 f0       	breq	.+8      	; 0x5ca <__stack+0xcb>
 5c2:	3e c0       	rjmp	.+124    	; 0x640 <__stack+0x141>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL4); break;
 5c4:	83 e0       	ldi	r24, 0x03	; 3
 5c6:	42 d9       	rcall	.-3452   	; 0xfffff84c <__eeprom_end+0xff7ef84c>
 5c8:	3b c0       	rjmp	.+118    	; 0x640 <__stack+0x141>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 5ca:	83 e0       	ldi	r24, 0x03	; 3
 5cc:	bc d7       	rcall	.+3960   	; 0x1546 <MIDICTRL_SetProgrammingButton>
 5ce:	38 c0       	rjmp	.+112    	; 0x640 <__stack+0x141>
			}
			return;
		}
		
		//=============BTN LOOP=========================
		if(pressedButtons.btnLoop == BT_ON)
 5d0:	89 85       	ldd	r24, Y+9	; 0x09
 5d2:	81 11       	cpse	r24, r1
 5d4:	0e c0       	rjmp	.+28     	; 0x5f2 <__stack+0xf3>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5d6:	84 e1       	ldi	r24, 0x14	; 20
 5d8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 5dc:	7e d9       	rcall	.-3332   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 5de:	88 23       	and	r24, r24
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <__stack+0xe9>
 5e2:	81 30       	cpi	r24, 0x01	; 1
 5e4:	19 f0       	breq	.+6      	; 0x5ec <__stack+0xed>
 5e6:	2c c0       	rjmp	.+88     	; 0x640 <__stack+0x141>
			{
				case RUNNING:
				{
					SH100CTRL_SwLoop();
 5e8:	0b d9       	rcall	.-3562   	; 0xfffff800 <__eeprom_end+0xff7ef800>
					break;
 5ea:	2a c0       	rjmp	.+84     	; 0x640 <__stack+0x141>
				}
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 5ec:	84 e0       	ldi	r24, 0x04	; 4
 5ee:	ab d7       	rcall	.+3926   	; 0x1546 <MIDICTRL_SetProgrammingButton>
 5f0:	27 c0       	rjmp	.+78     	; 0x640 <__stack+0x141>
			}
			return;
		}
			
		//=============BTN AB===========================
		if(pressedButtons.btnAB == BT_ON)
 5f2:	88 85       	ldd	r24, Y+8	; 0x08
 5f4:	81 11       	cpse	r24, r1
 5f6:	1e c0       	rjmp	.+60     	; 0x634 <__stack+0x135>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5f8:	84 e1       	ldi	r24, 0x14	; 20
 5fa:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			if(leaveDefSettings_cnt == SWITCH_MODE_DELAY)
 5fe:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <leaveDefSettings_cnt>
 602:	8a 30       	cpi	r24, 0x0A	; 10
 604:	49 f4       	brne	.+18     	; 0x618 <__stack+0x119>
			{
				if(MIDICTRL_MidiMode() == PROGRAMMING)
 606:	69 d9       	rcall	.-3374   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	d1 f4       	brne	.+52     	; 0x640 <__stack+0x141>
				{
					leaveDefSettings_cnt = 0;
 60c:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <leaveDefSettings_cnt>
					MIDICTRL_DiscardCommands();
 610:	ae d8       	rcall	.-3748   	; 0xfffff76e <__eeprom_end+0xff7ef76e>
					SH100CTRL_SetAmpLeds();
 612:	c7 d7       	rcall	.+3982   	; 0x15a2 <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 614:	44 d9       	rcall	.-3448   	; 0xfffff89e <__eeprom_end+0xff7ef89e>
 616:	14 c0       	rjmp	.+40     	; 0x640 <__stack+0x141>
				}
			}
			else
			{
				leaveDefSettings_cnt++;
 618:	8f 5f       	subi	r24, 0xFF	; 255
 61a:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <leaveDefSettings_cnt>
				switch(MIDICTRL_MidiMode())
 61e:	5d d9       	rcall	.-3398   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 620:	88 23       	and	r24, r24
 622:	19 f0       	breq	.+6      	; 0x62a <__stack+0x12b>
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	19 f0       	breq	.+6      	; 0x62e <__stack+0x12f>
 628:	0b c0       	rjmp	.+22     	; 0x640 <__stack+0x141>
				{
					case RUNNING: 
					{
						SH100CTRL_SwAB(); 
 62a:	33 d9       	rcall	.-3482   	; 0xfffff892 <__eeprom_end+0xff7ef892>
						break;
 62c:	09 c0       	rjmp	.+18     	; 0x640 <__stack+0x141>
					}
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 62e:	85 e0       	ldi	r24, 0x05	; 5
 630:	8a d7       	rcall	.+3860   	; 0x1546 <MIDICTRL_SetProgrammingButton>
 632:	06 c0       	rjmp	.+12     	; 0x640 <__stack+0x141>
				}
			}
			return;
		}
		else leaveDefSettings_cnt=0;
 634:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <leaveDefSettings_cnt>
 638:	03 c0       	rjmp	.+6      	; 0x640 <__stack+0x141>
	}
	else
	{
		protectionInterval_cnt--;
 63a:	81 50       	subi	r24, 0x01	; 1
 63c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
	}
}
 640:	2f 96       	adiw	r28, 0x0f	; 15
 642:	0f b6       	in	r0, 0x3f	; 63
 644:	f8 94       	cli
 646:	de bf       	out	0x3e, r29	; 62
 648:	0f be       	out	0x3f, r0	; 63
 64a:	cd bf       	out	0x3d, r28	; 61
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	ff 91       	pop	r31
 652:	ef 91       	pop	r30
 654:	bf 91       	pop	r27
 656:	af 91       	pop	r26
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	7f 91       	pop	r23
 65e:	6f 91       	pop	r22
 660:	5f 91       	pop	r21
 662:	4f 91       	pop	r20
 664:	3f 91       	pop	r19
 666:	2f 91       	pop	r18
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

Disassembly of section .text.__vector_4:

0000124c <__vector_4>:

ISR(PCINT1_vect)
{
    124c:	1f 92       	push	r1
    124e:	0f 92       	push	r0
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	0f 92       	push	r0
    1254:	11 24       	eor	r1, r1
    1256:	2f 93       	push	r18
    1258:	3f 93       	push	r19
    125a:	4f 93       	push	r20
    125c:	5f 93       	push	r21
    125e:	6f 93       	push	r22
    1260:	7f 93       	push	r23
    1262:	8f 93       	push	r24
    1264:	9f 93       	push	r25
    1266:	af 93       	push	r26
    1268:	bf 93       	push	r27
    126a:	ef 93       	push	r30
    126c:	ff 93       	push	r31
	// Power off
	// need to check pin level?
	SH100CTRL_StoreAmpState();
    126e:	63 d2       	rcall	.+1222   	; 0x1736 <SH100CTRL_StoreAmpState>
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

Disassembly of section .text.__vector_21:

00000af6 <__vector_21>:

int16_t negVdd;
int16_t posVdd;
bool measSwitch = false;
ISR(ADC_vect)
{
 af6:	1f 92       	push	r1
 af8:	0f 92       	push	r0
 afa:	0f b6       	in	r0, 0x3f	; 63
 afc:	0f 92       	push	r0
 afe:	11 24       	eor	r1, r1
 b00:	2f 93       	push	r18
 b02:	3f 93       	push	r19
 b04:	4f 93       	push	r20
 b06:	5f 93       	push	r21
 b08:	6f 93       	push	r22
 b0a:	7f 93       	push	r23
 b0c:	8f 93       	push	r24
 b0e:	9f 93       	push	r25
 b10:	af 93       	push	r26
 b12:	bf 93       	push	r27
 b14:	ef 93       	push	r30
 b16:	ff 93       	push	r31
	if(isAmpStarted)
 b18:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <isAmpStarted>
 b1c:	88 23       	and	r24, r24
 b1e:	d9 f1       	breq	.+118    	; 0xb96 <__vector_21+0xa0>
	{
		if(measSwitch)
 b20:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <measSwitch>
 b24:	88 23       	and	r24, r24
 b26:	59 f0       	breq	.+22     	; 0xb3e <__vector_21+0x48>
		{
			posVdd = ADC;
 b28:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 b2c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 b30:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <posVdd+0x1>
 b34:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <posVdd>
			measSwitch = false;
 b38:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <measSwitch>
 b3c:	0d c0       	rjmp	.+26     	; 0xb58 <__vector_21+0x62>
			//SH100HW_StartADConvertion(ADC_V_NEGATIVE);
		}
		else
		{
			negVdd = ADC;
 b3e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 b42:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 b46:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b4a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			measSwitch = true;
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <measSwitch>
			SH100HW_StartADConvertion(ADC_V_POSITIVE);
 b54:	80 e0       	ldi	r24, 0x00	; 0
 b56:	5e d6       	rcall	.+3260   	; 0x1814 <SH100HW_StartADConvertion>
		}
		
		if(fabs(negVdd-posVdd) > 100)
 b58:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 b5c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 b60:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <posVdd>
 b64:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <posVdd+0x1>
 b68:	68 1b       	sub	r22, r24
 b6a:	79 0b       	sbc	r23, r25
 b6c:	07 2e       	mov	r0, r23
 b6e:	00 0c       	add	r0, r0
 b70:	88 0b       	sbc	r24, r24
 b72:	99 0b       	sbc	r25, r25
 b74:	60 d0       	rcall	.+192    	; 0xc36 <__floatsisf>
 b76:	9f 77       	andi	r25, 0x7F	; 127
 b78:	20 e0       	ldi	r18, 0x00	; 0
 b7a:	30 e0       	ldi	r19, 0x00	; 0
 b7c:	48 ec       	ldi	r20, 0xC8	; 200
 b7e:	52 e4       	ldi	r21, 0x42	; 66
 b80:	a8 d6       	rcall	.+3408   	; 0x18d2 <__gesf2>
 b82:	18 16       	cp	r1, r24
 b84:	44 f4       	brge	.+16     	; 0xb96 <__vector_21+0xa0>
		{
			// one of Vdd rail is out
			SH100HW_SetPAFailure(true);
 b86:	81 e0       	ldi	r24, 0x01	; 1
 b88:	69 d6       	rcall	.+3282   	; 0x185c <SH100HW_SetPAFailure>
			SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 b8a:	60 e0       	ldi	r22, 0x00	; 0
 b8c:	87 e0       	ldi	r24, 0x07	; 7
 b8e:	21 d4       	rcall	.+2114   	; 0x13d2 <SH100HW_SetNewLedState>
			SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 b90:	62 e0       	ldi	r22, 0x02	; 2
 b92:	88 e0       	ldi	r24, 0x08	; 8
 b94:	1e d4       	rcall	.+2108   	; 0x13d2 <SH100HW_SetNewLedState>
		}
	}
 b96:	ff 91       	pop	r31
 b98:	ef 91       	pop	r30
 b9a:	bf 91       	pop	r27
 b9c:	af 91       	pop	r26
 b9e:	9f 91       	pop	r25
 ba0:	8f 91       	pop	r24
 ba2:	7f 91       	pop	r23
 ba4:	6f 91       	pop	r22
 ba6:	5f 91       	pop	r21
 ba8:	4f 91       	pop	r20
 baa:	3f 91       	pop	r19
 bac:	2f 91       	pop	r18
 bae:	0f 90       	pop	r0
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	0f 90       	pop	r0
 bb4:	1f 90       	pop	r1
 bb6:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

000018ca <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    18ca:	88 1f       	adc	r24, r24
    18cc:	88 27       	eor	r24, r24
    18ce:	88 1f       	adc	r24, r24
    18d0:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00001886 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    1886:	91 e0       	ldi	r25, 0x01	; 1
    1888:	88 3f       	cpi	r24, 0xF8	; 248
    188a:	08 f4       	brcc	.+2      	; 0x188e <MIDI_IsSysRealTime+0x8>
    188c:	90 e0       	ldi	r25, 0x00	; 0
}
    188e:	89 2f       	mov	r24, r25
    1890:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000e14 <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 e14:	82 3f       	cpi	r24, 0xF2	; 242
 e16:	01 f1       	breq	.+64     	; 0xe58 <MIDI_GetStatusType+0x44>
 e18:	68 f4       	brcc	.+26     	; 0xe34 <MIDI_GetStatusType+0x20>
 e1a:	8e 30       	cpi	r24, 0x0E	; 14
 e1c:	28 f4       	brcc	.+10     	; 0xe28 <MIDI_GetStatusType+0x14>
 e1e:	8c 30       	cpi	r24, 0x0C	; 12
 e20:	78 f5       	brcc	.+94     	; 0xe80 <MIDI_GetStatusType+0x6c>
 e22:	88 30       	cpi	r24, 0x08	; 8
 e24:	c8 f4       	brcc	.+50     	; 0xe58 <MIDI_GetStatusType+0x44>
 e26:	2a c0       	rjmp	.+84     	; 0xe7c <MIDI_GetStatusType+0x68>
 e28:	80 3f       	cpi	r24, 0xF0	; 240
 e2a:	21 f1       	breq	.+72     	; 0xe74 <MIDI_GetStatusType+0x60>
 e2c:	48 f5       	brcc	.+82     	; 0xe80 <MIDI_GetStatusType+0x6c>
 e2e:	8e 30       	cpi	r24, 0x0E	; 14
 e30:	99 f0       	breq	.+38     	; 0xe58 <MIDI_GetStatusType+0x44>
 e32:	24 c0       	rjmp	.+72     	; 0xe7c <MIDI_GetStatusType+0x68>
 e34:	8a 3f       	cpi	r24, 0xFA	; 250
 e36:	a1 f0       	breq	.+40     	; 0xe60 <MIDI_GetStatusType+0x4c>
 e38:	38 f4       	brcc	.+14     	; 0xe48 <MIDI_GetStatusType+0x34>
 e3a:	87 3f       	cpi	r24, 0xF7	; 247
 e3c:	e9 f0       	breq	.+58     	; 0xe78 <MIDI_GetStatusType+0x64>
 e3e:	88 3f       	cpi	r24, 0xF8	; 248
 e40:	69 f0       	breq	.+26     	; 0xe5c <MIDI_GetStatusType+0x48>
 e42:	83 3f       	cpi	r24, 0xF3	; 243
 e44:	e9 f0       	breq	.+58     	; 0xe80 <MIDI_GetStatusType+0x6c>
 e46:	1a c0       	rjmp	.+52     	; 0xe7c <MIDI_GetStatusType+0x68>
 e48:	8c 3f       	cpi	r24, 0xFC	; 252
 e4a:	71 f0       	breq	.+28     	; 0xe68 <MIDI_GetStatusType+0x54>
 e4c:	58 f0       	brcs	.+22     	; 0xe64 <MIDI_GetStatusType+0x50>
 e4e:	8e 3f       	cpi	r24, 0xFE	; 254
 e50:	69 f0       	breq	.+26     	; 0xe6c <MIDI_GetStatusType+0x58>
 e52:	8f 3f       	cpi	r24, 0xFF	; 255
 e54:	69 f0       	breq	.+26     	; 0xe70 <MIDI_GetStatusType+0x5c>
 e56:	12 c0       	rjmp	.+36     	; 0xe7c <MIDI_GetStatusType+0x68>
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 e58:	82 e0       	ldi	r24, 0x02	; 2
 e5a:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 e5c:	83 e0       	ldi	r24, 0x03	; 3
 e5e:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 e60:	83 e0       	ldi	r24, 0x03	; 3
 e62:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 e64:	83 e0       	ldi	r24, 0x03	; 3
 e66:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 e68:	83 e0       	ldi	r24, 0x03	; 3
 e6a:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 e6c:	83 e0       	ldi	r24, 0x03	; 3
 e6e:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 e70:	83 e0       	ldi	r24, 0x03	; 3
 e72:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 e74:	84 e0       	ldi	r24, 0x04	; 4
 e76:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 e78:	85 e0       	ldi	r24, 0x05	; 5
 e7a:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 e7c:	80 e0       	ldi	r24, 0x00	; 0
 e7e:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 e80:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 e82:	08 95       	ret

Disassembly of section .text.isEqualCommands:

000012d8 <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(const MIDI_Command_t* commandRecieved, const MIDI_Command_t* commandSaved)
{
	if(commandRecieved->status != commandSaved->status) return false;
    12d8:	fb 01       	movw	r30, r22
    12da:	54 91       	lpm	r21, Z
    12dc:	87 fd       	sbrc	r24, 7
    12de:	50 81       	ld	r21, Z
    12e0:	f9 01       	movw	r30, r18
    12e2:	94 91       	lpm	r25, Z
    12e4:	47 fd       	sbrc	r20, 7
    12e6:	90 81       	ld	r25, Z
    12e8:	59 13       	cpse	r21, r25
    12ea:	13 c0       	rjmp	.+38     	; 0x1312 <isEqualCommands+0x3a>
	if(commandRecieved->data1 != commandSaved->data1) return false;
    12ec:	a8 2f       	mov	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	02 96       	adiw	r24, 0x02	; 2
    12f2:	a1 1d       	adc	r26, r1
    12f4:	fc 01       	movw	r30, r24
    12f6:	94 91       	lpm	r25, Z
    12f8:	a7 fd       	sbrc	r26, 7
    12fa:	90 81       	ld	r25, Z
    12fc:	2e 5f       	subi	r18, 0xFE	; 254
    12fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1300:	4f 4f       	sbci	r20, 0xFF	; 255
    1302:	f9 01       	movw	r30, r18
    1304:	84 91       	lpm	r24, Z
    1306:	47 fd       	sbrc	r20, 7
    1308:	80 81       	ld	r24, Z
    130a:	98 17       	cp	r25, r24
    130c:	21 f0       	breq	.+8      	; 0x1316 <isEqualCommands+0x3e>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(const MIDI_Command_t* commandRecieved, const MIDI_Command_t* commandSaved)
{
	if(commandRecieved->status != commandSaved->status) return false;
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	08 95       	ret
	if(commandRecieved->data1 != commandSaved->data1) return false;
			
	return true;
    1316:	81 e0       	ldi	r24, 0x01	; 1
}
    1318:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

00000bb8 <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 bb8:	cf 93       	push	r28
 bba:	df 93       	push	r29
 bbc:	cd b7       	in	r28, 0x3d	; 61
 bbe:	de b7       	in	r29, 0x3e	; 62
 bc0:	68 97       	sbiw	r28, 0x18	; 24
 bc2:	0f b6       	in	r0, 0x3f	; 63
 bc4:	f8 94       	cli
 bc6:	de bf       	out	0x3e, r29	; 62
 bc8:	0f be       	out	0x3f, r0	; 63
 bca:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word((uint16_t*)0x02);
 bcc:	62 e0       	ldi	r22, 0x02	; 2
 bce:	70 e0       	ldi	r23, 0x00	; 0
 bd0:	80 e8       	ldi	r24, 0x80	; 128
 bd2:	6b d6       	rcall	.+3286   	; 0x18aa <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 bd4:	8b 3a       	cpi	r24, 0xAB	; 171
 bd6:	9c 4a       	sbci	r25, 0xAC	; 172
 bd8:	c1 f4       	brne	.+48     	; 0xc0a <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 bda:	4f e0       	ldi	r20, 0x0F	; 15
 bdc:	50 e0       	ldi	r21, 0x00	; 0
 bde:	60 e8       	ldi	r22, 0x80	; 128
 be0:	28 e1       	ldi	r18, 0x18	; 24
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	ce 01       	movw	r24, r28
 be6:	01 96       	adiw	r24, 0x01	; 1
 be8:	83 d5       	rcall	.+2822   	; 0x16f0 <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 bea:	88 e1       	ldi	r24, 0x18	; 24
 bec:	fe 01       	movw	r30, r28
 bee:	31 96       	adiw	r30, 0x01	; 1
 bf0:	ac e0       	ldi	r26, 0x0C	; 12
 bf2:	b1 e0       	ldi	r27, 0x01	; 1
 bf4:	01 90       	ld	r0, Z+
 bf6:	0d 92       	st	X+, r0
 bf8:	8a 95       	dec	r24
 bfa:	e1 f7       	brne	.-8      	; 0xbf4 <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 bfc:	6e e0       	ldi	r22, 0x0E	; 14
 bfe:	70 e0       	ldi	r23, 0x00	; 0
 c00:	80 e8       	ldi	r24, 0x80	; 128
 c02:	1b d6       	rcall	.+3126   	; 0x183a <eeprom_read_byte>
 c04:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <commandSet>
 c08:	0b c0       	rjmp	.+22     	; 0xc20 <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 c0a:	88 e1       	ldi	r24, 0x18	; 24
 c0c:	ee e8       	ldi	r30, 0x8E	; 142
 c0e:	f1 e0       	ldi	r31, 0x01	; 1
 c10:	ac e0       	ldi	r26, 0x0C	; 12
 c12:	b1 e0       	ldi	r27, 0x01	; 1
 c14:	01 90       	ld	r0, Z+
 c16:	0d 92       	st	X+, r0
 c18:	8a 95       	dec	r24
 c1a:	e1 f7       	brne	.-8      	; 0xc14 <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 c1c:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <commandSet>
	}
}
 c20:	68 96       	adiw	r28, 0x18	; 24
 c22:	0f b6       	in	r0, 0x3f	; 63
 c24:	f8 94       	cli
 c26:	de bf       	out	0x3e, r29	; 62
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	cd bf       	out	0x3d, r28	; 61
 c2c:	df 91       	pop	r29
 c2e:	cf 91       	pop	r28
 c30:	08 95       	ret

Disassembly of section .text.setMidiLeds:

0000107e <setMidiLeds>:

void setMidiLeds()
{
    107e:	cf 93       	push	r28
	if(mode == PROGRAMMING)
    1080:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	11 f5       	brne	.+68     	; 0x10cc <setMidiLeds+0x4e>
    1088:	18 c0       	rjmp	.+48     	; 0x10ba <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
    108a:	ec 2f       	mov	r30, r28
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	eb 5f       	subi	r30, 0xFB	; 251
    1090:	fe 4f       	sbci	r31, 0xFE	; 254
    1092:	80 81       	ld	r24, Z
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	41 f0       	breq	.+16     	; 0x10a8 <setMidiLeds+0x2a>
    1098:	18 f0       	brcs	.+6      	; 0x10a0 <setMidiLeds+0x22>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	49 f0       	breq	.+18     	; 0x10b0 <setMidiLeds+0x32>
    109e:	0b c0       	rjmp	.+22     	; 0x10b6 <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	8c 2f       	mov	r24, r28
    10a4:	96 d1       	rcall	.+812    	; 0x13d2 <SH100HW_SetNewLedState>
    10a6:	07 c0       	rjmp	.+14     	; 0x10b6 <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
    10a8:	62 e0       	ldi	r22, 0x02	; 2
    10aa:	8c 2f       	mov	r24, r28
    10ac:	92 d1       	rcall	.+804    	; 0x13d2 <SH100HW_SetNewLedState>
    10ae:	03 c0       	rjmp	.+6      	; 0x10b6 <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
    10b0:	61 e0       	ldi	r22, 0x01	; 1
    10b2:	8c 2f       	mov	r24, r28
    10b4:	8e d1       	rcall	.+796    	; 0x13d2 <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
    10b6:	cf 5f       	subi	r28, 0xFF	; 255
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <setMidiLeds+0x3e>
    10ba:	c0 e0       	ldi	r28, 0x00	; 0
    10bc:	c6 30       	cpi	r28, 0x06	; 6
    10be:	28 f3       	brcs	.-54     	; 0x108a <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
    10c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <currentErrBtnId>
    10c4:	8f 3f       	cpi	r24, 0xFF	; 255
    10c6:	11 f0       	breq	.+4      	; 0x10cc <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	83 d1       	rcall	.+774    	; 0x13d2 <SH100HW_SetNewLedState>
		}
	}
}
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

0000167c <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x00; // psc = 1024 if on
    167c:	e1 e8       	ldi	r30, 0x81	; 129
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
    1684:	ef e6       	ldi	r30, 0x6F	; 111
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	81 60       	ori	r24, 0x01	; 1
    168c:	80 83       	st	Z, r24
	TCNT1 = 0;
    168e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    1692:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    1696:	8f ef       	ldi	r24, 0xFF	; 255
    1698:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	
	loadCommSetFromMemory();
    169c:	8d da       	rcall	.-2790   	; 0xbb8 <loadCommSetFromMemory>
	mode = RUNNING;
    169e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    16a2:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

000018da <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    18da:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    18de:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

00001546 <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
    1546:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <currentProgBtn>
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	f9 01       	movw	r30, r18
    154e:	eb 5f       	subi	r30, 0xFB	; 251
    1550:	fe 4f       	sbci	r31, 0xFE	; 254
    1552:	90 81       	ld	r25, Z
    1554:	91 30       	cpi	r25, 0x01	; 1
    1556:	21 f4       	brne	.+8      	; 0x1560 <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
    1558:	f9 01       	movw	r30, r18
    155a:	eb 5f       	subi	r30, 0xFB	; 251
    155c:	fe 4f       	sbci	r31, 0xFE	; 254
    155e:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
    1560:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
    1564:	e8 2f       	mov	r30, r24
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	eb 5f       	subi	r30, 0xFB	; 251
    156a:	fe 4f       	sbci	r31, 0xFE	; 254
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	80 83       	st	Z, r24
	setMidiLeds();
    1570:	86 dd       	rcall	.-1268   	; 0x107e <setMidiLeds>
    1572:	08 95       	ret

Disassembly of section .text.MIDICTRL_SwitchMode:

0000116c <MIDICTRL_SwitchMode>:
	loadCommSetFromMemory();
	mode = RUNNING;
}

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
    116c:	cf 93       	push	r28
    116e:	c8 2f       	mov	r28, r24
	if(mode == RUNNING)
    1170:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1174:	81 11       	cpse	r24, r1
    1176:	17 c0       	rjmp	.+46     	; 0x11a6 <MIDICTRL_SwitchMode+0x3a>
	{
		MIDI_SetRetranslateState(false);
    1178:	bc d3       	rcall	.+1912   	; 0x18f2 <MIDI_SetRetranslateState>
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	06 c0       	rjmp	.+12     	; 0x118a <MIDICTRL_SwitchMode+0x1e>
			midiProgBtnState[i] = PROG_CLEAR;
    117e:	e8 2f       	mov	r30, r24
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	eb 5f       	subi	r30, 0xFB	; 251
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	10 82       	st	Z, r1
{	
	if(mode == RUNNING)
	{
		MIDI_SetRetranslateState(false);
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	86 30       	cpi	r24, 0x06	; 6
    118c:	c0 f3       	brcs	.-16     	; 0x117e <MIDICTRL_SwitchMode+0x12>
			midiProgBtnState[i] = PROG_CLEAR;
		
		MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	da d1       	rcall	.+948    	; 0x1546 <MIDICTRL_SetProgrammingButton>
		
		
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
    1192:	63 e0       	ldi	r22, 0x03	; 3
    1194:	87 e0       	ldi	r24, 0x07	; 7
    1196:	1d d1       	rcall	.+570    	; 0x13d2 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
    1198:	63 e0       	ldi	r22, 0x03	; 3
    119a:	88 e0       	ldi	r24, 0x08	; 8
    119c:	1a d1       	rcall	.+564    	; 0x13d2 <SH100HW_SetNewLedState>
		
		SH100HW_SetNewLedState(LED_B, LED_OFF);
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	86 e0       	ldi	r24, 0x06	; 6
    11a2:	17 d1       	rcall	.+558    	; 0x13d2 <SH100HW_SetNewLedState>
    11a4:	04 c0       	rjmp	.+8      	; 0x11ae <MIDICTRL_SwitchMode+0x42>
	}
	else
	{
		SH100HW_SetPreviousLedState(LED_B);
    11a6:	86 e0       	ldi	r24, 0x06	; 6
    11a8:	7d d2       	rcall	.+1274   	; 0x16a4 <SH100HW_SetPreviousLedState>
		
		MIDI_SetRetranslateState(true);
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	a2 d3       	rcall	.+1860   	; 0x18f2 <MIDI_SetRetranslateState>
	}
	mode = newMode;
    11ae:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <mode>
	
	setMidiLeds();
    11b2:	65 df       	rcall	.-310    	; 0x107e <setMidiLeds>
}
    11b4:	cf 91       	pop	r28
    11b6:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

000018e0 <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    18e0:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <channelNum>
    18e4:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

000018e6 <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    18e6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <omniModeEnabled>
    18ea:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

000018ec <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    18ec:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <muteCommandEnabled>
    18f0:	08 95       	ret

Disassembly of section .text.programmBtn:

000011b8 <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	f9 01       	movw	r30, r18
    11c4:	eb 5f       	subi	r30, 0xFB	; 251
    11c6:	fe 4f       	sbci	r31, 0xFE	; 254
    11c8:	90 81       	ld	r25, Z
    11ca:	91 30       	cpi	r25, 0x01	; 1
    11cc:	b9 f4       	brne	.+46     	; 0x11fc <programmBtn+0x44>
    11ce:	6a 01       	movw	r12, r20
    11d0:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
    11d2:	fa 01       	movw	r30, r20
    11d4:	84 91       	lpm	r24, Z
    11d6:	e7 fc       	sbrc	r14, 7
    11d8:	80 81       	ld	r24, Z
    11da:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	c8 0e       	add	r12, r24
    11e0:	d1 1c       	adc	r13, r1
    11e2:	e1 1c       	adc	r14, r1
    11e4:	f6 01       	movw	r30, r12
    11e6:	84 91       	lpm	r24, Z
    11e8:	e7 fc       	sbrc	r14, 7
    11ea:	80 81       	ld	r24, Z
    11ec:	12 96       	adiw	r26, 0x02	; 2
    11ee:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
    11f0:	f9 01       	movw	r30, r18
    11f2:	eb 5f       	subi	r30, 0xFB	; 251
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	82 e0       	ldi	r24, 0x02	; 2
    11f8:	80 83       	st	Z, r24
		setMidiLeds();
    11fa:	41 df       	rcall	.-382    	; 0x107e <setMidiLeds>
	}
}
    11fc:	ef 90       	pop	r14
    11fe:	df 90       	pop	r13
    1200:	cf 90       	pop	r12
    1202:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwChComm:

00000ef2 <MIDICTRL_SendSwChComm>:

void MIDICTRL_SendSwChComm(uint8_t chNum)
{
	if(mode == RUNNING)
 ef2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <mode>
 ef6:	91 11       	cpse	r25, r1
 ef8:	30 c0       	rjmp	.+96     	; 0xf5a <MIDICTRL_SendSwChComm+0x68>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
 efa:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <commandSet>
 efe:	91 30       	cpi	r25, 0x01	; 1
 f00:	19 f4       	brne	.+6      	; 0xf08 <MIDICTRL_SendSwChComm+0x16>
 f02:	ec e0       	ldi	r30, 0x0C	; 12
 f04:	f1 e0       	ldi	r31, 0x01	; 1
 f06:	02 c0       	rjmp	.+4      	; 0xf0c <MIDICTRL_SendSwChComm+0x1a>
		else currentCommandBlock = &defaultCommands;
 f08:	ee e8       	ldi	r30, 0x8E	; 142
 f0a:	f1 e0       	ldi	r31, 0x01	; 1
		
		switch(chNum)
 f0c:	81 30       	cpi	r24, 0x01	; 1
 f0e:	71 f0       	breq	.+28     	; 0xf2c <MIDICTRL_SendSwChComm+0x3a>
 f10:	28 f0       	brcs	.+10     	; 0xf1c <MIDICTRL_SendSwChComm+0x2a>
 f12:	82 30       	cpi	r24, 0x02	; 2
 f14:	99 f0       	breq	.+38     	; 0xf3c <MIDICTRL_SendSwChComm+0x4a>
 f16:	83 30       	cpi	r24, 0x03	; 3
 f18:	c9 f0       	breq	.+50     	; 0xf4c <MIDICTRL_SendSwChComm+0x5a>
 f1a:	08 95       	ret
		{
			case SH100_CHANNEL1: MIDI_SendCommand(currentCommandBlock->channel1, channelNum); break;
 f1c:	60 81       	ld	r22, Z
 f1e:	71 81       	ldd	r23, Z+1	; 0x01
 f20:	82 81       	ldd	r24, Z+2	; 0x02
 f22:	93 81       	ldd	r25, Z+3	; 0x03
 f24:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f28:	c1 de       	rcall	.-638    	; 0xcac <MIDI_SendCommand>
 f2a:	08 95       	ret
			case SH100_CHANNEL2: MIDI_SendCommand(currentCommandBlock->channel2, channelNum); break;
 f2c:	64 81       	ldd	r22, Z+4	; 0x04
 f2e:	75 81       	ldd	r23, Z+5	; 0x05
 f30:	86 81       	ldd	r24, Z+6	; 0x06
 f32:	97 81       	ldd	r25, Z+7	; 0x07
 f34:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f38:	b9 de       	rcall	.-654    	; 0xcac <MIDI_SendCommand>
 f3a:	08 95       	ret
			case SH100_CHANNEL3: MIDI_SendCommand(currentCommandBlock->channel3, channelNum); break;
 f3c:	60 85       	ldd	r22, Z+8	; 0x08
 f3e:	71 85       	ldd	r23, Z+9	; 0x09
 f40:	82 85       	ldd	r24, Z+10	; 0x0a
 f42:	93 85       	ldd	r25, Z+11	; 0x0b
 f44:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f48:	b1 de       	rcall	.-670    	; 0xcac <MIDI_SendCommand>
 f4a:	08 95       	ret
			case SH100_CHANNEL4: MIDI_SendCommand(currentCommandBlock->channel4, channelNum); break;
 f4c:	64 85       	ldd	r22, Z+12	; 0x0c
 f4e:	75 85       	ldd	r23, Z+13	; 0x0d
 f50:	86 85       	ldd	r24, Z+14	; 0x0e
 f52:	97 85       	ldd	r25, Z+15	; 0x0f
 f54:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f58:	a9 de       	rcall	.-686    	; 0xcac <MIDI_SendCommand>
 f5a:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendLoopEnComm:

000015fe <MIDICTRL_SendLoopEnComm>:
	}
}

void MIDICTRL_SendLoopEnComm()
{
	if(mode == RUNNING)
    15fe:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1602:	81 11       	cpse	r24, r1
    1604:	10 c0       	rjmp	.+32     	; 0x1626 <MIDICTRL_SendLoopEnComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    1606:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	19 f4       	brne	.+6      	; 0x1614 <MIDICTRL_SendLoopEnComm+0x16>
    160e:	ec e0       	ldi	r30, 0x0C	; 12
    1610:	f1 e0       	ldi	r31, 0x01	; 1
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <MIDICTRL_SendLoopEnComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    1614:	ee e8       	ldi	r30, 0x8E	; 142
    1616:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->loopOn, channelNum);
    1618:	60 89       	ldd	r22, Z+16	; 0x10
    161a:	71 89       	ldd	r23, Z+17	; 0x11
    161c:	82 89       	ldd	r24, Z+18	; 0x12
    161e:	93 89       	ldd	r25, Z+19	; 0x13
    1620:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
    1624:	43 db       	rcall	.-2426   	; 0xcac <MIDI_SendCommand>
    1626:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwABComm:

00001628 <MIDICTRL_SendSwABComm>:
	}
}

void MIDICTRL_SendSwABComm()
{
	if(mode == RUNNING)
    1628:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    162c:	81 11       	cpse	r24, r1
    162e:	10 c0       	rjmp	.+32     	; 0x1650 <MIDICTRL_SendSwABComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    1630:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	19 f4       	brne	.+6      	; 0x163e <MIDICTRL_SendSwABComm+0x16>
    1638:	ec e0       	ldi	r30, 0x0C	; 12
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <MIDICTRL_SendSwABComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    163e:	ee e8       	ldi	r30, 0x8E	; 142
    1640:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
    1642:	64 89       	ldd	r22, Z+20	; 0x14
    1644:	75 89       	ldd	r23, Z+21	; 0x15
    1646:	86 89       	ldd	r24, Z+22	; 0x16
    1648:	97 89       	ldd	r25, Z+23	; 0x17
    164a:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
    164e:	2e db       	rcall	.-2468   	; 0xcac <MIDI_SendCommand>
    1650:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

00001442 <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
    1442:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	b1 f4       	brne	.+44     	; 0x1476 <MIDICTRL_StoreUserCommands+0x34>
	{
		commandSet = USER;
    144a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <commandSet>
		
		eeprom_write_word((uint16_t*)0x02, MEMORY_MAGIC_WORD);
    144e:	6b ea       	ldi	r22, 0xAB	; 171
    1450:	7c ea       	ldi	r23, 0xAC	; 172
    1452:	82 e0       	ldi	r24, 0x02	; 2
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	59 d2       	rcall	.+1202   	; 0x190a <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
    1458:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <commandSet>
    145c:	8e e0       	ldi	r24, 0x0E	; 14
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	78 d1       	rcall	.+752    	; 0x1752 <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
    1462:	6c e0       	ldi	r22, 0x0C	; 12
    1464:	71 e0       	ldi	r23, 0x01	; 1
    1466:	80 e8       	ldi	r24, 0x80	; 128
    1468:	28 e1       	ldi	r18, 0x18	; 24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4f e0       	ldi	r20, 0x0F	; 15
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	51 d0       	rcall	.+162    	; 0x1514 <eeprom_write_block>
		
		mode = RUNNING;
    1472:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    1476:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

0000176e <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    176e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	41 f4       	brne	.+16     	; 0x1786 <MIDICTRL_DiscardCommands+0x18>
	{
		commandSet = DEFAULT;
    1776:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <commandSet>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);		
    177a:	60 e0       	ldi	r22, 0x00	; 0
    177c:	8e e0       	ldi	r24, 0x0E	; 14
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	e8 df       	rcall	.-48     	; 0x1752 <eeprom_write_byte>
		mode = RUNNING;
    1782:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    1786:	08 95       	ret

Disassembly of section .text.indicateMidiError:

00001574 <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 255 - 75;
    1574:	84 eb       	ldi	r24, 0xB4	; 180
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    157c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TCCR1B |= 0x05; // psc = 1024, timer on
    1580:	e1 e8       	ldi	r30, 0x81	; 129
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	85 60       	ori	r24, 0x05	; 5
    1588:	80 83       	st	Z, r24
	currentErrBtnId = currentProgBtn;
    158a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
    158e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	setMidiLeds();
    1592:	75 dd       	rcall	.-1302   	; 0x107e <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	87 e0       	ldi	r24, 0x07	; 7
    1598:	1c df       	rcall	.-456    	; 0x13d2 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	88 e0       	ldi	r24, 0x08	; 8
    159e:	19 df       	rcall	.-462    	; 0x13d2 <SH100HW_SetNewLedState>
    15a0:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

000000dc <MIDICTRL_HandleCommand>:
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
	}
}

void MIDICTRL_HandleCommand(const MIDI_Command_t* command)
{
  dc:	cf 92       	push	r12
  de:	df 92       	push	r13
  e0:	ef 92       	push	r14
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	6b 01       	movw	r12, r22
  e8:	e8 2e       	mov	r14, r24
	switch(mode)
  ea:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
  ee:	88 23       	and	r24, r24
  f0:	21 f0       	breq	.+8      	; 0xfa <MIDICTRL_HandleCommand+0x1e>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	09 f4       	brne	.+2      	; 0xf8 <MIDICTRL_HandleCommand+0x1c>
  f6:	8f c0       	rjmp	.+286    	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
  f8:	e1 c0       	rjmp	.+450    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
  fa:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <omniModeEnabled>
  fe:	81 11       	cpse	r24, r1
 100:	0c c0       	rjmp	.+24     	; 0x11a <MIDICTRL_HandleCommand+0x3e>
			{
				if(channelNum != command->channel_type) return;
 102:	ae 2d       	mov	r26, r14
 104:	c6 01       	movw	r24, r12
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	a1 1d       	adc	r26, r1
 10a:	fc 01       	movw	r30, r24
 10c:	94 91       	lpm	r25, Z
 10e:	a7 fd       	sbrc	r26, 7
 110:	90 81       	ld	r25, Z
 112:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <channelNum>
 116:	98 13       	cpse	r25, r24
 118:	d1 c0       	rjmp	.+418    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			
			if(muteCommandEnabled)
 11a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <muteCommandEnabled>
 11e:	88 23       	and	r24, r24
 120:	a9 f0       	breq	.+42     	; 0x14c <MIDICTRL_HandleCommand+0x70>
			{
				if(isEqualCommands(command, &muteCommand)) 
 122:	28 ed       	ldi	r18, 0xD8	; 216
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	8e 2d       	mov	r24, r14
 12a:	b6 01       	movw	r22, r12
 12c:	d5 d8       	rcall	.-3670   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>
 12e:	88 23       	and	r24, r24
 130:	69 f0       	breq	.+26     	; 0x14c <MIDICTRL_HandleCommand+0x70>
				{
					if((command->data2>63) ? 1 : 0) SH100CTRL_MuteAmp();
 132:	ae 2d       	mov	r26, r14
 134:	c6 01       	movw	r24, r12
 136:	03 96       	adiw	r24, 0x03	; 3
 138:	a1 1d       	adc	r26, r1
 13a:	fc 01       	movw	r30, r24
 13c:	84 91       	lpm	r24, Z
 13e:	a7 fd       	sbrc	r26, 7
 140:	80 81       	ld	r24, Z
 142:	80 34       	cpi	r24, 0x40	; 64
 144:	10 f0       	brcs	.+4      	; 0x14a <MIDICTRL_HandleCommand+0x6e>
 146:	d8 db       	rcall	.-2128   	; 0xfffff8f8 <__eeprom_end+0xff7ef8f8>
 148:	01 c0       	rjmp	.+2      	; 0x14c <MIDICTRL_HandleCommand+0x70>
					else SH100CTRL_UnmuteAmp();
 14a:	a9 db       	rcall	.-2222   	; 0xfffff89e <__eeprom_end+0xff7ef89e>
				}
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 14c:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	19 f4       	brne	.+6      	; 0x15a <MIDICTRL_HandleCommand+0x7e>
 154:	cc e0       	ldi	r28, 0x0C	; 12
 156:	d1 e0       	ldi	r29, 0x01	; 1
 158:	02 c0       	rjmp	.+4      	; 0x15e <MIDICTRL_HandleCommand+0x82>
			else currentCommandBlock = &defaultCommands;
 15a:	ce e8       	ldi	r28, 0x8E	; 142
 15c:	d1 e0       	ldi	r29, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, &(currentCommandBlock->channel1))) 
 15e:	9e 01       	movw	r18, r28
 160:	40 e8       	ldi	r20, 0x80	; 128
 162:	8e 2d       	mov	r24, r14
 164:	b6 01       	movw	r22, r12
 166:	b8 d8       	rcall	.-3728   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>
 168:	88 23       	and	r24, r24
 16a:	19 f0       	breq	.+6      	; 0x172 <MIDICTRL_HandleCommand+0x96>
			{
				SH100CTRL_SwChannel(0); 
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	30 da       	rcall	.-2976   	; 0xfffff5d0 <__eeprom_end+0xff7ef5d0>
				return;
 170:	a5 c0       	rjmp	.+330    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->channel2))) 
 172:	9e 01       	movw	r18, r28
 174:	2c 5f       	subi	r18, 0xFC	; 252
 176:	3f 4f       	sbci	r19, 0xFF	; 255
 178:	40 e8       	ldi	r20, 0x80	; 128
 17a:	8e 2d       	mov	r24, r14
 17c:	b6 01       	movw	r22, r12
 17e:	ac d8       	rcall	.-3752   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>
 180:	88 23       	and	r24, r24
 182:	19 f0       	breq	.+6      	; 0x18a <MIDICTRL_HandleCommand+0xae>
			{
				SH100CTRL_SwChannel(1); 
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	24 da       	rcall	.-3000   	; 0xfffff5d0 <__eeprom_end+0xff7ef5d0>
				return;
 188:	99 c0       	rjmp	.+306    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->channel3))) 
 18a:	9e 01       	movw	r18, r28
 18c:	28 5f       	subi	r18, 0xF8	; 248
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	8e 2d       	mov	r24, r14
 194:	b6 01       	movw	r22, r12
 196:	a0 d8       	rcall	.-3776   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>
 198:	88 23       	and	r24, r24
 19a:	19 f0       	breq	.+6      	; 0x1a2 <MIDICTRL_HandleCommand+0xc6>
			{
				SH100CTRL_SwChannel(2); 
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	18 da       	rcall	.-3024   	; 0xfffff5d0 <__eeprom_end+0xff7ef5d0>
				return;
 1a0:	8d c0       	rjmp	.+282    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->channel4))) 
 1a2:	9e 01       	movw	r18, r28
 1a4:	24 5f       	subi	r18, 0xF4	; 244
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	40 e8       	ldi	r20, 0x80	; 128
 1aa:	8e 2d       	mov	r24, r14
 1ac:	b6 01       	movw	r22, r12
 1ae:	94 d8       	rcall	.-3800   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>
 1b0:	88 23       	and	r24, r24
 1b2:	19 f0       	breq	.+6      	; 0x1ba <MIDICTRL_HandleCommand+0xde>
			{
				SH100CTRL_SwChannel(3); 
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0c da       	rcall	.-3048   	; 0xfffff5d0 <__eeprom_end+0xff7ef5d0>
				return;
 1b8:	81 c0       	rjmp	.+258    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}		
			if(isEqualCommands(command, &(currentCommandBlock->loopOn))) 
 1ba:	9e 01       	movw	r18, r28
 1bc:	20 5f       	subi	r18, 0xF0	; 240
 1be:	3f 4f       	sbci	r19, 0xFF	; 255
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	8e 2d       	mov	r24, r14
 1c4:	b6 01       	movw	r22, r12
 1c6:	88 d8       	rcall	.-3824   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>
 1c8:	88 23       	and	r24, r24
 1ca:	71 f0       	breq	.+28     	; 0x1e8 <MIDICTRL_HandleCommand+0x10c>
			{
				SH100CTRL_SetLoop((command->data2>63) ? 1 : 0); 
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	c8 0e       	add	r12, r24
 1d0:	d1 1c       	adc	r13, r1
 1d2:	e1 1c       	adc	r14, r1
 1d4:	f6 01       	movw	r30, r12
 1d6:	94 91       	lpm	r25, Z
 1d8:	e7 fc       	sbrc	r14, 7
 1da:	90 81       	ld	r25, Z
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 34       	cpi	r25, 0x40	; 64
 1e0:	08 f4       	brcc	.+2      	; 0x1e4 <MIDICTRL_HandleCommand+0x108>
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	36 da       	rcall	.-2964   	; 0xfffff652 <__eeprom_end+0xff7ef652>
				return;
 1e6:	6a c0       	rjmp	.+212    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			}
			if(isEqualCommands(command, &(currentCommandBlock->outAB))) 
 1e8:	64 96       	adiw	r28, 0x14	; 20
 1ea:	9e 01       	movw	r18, r28
 1ec:	40 e8       	ldi	r20, 0x80	; 128
 1ee:	8e 2d       	mov	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	72 d8       	rcall	.-3868   	; 0xfffff2d8 <__eeprom_end+0xff7ef2d8>
 1f4:	88 23       	and	r24, r24
 1f6:	09 f4       	brne	.+2      	; 0x1fa <MIDICTRL_HandleCommand+0x11e>
 1f8:	61 c0       	rjmp	.+194    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			{
				SH100CTRL_SetAB((command->data2>63) ? 1 : 0); 
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	c8 0e       	add	r12, r24
 1fe:	d1 1c       	adc	r13, r1
 200:	e1 1c       	adc	r14, r1
 202:	f6 01       	movw	r30, r12
 204:	94 91       	lpm	r25, Z
 206:	e7 fc       	sbrc	r14, 7
 208:	90 81       	ld	r25, Z
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 34       	cpi	r25, 0x40	; 64
 20e:	08 f4       	brcc	.+2      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	5c da       	rcall	.-2888   	; 0xfffff6cc <__eeprom_end+0xff7ef6cc>
				return;
 214:	53 c0       	rjmp	.+166    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command->status == MIDI_COMM_PROGRAM_CHANGE)
 216:	f6 01       	movw	r30, r12
 218:	84 91       	lpm	r24, Z
 21a:	e7 fc       	sbrc	r14, 7
 21c:	80 81       	ld	r24, Z
 21e:	8c 30       	cpi	r24, 0x0C	; 12
 220:	41 f5       	brne	.+80     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
			{
				switch(currentProgBtn)
 222:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	69 f0       	breq	.+26     	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 22a:	28 f0       	brcs	.+10     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	89 f0       	breq	.+34     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	b1 f0       	breq	.+44     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 234:	1c c0       	rjmp	.+56     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), command, MIDI_PROG_BTN_CH1); break;
 236:	20 e0       	ldi	r18, 0x00	; 0
 238:	6e 2d       	mov	r22, r14
 23a:	a6 01       	movw	r20, r12
 23c:	8c e0       	ldi	r24, 0x0C	; 12
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	bb d7       	rcall	.+3958   	; 0x11b8 <programmBtn>
 242:	3c c0       	rjmp	.+120    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), command, MIDI_PROG_BTN_CH2); break;
 244:	21 e0       	ldi	r18, 0x01	; 1
 246:	6e 2d       	mov	r22, r14
 248:	a6 01       	movw	r20, r12
 24a:	80 e1       	ldi	r24, 0x10	; 16
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	b4 d7       	rcall	.+3944   	; 0x11b8 <programmBtn>
 250:	35 c0       	rjmp	.+106    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), command, MIDI_PROG_BTN_CH3); break;
 252:	22 e0       	ldi	r18, 0x02	; 2
 254:	6e 2d       	mov	r22, r14
 256:	a6 01       	movw	r20, r12
 258:	84 e1       	ldi	r24, 0x14	; 20
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	ad d7       	rcall	.+3930   	; 0x11b8 <programmBtn>
 25e:	2e c0       	rjmp	.+92     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), command, MIDI_PROG_BTN_CH4); break;
 260:	23 e0       	ldi	r18, 0x03	; 3
 262:	6e 2d       	mov	r22, r14
 264:	a6 01       	movw	r20, r12
 266:	88 e1       	ldi	r24, 0x18	; 24
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	a6 d7       	rcall	.+3916   	; 0x11b8 <programmBtn>
 26c:	27 c0       	rjmp	.+78     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					default: indicateMidiError(); break; 
 26e:	82 d9       	rcall	.-3324   	; 0xfffff574 <__eeprom_end+0xff7ef574>
 270:	25 c0       	rjmp	.+74     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
				}
			}
			else if(command->status == MIDI_COMM_CONTROL_CHANGE)
 272:	8b 30       	cpi	r24, 0x0B	; 11
 274:	11 f5       	brne	.+68     	; 0x2ba <__EEPROM_REGION_LENGTH__+0xba>
			{
				if(command->data1 == muteCommand.data1)
 276:	ae 2d       	mov	r26, r14
 278:	c6 01       	movw	r24, r12
 27a:	02 96       	adiw	r24, 0x02	; 2
 27c:	a1 1d       	adc	r26, r1
 27e:	fc 01       	movw	r30, r24
 280:	84 91       	lpm	r24, Z
 282:	a7 fd       	sbrc	r26, 7
 284:	80 81       	ld	r24, Z
 286:	87 30       	cpi	r24, 0x07	; 7
 288:	11 f4       	brne	.+4      	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
				{
					indicateMidiError();
 28a:	74 d9       	rcall	.-3352   	; 0xfffff574 <__eeprom_end+0xff7ef574>
 28c:	17 c0       	rjmp	.+46     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
				}
				else
				{
					switch(currentProgBtn)
 28e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
 292:	84 30       	cpi	r24, 0x04	; 4
 294:	49 f0       	breq	.+18     	; 0x2a8 <__EEPROM_REGION_LENGTH__+0xa8>
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	71 f4       	brne	.+28     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), command, MIDI_PROG_BTN_AB); break;
 29a:	25 e0       	ldi	r18, 0x05	; 5
 29c:	6e 2d       	mov	r22, r14
 29e:	a6 01       	movw	r20, r12
 2a0:	80 e2       	ldi	r24, 0x20	; 32
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	89 d7       	rcall	.+3858   	; 0x11b8 <programmBtn>
 2a6:	0a c0       	rjmp	.+20     	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), command, MIDI_PROG_BTN_LOOP); break;
 2a8:	24 e0       	ldi	r18, 0x04	; 4
 2aa:	6e 2d       	mov	r22, r14
 2ac:	a6 01       	movw	r20, r12
 2ae:	8c e1       	ldi	r24, 0x1C	; 28
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	82 d7       	rcall	.+3844   	; 0x11b8 <programmBtn>
 2b4:	03 c0       	rjmp	.+6      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
						default: indicateMidiError(); break;
 2b6:	5e d9       	rcall	.-3396   	; 0xfffff574 <__eeprom_end+0xff7ef574>
 2b8:	01 c0       	rjmp	.+2      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
					}
				}
			}
			else
			{
				indicateMidiError();
 2ba:	5c d9       	rcall	.-3400   	; 0xfffff574 <__eeprom_end+0xff7ef574>
			}			
			break;
		}
	}	
}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	ef 90       	pop	r14
 2c2:	df 90       	pop	r13
 2c4:	cf 90       	pop	r12
 2c6:	08 95       	ret

Disassembly of section .text.__vector_13:

00001022 <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	4f 93       	push	r20
    1032:	5f 93       	push	r21
    1034:	6f 93       	push	r22
    1036:	7f 93       	push	r23
    1038:	8f 93       	push	r24
    103a:	9f 93       	push	r25
    103c:	af 93       	push	r26
    103e:	bf 93       	push	r27
    1040:	ef 93       	push	r30
    1042:	ff 93       	push	r31
	TCCR1B |= 0x00; // psc = 0, timer off
    1044:	e1 e8       	ldi	r30, 0x81	; 129
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	80 83       	st	Z, r24
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	setMidiLeds();
    1052:	15 d0       	rcall	.+42     	; 0x107e <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
    1054:	87 e0       	ldi	r24, 0x07	; 7
    1056:	26 d3       	rcall	.+1612   	; 0x16a4 <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
    1058:	88 e0       	ldi	r24, 0x08	; 8
    105a:	24 d3       	rcall	.+1608   	; 0x16a4 <SH100HW_SetPreviousLedState>
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	0f 90       	pop	r0
    107a:	1f 90       	pop	r1
    107c:	18 95       	reti

Disassembly of section .text.handleRealTimeStatus:

00001910 <handleRealTimeStatus>:
	HADLE_SYS_EX
}state = RESET;

void handleRealTimeStatus(MIDI_Status_t status)
{
	UART_PushWord(status);
    1910:	c0 dc       	rcall	.-1664   	; 0x1292 <UART_PushWord>
    1912:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

0000080a <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 80a:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <state>
 80e:	8e 2f       	mov	r24, r30
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	87 30       	cpi	r24, 0x07	; 7
 814:	91 05       	cpc	r25, r1
 816:	08 f0       	brcs	.+2      	; 0x81a <MIDI_ParserTask+0x10>
 818:	98 c0       	rjmp	.+304    	; 0x94a <MIDI_ParserTask+0x140>
 81a:	fc 01       	movw	r30, r24
 81c:	e6 5e       	subi	r30, 0xE6	; 230
 81e:	ff 4f       	sbci	r31, 0xFF	; 255
 820:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 822:	e8 e2       	ldi	r30, 0x28	; 40
 824:	f1 e0       	ldi	r31, 0x01	; 1
 826:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 828:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 82a:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 82c:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <currentStatusType>
			isSecondDataWord = false;
 830:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
			state = WAIT_WORD;
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 83a:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 83c:	16 d8       	rcall	.-4052   	; 0xfffff86a <__eeprom_end+0xff7ef86a>
 83e:	88 23       	and	r24, r24
 840:	09 f4       	brne	.+2      	; 0x844 <MIDI_ParserTask+0x3a>
 842:	83 c0       	rjmp	.+262    	; 0x94a <MIDI_ParserTask+0x140>
			{
				recievedWord = UART_PopWord();
 844:	34 d6       	rcall	.+3176   	; 0x14ae <UART_PopWord>
 846:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 84a:	1d d8       	rcall	.-4038   	; 0xfffff886 <__eeprom_end+0xff7ef886>
 84c:	88 23       	and	r24, r24
 84e:	21 f0       	breq	.+8      	; 0x858 <MIDI_ParserTask+0x4e>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
 850:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 854:	5d d8       	rcall	.-3910   	; 0xfffff910 <__eeprom_end+0xff7ef910>
					return;
 856:	08 95       	ret
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 858:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 85c:	36 d8       	rcall	.-3988   	; 0xfffff8ca <__eeprom_end+0xff7ef8ca>
 85e:	88 23       	and	r24, r24
 860:	21 f0       	breq	.+8      	; 0x86a <MIDI_ParserTask+0x60>
				{					
					state = DISPATCH_STATUS;
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 868:	20 c0       	rjmp	.+64     	; 0x8aa <MIDI_ParserTask+0xa0>
				}
				else
				{
					switch(currentStatusType)
 86a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <currentStatusType>
 86e:	82 30       	cpi	r24, 0x02	; 2
 870:	49 f0       	breq	.+18     	; 0x884 <MIDI_ParserTask+0x7a>
 872:	18 f4       	brcc	.+6      	; 0x87a <MIDI_ParserTask+0x70>
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	51 f0       	breq	.+20     	; 0x88c <MIDI_ParserTask+0x82>
 878:	15 c0       	rjmp	.+42     	; 0x8a4 <MIDI_ParserTask+0x9a>
 87a:	84 30       	cpi	r24, 0x04	; 4
 87c:	59 f0       	breq	.+22     	; 0x894 <MIDI_ParserTask+0x8a>
 87e:	85 30       	cpi	r24, 0x05	; 5
 880:	69 f0       	breq	.+26     	; 0x89c <MIDI_ParserTask+0x92>
 882:	10 c0       	rjmp	.+32     	; 0x8a4 <MIDI_ParserTask+0x9a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 884:	84 e0       	ldi	r24, 0x04	; 4
 886:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 88a:	0f c0       	rjmp	.+30     	; 0x8aa <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 88c:	83 e0       	ldi	r24, 0x03	; 3
 88e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 892:	0b c0       	rjmp	.+22     	; 0x8aa <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 894:	85 e0       	ldi	r24, 0x05	; 5
 896:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 89a:	07 c0       	rjmp	.+14     	; 0x8aa <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 89c:	86 e0       	ldi	r24, 0x06	; 6
 89e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <MIDI_ParserTask+0xa0>
						default: state = WAIT_WORD;
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
					}
				}
				
				if(retranslate)
 8aa:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <retranslate>
 8ae:	88 23       	and	r24, r24
 8b0:	09 f4       	brne	.+2      	; 0x8b4 <MIDI_ParserTask+0xaa>
 8b2:	4b c0       	rjmp	.+150    	; 0x94a <MIDI_ParserTask+0x140>
				{
					UART_PushWord(recievedWord);
 8b4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 8b8:	ec d4       	rcall	.+2520   	; 0x1292 <UART_PushWord>
 8ba:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 8bc:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <recievedWord>
 8c0:	89 2f       	mov	r24, r25
 8c2:	82 95       	swap	r24
 8c4:	8f 70       	andi	r24, 0x0F	; 15
 8c6:	e8 e2       	ldi	r30, 0x28	; 40
 8c8:	f1 e0       	ldi	r31, 0x01	; 1
 8ca:	80 83       	st	Z, r24
			currentCommand.channel_type = recievedWord & 0x0F;
 8cc:	9f 70       	andi	r25, 0x0F	; 15
 8ce:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 8d0:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 8d2:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 8d4:	9f d2       	rcall	.+1342   	; 0xe14 <MIDI_GetStatusType>
 8d6:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <currentStatusType>
			isSecondDataWord = false;
 8da:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
			state = WAIT_WORD;
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 8e4:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 8e6:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isSecondDataWord>
 8ea:	88 23       	and	r24, r24
 8ec:	59 f0       	breq	.+22     	; 0x904 <MIDI_ParserTask+0xfa>
			{
				currentCommand.data2 = recievedWord;
 8ee:	e8 e2       	ldi	r30, 0x28	; 40
 8f0:	f1 e0       	ldi	r31, 0x01	; 1
 8f2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 8f6:	83 83       	std	Z+3, r24	; 0x03
				isSecondDataWord = false;			
 8f8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
				MIDICTRL_HandleCommand(&currentCommand);
 8fc:	bf 01       	movw	r22, r30
 8fe:	80 e8       	ldi	r24, 0x80	; 128
 900:	ed db       	rcall	.-2086   	; 0xdc <MIDICTRL_HandleCommand>
 902:	07 c0       	rjmp	.+14     	; 0x912 <MIDI_ParserTask+0x108>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 904:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 908:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <currentCommand+0x2>
				isSecondDataWord = true;
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <isSecondDataWord>
			}
			state = WAIT_WORD;
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 918:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 91a:	e8 e2       	ldi	r30, 0x28	; 40
 91c:	f1 e0       	ldi	r31, 0x01	; 1
 91e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 922:	82 83       	std	Z+2, r24	; 0x02
			MIDICTRL_HandleCommand(&currentCommand);
 924:	bf 01       	movw	r22, r30
 926:	80 e8       	ldi	r24, 0x80	; 128
 928:	d9 db       	rcall	.-2126   	; 0xdc <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 930:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 938:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 93a:	e8 e2       	ldi	r30, 0x28	; 40
 93c:	f1 e0       	ldi	r31, 0x01	; 1
 93e:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 940:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 942:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 94a:	08 95       	ret

Disassembly of section .text.MIDI_SetRetranslateState:

000018f2 <MIDI_SetRetranslateState>:
	}
}

void MIDI_SetRetranslateState(bool enabled)
{
	retranslate = enabled;
    18f2:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <retranslate>
    18f6:	08 95       	ret

Disassembly of section .text.MIDI_SendCommand:

00000cac <MIDI_SendCommand>:
}

void MIDI_SendCommand(MIDI_Command_t command, uint8_t channel)
{
 cac:	0f 93       	push	r16
 cae:	1f 93       	push	r17
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	c6 2f       	mov	r28, r22
 cb6:	18 2f       	mov	r17, r24
 cb8:	09 2f       	mov	r16, r25
 cba:	d4 2f       	mov	r29, r20
	switch(MIDI_GetStatusType(command.status))
 cbc:	86 2f       	mov	r24, r22
 cbe:	aa d0       	rcall	.+340    	; 0xe14 <MIDI_GetStatusType>
 cc0:	83 30       	cpi	r24, 0x03	; 3
 cc2:	59 f0       	breq	.+22     	; 0xcda <MIDI_SendCommand+0x2e>
 cc4:	28 f4       	brcc	.+10     	; 0xcd0 <MIDI_SendCommand+0x24>
 cc6:	81 30       	cpi	r24, 0x01	; 1
 cc8:	59 f0       	breq	.+22     	; 0xce0 <MIDI_SendCommand+0x34>
 cca:	82 30       	cpi	r24, 0x02	; 2
 ccc:	a1 f0       	breq	.+40     	; 0xcf6 <MIDI_SendCommand+0x4a>
 cce:	25 c0       	rjmp	.+74     	; 0xd1a <MIDI_SendCommand+0x6e>
 cd0:	84 30       	cpi	r24, 0x04	; 4
 cd2:	f1 f0       	breq	.+60     	; 0xd10 <MIDI_SendCommand+0x64>
 cd4:	85 30       	cpi	r24, 0x05	; 5
 cd6:	f9 f0       	breq	.+62     	; 0xd16 <MIDI_SendCommand+0x6a>
 cd8:	20 c0       	rjmp	.+64     	; 0xd1a <MIDI_SendCommand+0x6e>
	{
		case MIDI_TYPE_REAL_TIME:
		{
			// second nymble!
			UART_PushWord(command.status);
 cda:	8c 2f       	mov	r24, r28
 cdc:	da d2       	rcall	.+1460   	; 0x1292 <UART_PushWord>
			break;
 cde:	1d c0       	rjmp	.+58     	; 0xd1a <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_ONE_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 ce0:	80 e1       	ldi	r24, 0x10	; 16
 ce2:	c8 9f       	mul	r28, r24
 ce4:	b0 01       	movw	r22, r0
 ce6:	11 24       	eor	r1, r1
 ce8:	8d 2f       	mov	r24, r29
 cea:	8f 70       	andi	r24, 0x0F	; 15
 cec:	86 2b       	or	r24, r22
 cee:	d1 d2       	rcall	.+1442   	; 0x1292 <UART_PushWord>
			UART_PushWord(command.data1);
 cf0:	81 2f       	mov	r24, r17
 cf2:	cf d2       	rcall	.+1438   	; 0x1292 <UART_PushWord>
			break;
 cf4:	12 c0       	rjmp	.+36     	; 0xd1a <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_TWO_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 cf6:	80 e1       	ldi	r24, 0x10	; 16
 cf8:	c8 9f       	mul	r28, r24
 cfa:	b0 01       	movw	r22, r0
 cfc:	11 24       	eor	r1, r1
 cfe:	8d 2f       	mov	r24, r29
 d00:	8f 70       	andi	r24, 0x0F	; 15
 d02:	86 2b       	or	r24, r22
 d04:	c6 d2       	rcall	.+1420   	; 0x1292 <UART_PushWord>
			UART_PushWord(command.data1);
 d06:	81 2f       	mov	r24, r17
 d08:	c4 d2       	rcall	.+1416   	; 0x1292 <UART_PushWord>
			UART_PushWord(command.data2);
 d0a:	80 2f       	mov	r24, r16
 d0c:	c2 d2       	rcall	.+1412   	; 0x1292 <UART_PushWord>
			break;
 d0e:	05 c0       	rjmp	.+10     	; 0xd1a <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_START_SYS_EX:
		{
			// second nymble!
			UART_PushWord(command.status);
 d10:	8c 2f       	mov	r24, r28
 d12:	bf d2       	rcall	.+1406   	; 0x1292 <UART_PushWord>
			break;
 d14:	02 c0       	rjmp	.+4      	; 0xd1a <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_STOP_SYS_EX:
		{
			// second nymble!!!
			UART_PushWord(command.status);
 d16:	8c 2f       	mov	r24, r28
 d18:	bc d2       	rcall	.+1400   	; 0x1292 <UART_PushWord>
			break;
		}
		case MIDI_TYPE_UNDEFINED: break;
	}
 d1a:	df 91       	pop	r29
 d1c:	cf 91       	pop	r28
 d1e:	1f 91       	pop	r17
 d20:	0f 91       	pop	r16
 d22:	08 95       	ret

Disassembly of section .text.setChannelLeds:

00001714 <setChannelLeds>:
	SH100CTRL_SetAB(ampState.swAB);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	5c de       	rcall	.-840    	; 0x13d2 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	59 de       	rcall	.-846    	; 0x13d2 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    1720:	60 e0       	ldi	r22, 0x00	; 0
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	56 de       	rcall	.-852    	; 0x13d2 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    1726:	60 e0       	ldi	r22, 0x00	; 0
    1728:	83 e0       	ldi	r24, 0x03	; 3
    172a:	53 de       	rcall	.-858    	; 0x13d2 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ampState>
    1732:	4f de       	rcall	.-866    	; 0x13d2 <SH100HW_SetNewLedState>
    1734:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

000015a2 <SH100CTRL_SetAmpLeds>:
}

void SH100CTRL_SetAmpLeds()
{
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
	setChannelLeds();
    15a6:	b6 d0       	rcall	.+364    	; 0x1714 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    15a8:	cd e2       	ldi	r28, 0x2D	; 45
    15aa:	d1 e0       	ldi	r29, 0x01	; 1
    15ac:	e8 81       	ld	r30, Y
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	e3 5d       	subi	r30, 0xD3	; 211
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	61 81       	ldd	r22, Z+1	; 0x01
    15b6:	84 e0       	ldi	r24, 0x04	; 4
    15b8:	0c df       	rcall	.-488    	; 0x13d2 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    15ba:	6d 81       	ldd	r22, Y+5	; 0x05
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	68 27       	eor	r22, r24
    15c0:	85 e0       	ldi	r24, 0x05	; 5
    15c2:	07 df       	rcall	.-498    	; 0x13d2 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    15c4:	6d 81       	ldd	r22, Y+5	; 0x05
    15c6:	86 e0       	ldi	r24, 0x06	; 6
    15c8:	04 df       	rcall	.-504    	; 0x13d2 <SH100HW_SetNewLedState>
}
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	08 95       	ret

Disassembly of section .text.SH100CTRL_StoreAmpState:

00001736 <SH100CTRL_StoreAmpState>:

void SH100CTRL_StoreAmpState()
{
	eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
    1736:	6b ea       	ldi	r22, 0xAB	; 171
    1738:	7c ea       	ldi	r23, 0xAC	; 172
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	e5 d0       	rcall	.+458    	; 0x190a <eeprom_write_word>
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
    1740:	6d e2       	ldi	r22, 0x2D	; 45
    1742:	71 e0       	ldi	r23, 0x01	; 1
    1744:	80 e8       	ldi	r24, 0x80	; 128
    1746:	26 e0       	ldi	r18, 0x06	; 6
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	48 e0       	ldi	r20, 0x08	; 8
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	e2 de       	rcall	.-572    	; 0x1514 <eeprom_write_block>
    1750:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetLoop:

00001652 <SH100CTRL_SetLoop>:
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
}

void SH100CTRL_SetLoop(bool en)
{
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
	ampState.loopOn[ampState.channelNum] = en;
    1656:	cd e2       	ldi	r28, 0x2D	; 45
    1658:	d1 e0       	ldi	r29, 0x01	; 1
    165a:	e8 81       	ld	r30, Y
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	e3 5d       	subi	r30, 0xD3	; 211
    1660:	fe 4f       	sbci	r31, 0xFE	; 254
    1662:	81 83       	std	Z+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn[ampState.channelNum]);
    1664:	9e d0       	rcall	.+316    	; 0x17a2 <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    1666:	e8 81       	ld	r30, Y
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	e3 5d       	subi	r30, 0xD3	; 211
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	61 81       	ldd	r22, Z+1	; 0x01
    1670:	84 e0       	ldi	r24, 0x04	; 4
    1672:	af de       	rcall	.-674    	; 0x13d2 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendLoopEnComm();
    1674:	c4 df       	rcall	.-120    	; 0x15fe <MIDICTRL_SendLoopEnComm>
}
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

000015d0 <SH100CTRL_SwChannel>:
		SH100CTRL_SwLoop();
	}
}

void SH100CTRL_SwChannel(uint8_t chNum)
{
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	c8 2f       	mov	r28, r24
	ampState.channelNum = chNum;
    15d8:	0d e2       	ldi	r16, 0x2D	; 45
    15da:	11 e0       	ldi	r17, 0x01	; 1
    15dc:	d8 01       	movw	r26, r16
    15de:	8c 93       	st	X, r24
	
	SH100HW_SetCh(chNum);
    15e0:	77 dd       	rcall	.-1298   	; 0x10d0 <SH100HW_SetCh>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    15e2:	d8 01       	movw	r26, r16
    15e4:	ec 91       	ld	r30, X
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	e3 5d       	subi	r30, 0xD3	; 211
    15ea:	fe 4f       	sbci	r31, 0xFE	; 254
    15ec:	81 81       	ldd	r24, Z+1	; 0x01
    15ee:	31 d0       	rcall	.+98     	; 0x1652 <SH100CTRL_SetLoop>
	setChannelLeds();
    15f0:	91 d0       	rcall	.+290    	; 0x1714 <setChannelLeds>
	
	MIDICTRL_SendSwChComm(chNum);
    15f2:	8c 2f       	mov	r24, r28
    15f4:	7e dc       	rcall	.-1796   	; 0xef2 <MIDICTRL_SendSwChComm>
}
    15f6:	cf 91       	pop	r28
    15f8:	1f 91       	pop	r17
    15fa:	0f 91       	pop	r16
    15fc:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

00001800 <SH100CTRL_SwLoop>:

void SH100CTRL_SwLoop()
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
    1800:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <ampState>
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	e3 5d       	subi	r30, 0xD3	; 211
    1808:	fe 4f       	sbci	r31, 0xFE	; 254
    180a:	91 81       	ldd	r25, Z+1	; 0x01
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 27       	eor	r24, r25
    1810:	20 df       	rcall	.-448    	; 0x1652 <SH100CTRL_SetLoop>
    1812:	08 95       	ret

Disassembly of section .text.SH100CTRL_BtnSwChannel:

0000184c <SH100CTRL_BtnSwChannel>:
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
}

void SH100CTRL_BtnSwChannel(uint8_t chNum)
{
	if(ampState.channelNum != chNum)
    184c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ampState>
    1850:	98 17       	cp	r25, r24
    1852:	11 f0       	breq	.+4      	; 0x1858 <SH100CTRL_BtnSwChannel+0xc>
	{
		SH100CTRL_SwChannel(chNum);
    1854:	bd de       	rcall	.-646    	; 0x15d0 <SH100CTRL_SwChannel>
    1856:	08 95       	ret
	}
	else
	{
		SH100CTRL_SwLoop();
    1858:	d3 df       	rcall	.-90     	; 0x1800 <SH100CTRL_SwLoop>
    185a:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAB:

000016cc <SH100CTRL_SetAB>:
{
	SH100CTRL_SetAB(!ampState.swAB);
}

void SH100CTRL_SetAB(bool isB)
{
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
	ampState.swAB = isB;
    16d0:	cd e2       	ldi	r28, 0x2D	; 45
    16d2:	d1 e0       	ldi	r29, 0x01	; 1
    16d4:	8d 83       	std	Y+5, r24	; 0x05
	SH100HW_SetAB(ampState.swAB);
    16d6:	13 d1       	rcall	.+550    	; 0x18fe <SH100HW_SetAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    16d8:	6d 81       	ldd	r22, Y+5	; 0x05
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	68 27       	eor	r22, r24
    16de:	85 e0       	ldi	r24, 0x05	; 5
    16e0:	78 de       	rcall	.-784    	; 0x13d2 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    16e2:	6d 81       	ldd	r22, Y+5	; 0x05
    16e4:	86 e0       	ldi	r24, 0x06	; 6
    16e6:	75 de       	rcall	.-790    	; 0x13d2 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendSwABComm();
    16e8:	9f df       	rcall	.-194    	; 0x1628 <MIDICTRL_SendSwABComm>
}
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

000014e2 <SH100CTRL_SetAmpState>:
	
	SH100CTRL_SetAmpState(&ampState);
}

void SH100CTRL_SetAmpState(const SH100_State_t* state)
{
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	98 2f       	mov	r25, r24
	ampState = *state;
    14e8:	86 e0       	ldi	r24, 0x06	; 6
    14ea:	e6 2f       	mov	r30, r22
    14ec:	f7 2f       	mov	r31, r23
    14ee:	ad e2       	ldi	r26, 0x2D	; 45
    14f0:	b1 e0       	ldi	r27, 0x01	; 1
    14f2:	79 2f       	mov	r23, r25
    14f4:	49 d1       	rcall	.+658    	; 0x1788 <__movmemx_qi>
	
	SH100CTRL_SwChannel(ampState.channelNum);
    14f6:	cd e2       	ldi	r28, 0x2D	; 45
    14f8:	d1 e0       	ldi	r29, 0x01	; 1
    14fa:	88 81       	ld	r24, Y
    14fc:	69 d0       	rcall	.+210    	; 0x15d0 <SH100CTRL_SwChannel>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    14fe:	e8 81       	ld	r30, Y
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	e3 5d       	subi	r30, 0xD3	; 211
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	81 81       	ldd	r24, Z+1	; 0x01
    1508:	a4 d0       	rcall	.+328    	; 0x1652 <SH100CTRL_SetLoop>
	SH100CTRL_SetAB(ampState.swAB);
    150a:	8d 81       	ldd	r24, Y+5	; 0x05
    150c:	df d0       	rcall	.+446    	; 0x16cc <SH100CTRL_SetAB>
}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000d24 <SH100CTRL_Init>:
SH100_State_t ampState;

void setChannelLeds();

void SH100CTRL_Init()
{
 d24:	cf 93       	push	r28
 d26:	df 93       	push	r29
 d28:	00 d0       	rcall	.+0      	; 0xd2a <SH100CTRL_Init+0x6>
 d2a:	00 d0       	rcall	.+0      	; 0xd2c <SH100CTRL_Init+0x8>
 d2c:	00 d0       	rcall	.+0      	; 0xd2e <SH100CTRL_Init+0xa>
 d2e:	cd b7       	in	r28, 0x3d	; 61
 d30:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 d32:	60 e0       	ldi	r22, 0x00	; 0
 d34:	70 e0       	ldi	r23, 0x00	; 0
 d36:	80 e0       	ldi	r24, 0x00	; 0
 d38:	b8 d5       	rcall	.+2928   	; 0x18aa <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 d3a:	8b 3a       	cpi	r24, 0xAB	; 171
 d3c:	9c 4a       	sbci	r25, 0xAC	; 172
 d3e:	91 f4       	brne	.+36     	; 0xd64 <SH100CTRL_Init+0x40>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
 d40:	48 e0       	ldi	r20, 0x08	; 8
 d42:	50 e0       	ldi	r21, 0x00	; 0
 d44:	60 e8       	ldi	r22, 0x80	; 128
 d46:	26 e0       	ldi	r18, 0x06	; 6
 d48:	30 e0       	ldi	r19, 0x00	; 0
 d4a:	ce 01       	movw	r24, r28
 d4c:	01 96       	adiw	r24, 0x01	; 1
 d4e:	d0 d4       	rcall	.+2464   	; 0x16f0 <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 d50:	86 e0       	ldi	r24, 0x06	; 6
 d52:	fe 01       	movw	r30, r28
 d54:	31 96       	adiw	r30, 0x01	; 1
 d56:	ad e2       	ldi	r26, 0x2D	; 45
 d58:	b1 e0       	ldi	r27, 0x01	; 1
 d5a:	01 90       	ld	r0, Z+
 d5c:	0d 92       	st	X+, r0
 d5e:	8a 95       	dec	r24
 d60:	e1 f7       	brne	.-8      	; 0xd5a <SH100CTRL_Init+0x36>
 d62:	0f c0       	rjmp	.+30     	; 0xd82 <SH100CTRL_Init+0x5e>
	}
	else
	{
		ampState.channelNum = 0;
 d64:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ampState>
		for(int i=0; i<4; i++)
 d68:	80 e0       	ldi	r24, 0x00	; 0
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	05 c0       	rjmp	.+10     	; 0xd78 <SH100CTRL_Init+0x54>
		{
			ampState.loopOn[i] = false;
 d6e:	fc 01       	movw	r30, r24
 d70:	e3 5d       	subi	r30, 0xD3	; 211
 d72:	fe 4f       	sbci	r31, 0xFE	; 254
 d74:	11 82       	std	Z+1, r1	; 0x01
		ampState = *ampState_ptr;
	}
	else
	{
		ampState.channelNum = 0;
		for(int i=0; i<4; i++)
 d76:	01 96       	adiw	r24, 0x01	; 1
 d78:	84 30       	cpi	r24, 0x04	; 4
 d7a:	91 05       	cpc	r25, r1
 d7c:	c4 f3       	brlt	.-16     	; 0xd6e <SH100CTRL_Init+0x4a>
		{
			ampState.loopOn[i] = false;
		}		
		ampState.swAB = false;		
 d7e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <ampState+0x5>
	}
	
	SH100CTRL_SetAmpState(&ampState);
 d82:	6d e2       	ldi	r22, 0x2D	; 45
 d84:	71 e0       	ldi	r23, 0x01	; 1
 d86:	80 e8       	ldi	r24, 0x80	; 128
 d88:	ac d3       	rcall	.+1880   	; 0x14e2 <SH100CTRL_SetAmpState>
}
 d8a:	26 96       	adiw	r28, 0x06	; 6
 d8c:	0f b6       	in	r0, 0x3f	; 63
 d8e:	f8 94       	cli
 d90:	de bf       	out	0x3e, r29	; 62
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	cd bf       	out	0x3d, r28	; 61
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

00001892 <SH100CTRL_SwAB>:
	MIDICTRL_SendLoopEnComm();
}

void SH100CTRL_SwAB()
{
	SH100CTRL_SetAB(!ampState.swAB);
    1892:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <ampState+0x5>
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	89 27       	eor	r24, r25
    189a:	18 df       	rcall	.-464    	; 0x16cc <SH100CTRL_SetAB>
    189c:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

000018f8 <SH100CTRL_MuteAmp>:
	MIDICTRL_SendSwABComm();
}

void SH100CTRL_MuteAmp()
{
	SH100HW_SetPAState(OUTPUT_MUTE);
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	30 dd       	rcall	.-1440   	; 0x135c <SH100HW_SetPAState>
    18fc:	08 95       	ret

Disassembly of section .text.SH100CTRL_UnmuteAmp:

0000189e <SH100CTRL_UnmuteAmp>:
}

void SH100CTRL_UnmuteAmp()
{
	if(SH100HW_GetOutputJacks() != OUT_NONE)
    189e:	8d df       	rcall	.-230    	; 0x17ba <SH100HW_GetOutputJacks>
    18a0:	88 23       	and	r24, r24
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <SH100CTRL_UnmuteAmp+0xa>
	{
		SH100HW_SetPAState(OUTPUT_ENABLED);	
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	5a dd       	rcall	.-1356   	; 0x135c <SH100HW_SetPAState>
    18a8:	08 95       	ret

Disassembly of section .text.SH100CTRL_CheckOutputJacks:

00000d9c <SH100CTRL_CheckOutputJacks>:
	}		
}

void SH100CTRL_CheckOutputJacks()
{
	if(SH100HW_GetPAFailure()) return;
 d9c:	8c d5       	rcall	.+2840   	; 0x18b6 <SH100HW_GetPAFailure>
 d9e:	81 11       	cpse	r24, r1
 da0:	38 c0       	rjmp	.+112    	; 0xe12 <SH100CTRL_CheckOutputJacks+0x76>
	
	SH100HW_OutputJacks_t outJacksState = SH100HW_GetOutputJacks();
 da2:	0b d5       	rcall	.+2582   	; 0x17ba <SH100HW_GetOutputJacks>
	
	switch(outJacksState)
 da4:	81 30       	cpi	r24, 0x01	; 1
 da6:	89 f0       	breq	.+34     	; 0xdca <SH100CTRL_CheckOutputJacks+0x2e>
 da8:	28 f0       	brcs	.+10     	; 0xdb4 <SH100CTRL_CheckOutputJacks+0x18>
 daa:	82 30       	cpi	r24, 0x02	; 2
 dac:	d9 f0       	breq	.+54     	; 0xde4 <SH100CTRL_CheckOutputJacks+0x48>
 dae:	83 30       	cpi	r24, 0x03	; 3
 db0:	31 f1       	breq	.+76     	; 0xdfe <SH100CTRL_CheckOutputJacks+0x62>
 db2:	08 95       	ret
	{
		case OUT_NONE:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 db4:	92 d5       	rcall	.+2852   	; 0x18da <MIDICTRL_MidiMode>
 db6:	81 11       	cpse	r24, r1
 db8:	06 c0       	rjmp	.+12     	; 0xdc6 <SH100CTRL_CheckOutputJacks+0x2a>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 dba:	60 e0       	ldi	r22, 0x00	; 0
 dbc:	87 e0       	ldi	r24, 0x07	; 7
 dbe:	09 d3       	rcall	.+1554   	; 0x13d2 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 dc0:	61 e0       	ldi	r22, 0x01	; 1
 dc2:	88 e0       	ldi	r24, 0x08	; 8
 dc4:	06 d3       	rcall	.+1548   	; 0x13d2 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 dc6:	98 d5       	rcall	.+2864   	; 0x18f8 <SH100CTRL_MuteAmp>
			break;
 dc8:	08 95       	ret
		}
		case OUT_16OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 dca:	87 d5       	rcall	.+2830   	; 0x18da <MIDICTRL_MidiMode>
 dcc:	81 11       	cpse	r24, r1
 dce:	21 c0       	rjmp	.+66     	; 0xe12 <SH100CTRL_CheckOutputJacks+0x76>
			{
				SH100CTRL_UnmuteAmp();
 dd0:	66 d5       	rcall	.+2764   	; 0x189e <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_16OHM);
 dd2:	81 e0       	ldi	r24, 0x01	; 1
 dd4:	97 d5       	rcall	.+2862   	; 0x1904 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 dd6:	61 e0       	ldi	r22, 0x01	; 1
 dd8:	87 e0       	ldi	r24, 0x07	; 7
 dda:	fb d2       	rcall	.+1526   	; 0x13d2 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 ddc:	60 e0       	ldi	r22, 0x00	; 0
 dde:	88 e0       	ldi	r24, 0x08	; 8
 de0:	f8 d2       	rcall	.+1520   	; 0x13d2 <SH100HW_SetNewLedState>
 de2:	08 95       	ret
			}			
			break;
		}
		case OUT_8OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 de4:	7a d5       	rcall	.+2804   	; 0x18da <MIDICTRL_MidiMode>
 de6:	81 11       	cpse	r24, r1
 de8:	14 c0       	rjmp	.+40     	; 0xe12 <SH100CTRL_CheckOutputJacks+0x76>
			{
				SH100CTRL_UnmuteAmp();
 dea:	59 d5       	rcall	.+2738   	; 0x189e <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_8OHM);
 dec:	80 e0       	ldi	r24, 0x00	; 0
 dee:	8a d5       	rcall	.+2836   	; 0x1904 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 df0:	61 e0       	ldi	r22, 0x01	; 1
 df2:	87 e0       	ldi	r24, 0x07	; 7
 df4:	ee d2       	rcall	.+1500   	; 0x13d2 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 df6:	60 e0       	ldi	r22, 0x00	; 0
 df8:	88 e0       	ldi	r24, 0x08	; 8
 dfa:	eb d2       	rcall	.+1494   	; 0x13d2 <SH100HW_SetNewLedState>
 dfc:	08 95       	ret

			break;
		}
		case OUT_BOTH:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 dfe:	6d d5       	rcall	.+2778   	; 0x18da <MIDICTRL_MidiMode>
 e00:	81 11       	cpse	r24, r1
 e02:	06 c0       	rjmp	.+12     	; 0xe10 <SH100CTRL_CheckOutputJacks+0x74>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 e04:	60 e0       	ldi	r22, 0x00	; 0
 e06:	87 e0       	ldi	r24, 0x07	; 7
 e08:	e4 d2       	rcall	.+1480   	; 0x13d2 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 e0a:	61 e0       	ldi	r22, 0x01	; 1
 e0c:	88 e0       	ldi	r24, 0x08	; 8
 e0e:	e1 d2       	rcall	.+1474   	; 0x13d2 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 e10:	73 d5       	rcall	.+2790   	; 0x18f8 <SH100CTRL_MuteAmp>
 e12:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000f5c <SH100HW_Init>:
void writeShiftRegs(uint16_t data);

bool isPAOk;

void SH100HW_Init()
{
 f5c:	1f 93       	push	r17
 f5e:	cf 93       	push	r28
 f60:	df 93       	push	r29
	isPAOk = false;
 f62:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <isPAOk>
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 f66:	55 b1       	in	r21, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 f68:	84 b1       	in	r24, 0x04	; 4
 f6a:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 f6c:	28 b1       	in	r18, 0x08	; 8
 f6e:	20 61       	ori	r18, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 f70:	97 b1       	in	r25, 0x07	; 7
 f72:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 f74:	3b b1       	in	r19, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 f76:	4a b1       	in	r20, 0x0a	; 10
 f78:	40 6e       	ori	r20, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 f7a:	3b 71       	andi	r19, 0x1B	; 27
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 f7c:	4b 7e       	andi	r20, 0xEB	; 235
 f7e:	4a b9       	out	0x0a, r20	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 f80:	30 61       	ori	r19, 0x10	; 16
 f82:	3b b9       	out	0x0b, r19	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 f84:	9b 7d       	andi	r25, 0xDB	; 219
 f86:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 f88:	21 7d       	andi	r18, 0xD1	; 209
 f8a:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 f8c:	9a 60       	ori	r25, 0x0A	; 10
 f8e:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 f90:	95 2f       	mov	r25, r21
 f92:	90 7d       	andi	r25, 0xD0	; 208
 f94:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 f96:	84 60       	ori	r24, 0x04	; 4
 f98:	84 b9       	out	0x04, r24	; 4
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 f9a:	10 e0       	ldi	r17, 0x00	; 0
 f9c:	0c c0       	rjmp	.+24     	; 0xfb6 <SH100HW_Init+0x5a>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
 f9e:	c1 2f       	mov	r28, r17
 fa0:	d0 e0       	ldi	r29, 0x00	; 0
 fa2:	81 e0       	ldi	r24, 0x01	; 1
 fa4:	90 e0       	ldi	r25, 0x00	; 0
 fa6:	3e dd       	rcall	.-1412   	; 0xa24 <__simple_malloc>
 fa8:	cc 0f       	add	r28, r28
 faa:	dd 1f       	adc	r29, r29
 fac:	c7 5b       	subi	r28, 0xB7	; 183
 fae:	de 4f       	sbci	r29, 0xFE	; 254
 fb0:	99 83       	std	Y+1, r25	; 0x01
 fb2:	88 83       	st	Y, r24
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 fb4:	1f 5f       	subi	r17, 0xFF	; 255
 fb6:	12 31       	cpi	r17, 0x12	; 18
 fb8:	90 f3       	brcs	.-28     	; 0xf9e <SH100HW_Init+0x42>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
}
 fba:	df 91       	pop	r29
 fbc:	cf 91       	pop	r28
 fbe:	1f 91       	pop	r17
 fc0:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAFailure:

0000185c <SH100HW_SetPAFailure>:

void SH100HW_SetPAFailure(bool isFail)
{
	isPAOk = !isFail;
    185c:	91 e0       	ldi	r25, 0x01	; 1
    185e:	98 27       	eor	r25, r24
    1860:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <isPAOk>
	if(isFail)
    1864:	81 11       	cpse	r24, r1
	{
		SH100CTRL_MuteAmp();
    1866:	48 d0       	rcall	.+144    	; 0x18f8 <SH100CTRL_MuteAmp>
    1868:	08 95       	ret

Disassembly of section .text.SH100HW_GetPAFailure:

000018b6 <SH100HW_GetPAFailure>:
	}
}

bool SH100HW_GetPAFailure()
{
	return !isPAOk;
    18b6:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <isPAOk>
}
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	89 27       	eor	r24, r25
    18be:	08 95       	ret

Disassembly of section .text.SH100HW_GetButtonsState:

00001828 <SH100HW_GetButtonsState>:

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
    1828:	2f e0       	ldi	r18, 0x0F	; 15
    182a:	e9 e3       	ldi	r30, 0x39	; 57
    182c:	f1 e0       	ldi	r31, 0x01	; 1
    182e:	dc 01       	movw	r26, r24
    1830:	01 90       	ld	r0, Z+
    1832:	0d 92       	st	X+, r0
    1834:	2a 95       	dec	r18
    1836:	e1 f7       	brne	.-8      	; 0x1830 <SH100HW_GetButtonsState+0x8>
}
    1838:	08 95       	ret

Disassembly of section .text.SH100HW_SetCh:

000010d0 <SH100HW_SetCh>:

void SH100HW_SetCh(uint8_t chNum)
{
	switch(chNum)
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	69 f0       	breq	.+26     	; 0x10ee <SH100HW_SetCh+0x1e>
    10d4:	28 f0       	brcs	.+10     	; 0x10e0 <SH100HW_SetCh+0x10>
    10d6:	82 30       	cpi	r24, 0x02	; 2
    10d8:	91 f0       	breq	.+36     	; 0x10fe <SH100HW_SetCh+0x2e>
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	c1 f0       	breq	.+48     	; 0x110e <SH100HW_SetCh+0x3e>
    10de:	08 95       	ret
	{
		case 0:
		{
			RELAY_13_24 = REL_OFF;
    10e0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    10e4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    10e8:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    10ec:	08 95       	ret
		}
		case 1:
		{
			RELAY_13_24 = REL_ON;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    10f4:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    10f8:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    10fc:	08 95       	ret
		}
		case 2:
		{
			RELAY_13_24 = REL_OFF;
    10fe:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_ON;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    1108:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    110c:	08 95       	ret
		}
		case 3:
		{
			RELAY_13_24 = REL_ON;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    1114:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_ON;
    1118:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RELAY_2_4>
    111c:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

000017a2 <SH100HW_LoopEn>:
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
	RELAY_LOOP = isEnabled;
    17a2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RELAY_LOOP>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    17a6:	88 23       	and	r24, r24
    17a8:	21 f0       	breq	.+8      	; 0x17b2 <SH100HW_LoopEn+0x10>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    17aa:	85 b1       	in	r24, 0x05	; 5
    17ac:	84 60       	ori	r24, 0x04	; 4
    17ae:	85 b9       	out	0x05, r24	; 5
    17b0:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    17b2:	85 b1       	in	r24, 0x05	; 5
    17b4:	8b 7f       	andi	r24, 0xFB	; 251
    17b6:	85 b9       	out	0x05, r24	; 5
    17b8:	08 95       	ret

Disassembly of section .text.SH100HW_SetAB:

000018fe <SH100HW_SetAB>:
	ioport_set_pin_level(PIN_RELAY_LOOP, RELAY_LOOP);
}

void SH100HW_SetAB(bool isBEn)
{
	RELAY_AB = isBEn;
    18fe:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <RELAY_AB>
    1902:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

000013d2 <SH100HW_SetNewLedState>:
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
    13d6:	e8 2f       	mov	r30, r24
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	df 01       	movw	r26, r30
    13dc:	19 96       	adiw	r26, 0x09	; 9
    13de:	aa 0f       	add	r26, r26
    13e0:	bb 1f       	adc	r27, r27
    13e2:	a7 5b       	subi	r26, 0xB7	; 183
    13e4:	be 4f       	sbci	r27, 0xFE	; 254
    13e6:	0d 90       	ld	r0, X+
    13e8:	bc 91       	ld	r27, X
    13ea:	a0 2d       	mov	r26, r0
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e7 5b       	subi	r30, 0xB7	; 183
    13f2:	fe 4f       	sbci	r31, 0xFE	; 254
    13f4:	c0 81       	ld	r28, Z
    13f6:	d1 81       	ldd	r29, Z+1	; 0x01
    13f8:	88 81       	ld	r24, Y
    13fa:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
    13fc:	01 90       	ld	r0, Z+
    13fe:	f0 81       	ld	r31, Z
    1400:	e0 2d       	mov	r30, r0
    1402:	60 83       	st	Z, r22
}
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

000016a4 <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	fc 01       	movw	r30, r24
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	e7 5b       	subi	r30, 0xB7	; 183
    16ae:	fe 4f       	sbci	r31, 0xFE	; 254
    16b0:	a0 81       	ld	r26, Z
    16b2:	b1 81       	ldd	r27, Z+1	; 0x01
    16b4:	fc 01       	movw	r30, r24
    16b6:	39 96       	adiw	r30, 0x09	; 9
    16b8:	ee 0f       	add	r30, r30
    16ba:	ff 1f       	adc	r31, r31
    16bc:	e7 5b       	subi	r30, 0xB7	; 183
    16be:	fe 4f       	sbci	r31, 0xFE	; 254
    16c0:	01 90       	ld	r0, Z+
    16c2:	f0 81       	ld	r31, Z
    16c4:	e0 2d       	mov	r30, r0
    16c6:	80 81       	ld	r24, Z
    16c8:	8c 93       	st	X, r24
    16ca:	08 95       	ret

Disassembly of section .text.SH100HW_GetOutputJacks:

000017ba <SH100HW_GetOutputJacks>:
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    17ba:	21 e0       	ldi	r18, 0x01	; 1
    17bc:	18 9b       	sbis	0x03, 0	; 3
    17be:	20 e0       	ldi	r18, 0x00	; 0
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	19 9b       	sbis	0x03, 1	; 3
    17c4:	90 e0       	ldi	r25, 0x00	; 0

SH100HW_OutputJacks_t SH100HW_GetOutputJacks()
{
	bool is16Ohm = ioport_get_pin_level(PIN_M16_DETECT);
	bool is8Ohm = ioport_get_pin_level(PIN_M8_DETECT);
	return ((is16Ohm) | (is8Ohm<<1));
    17c6:	89 2f       	mov	r24, r25
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
}
    17ce:	82 2b       	or	r24, r18
    17d0:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAState:

0000135c <SH100HW_SetPAState>:

void SH100HW_SetPAState(SH100HW_OutputState_t state)
{
	if(isPAOk)
    135c:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <isPAOk>
    1360:	99 23       	and	r25, r25
    1362:	99 f0       	breq	.+38     	; 0x138a <SH100HW_SetPAState+0x2e>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1364:	81 11       	cpse	r24, r1
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <SH100HW_SetPAState+0x14>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1368:	98 b1       	in	r25, 0x08	; 8
    136a:	92 60       	ori	r25, 0x02	; 2
    136c:	98 b9       	out	0x08, r25	; 8
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <SH100HW_SetPAState+0x1a>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1370:	98 b1       	in	r25, 0x08	; 8
    1372:	9d 7f       	andi	r25, 0xFD	; 253
    1374:	98 b9       	out	0x08, r25	; 8
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1376:	88 23       	and	r24, r24
    1378:	21 f0       	breq	.+8      	; 0x1382 <SH100HW_SetPAState+0x26>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    137a:	88 b1       	in	r24, 0x08	; 8
    137c:	88 60       	ori	r24, 0x08	; 8
    137e:	88 b9       	out	0x08, r24	; 8
    1380:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1382:	88 b1       	in	r24, 0x08	; 8
    1384:	87 7f       	andi	r24, 0xF7	; 247
    1386:	88 b9       	out	0x08, r24	; 8
    1388:	08 95       	ret
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    138a:	88 b1       	in	r24, 0x08	; 8
    138c:	82 60       	ori	r24, 0x02	; 2
    138e:	88 b9       	out	0x08, r24	; 8
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1390:	88 b1       	in	r24, 0x08	; 8
    1392:	87 7f       	andi	r24, 0xF7	; 247
    1394:	88 b9       	out	0x08, r24	; 8
    1396:	08 95       	ret

Disassembly of section .text.SH100HW_SetOutputMode:

00001904 <SH100HW_SetOutputMode>:
	}
}

void SH100HW_SetOutputMode(SH100HW_PAMode_t mode)
{
	RELAY_8_16 = mode;
    1904:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <RELAY_8_16>
    1908:	08 95       	ret

Disassembly of section .text.SH100HW_StartADConvertion:

00001814 <SH100HW_StartADConvertion>:
}

void SH100HW_StartADConvertion(ADC_Channels_t channel)
{
	ADMUX = (1<<REFS0) | channel; // AREF ext pin, Left-adjustment result
    1814:	80 64       	ori	r24, 0x40	; 64
    1816:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	DIDR0 = 0x01; // Disable digital io on PC0
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7fe07e>
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, INT enable, prescaler = 64
    1820:	8e ec       	ldi	r24, 0xCE	; 206
    1822:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
    1826:	08 95       	ret

Disassembly of section .text.readButtonsState:

00000672 <readButtonsState>:
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	af c0       	rjmp	.+350    	; 0x7d4 <readButtonsState+0x162>
	{
		
		switch(cnt)
 676:	48 2f       	mov	r20, r24
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	48 30       	cpi	r20, 0x08	; 8
 67c:	51 05       	cpc	r21, r1
 67e:	08 f0       	brcs	.+2      	; 0x682 <readButtonsState+0x10>
 680:	a8 c0       	rjmp	.+336    	; 0x7d2 <readButtonsState+0x160>
 682:	fa 01       	movw	r30, r20
 684:	ef 5d       	subi	r30, 0xDF	; 223
 686:	ff 4f       	sbci	r31, 0xFF	; 255
 688:	09 94       	ijmp
 68a:	2b b1       	in	r18, 0x0b	; 11
 68c:	2f 7d       	andi	r18, 0xDF	; 223
 68e:	2b b9       	out	0x0b, r18	; 11
 690:	2b b1       	in	r18, 0x0b	; 11
 692:	2f 7b       	andi	r18, 0xBF	; 191
 694:	2b b9       	out	0x0b, r18	; 11
 696:	2b b1       	in	r18, 0x0b	; 11
 698:	2f 77       	andi	r18, 0x7F	; 127
 69a:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 69c:	21 e0       	ldi	r18, 0x01	; 1
 69e:	4c 9b       	sbis	0x09, 4	; 9
 6a0:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = ioport_get_pin_level(PIN_MIDI_SWITCH);
 6a2:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <buttonsState+0x1>
 6a6:	21 e0       	ldi	r18, 0x01	; 1
 6a8:	35 9b       	sbis	0x06, 5	; 6
 6aa:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 6ac:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <buttonsState+0xc>
				break;
 6b0:	90 c0       	rjmp	.+288    	; 0x7d2 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6b2:	9b b1       	in	r25, 0x0b	; 11
 6b4:	90 62       	ori	r25, 0x20	; 32
 6b6:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6b8:	9b b1       	in	r25, 0x0b	; 11
 6ba:	9f 7b       	andi	r25, 0xBF	; 191
 6bc:	9b b9       	out	0x0b, r25	; 11
 6be:	9b b1       	in	r25, 0x0b	; 11
 6c0:	9f 77       	andi	r25, 0x7F	; 127
 6c2:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	4c 9b       	sbis	0x09, 4	; 9
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	4a 9b       	sbis	0x09, 2	; 9
 6ce:	20 e0       	ldi	r18, 0x00	; 0
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = ioport_get_pin_level(PIN_BUTTONS);
 6d0:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <buttonsState+0x7>
 6d4:	21 e0       	ldi	r18, 0x01	; 1
 6d6:	35 9b       	sbis	0x06, 5	; 6
 6d8:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 6da:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <buttonsState+0xe>
				break;
 6de:	79 c0       	rjmp	.+242    	; 0x7d2 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6e0:	2b b1       	in	r18, 0x0b	; 11
 6e2:	2f 7d       	andi	r18, 0xDF	; 223
 6e4:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6e6:	2b b1       	in	r18, 0x0b	; 11
 6e8:	20 64       	ori	r18, 0x40	; 64
 6ea:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6ec:	2b b1       	in	r18, 0x0b	; 11
 6ee:	2f 77       	andi	r18, 0x7F	; 127
 6f0:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6f2:	21 e0       	ldi	r18, 0x01	; 1
 6f4:	4c 9b       	sbis	0x09, 4	; 9
 6f6:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 6f8:	32 2f       	mov	r19, r18
 6fa:	21 e0       	ldi	r18, 0x01	; 1
 6fc:	4a 9b       	sbis	0x09, 2	; 9
 6fe:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnLoop = ioport_get_pin_level(PIN_BUTTONS);
 700:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <buttonsState+0x8>
 704:	21 e0       	ldi	r18, 0x01	; 1
 706:	35 9b       	sbis	0x06, 5	; 6
 708:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 70a:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <buttonsState+0xb>
				break;
 70e:	61 c0       	rjmp	.+194    	; 0x7d2 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 710:	2b b1       	in	r18, 0x0b	; 11
 712:	20 62       	ori	r18, 0x20	; 32
 714:	2b b9       	out	0x0b, r18	; 11
 716:	2b b1       	in	r18, 0x0b	; 11
 718:	20 64       	ori	r18, 0x40	; 64
 71a:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 71c:	2b b1       	in	r18, 0x0b	; 11
 71e:	2f 77       	andi	r18, 0x7F	; 127
 720:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 722:	21 e0       	ldi	r18, 0x01	; 1
 724:	4c 9b       	sbis	0x09, 4	; 9
 726:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = ioport_get_pin_level(PIN_MIDI_SWITCH);
 728:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <buttonsState+0x2>
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	35 9b       	sbis	0x06, 5	; 6
 730:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 732:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <buttonsState+0x9>
				break;
 736:	4d c0       	rjmp	.+154    	; 0x7d2 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 738:	2b b1       	in	r18, 0x0b	; 11
 73a:	2f 7d       	andi	r18, 0xDF	; 223
 73c:	2b b9       	out	0x0b, r18	; 11
 73e:	2b b1       	in	r18, 0x0b	; 11
 740:	2f 7b       	andi	r18, 0xBF	; 191
 742:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 744:	2b b1       	in	r18, 0x0b	; 11
 746:	20 68       	ori	r18, 0x80	; 128
 748:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 74a:	41 e0       	ldi	r20, 0x01	; 1
 74c:	4c 9b       	sbis	0x09, 4	; 9
 74e:	40 e0       	ldi	r20, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 750:	b4 2f       	mov	r27, r20
 752:	21 e0       	ldi	r18, 0x01	; 1
 754:	4a 9b       	sbis	0x09, 2	; 9
 756:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnCh2 = ioport_get_pin_level(PIN_BUTTONS);
 758:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <buttonsState+0x4>
 75c:	21 e0       	ldi	r18, 0x01	; 1
 75e:	35 9b       	sbis	0x06, 5	; 6
 760:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 762:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <buttonsState+0xa>
				break;
 766:	35 c0       	rjmp	.+106    	; 0x7d2 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 768:	2b b1       	in	r18, 0x0b	; 11
 76a:	20 62       	ori	r18, 0x20	; 32
 76c:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 76e:	2b b1       	in	r18, 0x0b	; 11
 770:	2f 7b       	andi	r18, 0xBF	; 191
 772:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 774:	2b b1       	in	r18, 0x0b	; 11
 776:	20 68       	ori	r18, 0x80	; 128
 778:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 77a:	21 e0       	ldi	r18, 0x01	; 1
 77c:	4a 9b       	sbis	0x09, 2	; 9
 77e:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = ioport_get_pin_level(PIN_BUTTONS);
 780:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <buttonsState+0x5>
				break;
 784:	26 c0       	rjmp	.+76     	; 0x7d2 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 786:	2b b1       	in	r18, 0x0b	; 11
 788:	2f 7d       	andi	r18, 0xDF	; 223
 78a:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 78c:	2b b1       	in	r18, 0x0b	; 11
 78e:	20 64       	ori	r18, 0x40	; 64
 790:	2b b9       	out	0x0b, r18	; 11
 792:	2b b1       	in	r18, 0x0b	; 11
 794:	20 68       	ori	r18, 0x80	; 128
 796:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 798:	41 e0       	ldi	r20, 0x01	; 1
 79a:	4c 9b       	sbis	0x09, 4	; 9
 79c:	40 e0       	ldi	r20, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[1] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 79e:	a4 2f       	mov	r26, r20
 7a0:	21 e0       	ldi	r18, 0x01	; 1
 7a2:	4a 9b       	sbis	0x09, 2	; 9
 7a4:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnCh4 = ioport_get_pin_level(PIN_BUTTONS);
 7a6:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <buttonsState+0x6>
 7aa:	21 e0       	ldi	r18, 0x01	; 1
 7ac:	35 9b       	sbis	0x06, 5	; 6
 7ae:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 7b0:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <buttonsState+0xd>
				break;
 7b4:	0e c0       	rjmp	.+28     	; 0x7d2 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 7b6:	2b b1       	in	r18, 0x0b	; 11
 7b8:	20 62       	ori	r18, 0x20	; 32
 7ba:	2b b9       	out	0x0b, r18	; 11
 7bc:	2b b1       	in	r18, 0x0b	; 11
 7be:	20 64       	ori	r18, 0x40	; 64
 7c0:	2b b9       	out	0x0b, r18	; 11
 7c2:	2b b1       	in	r18, 0x0b	; 11
 7c4:	20 68       	ori	r18, 0x80	; 128
 7c6:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 7c8:	21 e0       	ldi	r18, 0x01	; 1
 7ca:	4a 9b       	sbis	0x09, 2	; 9
 7cc:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = ioport_get_pin_level(PIN_BUTTONS);
 7ce:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <buttonsState+0x3>
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 7d2:	8f 5f       	subi	r24, 0xFF	; 255
 7d4:	88 30       	cpi	r24, 0x08	; 8
 7d6:	08 f4       	brcc	.+2      	; 0x7da <readButtonsState+0x168>
 7d8:	4e cf       	rjmp	.-356    	; 0x676 <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 7da:	4a 2f       	mov	r20, r26
 7dc:	50 e0       	ldi	r21, 0x00	; 0
 7de:	44 0f       	add	r20, r20
 7e0:	55 1f       	adc	r21, r21
 7e2:	23 2f       	mov	r18, r19
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	22 0f       	add	r18, r18
 7e8:	33 1f       	adc	r19, r19
 7ea:	22 0f       	add	r18, r18
 7ec:	33 1f       	adc	r19, r19
 7ee:	89 2f       	mov	r24, r25
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	88 0f       	add	r24, r24
 7f8:	99 1f       	adc	r25, r25
 7fa:	88 0f       	add	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	4b 2b       	or	r20, r27
 800:	24 2b       	or	r18, r20
 802:	82 2b       	or	r24, r18
 804:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <buttonsState>
 808:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

0000131a <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
    131a:	ac 01       	movw	r20, r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    131c:	88 b1       	in	r24, 0x08	; 8
    131e:	8f 7e       	andi	r24, 0xEF	; 239
    1320:	88 b9       	out	0x08, r24	; 8
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	12 c0       	rjmp	.+36     	; 0x134a <writeShiftRegs+0x30>
    1326:	95 b1       	in	r25, 0x05	; 5
    1328:	9f 7d       	andi	r25, 0xDF	; 223
    132a:	95 b9       	out	0x05, r25	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    132c:	55 23       	and	r21, r21
    132e:	24 f4       	brge	.+8      	; 0x1338 <writeShiftRegs+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1330:	85 b1       	in	r24, 0x05	; 5
    1332:	88 60       	ori	r24, 0x08	; 8
    1334:	85 b9       	out	0x05, r24	; 5
    1336:	03 c0       	rjmp	.+6      	; 0x133e <writeShiftRegs+0x24>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1338:	85 b1       	in	r24, 0x05	; 5
    133a:	87 7f       	andi	r24, 0xF7	; 247
    133c:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    133e:	95 b1       	in	r25, 0x05	; 5
    1340:	90 62       	ori	r25, 0x20	; 32
    1342:	95 b9       	out	0x05, r25	; 5
	{
		ioport_set_pin_level(PIN_SCK, 0);
		ioport_set_pin_level(PIN_MOSI, (data & 0x8000));
		ioport_set_pin_level(PIN_SCK, 1);
		data = data << 1;
    1344:	44 0f       	add	r20, r20
    1346:	55 1f       	adc	r21, r21
}

void writeShiftRegs(uint16_t data)
{
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    1348:	2f 5f       	subi	r18, 0xFF	; 255
    134a:	20 31       	cpi	r18, 0x10	; 16
    134c:	60 f3       	brcs	.-40     	; 0x1326 <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    134e:	85 b1       	in	r24, 0x05	; 5
    1350:	8f 7d       	andi	r24, 0xDF	; 223
    1352:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1354:	88 b1       	in	r24, 0x08	; 8
    1356:	80 61       	ori	r24, 0x10	; 16
    1358:	88 b9       	out	0x08, r24	; 8
    135a:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000002c8 <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	29 97       	sbiw	r28, 0x09	; 9
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
	if(!isPAOk) SH100CTRL_MuteAmp();
 2dc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <isPAOk>
 2e0:	81 11       	cpse	r24, r1
 2e2:	01 c0       	rjmp	.+2      	; 0x2e6 <SH100HW_MainTask+0x1e>
 2e4:	09 db       	rcall	.-2542   	; 0xfffff8f8 <__eeprom_end+0xff7ef8f8>
	
	readButtonsState();
 2e6:	c5 d1       	rcall	.+906    	; 0x672 <readButtonsState>
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 2e8:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <blinkCounter>
 2ec:	89 e2       	ldi	r24, 0x29	; 41
 2ee:	98 9f       	mul	r25, r24
 2f0:	81 2d       	mov	r24, r1
 2f2:	11 24       	eor	r1, r1
 2f4:	86 95       	lsr	r24
 2f6:	86 95       	lsr	r24
 2f8:	39 2f       	mov	r19, r25
 2fa:	29 e1       	ldi	r18, 0x19	; 25
 2fc:	82 9f       	mul	r24, r18
 2fe:	30 19       	sub	r19, r0
 300:	11 24       	eor	r1, r1
 302:	31 11       	cpse	r19, r1
 304:	08 c0       	rjmp	.+16     	; 0x316 <SH100HW_MainTask+0x4e>
 306:	99 23       	and	r25, r25
 308:	31 f0       	breq	.+12     	; 0x316 <SH100HW_MainTask+0x4e>
	{
		fastBlink = !fastBlink;
 30a:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <fastBlink>
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	82 27       	eor	r24, r18
 312:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <fastBlink>
	}
	
	if(blinkCounter == 50)
 316:	92 33       	cpi	r25, 0x32	; 50
 318:	51 f4       	brne	.+20     	; 0x32e <SH100HW_MainTask+0x66>
	{
		blinkCounter = 0;
 31a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <blinkCounter>
		slowBlink = !slowBlink;
 31e:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <slowBlink>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	89 27       	eor	r24, r25
 326:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	47 c0       	rjmp	.+142    	; 0x3bc <SH100HW_MainTask+0xf4>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 32e:	9f 5f       	subi	r25, 0xFF	; 255
 330:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <blinkCounter>
 334:	fa cf       	rjmp	.-12     	; 0x32a <SH100HW_MainTask+0x62>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 336:	82 2f       	mov	r24, r18
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	fc 01       	movw	r30, r24
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	e7 5b       	subi	r30, 0xB7	; 183
 342:	fe 4f       	sbci	r31, 0xFE	; 254
 344:	01 90       	ld	r0, Z+
 346:	f0 81       	ld	r31, Z
 348:	e0 2d       	mov	r30, r0
 34a:	30 81       	ld	r19, Z
 34c:	31 30       	cpi	r19, 0x01	; 1
 34e:	71 f0       	breq	.+28     	; 0x36c <SH100HW_MainTask+0xa4>
 350:	28 f0       	brcs	.+10     	; 0x35c <SH100HW_MainTask+0x94>
 352:	32 30       	cpi	r19, 0x02	; 2
 354:	a1 f0       	breq	.+40     	; 0x37e <SH100HW_MainTask+0xb6>
 356:	33 30       	cpi	r19, 0x03	; 3
 358:	e1 f0       	breq	.+56     	; 0x392 <SH100HW_MainTask+0xca>
 35a:	28 c0       	rjmp	.+80     	; 0x3ac <SH100HW_MainTask+0xe4>
		{
			case LED_OFF: isLedOn[i] = false; break;
 35c:	e1 e0       	ldi	r30, 0x01	; 1
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	ec 0f       	add	r30, r28
 362:	fd 1f       	adc	r31, r29
 364:	e8 0f       	add	r30, r24
 366:	f9 1f       	adc	r31, r25
 368:	10 82       	st	Z, r1
 36a:	27 c0       	rjmp	.+78     	; 0x3ba <SH100HW_MainTask+0xf2>
			case LED_ON: isLedOn[i] = true; break;
 36c:	e1 e0       	ldi	r30, 0x01	; 1
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	ec 0f       	add	r30, r28
 372:	fd 1f       	adc	r31, r29
 374:	e8 0f       	add	r30, r24
 376:	f9 1f       	adc	r31, r25
 378:	31 e0       	ldi	r19, 0x01	; 1
 37a:	30 83       	st	Z, r19
 37c:	1e c0       	rjmp	.+60     	; 0x3ba <SH100HW_MainTask+0xf2>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 37e:	e1 e0       	ldi	r30, 0x01	; 1
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	ec 0f       	add	r30, r28
 384:	fd 1f       	adc	r31, r29
 386:	e8 0f       	add	r30, r24
 388:	f9 1f       	adc	r31, r25
 38a:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <fastBlink>
 38e:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 390:	14 c0       	rjmp	.+40     	; 0x3ba <SH100HW_MainTask+0xf2>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 392:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <slowBlink>
 396:	e1 e0       	ldi	r30, 0x01	; 1
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	ec 0f       	add	r30, r28
 39c:	fd 1f       	adc	r31, r29
 39e:	e8 0f       	add	r30, r24
 3a0:	f9 1f       	adc	r31, r25
 3a2:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	83 27       	eor	r24, r19
 3a8:	88 87       	std	Y+8, r24	; 0x08
				break;
 3aa:	07 c0       	rjmp	.+14     	; 0x3ba <SH100HW_MainTask+0xf2>
			}	
			default: isLedOn[i] = LED_OFF;
 3ac:	e1 e0       	ldi	r30, 0x01	; 1
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ec 0f       	add	r30, r28
 3b2:	fd 1f       	adc	r31, r29
 3b4:	e8 0f       	add	r30, r24
 3b6:	f9 1f       	adc	r31, r25
 3b8:	10 82       	st	Z, r1
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 3ba:	2f 5f       	subi	r18, 0xFF	; 255
 3bc:	29 30       	cpi	r18, 0x09	; 9
 3be:	08 f4       	brcc	.+2      	; 0x3c2 <SH100HW_MainTask+0xfa>
 3c0:	ba cf       	rjmp	.-140    	; 0x336 <SH100HW_MainTask+0x6e>
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3c2:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 3c6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <RELAY_1_3>
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3d0:	ac 01       	movw	r20, r24
 3d2:	42 2b       	or	r20, r18
 3d4:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 3d6:	9b 81       	ldd	r25, Y+3	; 0x03
 3d8:	89 2f       	mov	r24, r25
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 3e4:	82 2b       	or	r24, r18
 3e6:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 3e8:	29 81       	ldd	r18, Y+1	; 0x01
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	22 0f       	add	r18, r18
 3ee:	33 1f       	adc	r19, r19
 3f0:	22 0f       	add	r18, r18
 3f2:	33 1f       	adc	r19, r19
 3f4:	22 0f       	add	r18, r18
 3f6:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 3f8:	82 2b       	or	r24, r18
 3fa:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 3fc:	2a 81       	ldd	r18, Y+2	; 0x02
 3fe:	50 e1       	ldi	r21, 0x10	; 16
 400:	25 9f       	mul	r18, r21
 402:	90 01       	movw	r18, r0
 404:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 406:	28 2b       	or	r18, r24
 408:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 40a:	4c 81       	ldd	r20, Y+4	; 0x04
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	48 9f       	mul	r20, r24
 410:	a0 01       	movw	r20, r0
 412:	11 24       	eor	r1, r1
 414:	24 2b       	or	r18, r20
 416:	35 2b       	or	r19, r21
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 418:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <RELAY_8_16>
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	48 9f       	mul	r20, r24
 420:	a0 01       	movw	r20, r0
 422:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 424:	24 2b       	or	r18, r20
 426:	35 2b       	or	r19, r21
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 428:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <RELAY_2_4>
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	98 2f       	mov	r25, r24
 430:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 432:	28 2b       	or	r18, r24
 434:	39 2b       	or	r19, r25
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 436:	8e 81       	ldd	r24, Y+6	; 0x06
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	98 2f       	mov	r25, r24
 43c:	88 27       	eor	r24, r24
 43e:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 440:	28 2b       	or	r18, r24
 442:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 444:	8f 81       	ldd	r24, Y+7	; 0x07
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	98 2f       	mov	r25, r24
 44a:	88 27       	eor	r24, r24
 44c:	99 0f       	add	r25, r25
 44e:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 450:	28 2b       	or	r18, r24
 452:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 454:	88 85       	ldd	r24, Y+8	; 0x08
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	98 2f       	mov	r25, r24
 45a:	88 27       	eor	r24, r24
 45c:	99 0f       	add	r25, r25
 45e:	99 0f       	add	r25, r25
 460:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 462:	28 2b       	or	r18, r24
 464:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 466:	99 85       	ldd	r25, Y+9	; 0x09
 468:	89 2f       	mov	r24, r25
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	98 2f       	mov	r25, r24
 46e:	88 27       	eor	r24, r24
 470:	92 95       	swap	r25
 472:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 474:	28 2b       	or	r18, r24
 476:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
 478:	4d 81       	ldd	r20, Y+5	; 0x05
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	54 2f       	mov	r21, r20
 47e:	44 27       	eor	r20, r20
 480:	52 95       	swap	r21
 482:	55 0f       	add	r21, r21
 484:	50 7e       	andi	r21, 0xE0	; 224
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 486:	24 2b       	or	r18, r20
 488:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
								((uint16_t)RELAY_AB << (8+6)) |
 48a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <RELAY_AB>
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	90 e4       	ldi	r25, 0x40	; 64
 492:	89 9f       	mul	r24, r25
 494:	90 2d       	mov	r25, r0
 496:	88 27       	eor	r24, r24
 498:	11 24       	eor	r1, r1
								(0 << (8+7));

	writeShiftRegs(resultSendWord);
 49a:	82 2b       	or	r24, r18
 49c:	93 2b       	or	r25, r19
 49e:	3d d7       	rcall	.+3706   	; 0x131a <writeShiftRegs>
 4a0:	29 96       	adiw	r28, 0x09	; 9
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	de bf       	out	0x3e, r29	; 62
 4a8:	0f be       	out	0x3f, r0	; 63
 4aa:	cd bf       	out	0x3d, r28	; 61
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

Disassembly of section .text.board_init:

00001916 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1916:	08 95       	ret

Disassembly of section .text.UART_init:

000017d2 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    17d2:	88 ed       	ldi	r24, 0xD8	; 216
    17d4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00); 
    17d8:	86 e0       	ldi	r24, 0x06	; 6
    17da:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0;
    17de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=19;
    17e2:	83 e1       	ldi	r24, 0x13	; 19
    17e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    17e8:	08 95       	ret

Disassembly of section .text.__vector_18:

00000fc2 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
     fc2:	1f 92       	push	r1
     fc4:	1f b6       	in	r1, 0x3f	; 63
     fc6:	1f 92       	push	r1
     fc8:	11 24       	eor	r1, r1
     fca:	8f 93       	push	r24
     fcc:	9f 93       	push	r25
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
     fd2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
     fd6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
     fda:	8c 71       	andi	r24, 0x1C	; 28
     fdc:	d1 f4       	brne	.+52     	; 0x1012 <__vector_18+0x50>
	{
		rx_buffer0[rx_wr_index++] = data;
     fde:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <rx_wr_index>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	8e 0f       	add	r24, r30
     fe6:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <rx_wr_index>
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	e7 58       	subi	r30, 0x87	; 135
     fee:	fe 4f       	sbci	r31, 0xFE	; 254
     ff0:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
     ff2:	80 31       	cpi	r24, 0x10	; 16
     ff4:	11 f4       	brne	.+4      	; 0xffa <__vector_18+0x38>
     ff6:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
     ffa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_counter>
     ffe:	8f 5f       	subi	r24, 0xFF	; 255
    1000:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rx_counter>
    1004:	80 31       	cpi	r24, 0x10	; 16
    1006:	29 f4       	brne	.+10     	; 0x1012 <__vector_18+0x50>
		{
			rx_counter=0;
    1008:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_counter>
			rx_buffer_overflow=1;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <rx_buffer_overflow>
		}
	}
}
    1012:	ff 91       	pop	r31
    1014:	ef 91       	pop	r30
    1016:	9f 91       	pop	r25
    1018:	8f 91       	pop	r24
    101a:	1f 90       	pop	r1
    101c:	1f be       	out	0x3f, r1	; 63
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

Disassembly of section .text.UART_PopWord:

000014ae <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
    14ae:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_counter>
    14b2:	88 23       	and	r24, r24
    14b4:	e1 f3       	breq	.-8      	; 0x14ae <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
    14b6:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <rx_rd_index>
    14ba:	91 e0       	ldi	r25, 0x01	; 1
    14bc:	9e 0f       	add	r25, r30
    14be:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rx_rd_index>
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	e7 58       	subi	r30, 0x87	; 135
    14c6:	fe 4f       	sbci	r31, 0xFE	; 254
    14c8:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
    14ca:	90 31       	cpi	r25, 0x10	; 16
    14cc:	11 f4       	brne	.+4      	; 0x14d2 <UART_PopWord+0x24>
    14ce:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
    14d2:	f8 94       	cli
	--rx_counter;
    14d4:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_counter>
    14d8:	91 50       	subi	r25, 0x01	; 1
    14da:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <rx_counter>
	cpu_irq_enable();
    14de:	78 94       	sei
	return data;
}
    14e0:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

0000186a <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_counter>
    1870:	91 11       	cpse	r25, r1
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <UART_RxBufferNotEmpty+0xc>
    1874:	80 e0       	ldi	r24, 0x00	; 0
}
    1876:	08 95       	ret

Disassembly of section .text.__vector_20:

0000111e <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
    111e:	1f 92       	push	r1
    1120:	1f b6       	in	r1, 0x3f	; 63
    1122:	1f 92       	push	r1
    1124:	11 24       	eor	r1, r1
    1126:	8f 93       	push	r24
    1128:	ef 93       	push	r30
    112a:	ff 93       	push	r31
	if (tx_counter)
    112c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <tx_counter>
    1130:	88 23       	and	r24, r24
    1132:	a9 f0       	breq	.+42     	; 0x115e <__vector_20+0x40>
	{
		--tx_counter;
    1134:	81 50       	subi	r24, 0x01	; 1
    1136:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
    113a:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <tx_rd_index>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	8e 0f       	add	r24, r30
    1142:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <tx_rd_index>
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	e0 59       	subi	r30, 0x90	; 144
    114a:	fe 4f       	sbci	r31, 0xFE	; 254
    114c:	80 81       	ld	r24, Z
    114e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
    1152:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <tx_rd_index>
    1156:	88 30       	cpi	r24, 0x08	; 8
    1158:	11 f4       	brne	.+4      	; 0x115e <__vector_20+0x40>
    115a:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <tx_rd_index>
		#endif
	}
}
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	8f 91       	pop	r24
    1164:	1f 90       	pop	r1
    1166:	1f be       	out	0x3f, r1	; 63
    1168:	1f 90       	pop	r1
    116a:	18 95       	reti

Disassembly of section .text.UART_PushWord:

00001292 <UART_PushWord>:

// Write a character to the USART Transmitter buffer
void UART_PushWord(uint8_t c)
{	
	while (tx_counter == TX_BUFFER_SIZE);
    1292:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <tx_counter>
    1296:	98 30       	cpi	r25, 0x08	; 8
    1298:	e1 f3       	breq	.-8      	; 0x1292 <UART_PushWord>
	
	cpu_irq_disable();
    129a:	f8 94       	cli
	
	if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
    129c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <tx_counter>
    12a0:	91 11       	cpse	r25, r1
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <UART_PushWord+0x1a>
    12a4:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
    12a8:	25 fd       	sbrc	r18, 5
    12aa:	12 c0       	rjmp	.+36     	; 0x12d0 <UART_PushWord+0x3e>
	{
		tx_buffer[tx_wr_index++] = c;
    12ac:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <tx_wr_index>
    12b0:	21 e0       	ldi	r18, 0x01	; 1
    12b2:	2e 0f       	add	r18, r30
    12b4:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <tx_wr_index>
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	e0 59       	subi	r30, 0x90	; 144
    12bc:	fe 4f       	sbci	r31, 0xFE	; 254
    12be:	80 83       	st	Z, r24
		
		#if TX_BUFFER_SIZE0 != 256
			if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
    12c0:	28 30       	cpi	r18, 0x08	; 8
    12c2:	11 f4       	brne	.+4      	; 0x12c8 <UART_PushWord+0x36>
    12c4:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <tx_wr_index>
		#endif
		
		++tx_counter;
    12c8:	9f 5f       	subi	r25, 0xFF	; 255
    12ca:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <tx_counter>
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <UART_PushWord+0x42>
	}
	else UDR0=c;
    12d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	cpu_irq_enable();
    12d4:	78 94       	sei
    12d6:	08 95       	ret

Disassembly of section .text:

00000c32 <__floatunsisf>:
 c32:	e8 94       	clt
 c34:	09 c0       	rjmp	.+18     	; 0xc48 <__floatsisf+0x12>

00000c36 <__floatsisf>:
 c36:	97 fb       	bst	r25, 7
 c38:	3e f4       	brtc	.+14     	; 0xc48 <__floatsisf+0x12>
 c3a:	90 95       	com	r25
 c3c:	80 95       	com	r24
 c3e:	70 95       	com	r23
 c40:	61 95       	neg	r22
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	99 23       	and	r25, r25
 c4a:	a9 f0       	breq	.+42     	; 0xc76 <__floatsisf+0x40>
 c4c:	f9 2f       	mov	r31, r25
 c4e:	96 e9       	ldi	r25, 0x96	; 150
 c50:	bb 27       	eor	r27, r27
 c52:	93 95       	inc	r25
 c54:	f6 95       	lsr	r31
 c56:	87 95       	ror	r24
 c58:	77 95       	ror	r23
 c5a:	67 95       	ror	r22
 c5c:	b7 95       	ror	r27
 c5e:	f1 11       	cpse	r31, r1
 c60:	f8 cf       	rjmp	.-16     	; 0xc52 <__floatsisf+0x1c>
 c62:	fa f4       	brpl	.+62     	; 0xca2 <__floatsisf+0x6c>
 c64:	bb 0f       	add	r27, r27
 c66:	11 f4       	brne	.+4      	; 0xc6c <__floatsisf+0x36>
 c68:	60 ff       	sbrs	r22, 0
 c6a:	1b c0       	rjmp	.+54     	; 0xca2 <__floatsisf+0x6c>
 c6c:	6f 5f       	subi	r22, 0xFF	; 255
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255
 c70:	8f 4f       	sbci	r24, 0xFF	; 255
 c72:	9f 4f       	sbci	r25, 0xFF	; 255
 c74:	16 c0       	rjmp	.+44     	; 0xca2 <__floatsisf+0x6c>
 c76:	88 23       	and	r24, r24
 c78:	11 f0       	breq	.+4      	; 0xc7e <__floatsisf+0x48>
 c7a:	96 e9       	ldi	r25, 0x96	; 150
 c7c:	11 c0       	rjmp	.+34     	; 0xca0 <__floatsisf+0x6a>
 c7e:	77 23       	and	r23, r23
 c80:	21 f0       	breq	.+8      	; 0xc8a <__floatsisf+0x54>
 c82:	9e e8       	ldi	r25, 0x8E	; 142
 c84:	87 2f       	mov	r24, r23
 c86:	76 2f       	mov	r23, r22
 c88:	05 c0       	rjmp	.+10     	; 0xc94 <__floatsisf+0x5e>
 c8a:	66 23       	and	r22, r22
 c8c:	71 f0       	breq	.+28     	; 0xcaa <__floatsisf+0x74>
 c8e:	96 e8       	ldi	r25, 0x86	; 134
 c90:	86 2f       	mov	r24, r22
 c92:	70 e0       	ldi	r23, 0x00	; 0
 c94:	60 e0       	ldi	r22, 0x00	; 0
 c96:	2a f0       	brmi	.+10     	; 0xca2 <__floatsisf+0x6c>
 c98:	9a 95       	dec	r25
 c9a:	66 0f       	add	r22, r22
 c9c:	77 1f       	adc	r23, r23
 c9e:	88 1f       	adc	r24, r24
 ca0:	da f7       	brpl	.-10     	; 0xc98 <__floatsisf+0x62>
 ca2:	88 0f       	add	r24, r24
 ca4:	96 95       	lsr	r25
 ca6:	87 95       	ror	r24
 ca8:	97 f9       	bld	r25, 7
 caa:	08 95       	ret

Disassembly of section .text:

000018d2 <__gesf2>:
    18d2:	98 dc       	rcall	.-1744   	; 0x1204 <__fp_cmp>
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <__gesf2+0x6>
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	08 95       	ret

Disassembly of section .text:

00001204 <__fp_cmp>:
    1204:	99 0f       	add	r25, r25
    1206:	00 08       	sbc	r0, r0
    1208:	55 0f       	add	r21, r21
    120a:	aa 0b       	sbc	r26, r26
    120c:	e0 e8       	ldi	r30, 0x80	; 128
    120e:	fe ef       	ldi	r31, 0xFE	; 254
    1210:	16 16       	cp	r1, r22
    1212:	17 06       	cpc	r1, r23
    1214:	e8 07       	cpc	r30, r24
    1216:	f9 07       	cpc	r31, r25
    1218:	c0 f0       	brcs	.+48     	; 0x124a <__fp_cmp+0x46>
    121a:	12 16       	cp	r1, r18
    121c:	13 06       	cpc	r1, r19
    121e:	e4 07       	cpc	r30, r20
    1220:	f5 07       	cpc	r31, r21
    1222:	98 f0       	brcs	.+38     	; 0x124a <__fp_cmp+0x46>
    1224:	62 1b       	sub	r22, r18
    1226:	73 0b       	sbc	r23, r19
    1228:	84 0b       	sbc	r24, r20
    122a:	95 0b       	sbc	r25, r21
    122c:	39 f4       	brne	.+14     	; 0x123c <__fp_cmp+0x38>
    122e:	0a 26       	eor	r0, r26
    1230:	61 f0       	breq	.+24     	; 0x124a <__fp_cmp+0x46>
    1232:	23 2b       	or	r18, r19
    1234:	24 2b       	or	r18, r20
    1236:	25 2b       	or	r18, r21
    1238:	21 f4       	brne	.+8      	; 0x1242 <__fp_cmp+0x3e>
    123a:	08 95       	ret
    123c:	0a 26       	eor	r0, r26
    123e:	09 f4       	brne	.+2      	; 0x1242 <__fp_cmp+0x3e>
    1240:	a1 40       	sbci	r26, 0x01	; 1
    1242:	a6 95       	lsr	r26
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	81 1d       	adc	r24, r1
    1248:	81 1d       	adc	r24, r1
    124a:	08 95       	ret

Disassembly of section .text.libgcc:

00001788 <__movmemx_qi>:
    1788:	99 27       	eor	r25, r25

0000178a <__movmemx_hi>:
    178a:	77 fd       	sbrc	r23, 7
    178c:	05 c0       	rjmp	.+10     	; 0x1798 <__movmemx_hi+0xe>
    178e:	05 90       	lpm	r0, Z+
    1790:	0d 92       	st	X+, r0
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	e1 f7       	brne	.-8      	; 0x178e <__movmemx_hi+0x4>
    1796:	08 95       	ret
    1798:	01 90       	ld	r0, Z+
    179a:	0d 92       	st	X+, r0
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	e1 f7       	brne	.-8      	; 0x1798 <__movmemx_hi+0xe>
    17a0:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001918 <_fini>:
    1918:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000191a <__funcs_on_exit>:
    191a:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000191c <__simulator_exit>:
    191c:	08 95       	ret

Disassembly of section .text.exit:

00001878 <exit>:
    1878:	ec 01       	movw	r28, r24
    187a:	4f d0       	rcall	.+158    	; 0x191a <__funcs_on_exit>
    187c:	4d d0       	rcall	.+154    	; 0x1918 <_fini>
    187e:	ce 01       	movw	r24, r28
    1880:	4d d0       	rcall	.+154    	; 0x191c <__simulator_exit>
    1882:	ce 01       	movw	r24, r28
    1884:	4c d0       	rcall	.+152    	; 0x191e <_Exit>

Disassembly of section .text.__simple_malloc:

00000a24 <__simple_malloc>:
 a24:	a2 e0       	ldi	r26, 0x02	; 2
 a26:	b0 e0       	ldi	r27, 0x00	; 0
 a28:	e7 e1       	ldi	r30, 0x17	; 23
 a2a:	f5 e0       	ldi	r31, 0x05	; 5
 a2c:	f8 c4       	rjmp	.+2544   	; 0x141e <__prologue_saves__+0x14>
 a2e:	8c 01       	movw	r16, r24
 a30:	80 e0       	ldi	r24, 0x00	; 0
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	01 15       	cp	r16, r1
 a36:	11 05       	cpc	r17, r1
 a38:	09 f4       	brne	.+2      	; 0xa3c <__simple_malloc+0x18>
 a3a:	53 c0       	rjmp	.+166    	; 0xae2 <__simple_malloc+0xbe>
 a3c:	89 2b       	or	r24, r25
 a3e:	71 f0       	breq	.+28     	; 0xa5c <__simple_malloc+0x38>
 a40:	02 30       	cpi	r16, 0x02	; 2
 a42:	11 05       	cpc	r17, r1
 a44:	10 f4       	brcc	.+4      	; 0xa4a <__simple_malloc+0x26>
 a46:	02 e0       	ldi	r16, 0x02	; 2
 a48:	10 e0       	ldi	r17, 0x00	; 0
 a4a:	c8 01       	movw	r24, r16
 a4c:	d9 da       	rcall	.-2638   	; 0x0 <__TEXT_REGION_ORIGIN__>
 a4e:	00 97       	sbiw	r24, 0x00	; 0
 a50:	09 f0       	breq	.+2      	; 0xa54 <__simple_malloc+0x30>
 a52:	4e c0       	rjmp	.+156    	; 0xaf0 <__simple_malloc+0xcc>
 a54:	92 e0       	ldi	r25, 0x02	; 2
 a56:	e9 2e       	mov	r14, r25
 a58:	f1 2c       	mov	r15, r1
 a5a:	04 c0       	rjmp	.+8      	; 0xa64 <__simple_malloc+0x40>
 a5c:	80 e0       	ldi	r24, 0x00	; 0
 a5e:	e8 2e       	mov	r14, r24
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	f8 2e       	mov	r15, r24
 a64:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <end.1483>
 a68:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <end.1483+0x1>
 a6c:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <cur.1482>
 a70:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <cur.1482+0x1>
 a74:	82 1b       	sub	r24, r18
 a76:	93 0b       	sbc	r25, r19
 a78:	67 01       	movw	r12, r14
 a7a:	c0 0e       	add	r12, r16
 a7c:	d1 1e       	adc	r13, r17
 a7e:	80 17       	cp	r24, r16
 a80:	91 07       	cpc	r25, r17
 a82:	e8 f4       	brcc	.+58     	; 0xabe <__simple_malloc+0x9a>
 a84:	da 82       	std	Y+2, r13	; 0x02
 a86:	c9 82       	std	Y+1, r12	; 0x01
 a88:	ce 01       	movw	r24, r28
 a8a:	01 96       	adiw	r24, 0x01	; 1
 a8c:	fb d1       	rcall	.+1014   	; 0xe84 <__expand_heap>
 a8e:	00 97       	sbiw	r24, 0x00	; 0
 a90:	19 f4       	brne	.+6      	; 0xa98 <__simple_malloc+0x74>
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	2c c0       	rjmp	.+88     	; 0xaf0 <__simple_malloc+0xcc>
 a98:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <end.1483>
 a9c:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <end.1483+0x1>
 aa0:	82 17       	cp	r24, r18
 aa2:	93 07       	cpc	r25, r19
 aa4:	21 f0       	breq	.+8      	; 0xaae <__simple_malloc+0x8a>
 aa6:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <cur.1482+0x1>
 aaa:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <cur.1482>
 aae:	29 81       	ldd	r18, Y+1	; 0x01
 ab0:	3a 81       	ldd	r19, Y+2	; 0x02
 ab2:	82 0f       	add	r24, r18
 ab4:	93 1f       	adc	r25, r19
 ab6:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <end.1483+0x1>
 aba:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <end.1483>
 abe:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <cur.1482>
 ac2:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <cur.1482+0x1>
 ac6:	cf 01       	movw	r24, r30
 ac8:	e1 14       	cp	r14, r1
 aca:	f1 04       	cpc	r15, r1
 acc:	19 f0       	breq	.+6      	; 0xad4 <__simple_malloc+0xb0>
 ace:	02 96       	adiw	r24, 0x02	; 2
 ad0:	11 83       	std	Z+1, r17	; 0x01
 ad2:	00 83       	st	Z, r16
 ad4:	ce 0e       	add	r12, r30
 ad6:	df 1e       	adc	r13, r31
 ad8:	d0 92 a9 01 	sts	0x01A9, r13	; 0x8001a9 <cur.1482+0x1>
 adc:	c0 92 a8 01 	sts	0x01A8, r12	; 0x8001a8 <cur.1482>
 ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <__simple_malloc+0xcc>
 ae2:	00 97       	sbiw	r24, 0x00	; 0
 ae4:	09 f0       	breq	.+2      	; 0xae8 <__simple_malloc+0xc4>
 ae6:	af cf       	rjmp	.-162    	; 0xa46 <__simple_malloc+0x22>
 ae8:	7c 01       	movw	r14, r24
 aea:	01 e0       	ldi	r16, 0x01	; 1
 aec:	10 e0       	ldi	r17, 0x00	; 0
 aee:	ba cf       	rjmp	.-140    	; 0xa64 <__simple_malloc+0x40>
 af0:	22 96       	adiw	r28, 0x02	; 2
 af2:	e8 e0       	ldi	r30, 0x08	; 8
 af4:	cb c4       	rjmp	.+2454   	; 0x148c <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

0000191e <_Exit>:
    191e:	da d3       	rcall	.+1972   	; 0x20d4 <__TEXT_REGION_LENGTH__+0xd4>

Disassembly of section .text.__expand_heap:

00000e84 <__expand_heap>:
 e84:	fc 01       	movw	r30, r24
 e86:	40 81       	ld	r20, Z
 e88:	51 81       	ldd	r21, Z+1	; 0x01
 e8a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__brkval>
 e8e:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__brkval+0x1>
 e92:	89 2b       	or	r24, r25
 e94:	41 f4       	brne	.+16     	; 0xea6 <__expand_heap+0x22>
 e96:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__malloc_heap_start>
 e9a:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <__malloc_heap_start+0x1>
 e9e:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__brkval+0x1>
 ea2:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__brkval>
 ea6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__malloc_heap_end>
 eaa:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__malloc_heap_end+0x1>
 eae:	00 97       	sbiw	r24, 0x00	; 0
 eb0:	19 f4       	brne	.+6      	; 0xeb8 <__expand_heap+0x34>
 eb2:	8d b7       	in	r24, 0x3d	; 61
 eb4:	9e b7       	in	r25, 0x3e	; 62
 eb6:	80 97       	sbiw	r24, 0x20	; 32
 eb8:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
 ebc:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
 ec0:	28 17       	cp	r18, r24
 ec2:	39 07       	cpc	r19, r25
 ec4:	48 f0       	brcs	.+18     	; 0xed8 <__expand_heap+0x54>
 ec6:	8c e0       	ldi	r24, 0x0C	; 12
 ec8:	90 e0       	ldi	r25, 0x00	; 0
 eca:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__errno_val+0x1>
 ece:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__errno_val>
 ed2:	80 e0       	ldi	r24, 0x00	; 0
 ed4:	90 e0       	ldi	r25, 0x00	; 0
 ed6:	08 95       	ret
 ed8:	82 1b       	sub	r24, r18
 eda:	93 0b       	sbc	r25, r19
 edc:	84 17       	cp	r24, r20
 ede:	95 07       	cpc	r25, r21
 ee0:	90 f3       	brcs	.-28     	; 0xec6 <__expand_heap+0x42>
 ee2:	42 0f       	add	r20, r18
 ee4:	53 1f       	adc	r21, r19
 ee6:	50 93 ab 01 	sts	0x01AB, r21	; 0x8001ab <__brkval+0x1>
 eea:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <__brkval>
 eee:	c9 01       	movw	r24, r18
 ef0:	08 95       	ret

Disassembly of section .text.avrlibc:

000016f0 <eeprom_read_block>:
    16f0:	ba 01       	movw	r22, r20
    16f2:	a9 01       	movw	r20, r18
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22

000016f8 <eeprom_read_blraw>:
    16f8:	fc 01       	movw	r30, r24
    16fa:	f9 99       	sbic	0x1f, 1	; 31
    16fc:	fe cf       	rjmp	.-4      	; 0x16fa <eeprom_read_blraw+0x2>
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <eeprom_read_blraw+0x14>
    1700:	f2 bd       	out	0x22, r31	; 34
    1702:	e1 bd       	out	0x21, r30	; 33
    1704:	f8 9a       	sbi	0x1f, 0	; 31
    1706:	31 96       	adiw	r30, 0x01	; 1
    1708:	00 b4       	in	r0, 0x20	; 32
    170a:	0d 92       	st	X+, r0
    170c:	41 50       	subi	r20, 0x01	; 1
    170e:	50 40       	sbci	r21, 0x00	; 0
    1710:	b8 f7       	brcc	.-18     	; 0x1700 <eeprom_read_blraw+0x8>
    1712:	08 95       	ret

Disassembly of section .text.avrlibc:

0000183a <eeprom_read_byte>:
    183a:	cb 01       	movw	r24, r22
    183c:	f9 99       	sbic	0x1f, 1	; 31
    183e:	fe cf       	rjmp	.-4      	; 0x183c <eeprom_read_byte+0x2>
    1840:	92 bd       	out	0x22, r25	; 34
    1842:	81 bd       	out	0x21, r24	; 33
    1844:	f8 9a       	sbi	0x1f, 0	; 31
    1846:	99 27       	eor	r25, r25
    1848:	80 b5       	in	r24, 0x20	; 32
    184a:	08 95       	ret

Disassembly of section .text.avrlibc:

000018aa <eeprom_read_word>:
    18aa:	cb 01       	movw	r24, r22
    18ac:	a8 e1       	ldi	r26, 0x18	; 24
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	42 e0       	ldi	r20, 0x02	; 2
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	21 cf       	rjmp	.-446    	; 0x16f8 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00001514 <eeprom_write_block>:
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	6b 01       	movw	r12, r22
    151c:	e8 2e       	mov	r14, r24
    151e:	ca 01       	movw	r24, r20
    1520:	42 2f       	mov	r20, r18
    1522:	73 2f       	mov	r23, r19
    1524:	09 c0       	rjmp	.+18     	; 0x1538 <eeprom_write_block+0x24>
    1526:	f6 01       	movw	r30, r12
    1528:	5e 2d       	mov	r21, r14
    152a:	ca d1       	rcall	.+916    	; 0x18c0 <__xload_1>
    152c:	26 2f       	mov	r18, r22
    152e:	12 d1       	rcall	.+548    	; 0x1754 <eeprom_write_r18>
    1530:	3f ef       	ldi	r19, 0xFF	; 255
    1532:	c3 1a       	sub	r12, r19
    1534:	d3 0a       	sbc	r13, r19
    1536:	e3 0a       	sbc	r14, r19
    1538:	41 50       	subi	r20, 0x01	; 1
    153a:	70 40       	sbci	r23, 0x00	; 0
    153c:	a0 f7       	brcc	.-24     	; 0x1526 <eeprom_write_block+0x12>
    153e:	ef 90       	pop	r14
    1540:	df 90       	pop	r13
    1542:	cf 90       	pop	r12
    1544:	08 95       	ret

Disassembly of section .text.avrlibc:

00001752 <eeprom_write_byte>:
    1752:	26 2f       	mov	r18, r22

00001754 <eeprom_write_r18>:
    1754:	f9 99       	sbic	0x1f, 1	; 31
    1756:	fe cf       	rjmp	.-4      	; 0x1754 <eeprom_write_r18>
    1758:	1f ba       	out	0x1f, r1	; 31
    175a:	92 bd       	out	0x22, r25	; 34
    175c:	81 bd       	out	0x21, r24	; 33
    175e:	20 bd       	out	0x20, r18	; 32
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	fa 9a       	sbi	0x1f, 2	; 31
    1766:	f9 9a       	sbi	0x1f, 1	; 31
    1768:	0f be       	out	0x3f, r0	; 63
    176a:	01 96       	adiw	r24, 0x01	; 1
    176c:	08 95       	ret

Disassembly of section .text.avrlibc:

0000190a <eeprom_write_word>:
    190a:	23 df       	rcall	.-442    	; 0x1752 <eeprom_write_byte>
    190c:	27 2f       	mov	r18, r23
    190e:	22 cf       	rjmp	.-444    	; 0x1754 <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

0000140a <__prologue_saves__>:
    140a:	2f 92       	push	r2
    140c:	3f 92       	push	r3
    140e:	4f 92       	push	r4
    1410:	5f 92       	push	r5
    1412:	6f 92       	push	r6
    1414:	7f 92       	push	r7
    1416:	8f 92       	push	r8
    1418:	9f 92       	push	r9
    141a:	af 92       	push	r10
    141c:	bf 92       	push	r11
    141e:	cf 92       	push	r12
    1420:	df 92       	push	r13
    1422:	ef 92       	push	r14
    1424:	ff 92       	push	r15
    1426:	0f 93       	push	r16
    1428:	1f 93       	push	r17
    142a:	cf 93       	push	r28
    142c:	df 93       	push	r29
    142e:	cd b7       	in	r28, 0x3d	; 61
    1430:	de b7       	in	r29, 0x3e	; 62
    1432:	ca 1b       	sub	r28, r26
    1434:	db 0b       	sbc	r29, r27
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	f8 94       	cli
    143a:	de bf       	out	0x3e, r29	; 62
    143c:	0f be       	out	0x3f, r0	; 63
    143e:	cd bf       	out	0x3d, r28	; 61
    1440:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00001478 <__epilogue_restores__>:
    1478:	2a 88       	ldd	r2, Y+18	; 0x12
    147a:	39 88       	ldd	r3, Y+17	; 0x11
    147c:	48 88       	ldd	r4, Y+16	; 0x10
    147e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1480:	6e 84       	ldd	r6, Y+14	; 0x0e
    1482:	7d 84       	ldd	r7, Y+13	; 0x0d
    1484:	8c 84       	ldd	r8, Y+12	; 0x0c
    1486:	9b 84       	ldd	r9, Y+11	; 0x0b
    1488:	aa 84       	ldd	r10, Y+10	; 0x0a
    148a:	b9 84       	ldd	r11, Y+9	; 0x09
    148c:	c8 84       	ldd	r12, Y+8	; 0x08
    148e:	df 80       	ldd	r13, Y+7	; 0x07
    1490:	ee 80       	ldd	r14, Y+6	; 0x06
    1492:	fd 80       	ldd	r15, Y+5	; 0x05
    1494:	0c 81       	ldd	r16, Y+4	; 0x04
    1496:	1b 81       	ldd	r17, Y+3	; 0x03
    1498:	aa 81       	ldd	r26, Y+2	; 0x02
    149a:	b9 81       	ldd	r27, Y+1	; 0x01
    149c:	ce 0f       	add	r28, r30
    149e:	d1 1d       	adc	r29, r1
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	f8 94       	cli
    14a4:	de bf       	out	0x3e, r29	; 62
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	cd bf       	out	0x3d, r28	; 61
    14aa:	ed 01       	movw	r28, r26
    14ac:	08 95       	ret

Disassembly of section .text.libgcc:

000018c0 <__xload_1>:
    18c0:	57 fd       	sbrc	r21, 7
    18c2:	60 81       	ld	r22, Z
    18c4:	57 ff       	sbrs	r21, 7
    18c6:	64 91       	lpm	r22, Z
    18c8:	08 95       	ret
