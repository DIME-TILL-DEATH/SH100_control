
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  ALLOC, LOAD, DATA
  1 .text         0000008a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000017b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000189  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf7  00000000  00000000  000001c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066c  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e5  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000218  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000002  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001994  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.main    00000006  000000a8  000000a8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.MIDI_ParserTask 00000010  0000008a  0000008a  0000011e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .bss.state    00000001  00800100  00800100  0000014c  2**0
                  ALLOC
 16 .text.__dummy_fini 00000002  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  000000b2  000000b2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  000000b4  000000b4  00000148  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    0000000e  0000009a  0000009a  0000012e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000002  000000b6  000000b6  0000014a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	55 c0       	rjmp	.+170    	; 0xae <__bad_interrupt>
   4:	54 c0       	rjmp	.+168    	; 0xae <__bad_interrupt>
   6:	53 c0       	rjmp	.+166    	; 0xae <__bad_interrupt>
   8:	52 c0       	rjmp	.+164    	; 0xae <__bad_interrupt>
   a:	51 c0       	rjmp	.+162    	; 0xae <__bad_interrupt>
   c:	50 c0       	rjmp	.+160    	; 0xae <__bad_interrupt>
   e:	4f c0       	rjmp	.+158    	; 0xae <__bad_interrupt>
  10:	4e c0       	rjmp	.+156    	; 0xae <__bad_interrupt>
  12:	4d c0       	rjmp	.+154    	; 0xae <__bad_interrupt>
  14:	4c c0       	rjmp	.+152    	; 0xae <__bad_interrupt>
  16:	4b c0       	rjmp	.+150    	; 0xae <__bad_interrupt>
  18:	4a c0       	rjmp	.+148    	; 0xae <__bad_interrupt>
  1a:	49 c0       	rjmp	.+146    	; 0xae <__bad_interrupt>
  1c:	48 c0       	rjmp	.+144    	; 0xae <__bad_interrupt>
  1e:	47 c0       	rjmp	.+142    	; 0xae <__bad_interrupt>
  20:	46 c0       	rjmp	.+140    	; 0xae <__bad_interrupt>
  22:	45 c0       	rjmp	.+138    	; 0xae <__bad_interrupt>
  24:	44 c0       	rjmp	.+136    	; 0xae <__bad_interrupt>
  26:	43 c0       	rjmp	.+134    	; 0xae <__bad_interrupt>
  28:	42 c0       	rjmp	.+132    	; 0xae <__bad_interrupt>
  2a:	41 c0       	rjmp	.+130    	; 0xae <__bad_interrupt>
  2c:	40 c0       	rjmp	.+128    	; 0xae <__bad_interrupt>
  2e:	3f c0       	rjmp	.+126    	; 0xae <__bad_interrupt>
  30:	3e c0       	rjmp	.+124    	; 0xae <__bad_interrupt>
  32:	3d c0       	rjmp	.+122    	; 0xae <__bad_interrupt>

00000034 <.dinit>:
  34:	01 00       	.word	0x0001	; ????
  36:	01 01       	movw	r0, r2
  38:	80 00       	.word	0x0080	; ????

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf ef       	ldi	r28, 0xFF	; 255
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	e4 e3       	ldi	r30, 0x34	; 52
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	17 c0       	rjmp	.+46     	; 0x7c <__do_clear_bss+0x8>
  4e:	b5 91       	lpm	r27, Z+
  50:	a5 91       	lpm	r26, Z+
  52:	35 91       	lpm	r19, Z+
  54:	25 91       	lpm	r18, Z+
  56:	05 91       	lpm	r16, Z+
  58:	07 fd       	sbrc	r16, 7
  5a:	0c c0       	rjmp	.+24     	; 0x74 <__do_clear_bss>
  5c:	95 91       	lpm	r25, Z+
  5e:	85 91       	lpm	r24, Z+
  60:	ef 01       	movw	r28, r30
  62:	f9 2f       	mov	r31, r25
  64:	e8 2f       	mov	r30, r24
  66:	05 90       	lpm	r0, Z+
  68:	0d 92       	st	X+, r0
  6a:	a2 17       	cp	r26, r18
  6c:	b3 07       	cpc	r27, r19
  6e:	d9 f7       	brne	.-10     	; 0x66 <__do_copy_data+0x20>
  70:	fe 01       	movw	r30, r28
  72:	04 c0       	rjmp	.+8      	; 0x7c <__do_clear_bss+0x8>

00000074 <__do_clear_bss>:
  74:	1d 92       	st	X+, r1
  76:	a2 17       	cp	r26, r18
  78:	b3 07       	cpc	r27, r19
  7a:	e1 f7       	brne	.-8      	; 0x74 <__do_clear_bss>
  7c:	e9 33       	cpi	r30, 0x39	; 57
  7e:	f4 07       	cpc	r31, r20
  80:	31 f7       	brne	.-52     	; 0x4e <__do_copy_data+0x8>
  82:	12 d0       	rcall	.+36     	; 0xa8 <main>
  84:	0a c0       	rjmp	.+20     	; 0x9a <exit>

00000086 <_exit>:
  86:	f8 94       	cli

00000088 <__stop_program>:
  88:	ff cf       	rjmp	.-2      	; 0x88 <__stop_program>

Disassembly of section .text:

000000ae <__bad_interrupt>:
  ae:	a8 cf       	rjmp	.-176    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000a8 <main>:

#include "midi_parser.h"

int main(void)
{
	cpu_irq_enable();
  a8:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
  aa:	ef df       	rcall	.-34     	; 0x8a <__data_load_end>
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x2>

Disassembly of section .text.MIDI_ParserTask:

0000008a <MIDI_ParserTask>:
	HADLE_SYS_EX
}state = RESET;

void MIDI_ParserTask()
{
	switch(state)
  8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  8e:	81 11       	cpse	r24, r1
  90:	03 c0       	rjmp	.+6      	; 0x98 <MIDI_ParserTask+0xe>
	{
		case RESET:
		{
			state = IDLE;
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  98:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000000b0 <_fini>:
  b0:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000b2 <__funcs_on_exit>:
  b2:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000b4 <__simulator_exit>:
  b4:	08 95       	ret

Disassembly of section .text.exit:

0000009a <exit>:
  9a:	ec 01       	movw	r28, r24
  9c:	0a d0       	rcall	.+20     	; 0xb2 <__funcs_on_exit>
  9e:	08 d0       	rcall	.+16     	; 0xb0 <_fini>
  a0:	ce 01       	movw	r24, r28
  a2:	08 d0       	rcall	.+16     	; 0xb4 <__simulator_exit>
  a4:	ce 01       	movw	r24, r28
  a6:	07 d0       	rcall	.+14     	; 0xb6 <_Exit>

Disassembly of section .text._Exit:

000000b6 <_Exit>:
  b6:	e7 df       	rcall	.-50     	; 0x86 <_exit>
