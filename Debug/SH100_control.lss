
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001846  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000089  00800100  00800100  00001846  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000007e  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  000018f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000062a3  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109e  00000000  00000000  00007ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cc0  00000000  00000000  00008f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000067c  00000000  00000000  0000ac54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b4  00000000  00000000  0000b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001826  00000000  00000000  0000b984  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000d1aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  0000168a  0000168a  0000181e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000d3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000036  000011c6  000011c6  0000135a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_16 000001b4  000004bc  000004bc  00000650  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_4 00000046  00001088  00001088  0000121c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .bss.leaveDefSettings_cnt 00000001  008001ab  008001ab  00001846  2**0
                  ALLOC
 19 .bss.swProgrammingMode_cnt 00000001  008001ac  008001ac  00001846  2**0
                  ALLOC
 20 .data.protectionInterval_cnt 00000001  008001ad  000016b0  00001844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.MIDI_IsStatusWord 00000008  00001648  00001648  000017dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.MIDI_IsSysRealTime 0000000c  0000160e  0000160e  000017a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.MIDI_GetStatusType 00000070  00000c92  00000c92  00000e26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.isEqualCommands 00000014  00001596  00001596  0000172a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.loadCommSetFromMemory 0000007a  00000aba  00000aba  00000c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.setMidiLeds 00000052  00000efe  00000efe  00001092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MIDICTRL_Init 00000028  00001404  00001404  00001598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MIDICTRL_MidiMode 00000006  00001650  00001650  000017e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MIDICTRL_SetProgrammingButton 0000002e  000012ce  000012ce  00001462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.MIDICTRL_SwitchMode 0000004c  00000ff0  00000ff0  00001184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.MIDICTRL_SetMidiChannel 00000006  00001656  00001656  000017ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.MIDICTRL_OmniModeEn 00000006  0000165c  0000165c  000017f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.MIDICTRL_MuteCommEn 00000006  00001662  00001662  000017f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.programmBtn 0000004c  0000103c  0000103c  000011d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.MIDICTRL_SendSwChComm 0000006a  00000d70  00000d70  00000f04  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_SendLoopEnComm 0000002a  00001386  00001386  0000151a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.MIDICTRL_SendSwABComm 0000002a  000013b0  000013b0  00001544  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MIDICTRL_StoreUserCommands 00000036  000011fc  000011fc  00001390  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.MIDICTRL_DiscardCommands 0000001a  0000151c  0000151c  000016b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.indicateMidiError 0000002e  000012fc  000012fc  00001490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.MIDICTRL_HandleCommand 00000200  000000dc  000000dc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.__vector_13 0000005c  00000ea2  00000ea2  00001036  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .data.defaultCommands 00000018  00800189  00001694  00001828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 44 .progmemx.data.muteCommand 00000004  000000d8  000000d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 45 .bss.channelNum 00000001  008001ae  008001ae  00001846  2**0
                  ALLOC
 46 .bss.muteCommandEnabled 00000001  008001af  008001af  00001846  2**0
                  ALLOC
 47 .bss.omniModeEnabled 00000001  008001b0  008001b0  00001846  2**0
                  ALLOC
 48 .text.handleRealTimeStatus 00000004  00001686  00001686  0000181a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.MIDI_ParserTask 00000156  00000808  00000808  0000099c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.MIDI_SetRetranslateState 00000006  00001668  00001668  000017fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.MIDI_SendCommand 00000078  00000b34  00000b34  00000cc8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .bss.state    00000001  008001b1  008001b1  00001846  2**0
                  ALLOC
 53 .data.retranslate 00000001  008001b2  000016b1  00001845  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 54 .text.setChannelLeds 00000022  000014c2  000014c2  00001656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.SH100CTRL_SetAmpLeds 0000002e  0000132a  0000132a  000014be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.SH100CTRL_StoreAmpState 0000001c  000014e4  000014e4  00001678  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.SH100CTRL_SetLoop 0000002a  000013da  000013da  0000156e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.SH100CTRL_SwChannel 0000002e  00001358  00001358  000014ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.SH100CTRL_SwLoop 00000014  000015aa  000015aa  0000173e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SH100CTRL_BtnSwChannel 00000010  000015e2  000015e2  00001776  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.SH100CTRL_SetAB 00000024  0000147a  0000147a  0000160e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100CTRL_SetAmpState 00000064  00000dda  00000dda  00000f6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SH100CTRL_Init 0000008a  00000a30  00000a30  00000bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SH100CTRL_SwAB 0000000c  0000161a  0000161a  000017ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SH100CTRL_MuteAmp 00000006  0000166e  0000166e  00001802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SH100CTRL_UnmuteAmp 0000000c  00001626  00001626  000017ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SH100CTRL_CheckOutputJacks 00000072  00000c20  00000c20  00000db4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SH100HW_Init 00000074  00000bac  00000bac  00000d40  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SH100HW_GetButtonsState 00000012  000015be  000015be  00001752  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SH100HW_SetCh 0000004e  00000fa2  00000fa2  00001136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SH100HW_LoopEn 00000018  00001536  00001536  000016ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SH100HW_SetAB 00000006  00001674  00001674  00001808  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.SH100HW_SetNewLedState 00000038  00001156  00001156  000012ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.SH100HW_SetPreviousLedState 00000028  0000142c  0000142c  000015c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SH100HW_GetOutputJacks 00000018  0000154e  0000154e  000016e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.SH100HW_SetPAState 00000026  00001454  00001454  000015e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.SH100HW_SetOutputMode 00000006  0000167a  0000167a  0000180e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.readButtonsState 00000198  00000670  00000670  00000804  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.writeShiftRegs 00000042  00001114  00001114  000012a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.SH100HW_MainTask 000001e0  000002dc  000002dc  00000470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .bss.fastBlink 00000001  008001b3  008001b3  00001846  2**0
                  ALLOC
 82 .bss.slowBlink 00000001  008001b4  008001b4  00001846  2**0
                  ALLOC
 83 .bss.blinkCounter 00000001  008001b5  008001b5  00001846  2**0
                  ALLOC
 84 .text.UART_init 00000018  00001566  00001566  000016fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.__vector_18 00000064  00000e3e  00000e3e  00000fd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.UART_PopWord 00000034  00001268  00001268  000013fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.UART_RxBufferNotEmpty 0000000e  000015f2  000015f2  00001786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__vector_20 00000052  00000f50  00000f50  000010e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.UART_PushWord 00000046  000010ce  000010ce  00001262  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.libgcc  00000018  0000157e  0000157e  00001712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.__dummy_fini 00000002  0000168c  0000168c  00001820  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__dummy_funcs_on_exit 00000002  0000168e  0000168e  00001822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__dummy_simulator_exit 00000002  00001690  00001690  00001824  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.exit    0000000e  00001600  00001600  00001794  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.__simple_malloc 000000d2  0000095e  0000095e  00000af2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .bss.end.1483 00000002  008001a1  008001a1  00001846  2**0
                  ALLOC
 97 .bss.cur.1482 00000002  008001a3  008001a3  00001846  2**0
                  ALLOC
 98 .text._Exit   00000002  00001692  00001692  00001826  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.__expand_heap 0000006e  00000d02  00000d02  00000e96  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .bss.__brkval 00000002  008001a5  008001a5  00001846  2**0
                  ALLOC
101 .data.__malloc_heap_end 00000002  008001a7  000016ac  00001840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
102 .data.__malloc_heap_start 00000002  008001a9  000016ae  00001842  2**0
                  CONTENTS, ALLOC, LOAD, DATA
103 .text.avrlibc 00000024  0000149e  0000149e  00001632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.avrlibc 00000012  000015d0  000015d0  00001764  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.avrlibc 0000000c  00001632  00001632  000017c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.avrlibc 00000032  0000129c  0000129c  00001430  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.avrlibc 0000001c  00001500  00001500  00001694  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text.avrlibc 00000006  00001680  00001680  00001814  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.libgcc.prologue 00000038  0000118e  0000118e  00001322  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .text.libgcc.prologue 00000036  00001232  00001232  000013c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.libgcc  0000000a  0000163e  0000163e  000017d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	43 c0       	rjmp	.+134    	; 0x88 <__ctors_end>
   2:	43 cb       	rjmp	.-2426   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
   4:	42 cb       	rjmp	.-2428   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
   6:	41 cb       	rjmp	.-2430   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
   8:	3f c8       	rjmp	.-3970   	; 0xfffff088 <__eeprom_end+0xff7ef088>
   a:	3f cb       	rjmp	.-2434   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
   c:	3e cb       	rjmp	.-2436   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
   e:	3d cb       	rjmp	.-2438   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  10:	3c cb       	rjmp	.-2440   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  12:	3b cb       	rjmp	.-2442   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  14:	3a cb       	rjmp	.-2444   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  16:	39 cb       	rjmp	.-2446   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  18:	38 cb       	rjmp	.-2448   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  1a:	43 c7       	rjmp	.+3718   	; 0xea2 <__vector_13>
  1c:	36 cb       	rjmp	.-2452   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  1e:	35 cb       	rjmp	.-2454   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  20:	4d c2       	rjmp	.+1178   	; 0x4bc <__vector_16>
  22:	33 cb       	rjmp	.-2458   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  24:	0c c7       	rjmp	.+3608   	; 0xe3e <__vector_18>
  26:	31 cb       	rjmp	.-2462   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  28:	93 c7       	rjmp	.+3878   	; 0xf50 <__vector_20>
  2a:	2f cb       	rjmp	.-2466   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  2c:	2e cb       	rjmp	.-2468   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  2e:	2d cb       	rjmp	.-2470   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  30:	2c cb       	rjmp	.-2472   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  32:	2b cb       	rjmp	.-2474   	; 0xfffff68a <__eeprom_end+0xff7ef68a>
  34:	f5 c3       	rjmp	.+2026   	; 0x820 <MIDI_ParserTask+0x18>
  36:	01 c4       	rjmp	.+2050   	; 0x83a <MIDI_ParserTask+0x32>
  38:	40 c4       	rjmp	.+2176   	; 0x8ba <MIDI_ParserTask+0xb2>
  3a:	73 c4       	rjmp	.+2278   	; 0x922 <MIDI_ParserTask+0x11a>
  3c:	53 c4       	rjmp	.+2214   	; 0x8e4 <MIDI_ParserTask+0xdc>
  3e:	82 c4       	rjmp	.+2308   	; 0x944 <MIDI_ParserTask+0x13c>
  40:	85 c4       	rjmp	.+2314   	; 0x94c <MIDI_ParserTask+0x144>
  42:	22 c3       	rjmp	.+1604   	; 0x688 <readButtonsState+0x18>
  44:	35 c3       	rjmp	.+1642   	; 0x6b0 <readButtonsState+0x40>
  46:	4b c3       	rjmp	.+1686   	; 0x6de <readButtonsState+0x6e>
  48:	62 c3       	rjmp	.+1732   	; 0x70e <readButtonsState+0x9e>
  4a:	75 c3       	rjmp	.+1770   	; 0x736 <readButtonsState+0xc6>
  4c:	8c c3       	rjmp	.+1816   	; 0x766 <readButtonsState+0xf6>
  4e:	9a c3       	rjmp	.+1844   	; 0x784 <readButtonsState+0x114>
  50:	b1 c3       	rjmp	.+1890   	; 0x7b4 <readButtonsState+0x144>

00000052 <.dinit>:
  52:	01 00       	.word	0x0001	; ????
  54:	01 89       	ldd	r16, Z+17	; 0x11
  56:	80 01       	movw	r16, r0
  58:	89 01       	movw	r16, r18
  5a:	a1 00       	.word	0x00a1	; ????
  5c:	16 94       	lsr	r1
  5e:	01 a1       	ldd	r16, Z+33	; 0x21
  60:	01 a7       	std	Z+41, r16	; 0x29
  62:	80 01       	movw	r16, r0
  64:	a7 01       	movw	r20, r14
  66:	ab 00       	.word	0x00ab	; ????
  68:	16 ac       	ldd	r1, Z+62	; 0x3e
  6a:	01 ab       	std	Z+49, r16	; 0x31
  6c:	01 ad       	ldd	r16, Z+57	; 0x39
  6e:	80 01       	movw	r16, r0
  70:	ad 01       	movw	r20, r26
  72:	ae 00       	.word	0x00ae	; ????
  74:	16 b0       	in	r1, 0x06	; 6
  76:	01 ae       	std	Z+57, r0	; 0x39
  78:	01 b2       	in	r0, 0x11	; 17
  7a:	80 01       	movw	r16, r0
  7c:	b2 01       	movw	r22, r4
  7e:	b3 00       	.word	0x00b3	; ????
  80:	16 b1       	in	r17, 0x06	; 6
  82:	01 b3       	in	r16, 0x11	; 17
  84:	01 b6       	in	r0, 0x31	; 49
  86:	80 00       	.word	0x0080	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d4 e0       	ldi	r29, 0x04	; 4
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	e2 e5       	ldi	r30, 0x52	; 82
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	17 c0       	rjmp	.+46     	; 0xca <__do_clear_bss+0x8>
  9c:	b5 91       	lpm	r27, Z+
  9e:	a5 91       	lpm	r26, Z+
  a0:	35 91       	lpm	r19, Z+
  a2:	25 91       	lpm	r18, Z+
  a4:	05 91       	lpm	r16, Z+
  a6:	07 fd       	sbrc	r16, 7
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <__do_clear_bss>
  aa:	95 91       	lpm	r25, Z+
  ac:	85 91       	lpm	r24, Z+
  ae:	ef 01       	movw	r28, r30
  b0:	f9 2f       	mov	r31, r25
  b2:	e8 2f       	mov	r30, r24
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x20>
  be:	fe 01       	movw	r30, r28
  c0:	04 c0       	rjmp	.+8      	; 0xca <__do_clear_bss+0x8>

000000c2 <__do_clear_bss>:
  c2:	1d 92       	st	X+, r1
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__do_clear_bss>
  ca:	e7 38       	cpi	r30, 0x87	; 135
  cc:	f4 07       	cpc	r31, r20
  ce:	31 f7       	brne	.-52     	; 0x9c <__do_copy_data+0x8>
  d0:	7a d8       	rcall	.-3852   	; 0xfffff1c6 <__eeprom_end+0xff7ef1c6>
  d2:	96 ca       	rjmp	.-2772   	; 0xfffff600 <__eeprom_end+0xff7ef600>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>

Disassembly of section .text:

0000168a <__bad_interrupt>:
    168a:	ba c4       	rjmp	.+2420   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.main:

000011c6 <main>:
#include "sh100_hardware.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
    11c6:	cf d1       	rcall	.+926    	; 0x1566 <UART_init>
	SH100HW_Init();
    11c8:	f1 dc       	rcall	.-1566   	; 0xbac <SH100HW_Init>
	SH100CTRL_Init();
    11ca:	32 dc       	rcall	.-1948   	; 0xa30 <SH100CTRL_Init>
	MIDICTRL_Init();
    11cc:	1b d1       	rcall	.+566    	; 0x1404 <MIDICTRL_Init>
	
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    11ce:	85 b5       	in	r24, 0x25	; 37
    11d0:	85 60       	ori	r24, 0x05	; 5
    11d2:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    11d4:	ee e6       	ldi	r30, 0x6E	; 110
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	80 83       	st	Z, r24
	TCNT0 = 100;
    11de:	84 e6       	ldi	r24, 0x64	; 100
    11e0:	86 bd       	out	0x26, r24	; 38
	
	// PCINT10, interrupt for PC2 pin(SW detect)
	PCICR |= 0x02;
    11e2:	e8 e6       	ldi	r30, 0x68	; 104
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	82 60       	ori	r24, 0x02	; 2
    11ea:	80 83       	st	Z, r24
	PCMSK1 |= 0x04;
    11ec:	ec e6       	ldi	r30, 0x6C	; 108
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	80 83       	st	Z, r24
	
	cpu_irq_enable();
    11f6:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
    11f8:	07 db       	rcall	.-2546   	; 0x808 <MIDI_ParserTask>
    11fa:	fe cf       	rjmp	.-4      	; 0x11f8 <main+0x32>

Disassembly of section .text.__vector_16:

000004bc <__vector_16>:
uint8_t protectionInterval_cnt = PROTECTION_INTERVAL;
uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

ISR(TIMER0_OVF_vect)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	2f 93       	push	r18
 4c8:	3f 93       	push	r19
 4ca:	4f 93       	push	r20
 4cc:	5f 93       	push	r21
 4ce:	6f 93       	push	r22
 4d0:	7f 93       	push	r23
 4d2:	8f 93       	push	r24
 4d4:	9f 93       	push	r25
 4d6:	af 93       	push	r26
 4d8:	bf 93       	push	r27
 4da:	ef 93       	push	r30
 4dc:	ff 93       	push	r31
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	cd b7       	in	r28, 0x3d	; 61
 4e4:	de b7       	in	r29, 0x3e	; 62
 4e6:	2f 97       	sbiw	r28, 0x0f	; 15
 4e8:	de bf       	out	0x3e, r29	; 62
 4ea:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 4ec:	f7 de       	rcall	.-530    	; 0x2dc <SH100HW_MainTask>
	SH100CTRL_CheckOutputJacks();
 4ee:	98 d3       	rcall	.+1840   	; 0xc20 <SH100CTRL_CheckOutputJacks>
	
	SH100HW_Buttons_t pressedButtons = SH100HW_GetButtonsState();
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	64 d8       	rcall	.-3896   	; 0xfffff5be <__eeprom_end+0xff7ef5be>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	ae d8       	rcall	.-3748   	; 0xfffff656 <__eeprom_end+0xff7ef656>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	af d8       	rcall	.-3746   	; 0xfffff65c <__eeprom_end+0xff7ef65c>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 4fe:	8b 81       	ldd	r24, Y+3	; 0x03
 500:	b0 d8       	rcall	.-3744   	; 0xfffff662 <__eeprom_end+0xff7ef662>
	
	// FOOTSWITCH handling
	
	if(protectionInterval_cnt == 0)
 502:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <protectionInterval_cnt>
 506:	81 11       	cpse	r24, r1
 508:	97 c0       	rjmp	.+302    	; 0x638 <__stack+0x139>
	{		
		//=============BTN CH1==========================
		if(pressedButtons.btnCh1 == BT_ON)
 50a:	8c 81       	ldd	r24, Y+4	; 0x04
 50c:	81 11       	cpse	r24, r1
 50e:	27 c0       	rjmp	.+78     	; 0x55e <__stack+0x5f>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 510:	84 e1       	ldi	r24, 0x14	; 20
 512:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			if(swProgrammingMode_cnt == SWITCH_MODE_DELAY)
 516:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <swProgrammingMode_cnt>
 51a:	8a 30       	cpi	r24, 0x0A	; 10
 51c:	69 f4       	brne	.+26     	; 0x538 <__stack+0x39>
			{
				swProgrammingMode_cnt = 0;
 51e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <swProgrammingMode_cnt>
				//enter prog mode, or save settings
				if(MIDICTRL_MidiMode() == RUNNING)
 522:	96 d8       	rcall	.-3796   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 524:	81 11       	cpse	r24, r1
 526:	04 c0       	rjmp	.+8      	; 0x530 <__stack+0x31>
				{
					MIDICTRL_SwitchMode(PROGRAMMING);
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	62 d5       	rcall	.+2756   	; 0xff0 <MIDICTRL_SwitchMode>
					SH100CTRL_MuteAmp();
 52c:	a0 d8       	rcall	.-3776   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
 52e:	87 c0       	rjmp	.+270    	; 0x63e <__stack+0x13f>
				}
				else
				{
					MIDICTRL_StoreUserCommands();
 530:	65 d6       	rcall	.+3274   	; 0x11fc <MIDICTRL_StoreUserCommands>
					SH100CTRL_SetAmpLeds();
 532:	fb d6       	rcall	.+3574   	; 0x132a <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 534:	78 d8       	rcall	.-3856   	; 0xfffff626 <__eeprom_end+0xff7ef626>
 536:	83 c0       	rjmp	.+262    	; 0x63e <__stack+0x13f>
				}
			}
			else
			{		
				if(swProgrammingMode_cnt == 0)
 538:	81 11       	cpse	r24, r1
 53a:	0b c0       	rjmp	.+22     	; 0x552 <__stack+0x53>
				{
					switch(MIDICTRL_MidiMode())
 53c:	89 d8       	rcall	.-3822   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 53e:	88 23       	and	r24, r24
 540:	19 f0       	breq	.+6      	; 0x548 <__stack+0x49>
 542:	81 30       	cpi	r24, 0x01	; 1
 544:	21 f0       	breq	.+8      	; 0x54e <__stack+0x4f>
 546:	05 c0       	rjmp	.+10     	; 0x552 <__stack+0x53>
					{
						case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL1); break;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	4b d8       	rcall	.-3946   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
 54c:	02 c0       	rjmp	.+4      	; 0x552 <__stack+0x53>
						case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	be d6       	rcall	.+3452   	; 0x12ce <MIDICTRL_SetProgrammingButton>
					}
				}
				swProgrammingMode_cnt++;
 552:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <swProgrammingMode_cnt>
 556:	8f 5f       	subi	r24, 0xFF	; 255
 558:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <swProgrammingMode_cnt>
 55c:	70 c0       	rjmp	.+224    	; 0x63e <__stack+0x13f>
			}
			return;
		}
		else swProgrammingMode_cnt=0;	
 55e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <swProgrammingMode_cnt>
		
		//=============BTN CH2==========================
		if(pressedButtons.btnCh2 == BT_ON)
 562:	8d 81       	ldd	r24, Y+5	; 0x05
 564:	81 11       	cpse	r24, r1
 566:	0f c0       	rjmp	.+30     	; 0x586 <__stack+0x87>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 568:	84 e1       	ldi	r24, 0x14	; 20
 56a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 56e:	70 d8       	rcall	.-3872   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 570:	88 23       	and	r24, r24
 572:	19 f0       	breq	.+6      	; 0x57a <__stack+0x7b>
 574:	81 30       	cpi	r24, 0x01	; 1
 576:	21 f0       	breq	.+8      	; 0x580 <__stack+0x81>
 578:	62 c0       	rjmp	.+196    	; 0x63e <__stack+0x13f>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL2); break;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	32 d8       	rcall	.-3996   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
 57e:	5f c0       	rjmp	.+190    	; 0x63e <__stack+0x13f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	a5 d6       	rcall	.+3402   	; 0x12ce <MIDICTRL_SetProgrammingButton>
 584:	5c c0       	rjmp	.+184    	; 0x63e <__stack+0x13f>
			}
			return;
		}
		
		//=============BTN CH3==========================
		if(pressedButtons.btnCh3 == BT_ON)
 586:	8e 81       	ldd	r24, Y+6	; 0x06
 588:	81 11       	cpse	r24, r1
 58a:	0f c0       	rjmp	.+30     	; 0x5aa <__stack+0xab>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 58c:	84 e1       	ldi	r24, 0x14	; 20
 58e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 592:	5e d8       	rcall	.-3908   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 594:	88 23       	and	r24, r24
 596:	19 f0       	breq	.+6      	; 0x59e <__stack+0x9f>
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	21 f0       	breq	.+8      	; 0x5a4 <__stack+0xa5>
 59c:	50 c0       	rjmp	.+160    	; 0x63e <__stack+0x13f>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL3); break;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	20 d8       	rcall	.-4032   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
 5a2:	4d c0       	rjmp	.+154    	; 0x63e <__stack+0x13f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	93 d6       	rcall	.+3366   	; 0x12ce <MIDICTRL_SetProgrammingButton>
 5a8:	4a c0       	rjmp	.+148    	; 0x63e <__stack+0x13f>
			}
			return;
		}
		
		//=============BTN CH4==========================
		if(pressedButtons.btnCh4 == BT_ON)
 5aa:	8f 81       	ldd	r24, Y+7	; 0x07
 5ac:	81 11       	cpse	r24, r1
 5ae:	0f c0       	rjmp	.+30     	; 0x5ce <__stack+0xcf>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5b0:	84 e1       	ldi	r24, 0x14	; 20
 5b2:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 5b6:	4c d8       	rcall	.-3944   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 5b8:	88 23       	and	r24, r24
 5ba:	19 f0       	breq	.+6      	; 0x5c2 <__stack+0xc3>
 5bc:	81 30       	cpi	r24, 0x01	; 1
 5be:	21 f0       	breq	.+8      	; 0x5c8 <__stack+0xc9>
 5c0:	3e c0       	rjmp	.+124    	; 0x63e <__stack+0x13f>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL4); break;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	0e d8       	rcall	.-4068   	; 0xfffff5e2 <__eeprom_end+0xff7ef5e2>
 5c6:	3b c0       	rjmp	.+118    	; 0x63e <__stack+0x13f>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	81 d6       	rcall	.+3330   	; 0x12ce <MIDICTRL_SetProgrammingButton>
 5cc:	38 c0       	rjmp	.+112    	; 0x63e <__stack+0x13f>
			}
			return;
		}
		
		//=============BTN LOOP=========================
		if(pressedButtons.btnLoop == BT_ON)
 5ce:	89 85       	ldd	r24, Y+9	; 0x09
 5d0:	81 11       	cpse	r24, r1
 5d2:	0e c0       	rjmp	.+28     	; 0x5f0 <__stack+0xf1>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5d4:	84 e1       	ldi	r24, 0x14	; 20
 5d6:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 5da:	3a d8       	rcall	.-3980   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 5dc:	88 23       	and	r24, r24
 5de:	19 f0       	breq	.+6      	; 0x5e6 <__stack+0xe7>
 5e0:	81 30       	cpi	r24, 0x01	; 1
 5e2:	19 f0       	breq	.+6      	; 0x5ea <__stack+0xeb>
 5e4:	2c c0       	rjmp	.+88     	; 0x63e <__stack+0x13f>
			{
				case RUNNING:
				{
					SH100CTRL_SwLoop();
 5e6:	e1 d7       	rcall	.+4034   	; 0x15aa <SH100CTRL_SwLoop>
					break;
 5e8:	2a c0       	rjmp	.+84     	; 0x63e <__stack+0x13f>
				}
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 5ea:	84 e0       	ldi	r24, 0x04	; 4
 5ec:	70 d6       	rcall	.+3296   	; 0x12ce <MIDICTRL_SetProgrammingButton>
 5ee:	27 c0       	rjmp	.+78     	; 0x63e <__stack+0x13f>
			}
			return;
		}
			
		//=============BTN AB===========================
		if(pressedButtons.btnAB == BT_ON)
 5f0:	88 85       	ldd	r24, Y+8	; 0x08
 5f2:	81 11       	cpse	r24, r1
 5f4:	1e c0       	rjmp	.+60     	; 0x632 <__stack+0x133>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5f6:	84 e1       	ldi	r24, 0x14	; 20
 5f8:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
			if(leaveDefSettings_cnt == SWITCH_MODE_DELAY)
 5fc:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <leaveDefSettings_cnt>
 600:	8a 30       	cpi	r24, 0x0A	; 10
 602:	49 f4       	brne	.+18     	; 0x616 <__stack+0x117>
			{
				if(MIDICTRL_MidiMode() == PROGRAMMING)
 604:	25 d8       	rcall	.-4022   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 606:	81 30       	cpi	r24, 0x01	; 1
 608:	d1 f4       	brne	.+52     	; 0x63e <__stack+0x13f>
				{
					leaveDefSettings_cnt = 0;
 60a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <leaveDefSettings_cnt>
					MIDICTRL_DiscardCommands();
 60e:	86 d7       	rcall	.+3852   	; 0x151c <MIDICTRL_DiscardCommands>
					SH100CTRL_SetAmpLeds();
 610:	8c d6       	rcall	.+3352   	; 0x132a <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 612:	09 d8       	rcall	.-4078   	; 0xfffff626 <__eeprom_end+0xff7ef626>
 614:	14 c0       	rjmp	.+40     	; 0x63e <__stack+0x13f>
				}
			}
			else
			{
				leaveDefSettings_cnt++;
 616:	8f 5f       	subi	r24, 0xFF	; 255
 618:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <leaveDefSettings_cnt>
				switch(MIDICTRL_MidiMode())
 61c:	19 d8       	rcall	.-4046   	; 0xfffff650 <__eeprom_end+0xff7ef650>
 61e:	88 23       	and	r24, r24
 620:	19 f0       	breq	.+6      	; 0x628 <__stack+0x129>
 622:	81 30       	cpi	r24, 0x01	; 1
 624:	19 f0       	breq	.+6      	; 0x62c <__stack+0x12d>
 626:	0b c0       	rjmp	.+22     	; 0x63e <__stack+0x13f>
				{
					case RUNNING: 
					{
						SH100CTRL_SwAB(); 
 628:	f8 d7       	rcall	.+4080   	; 0x161a <SH100CTRL_SwAB>
						break;
 62a:	09 c0       	rjmp	.+18     	; 0x63e <__stack+0x13f>
					}
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 62c:	85 e0       	ldi	r24, 0x05	; 5
 62e:	4f d6       	rcall	.+3230   	; 0x12ce <MIDICTRL_SetProgrammingButton>
 630:	06 c0       	rjmp	.+12     	; 0x63e <__stack+0x13f>
				}
			}
			return;
		}
		else leaveDefSettings_cnt=0;
 632:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <leaveDefSettings_cnt>
 636:	03 c0       	rjmp	.+6      	; 0x63e <__stack+0x13f>
	}
	else
	{
		protectionInterval_cnt--;
 638:	81 50       	subi	r24, 0x01	; 1
 63a:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <protectionInterval_cnt>
	}
}
 63e:	2f 96       	adiw	r28, 0x0f	; 15
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

Disassembly of section .text.__vector_4:

00001088 <__vector_4>:

ISR(PCINT1_vect)
{
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
	// Power off
	// need to check pin level?
	SH100CTRL_StoreAmpState();
    10aa:	1c d2       	rcall	.+1080   	; 0x14e4 <SH100CTRL_StoreAmpState>
    10ac:	ff 91       	pop	r31
    10ae:	ef 91       	pop	r30
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

00001648 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    1648:	88 1f       	adc	r24, r24
    164a:	88 27       	eor	r24, r24
    164c:	88 1f       	adc	r24, r24
    164e:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

0000160e <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	88 3f       	cpi	r24, 0xF8	; 248
    1612:	08 f4       	brcc	.+2      	; 0x1616 <MIDI_IsSysRealTime+0x8>
    1614:	90 e0       	ldi	r25, 0x00	; 0
}
    1616:	89 2f       	mov	r24, r25
    1618:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000c92 <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 c92:	82 3f       	cpi	r24, 0xF2	; 242
 c94:	01 f1       	breq	.+64     	; 0xcd6 <MIDI_GetStatusType+0x44>
 c96:	68 f4       	brcc	.+26     	; 0xcb2 <MIDI_GetStatusType+0x20>
 c98:	8e 30       	cpi	r24, 0x0E	; 14
 c9a:	28 f4       	brcc	.+10     	; 0xca6 <MIDI_GetStatusType+0x14>
 c9c:	8c 30       	cpi	r24, 0x0C	; 12
 c9e:	78 f5       	brcc	.+94     	; 0xcfe <MIDI_GetStatusType+0x6c>
 ca0:	88 30       	cpi	r24, 0x08	; 8
 ca2:	c8 f4       	brcc	.+50     	; 0xcd6 <MIDI_GetStatusType+0x44>
 ca4:	2a c0       	rjmp	.+84     	; 0xcfa <MIDI_GetStatusType+0x68>
 ca6:	80 3f       	cpi	r24, 0xF0	; 240
 ca8:	21 f1       	breq	.+72     	; 0xcf2 <MIDI_GetStatusType+0x60>
 caa:	48 f5       	brcc	.+82     	; 0xcfe <MIDI_GetStatusType+0x6c>
 cac:	8e 30       	cpi	r24, 0x0E	; 14
 cae:	99 f0       	breq	.+38     	; 0xcd6 <MIDI_GetStatusType+0x44>
 cb0:	24 c0       	rjmp	.+72     	; 0xcfa <MIDI_GetStatusType+0x68>
 cb2:	8a 3f       	cpi	r24, 0xFA	; 250
 cb4:	a1 f0       	breq	.+40     	; 0xcde <MIDI_GetStatusType+0x4c>
 cb6:	38 f4       	brcc	.+14     	; 0xcc6 <MIDI_GetStatusType+0x34>
 cb8:	87 3f       	cpi	r24, 0xF7	; 247
 cba:	e9 f0       	breq	.+58     	; 0xcf6 <MIDI_GetStatusType+0x64>
 cbc:	88 3f       	cpi	r24, 0xF8	; 248
 cbe:	69 f0       	breq	.+26     	; 0xcda <MIDI_GetStatusType+0x48>
 cc0:	83 3f       	cpi	r24, 0xF3	; 243
 cc2:	e9 f0       	breq	.+58     	; 0xcfe <MIDI_GetStatusType+0x6c>
 cc4:	1a c0       	rjmp	.+52     	; 0xcfa <MIDI_GetStatusType+0x68>
 cc6:	8c 3f       	cpi	r24, 0xFC	; 252
 cc8:	71 f0       	breq	.+28     	; 0xce6 <MIDI_GetStatusType+0x54>
 cca:	58 f0       	brcs	.+22     	; 0xce2 <MIDI_GetStatusType+0x50>
 ccc:	8e 3f       	cpi	r24, 0xFE	; 254
 cce:	69 f0       	breq	.+26     	; 0xcea <MIDI_GetStatusType+0x58>
 cd0:	8f 3f       	cpi	r24, 0xFF	; 255
 cd2:	69 f0       	breq	.+26     	; 0xcee <MIDI_GetStatusType+0x5c>
 cd4:	12 c0       	rjmp	.+36     	; 0xcfa <MIDI_GetStatusType+0x68>
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 cd6:	82 e0       	ldi	r24, 0x02	; 2
 cd8:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 cda:	83 e0       	ldi	r24, 0x03	; 3
 cdc:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 cde:	83 e0       	ldi	r24, 0x03	; 3
 ce0:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 ce2:	83 e0       	ldi	r24, 0x03	; 3
 ce4:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 ce6:	83 e0       	ldi	r24, 0x03	; 3
 ce8:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 cea:	83 e0       	ldi	r24, 0x03	; 3
 cec:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 cee:	83 e0       	ldi	r24, 0x03	; 3
 cf0:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 cf2:	84 e0       	ldi	r24, 0x04	; 4
 cf4:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 cf6:	85 e0       	ldi	r24, 0x05	; 5
 cf8:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 cfa:	80 e0       	ldi	r24, 0x00	; 0
 cfc:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 cfe:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 d00:	08 95       	ret

Disassembly of section .text.isEqualCommands:

00001596 <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    1596:	62 13       	cpse	r22, r18
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data1) return false;
    159a:	84 17       	cp	r24, r20
    159c:	21 f0       	breq	.+8      	; 0x15a6 <isEqualCommands+0x10>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data1) return false;
			
	return true;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
}
    15a8:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

00000aba <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
 ac2:	68 97       	sbiw	r28, 0x18	; 24
 ac4:	0f b6       	in	r0, 0x3f	; 63
 ac6:	f8 94       	cli
 ac8:	de bf       	out	0x3e, r29	; 62
 aca:	0f be       	out	0x3f, r0	; 63
 acc:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word((uint16_t*)0x02);
 ace:	62 e0       	ldi	r22, 0x02	; 2
 ad0:	70 e0       	ldi	r23, 0x00	; 0
 ad2:	80 e8       	ldi	r24, 0x80	; 128
 ad4:	ae d5       	rcall	.+2908   	; 0x1632 <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 ad6:	8b 3a       	cpi	r24, 0xAB	; 171
 ad8:	9c 4a       	sbci	r25, 0xAC	; 172
 ada:	c1 f4       	brne	.+48     	; 0xb0c <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 adc:	4f e0       	ldi	r20, 0x0F	; 15
 ade:	50 e0       	ldi	r21, 0x00	; 0
 ae0:	60 e8       	ldi	r22, 0x80	; 128
 ae2:	28 e1       	ldi	r18, 0x18	; 24
 ae4:	30 e0       	ldi	r19, 0x00	; 0
 ae6:	ce 01       	movw	r24, r28
 ae8:	01 96       	adiw	r24, 0x01	; 1
 aea:	d9 d4       	rcall	.+2482   	; 0x149e <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 aec:	88 e1       	ldi	r24, 0x18	; 24
 aee:	fe 01       	movw	r30, r28
 af0:	31 96       	adiw	r30, 0x01	; 1
 af2:	a8 e0       	ldi	r26, 0x08	; 8
 af4:	b1 e0       	ldi	r27, 0x01	; 1
 af6:	01 90       	ld	r0, Z+
 af8:	0d 92       	st	X+, r0
 afa:	8a 95       	dec	r24
 afc:	e1 f7       	brne	.-8      	; 0xaf6 <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 afe:	6e e0       	ldi	r22, 0x0E	; 14
 b00:	70 e0       	ldi	r23, 0x00	; 0
 b02:	80 e8       	ldi	r24, 0x80	; 128
 b04:	65 d5       	rcall	.+2762   	; 0x15d0 <eeprom_read_byte>
 b06:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
 b0a:	0b c0       	rjmp	.+22     	; 0xb22 <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 b0c:	88 e1       	ldi	r24, 0x18	; 24
 b0e:	e9 e8       	ldi	r30, 0x89	; 137
 b10:	f1 e0       	ldi	r31, 0x01	; 1
 b12:	a8 e0       	ldi	r26, 0x08	; 8
 b14:	b1 e0       	ldi	r27, 0x01	; 1
 b16:	01 90       	ld	r0, Z+
 b18:	0d 92       	st	X+, r0
 b1a:	8a 95       	dec	r24
 b1c:	e1 f7       	brne	.-8      	; 0xb16 <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 b1e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
	}
}
 b22:	68 96       	adiw	r28, 0x18	; 24
 b24:	0f b6       	in	r0, 0x3f	; 63
 b26:	f8 94       	cli
 b28:	de bf       	out	0x3e, r29	; 62
 b2a:	0f be       	out	0x3f, r0	; 63
 b2c:	cd bf       	out	0x3d, r28	; 61
 b2e:	df 91       	pop	r29
 b30:	cf 91       	pop	r28
 b32:	08 95       	ret

Disassembly of section .text.setMidiLeds:

00000efe <setMidiLeds>:

void setMidiLeds()
{
 efe:	cf 93       	push	r28
	if(mode == PROGRAMMING)
 f00:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 f04:	81 30       	cpi	r24, 0x01	; 1
 f06:	11 f5       	brne	.+68     	; 0xf4c <setMidiLeds+0x4e>
 f08:	18 c0       	rjmp	.+48     	; 0xf3a <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
 f0a:	ec 2f       	mov	r30, r28
 f0c:	f0 e0       	ldi	r31, 0x00	; 0
 f0e:	ef 5f       	subi	r30, 0xFF	; 255
 f10:	fe 4f       	sbci	r31, 0xFE	; 254
 f12:	80 81       	ld	r24, Z
 f14:	81 30       	cpi	r24, 0x01	; 1
 f16:	41 f0       	breq	.+16     	; 0xf28 <setMidiLeds+0x2a>
 f18:	18 f0       	brcs	.+6      	; 0xf20 <setMidiLeds+0x22>
 f1a:	82 30       	cpi	r24, 0x02	; 2
 f1c:	49 f0       	breq	.+18     	; 0xf30 <setMidiLeds+0x32>
 f1e:	0b c0       	rjmp	.+22     	; 0xf36 <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
 f20:	60 e0       	ldi	r22, 0x00	; 0
 f22:	8c 2f       	mov	r24, r28
 f24:	18 d1       	rcall	.+560    	; 0x1156 <SH100HW_SetNewLedState>
 f26:	07 c0       	rjmp	.+14     	; 0xf36 <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
 f28:	62 e0       	ldi	r22, 0x02	; 2
 f2a:	8c 2f       	mov	r24, r28
 f2c:	14 d1       	rcall	.+552    	; 0x1156 <SH100HW_SetNewLedState>
 f2e:	03 c0       	rjmp	.+6      	; 0xf36 <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
 f30:	61 e0       	ldi	r22, 0x01	; 1
 f32:	8c 2f       	mov	r24, r28
 f34:	10 d1       	rcall	.+544    	; 0x1156 <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
 f36:	cf 5f       	subi	r28, 0xFF	; 255
 f38:	01 c0       	rjmp	.+2      	; 0xf3c <setMidiLeds+0x3e>
 f3a:	c0 e0       	ldi	r28, 0x00	; 0
 f3c:	c6 30       	cpi	r28, 0x06	; 6
 f3e:	28 f3       	brcs	.-54     	; 0xf0a <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
 f40:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 f44:	8f 3f       	cpi	r24, 0xFF	; 255
 f46:	11 f0       	breq	.+4      	; 0xf4c <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
 f48:	61 e0       	ldi	r22, 0x01	; 1
 f4a:	05 d1       	rcall	.+522    	; 0x1156 <SH100HW_SetNewLedState>
		}
	}
}
 f4c:	cf 91       	pop	r28
 f4e:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

00001404 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x00; // psc = 1024 if on
    1404:	e1 e8       	ldi	r30, 0x81	; 129
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
    140c:	ef e6       	ldi	r30, 0x6F	; 111
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	80 83       	st	Z, r24
	TCNT1 = 0;
    1416:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    141a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	loadCommSetFromMemory();
    1424:	4a db       	rcall	.-2412   	; 0xaba <loadCommSetFromMemory>
	mode = RUNNING;
    1426:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    142a:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

00001650 <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    1650:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    1654:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

000012ce <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
    12ce:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <currentProgBtn>
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	f9 01       	movw	r30, r18
    12d6:	ef 5f       	subi	r30, 0xFF	; 255
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	90 81       	ld	r25, Z
    12dc:	91 30       	cpi	r25, 0x01	; 1
    12de:	21 f4       	brne	.+8      	; 0x12e8 <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
    12e0:	f9 01       	movw	r30, r18
    12e2:	ef 5f       	subi	r30, 0xFF	; 255
    12e4:	fe 4f       	sbci	r31, 0xFE	; 254
    12e6:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
    12e8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
    12ec:	e8 2f       	mov	r30, r24
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	ef 5f       	subi	r30, 0xFF	; 255
    12f2:	fe 4f       	sbci	r31, 0xFE	; 254
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 83       	st	Z, r24
	setMidiLeds();
    12f8:	02 de       	rcall	.-1020   	; 0xefe <setMidiLeds>
    12fa:	08 95       	ret

Disassembly of section .text.MIDICTRL_SwitchMode:

00000ff0 <MIDICTRL_SwitchMode>:
	loadCommSetFromMemory();
	mode = RUNNING;
}

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
     ff0:	cf 93       	push	r28
     ff2:	c8 2f       	mov	r28, r24
	if(mode == RUNNING)
     ff4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
     ff8:	81 11       	cpse	r24, r1
     ffa:	17 c0       	rjmp	.+46     	; 0x102a <MIDICTRL_SwitchMode+0x3a>
	{
		MIDI_SetRetranslateState(false);
     ffc:	35 d3       	rcall	.+1642   	; 0x1668 <MIDI_SetRetranslateState>
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	06 c0       	rjmp	.+12     	; 0x100e <MIDICTRL_SwitchMode+0x1e>
			midiProgBtnState[i] = PROG_CLEAR;
    1002:	e8 2f       	mov	r30, r24
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	ef 5f       	subi	r30, 0xFF	; 255
    1008:	fe 4f       	sbci	r31, 0xFE	; 254
    100a:	10 82       	st	Z, r1
{	
	if(mode == RUNNING)
	{
		MIDI_SetRetranslateState(false);
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
    100c:	8f 5f       	subi	r24, 0xFF	; 255
    100e:	86 30       	cpi	r24, 0x06	; 6
    1010:	c0 f3       	brcs	.-16     	; 0x1002 <MIDICTRL_SwitchMode+0x12>
			midiProgBtnState[i] = PROG_CLEAR;
		
		MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
    1012:	80 e0       	ldi	r24, 0x00	; 0
    1014:	5c d1       	rcall	.+696    	; 0x12ce <MIDICTRL_SetProgrammingButton>
		
		
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
    1016:	63 e0       	ldi	r22, 0x03	; 3
    1018:	87 e0       	ldi	r24, 0x07	; 7
    101a:	9d d0       	rcall	.+314    	; 0x1156 <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
    101c:	63 e0       	ldi	r22, 0x03	; 3
    101e:	88 e0       	ldi	r24, 0x08	; 8
    1020:	9a d0       	rcall	.+308    	; 0x1156 <SH100HW_SetNewLedState>
		
		SH100HW_SetNewLedState(LED_B, LED_OFF);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	86 e0       	ldi	r24, 0x06	; 6
    1026:	97 d0       	rcall	.+302    	; 0x1156 <SH100HW_SetNewLedState>
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <MIDICTRL_SwitchMode+0x42>
	}
	else
	{
		SH100HW_SetPreviousLedState(LED_B);
    102a:	86 e0       	ldi	r24, 0x06	; 6
    102c:	ff d1       	rcall	.+1022   	; 0x142c <SH100HW_SetPreviousLedState>
		
		MIDI_SetRetranslateState(true);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	1b d3       	rcall	.+1590   	; 0x1668 <MIDI_SetRetranslateState>
	}
	mode = newMode;
    1032:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <mode>
	
	setMidiLeds();
    1036:	63 df       	rcall	.-314    	; 0xefe <setMidiLeds>
}
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

00001656 <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    1656:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <channelNum>
    165a:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

0000165c <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    165c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <omniModeEnabled>
    1660:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

00001662 <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    1662:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <muteCommandEnabled>
    1666:	08 95       	ret

Disassembly of section .text.programmBtn:

0000103c <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
    103c:	cf 92       	push	r12
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	f9 01       	movw	r30, r18
    1048:	ef 5f       	subi	r30, 0xFF	; 255
    104a:	fe 4f       	sbci	r31, 0xFE	; 254
    104c:	90 81       	ld	r25, Z
    104e:	91 30       	cpi	r25, 0x01	; 1
    1050:	b9 f4       	brne	.+46     	; 0x1080 <programmBtn+0x44>
    1052:	6a 01       	movw	r12, r20
    1054:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
    1056:	fa 01       	movw	r30, r20
    1058:	84 91       	lpm	r24, Z
    105a:	e7 fc       	sbrc	r14, 7
    105c:	80 81       	ld	r24, Z
    105e:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	c8 0e       	add	r12, r24
    1064:	d1 1c       	adc	r13, r1
    1066:	e1 1c       	adc	r14, r1
    1068:	f6 01       	movw	r30, r12
    106a:	84 91       	lpm	r24, Z
    106c:	e7 fc       	sbrc	r14, 7
    106e:	80 81       	ld	r24, Z
    1070:	12 96       	adiw	r26, 0x02	; 2
    1072:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
    1074:	f9 01       	movw	r30, r18
    1076:	ef 5f       	subi	r30, 0xFF	; 255
    1078:	fe 4f       	sbci	r31, 0xFE	; 254
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	80 83       	st	Z, r24
		setMidiLeds();
    107e:	3f df       	rcall	.-386    	; 0xefe <setMidiLeds>
	}
}
    1080:	ef 90       	pop	r14
    1082:	df 90       	pop	r13
    1084:	cf 90       	pop	r12
    1086:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwChComm:

00000d70 <MIDICTRL_SendSwChComm>:

void MIDICTRL_SendSwChComm(uint8_t chNum)
{
	if(mode == RUNNING)
 d70:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mode>
 d74:	91 11       	cpse	r25, r1
 d76:	30 c0       	rjmp	.+96     	; 0xdd8 <MIDICTRL_SendSwChComm+0x68>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
 d78:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <commandSet>
 d7c:	91 30       	cpi	r25, 0x01	; 1
 d7e:	19 f4       	brne	.+6      	; 0xd86 <MIDICTRL_SendSwChComm+0x16>
 d80:	e8 e0       	ldi	r30, 0x08	; 8
 d82:	f1 e0       	ldi	r31, 0x01	; 1
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <MIDICTRL_SendSwChComm+0x1a>
		else currentCommandBlock = &defaultCommands;
 d86:	e9 e8       	ldi	r30, 0x89	; 137
 d88:	f1 e0       	ldi	r31, 0x01	; 1
		
		switch(chNum)
 d8a:	81 30       	cpi	r24, 0x01	; 1
 d8c:	71 f0       	breq	.+28     	; 0xdaa <MIDICTRL_SendSwChComm+0x3a>
 d8e:	28 f0       	brcs	.+10     	; 0xd9a <MIDICTRL_SendSwChComm+0x2a>
 d90:	82 30       	cpi	r24, 0x02	; 2
 d92:	99 f0       	breq	.+38     	; 0xdba <MIDICTRL_SendSwChComm+0x4a>
 d94:	83 30       	cpi	r24, 0x03	; 3
 d96:	c9 f0       	breq	.+50     	; 0xdca <MIDICTRL_SendSwChComm+0x5a>
 d98:	08 95       	ret
		{
			case SH100_CHANNEL1: MIDI_SendCommand(currentCommandBlock->channel1, channelNum); break;
 d9a:	60 81       	ld	r22, Z
 d9c:	71 81       	ldd	r23, Z+1	; 0x01
 d9e:	82 81       	ldd	r24, Z+2	; 0x02
 da0:	93 81       	ldd	r25, Z+3	; 0x03
 da2:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <channelNum>
 da6:	c6 de       	rcall	.-628    	; 0xb34 <MIDI_SendCommand>
 da8:	08 95       	ret
			case SH100_CHANNEL2: MIDI_SendCommand(currentCommandBlock->channel2, channelNum); break;
 daa:	64 81       	ldd	r22, Z+4	; 0x04
 dac:	75 81       	ldd	r23, Z+5	; 0x05
 dae:	86 81       	ldd	r24, Z+6	; 0x06
 db0:	97 81       	ldd	r25, Z+7	; 0x07
 db2:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <channelNum>
 db6:	be de       	rcall	.-644    	; 0xb34 <MIDI_SendCommand>
 db8:	08 95       	ret
			case SH100_CHANNEL3: MIDI_SendCommand(currentCommandBlock->channel3, channelNum); break;
 dba:	60 85       	ldd	r22, Z+8	; 0x08
 dbc:	71 85       	ldd	r23, Z+9	; 0x09
 dbe:	82 85       	ldd	r24, Z+10	; 0x0a
 dc0:	93 85       	ldd	r25, Z+11	; 0x0b
 dc2:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <channelNum>
 dc6:	b6 de       	rcall	.-660    	; 0xb34 <MIDI_SendCommand>
 dc8:	08 95       	ret
			case SH100_CHANNEL4: MIDI_SendCommand(currentCommandBlock->channel4, channelNum); break;
 dca:	64 85       	ldd	r22, Z+12	; 0x0c
 dcc:	75 85       	ldd	r23, Z+13	; 0x0d
 dce:	86 85       	ldd	r24, Z+14	; 0x0e
 dd0:	97 85       	ldd	r25, Z+15	; 0x0f
 dd2:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <channelNum>
 dd6:	ae de       	rcall	.-676    	; 0xb34 <MIDI_SendCommand>
 dd8:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendLoopEnComm:

00001386 <MIDICTRL_SendLoopEnComm>:
	}
}

void MIDICTRL_SendLoopEnComm()
{
	if(mode == RUNNING)
    1386:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    138a:	81 11       	cpse	r24, r1
    138c:	10 c0       	rjmp	.+32     	; 0x13ae <MIDICTRL_SendLoopEnComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    138e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	19 f4       	brne	.+6      	; 0x139c <MIDICTRL_SendLoopEnComm+0x16>
    1396:	e8 e0       	ldi	r30, 0x08	; 8
    1398:	f1 e0       	ldi	r31, 0x01	; 1
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <MIDICTRL_SendLoopEnComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    139c:	e9 e8       	ldi	r30, 0x89	; 137
    139e:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->loopOn, channelNum);
    13a0:	60 89       	ldd	r22, Z+16	; 0x10
    13a2:	71 89       	ldd	r23, Z+17	; 0x11
    13a4:	82 89       	ldd	r24, Z+18	; 0x12
    13a6:	93 89       	ldd	r25, Z+19	; 0x13
    13a8:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <channelNum>
    13ac:	c3 db       	rcall	.-2170   	; 0xb34 <MIDI_SendCommand>
    13ae:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwABComm:

000013b0 <MIDICTRL_SendSwABComm>:
	}
}

void MIDICTRL_SendSwABComm()
{
	if(mode == RUNNING)
    13b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    13b4:	81 11       	cpse	r24, r1
    13b6:	10 c0       	rjmp	.+32     	; 0x13d8 <MIDICTRL_SendSwABComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    13b8:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	19 f4       	brne	.+6      	; 0x13c6 <MIDICTRL_SendSwABComm+0x16>
    13c0:	e8 e0       	ldi	r30, 0x08	; 8
    13c2:	f1 e0       	ldi	r31, 0x01	; 1
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <MIDICTRL_SendSwABComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    13c6:	e9 e8       	ldi	r30, 0x89	; 137
    13c8:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
    13ca:	64 89       	ldd	r22, Z+20	; 0x14
    13cc:	75 89       	ldd	r23, Z+21	; 0x15
    13ce:	86 89       	ldd	r24, Z+22	; 0x16
    13d0:	97 89       	ldd	r25, Z+23	; 0x17
    13d2:	40 91 ae 01 	lds	r20, 0x01AE	; 0x8001ae <channelNum>
    13d6:	ae db       	rcall	.-2212   	; 0xb34 <MIDI_SendCommand>
    13d8:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

000011fc <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
    11fc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    1200:	81 30       	cpi	r24, 0x01	; 1
    1202:	b1 f4       	brne	.+44     	; 0x1230 <MIDICTRL_StoreUserCommands+0x34>
	{
		commandSet = USER;
    1204:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
		
		eeprom_write_word((uint16_t*)0x02, MEMORY_MAGIC_WORD);
    1208:	6b ea       	ldi	r22, 0xAB	; 171
    120a:	7c ea       	ldi	r23, 0xAC	; 172
    120c:	82 e0       	ldi	r24, 0x02	; 2
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	37 d2       	rcall	.+1134   	; 0x1680 <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
    1212:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <commandSet>
    1216:	8e e0       	ldi	r24, 0x0E	; 14
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	72 d1       	rcall	.+740    	; 0x1500 <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
    121c:	68 e0       	ldi	r22, 0x08	; 8
    121e:	71 e0       	ldi	r23, 0x01	; 1
    1220:	80 e8       	ldi	r24, 0x80	; 128
    1222:	28 e1       	ldi	r18, 0x18	; 24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	4f e0       	ldi	r20, 0x0F	; 15
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	38 d0       	rcall	.+112    	; 0x129c <eeprom_write_block>
		
		mode = RUNNING;
    122c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    1230:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

0000151c <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    151c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	41 f4       	brne	.+16     	; 0x1534 <MIDICTRL_DiscardCommands+0x18>
	{
		commandSet = DEFAULT;
    1524:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);		
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	8e e0       	ldi	r24, 0x0E	; 14
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	e8 df       	rcall	.-48     	; 0x1500 <eeprom_write_byte>
		mode = RUNNING;
    1530:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    1534:	08 95       	ret

Disassembly of section .text.indicateMidiError:

000012fc <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 255 - 100;
    12fc:	8b e9       	ldi	r24, 0x9B	; 155
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    1304:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TCCR1B |= 0x05; // psc = 1024, timer on
    1308:	e1 e8       	ldi	r30, 0x81	; 129
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	85 60       	ori	r24, 0x05	; 5
    1310:	80 83       	st	Z, r24
	currentErrBtnId = currentProgBtn;
    1312:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
    1316:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
    131a:	f1 dd       	rcall	.-1054   	; 0xefe <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	87 e0       	ldi	r24, 0x07	; 7
    1320:	1a df       	rcall	.-460    	; 0x1156 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    1322:	61 e0       	ldi	r22, 0x01	; 1
    1324:	88 e0       	ldi	r24, 0x08	; 8
    1326:	17 df       	rcall	.-466    	; 0x1156 <SH100HW_SetNewLedState>
    1328:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

000000dc <MIDICTRL_HandleCommand>:
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
	}
}

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <MIDICTRL_HandleCommand+0xa>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <MIDICTRL_HandleCommand+0xc>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	69 83       	std	Y+1, r22	; 0x01
  ee:	7a 83       	std	Y+2, r23	; 0x02
  f0:	8b 83       	std	Y+3, r24	; 0x03
  f2:	9c 83       	std	Y+4, r25	; 0x04
	switch(mode)
  f4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <MIDICTRL_HandleCommand+0x28>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <MIDICTRL_HandleCommand+0x26>
 100:	8f c0       	rjmp	.+286    	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 102:	e3 c0       	rjmp	.+454    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 104:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <omniModeEnabled>
 108:	81 11       	cpse	r24, r1
 10a:	05 c0       	rjmp	.+10     	; 0x116 <MIDICTRL_HandleCommand+0x3a>
			{
				if(channelNum != command.channel_type) return;
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <channelNum>
 112:	98 13       	cpse	r25, r24
 114:	da c0       	rjmp	.+436    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			
			if(muteCommandEnabled)
 116:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <muteCommandEnabled>
 11a:	88 23       	and	r24, r24
 11c:	a9 f0       	breq	.+42     	; 0x148 <MIDICTRL_HandleCommand+0x6c>
			{
				if(isEqualCommands(command, muteCommand)) 
 11e:	88 ed       	ldi	r24, 0xD8	; 216
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	5a 2f       	mov	r21, r26
 128:	2a da       	rcall	.-2988   	; 0xfffff57e <__eeprom_end+0xff7ef57e>
 12a:	9b 01       	movw	r18, r22
 12c:	ac 01       	movw	r20, r24
 12e:	69 81       	ldd	r22, Y+1	; 0x01
 130:	7a 81       	ldd	r23, Y+2	; 0x02
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	9c 81       	ldd	r25, Y+4	; 0x04
 136:	2f da       	rcall	.-2978   	; 0xfffff596 <__eeprom_end+0xff7ef596>
 138:	88 23       	and	r24, r24
 13a:	31 f0       	breq	.+12     	; 0x148 <MIDICTRL_HandleCommand+0x6c>
				{
					if((command.data2>63) ? 1 : 0) SH100CTRL_MuteAmp();
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	80 34       	cpi	r24, 0x40	; 64
 140:	10 f0       	brcs	.+4      	; 0x146 <MIDICTRL_HandleCommand+0x6a>
 142:	95 da       	rcall	.-2774   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
 144:	01 c0       	rjmp	.+2      	; 0x148 <MIDICTRL_HandleCommand+0x6c>
					else SH100CTRL_UnmuteAmp();
 146:	6f da       	rcall	.-2850   	; 0xfffff626 <__eeprom_end+0xff7ef626>
				}
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 148:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	19 f4       	brne	.+6      	; 0x156 <MIDICTRL_HandleCommand+0x7a>
 150:	08 e0       	ldi	r16, 0x08	; 8
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	02 c0       	rjmp	.+4      	; 0x15a <MIDICTRL_HandleCommand+0x7e>
			else currentCommandBlock = &defaultCommands;
 156:	09 e8       	ldi	r16, 0x89	; 137
 158:	11 e0       	ldi	r17, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) 
 15a:	f8 01       	movw	r30, r16
 15c:	20 81       	ld	r18, Z
 15e:	31 81       	ldd	r19, Z+1	; 0x01
 160:	42 81       	ldd	r20, Z+2	; 0x02
 162:	53 81       	ldd	r21, Z+3	; 0x03
 164:	69 81       	ldd	r22, Y+1	; 0x01
 166:	7a 81       	ldd	r23, Y+2	; 0x02
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	9c 81       	ldd	r25, Y+4	; 0x04
 16c:	14 da       	rcall	.-3032   	; 0xfffff596 <__eeprom_end+0xff7ef596>
 16e:	88 23       	and	r24, r24
 170:	19 f0       	breq	.+6      	; 0x178 <MIDICTRL_HandleCommand+0x9c>
			{
				SH100CTRL_SwChannel(0); 
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	f1 d8       	rcall	.-3614   	; 0xfffff358 <__eeprom_end+0xff7ef358>
				return;
 176:	a9 c0       	rjmp	.+338    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->channel2)) 
 178:	f8 01       	movw	r30, r16
 17a:	24 81       	ldd	r18, Z+4	; 0x04
 17c:	35 81       	ldd	r19, Z+5	; 0x05
 17e:	46 81       	ldd	r20, Z+6	; 0x06
 180:	57 81       	ldd	r21, Z+7	; 0x07
 182:	69 81       	ldd	r22, Y+1	; 0x01
 184:	7a 81       	ldd	r23, Y+2	; 0x02
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	9c 81       	ldd	r25, Y+4	; 0x04
 18a:	05 da       	rcall	.-3062   	; 0xfffff596 <__eeprom_end+0xff7ef596>
 18c:	88 23       	and	r24, r24
 18e:	19 f0       	breq	.+6      	; 0x196 <MIDICTRL_HandleCommand+0xba>
			{
				SH100CTRL_SwChannel(1); 
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	e2 d8       	rcall	.-3644   	; 0xfffff358 <__eeprom_end+0xff7ef358>
				return;
 194:	9a c0       	rjmp	.+308    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->channel3)) 
 196:	f8 01       	movw	r30, r16
 198:	20 85       	ldd	r18, Z+8	; 0x08
 19a:	31 85       	ldd	r19, Z+9	; 0x09
 19c:	42 85       	ldd	r20, Z+10	; 0x0a
 19e:	53 85       	ldd	r21, Z+11	; 0x0b
 1a0:	69 81       	ldd	r22, Y+1	; 0x01
 1a2:	7a 81       	ldd	r23, Y+2	; 0x02
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	f6 d9       	rcall	.-3092   	; 0xfffff596 <__eeprom_end+0xff7ef596>
 1aa:	88 23       	and	r24, r24
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <MIDICTRL_HandleCommand+0xd8>
			{
				SH100CTRL_SwChannel(2); 
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	d3 d8       	rcall	.-3674   	; 0xfffff358 <__eeprom_end+0xff7ef358>
				return;
 1b2:	8b c0       	rjmp	.+278    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->channel4)) 
 1b4:	f8 01       	movw	r30, r16
 1b6:	24 85       	ldd	r18, Z+12	; 0x0c
 1b8:	35 85       	ldd	r19, Z+13	; 0x0d
 1ba:	46 85       	ldd	r20, Z+14	; 0x0e
 1bc:	57 85       	ldd	r21, Z+15	; 0x0f
 1be:	69 81       	ldd	r22, Y+1	; 0x01
 1c0:	7a 81       	ldd	r23, Y+2	; 0x02
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	9c 81       	ldd	r25, Y+4	; 0x04
 1c6:	e7 d9       	rcall	.-3122   	; 0xfffff596 <__eeprom_end+0xff7ef596>
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <MIDICTRL_HandleCommand+0xf6>
			{
				SH100CTRL_SwChannel(3); 
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	c4 d8       	rcall	.-3704   	; 0xfffff358 <__eeprom_end+0xff7ef358>
				return;
 1d0:	7c c0       	rjmp	.+248    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}		
			if(isEqualCommands(command, currentCommandBlock->loopOn)) 
 1d2:	f8 01       	movw	r30, r16
 1d4:	20 89       	ldd	r18, Z+16	; 0x10
 1d6:	31 89       	ldd	r19, Z+17	; 0x11
 1d8:	42 89       	ldd	r20, Z+18	; 0x12
 1da:	53 89       	ldd	r21, Z+19	; 0x13
 1dc:	69 81       	ldd	r22, Y+1	; 0x01
 1de:	7a 81       	ldd	r23, Y+2	; 0x02
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	d8 d9       	rcall	.-3152   	; 0xfffff596 <__eeprom_end+0xff7ef596>
 1e6:	88 23       	and	r24, r24
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <MIDICTRL_HandleCommand+0x11c>
			{
				SH100CTRL_SetLoop((command.data2>63) ? 1 : 0); 
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 34       	cpi	r25, 0x40	; 64
 1f0:	08 f4       	brcc	.+2      	; 0x1f4 <MIDICTRL_HandleCommand+0x118>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	f2 d8       	rcall	.-3612   	; 0xfffff3da <__eeprom_end+0xff7ef3da>
				return;
 1f6:	69 c0       	rjmp	.+210    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->outAB)) 
 1f8:	f8 01       	movw	r30, r16
 1fa:	24 89       	ldd	r18, Z+20	; 0x14
 1fc:	35 89       	ldd	r19, Z+21	; 0x15
 1fe:	46 89       	ldd	r20, Z+22	; 0x16
 200:	57 89       	ldd	r21, Z+23	; 0x17
 202:	69 81       	ldd	r22, Y+1	; 0x01
 204:	7a 81       	ldd	r23, Y+2	; 0x02
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	9c 81       	ldd	r25, Y+4	; 0x04
 20a:	c5 d9       	rcall	.-3190   	; 0xfffff596 <__eeprom_end+0xff7ef596>
 20c:	88 23       	and	r24, r24
 20e:	09 f4       	brne	.+2      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 210:	5c c0       	rjmp	.+184    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			{
				SH100CTRL_SetAB((command.data2>63) ? 1 : 0); 
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 34       	cpi	r25, 0x40	; 64
 218:	08 f4       	brcc	.+2      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	2e d9       	rcall	.-3492   	; 0xfffff47a <__eeprom_end+0xff7ef47a>
				return;
 21e:	55 c0       	rjmp	.+170    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command.status == MIDI_COMM_PROGRAM_CHANGE)
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	8c 30       	cpi	r24, 0x0C	; 12
 224:	81 f5       	brne	.+96     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
			{
				switch(currentProgBtn)
 226:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	79 f0       	breq	.+30     	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 22e:	28 f0       	brcs	.+10     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	a9 f0       	breq	.+42     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	e1 f0       	breq	.+56     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 238:	24 c0       	rjmp	.+72     	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), &command, MIDI_PROG_BTN_CH1); break;
 23a:	ae 01       	movw	r20, r28
 23c:	4f 5f       	subi	r20, 0xFF	; 255
 23e:	5f 4f       	sbci	r21, 0xFF	; 255
 240:	60 e8       	ldi	r22, 0x80	; 128
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	f9 d6       	rcall	.+3570   	; 0x103c <programmBtn>
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), &command, MIDI_PROG_BTN_CH2); break;
 24c:	ae 01       	movw	r20, r28
 24e:	4f 5f       	subi	r20, 0xFF	; 255
 250:	5f 4f       	sbci	r21, 0xFF	; 255
 252:	60 e8       	ldi	r22, 0x80	; 128
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	f0 d6       	rcall	.+3552   	; 0x103c <programmBtn>
 25c:	36 c0       	rjmp	.+108    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), &command, MIDI_PROG_BTN_CH3); break;
 25e:	ae 01       	movw	r20, r28
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	60 e8       	ldi	r22, 0x80	; 128
 266:	22 e0       	ldi	r18, 0x02	; 2
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	e7 d6       	rcall	.+3534   	; 0x103c <programmBtn>
 26e:	2d c0       	rjmp	.+90     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), &command, MIDI_PROG_BTN_CH4); break;
 270:	ae 01       	movw	r20, r28
 272:	4f 5f       	subi	r20, 0xFF	; 255
 274:	5f 4f       	sbci	r21, 0xFF	; 255
 276:	60 e8       	ldi	r22, 0x80	; 128
 278:	23 e0       	ldi	r18, 0x03	; 3
 27a:	84 e1       	ldi	r24, 0x14	; 20
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	de d6       	rcall	.+3516   	; 0x103c <programmBtn>
 280:	24 c0       	rjmp	.+72     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					default: indicateMidiError(); break; 
 282:	3c d8       	rcall	.-3976   	; 0xfffff2fc <__eeprom_end+0xff7ef2fc>
 284:	22 c0       	rjmp	.+68     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
				}
			}
			else if(command.status == MIDI_COMM_CONTROL_CHANGE)
 286:	8b 30       	cpi	r24, 0x0B	; 11
 288:	f9 f4       	brne	.+62     	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
			{
				if(command.data1 == muteCommand.data1)
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	87 30       	cpi	r24, 0x07	; 7
 28e:	11 f4       	brne	.+4      	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
				{
					indicateMidiError();
 290:	35 d8       	rcall	.-3990   	; 0xfffff2fc <__eeprom_end+0xff7ef2fc>
 292:	1b c0       	rjmp	.+54     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
				}
				else
				{
					switch(currentProgBtn)
 294:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	59 f0       	breq	.+22     	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	91 f4       	brne	.+36     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), &command, MIDI_PROG_BTN_AB); break;
 2a0:	ae 01       	movw	r20, r28
 2a2:	4f 5f       	subi	r20, 0xFF	; 255
 2a4:	5f 4f       	sbci	r21, 0xFF	; 255
 2a6:	60 e8       	ldi	r22, 0x80	; 128
 2a8:	25 e0       	ldi	r18, 0x05	; 5
 2aa:	8c e1       	ldi	r24, 0x1C	; 28
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	c6 d6       	rcall	.+3468   	; 0x103c <programmBtn>
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), &command, MIDI_PROG_BTN_LOOP); break;
 2b2:	ae 01       	movw	r20, r28
 2b4:	4f 5f       	subi	r20, 0xFF	; 255
 2b6:	5f 4f       	sbci	r21, 0xFF	; 255
 2b8:	60 e8       	ldi	r22, 0x80	; 128
 2ba:	24 e0       	ldi	r18, 0x04	; 4
 2bc:	88 e1       	ldi	r24, 0x18	; 24
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	bd d6       	rcall	.+3450   	; 0x103c <programmBtn>
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
						default: indicateMidiError(); break;
 2c4:	1b d8       	rcall	.-4042   	; 0xfffff2fc <__eeprom_end+0xff7ef2fc>
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					}
				}
			}
			else
			{
				indicateMidiError();
 2c8:	19 d8       	rcall	.-4046   	; 0xfffff2fc <__eeprom_end+0xff7ef2fc>
			}			
			break;
		}
	}	
}
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

Disassembly of section .text.__vector_13:

00000ea2 <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
 ea2:	1f 92       	push	r1
 ea4:	0f 92       	push	r0
 ea6:	0f b6       	in	r0, 0x3f	; 63
 ea8:	0f 92       	push	r0
 eaa:	11 24       	eor	r1, r1
 eac:	2f 93       	push	r18
 eae:	3f 93       	push	r19
 eb0:	4f 93       	push	r20
 eb2:	5f 93       	push	r21
 eb4:	6f 93       	push	r22
 eb6:	7f 93       	push	r23
 eb8:	8f 93       	push	r24
 eba:	9f 93       	push	r25
 ebc:	af 93       	push	r26
 ebe:	bf 93       	push	r27
 ec0:	ef 93       	push	r30
 ec2:	ff 93       	push	r31
	TCCR1B |= 0x00; // psc = 0, timer off
 ec4:	e1 e8       	ldi	r30, 0x81	; 129
 ec6:	f0 e0       	ldi	r31, 0x00	; 0
 ec8:	80 81       	ld	r24, Z
 eca:	80 83       	st	Z, r24
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
 ecc:	8f ef       	ldi	r24, 0xFF	; 255
 ece:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
 ed2:	15 d0       	rcall	.+42     	; 0xefe <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
 ed4:	87 e0       	ldi	r24, 0x07	; 7
 ed6:	aa d2       	rcall	.+1364   	; 0x142c <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
 ed8:	88 e0       	ldi	r24, 0x08	; 8
 eda:	a8 d2       	rcall	.+1360   	; 0x142c <SH100HW_SetPreviousLedState>
 edc:	ff 91       	pop	r31
 ede:	ef 91       	pop	r30
 ee0:	bf 91       	pop	r27
 ee2:	af 91       	pop	r26
 ee4:	9f 91       	pop	r25
 ee6:	8f 91       	pop	r24
 ee8:	7f 91       	pop	r23
 eea:	6f 91       	pop	r22
 eec:	5f 91       	pop	r21
 eee:	4f 91       	pop	r20
 ef0:	3f 91       	pop	r19
 ef2:	2f 91       	pop	r18
 ef4:	0f 90       	pop	r0
 ef6:	0f be       	out	0x3f, r0	; 63
 ef8:	0f 90       	pop	r0
 efa:	1f 90       	pop	r1
 efc:	18 95       	reti

Disassembly of section .text.handleRealTimeStatus:

00001686 <handleRealTimeStatus>:
	HADLE_SYS_EX
}state = RESET;

void handleRealTimeStatus(MIDI_Status_t status)
{
	UART_PushWord(status);
    1686:	23 dd       	rcall	.-1466   	; 0x10ce <UART_PushWord>
    1688:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

00000808 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 808:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <state>
 80c:	8e 2f       	mov	r24, r30
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	87 30       	cpi	r24, 0x07	; 7
 812:	91 05       	cpc	r25, r1
 814:	08 f0       	brcs	.+2      	; 0x818 <MIDI_ParserTask+0x10>
 816:	a2 c0       	rjmp	.+324    	; 0x95c <MIDI_ParserTask+0x154>
 818:	fc 01       	movw	r30, r24
 81a:	e6 5e       	subi	r30, 0xE6	; 230
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 820:	e4 e2       	ldi	r30, 0x24	; 36
 822:	f1 e0       	ldi	r31, 0x01	; 1
 824:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 826:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 828:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 82a:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 82e:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 832:	81 e0       	ldi	r24, 0x01	; 1
 834:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 838:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 83a:	db d6       	rcall	.+3510   	; 0x15f2 <UART_RxBufferNotEmpty>
 83c:	88 23       	and	r24, r24
 83e:	09 f4       	brne	.+2      	; 0x842 <MIDI_ParserTask+0x3a>
 840:	8d c0       	rjmp	.+282    	; 0x95c <MIDI_ParserTask+0x154>
			{
				recievedWord = UART_PopWord();
 842:	12 d5       	rcall	.+2596   	; 0x1268 <UART_PopWord>
 844:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 848:	e2 d6       	rcall	.+3524   	; 0x160e <MIDI_IsSysRealTime>
 84a:	88 23       	and	r24, r24
 84c:	21 f0       	breq	.+8      	; 0x856 <MIDI_ParserTask+0x4e>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
 84e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 852:	19 d7       	rcall	.+3634   	; 0x1686 <handleRealTimeStatus>
					return;
 854:	08 95       	ret
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 856:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 85a:	f6 d6       	rcall	.+3564   	; 0x1648 <MIDI_IsStatusWord>
 85c:	88 23       	and	r24, r24
 85e:	21 f0       	breq	.+8      	; 0x868 <MIDI_ParserTask+0x60>
				{					
					state = DISPATCH_STATUS;
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 866:	20 c0       	rjmp	.+64     	; 0x8a8 <MIDI_ParserTask+0xa0>
				}
				else
				{
					switch(currentStatusType)
 868:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <currentStatusType>
 86c:	82 30       	cpi	r24, 0x02	; 2
 86e:	49 f0       	breq	.+18     	; 0x882 <MIDI_ParserTask+0x7a>
 870:	18 f4       	brcc	.+6      	; 0x878 <MIDI_ParserTask+0x70>
 872:	81 30       	cpi	r24, 0x01	; 1
 874:	51 f0       	breq	.+20     	; 0x88a <MIDI_ParserTask+0x82>
 876:	15 c0       	rjmp	.+42     	; 0x8a2 <MIDI_ParserTask+0x9a>
 878:	84 30       	cpi	r24, 0x04	; 4
 87a:	59 f0       	breq	.+22     	; 0x892 <MIDI_ParserTask+0x8a>
 87c:	85 30       	cpi	r24, 0x05	; 5
 87e:	69 f0       	breq	.+26     	; 0x89a <MIDI_ParserTask+0x92>
 880:	10 c0       	rjmp	.+32     	; 0x8a2 <MIDI_ParserTask+0x9a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 882:	84 e0       	ldi	r24, 0x04	; 4
 884:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 888:	0f c0       	rjmp	.+30     	; 0x8a8 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 88a:	83 e0       	ldi	r24, 0x03	; 3
 88c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 892:	85 e0       	ldi	r24, 0x05	; 5
 894:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 898:	07 c0       	rjmp	.+14     	; 0x8a8 <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 89a:	86 e0       	ldi	r24, 0x06	; 6
 89c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 8a0:	03 c0       	rjmp	.+6      	; 0x8a8 <MIDI_ParserTask+0xa0>
						default: state = WAIT_WORD;
 8a2:	81 e0       	ldi	r24, 0x01	; 1
 8a4:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
					}
				}
				
				if(retranslate)
 8a8:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <retranslate>
 8ac:	88 23       	and	r24, r24
 8ae:	09 f4       	brne	.+2      	; 0x8b2 <MIDI_ParserTask+0xaa>
 8b0:	55 c0       	rjmp	.+170    	; 0x95c <MIDI_ParserTask+0x154>
				{
					UART_PushWord(recievedWord);
 8b2:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 8b6:	0b d4       	rcall	.+2070   	; 0x10ce <UART_PushWord>
 8b8:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 8ba:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <recievedWord>
 8be:	89 2f       	mov	r24, r25
 8c0:	82 95       	swap	r24
 8c2:	8f 70       	andi	r24, 0x0F	; 15
 8c4:	e4 e2       	ldi	r30, 0x24	; 36
 8c6:	f1 e0       	ldi	r31, 0x01	; 1
 8c8:	80 83       	st	Z, r24
			currentCommand.channel_type = recievedWord & 0x0F;
 8ca:	9f 70       	andi	r25, 0x0F	; 15
 8cc:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 8ce:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 8d0:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 8d2:	df d1       	rcall	.+958    	; 0xc92 <MIDI_GetStatusType>
 8d4:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 8d8:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 8e2:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 8e4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <isSecondDataWord>
 8e8:	88 23       	and	r24, r24
 8ea:	81 f0       	breq	.+32     	; 0x90c <MIDI_ParserTask+0x104>
			{
				currentCommand.data2 = recievedWord;
 8ec:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 8f0:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <currentCommand+0x3>
				isSecondDataWord = false;			
 8f4:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 8f8:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 8fc:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 900:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 904:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 908:	e9 db       	rcall	.-2094   	; 0xdc <MIDICTRL_HandleCommand>
 90a:	07 c0       	rjmp	.+14     	; 0x91a <MIDI_ParserTask+0x112>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 90c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 910:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
				isSecondDataWord = true;
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isSecondDataWord>
			}
			state = WAIT_WORD;
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 920:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 922:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 926:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 92a:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 92e:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 932:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 936:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 93a:	d0 db       	rcall	.-2144   	; 0xdc <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 942:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 944:	81 e0       	ldi	r24, 0x01	; 1
 946:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
			break;
 94a:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 94c:	e4 e2       	ldi	r30, 0x24	; 36
 94e:	f1 e0       	ldi	r31, 0x01	; 1
 950:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 952:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 954:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 956:	81 e0       	ldi	r24, 0x01	; 1
 958:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <state>
 95c:	08 95       	ret

Disassembly of section .text.MIDI_SetRetranslateState:

00001668 <MIDI_SetRetranslateState>:
	}
}

void MIDI_SetRetranslateState(bool enabled)
{
	retranslate = enabled;
    1668:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <retranslate>
    166c:	08 95       	ret

Disassembly of section .text.MIDI_SendCommand:

00000b34 <MIDI_SendCommand>:
}

void MIDI_SendCommand(MIDI_Command_t command, uint8_t channel)
{
 b34:	0f 93       	push	r16
 b36:	1f 93       	push	r17
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
 b3c:	c6 2f       	mov	r28, r22
 b3e:	18 2f       	mov	r17, r24
 b40:	09 2f       	mov	r16, r25
 b42:	d4 2f       	mov	r29, r20
	switch(MIDI_GetStatusType(command.status))
 b44:	86 2f       	mov	r24, r22
 b46:	a5 d0       	rcall	.+330    	; 0xc92 <MIDI_GetStatusType>
 b48:	83 30       	cpi	r24, 0x03	; 3
 b4a:	59 f0       	breq	.+22     	; 0xb62 <MIDI_SendCommand+0x2e>
 b4c:	28 f4       	brcc	.+10     	; 0xb58 <MIDI_SendCommand+0x24>
 b4e:	81 30       	cpi	r24, 0x01	; 1
 b50:	59 f0       	breq	.+22     	; 0xb68 <MIDI_SendCommand+0x34>
 b52:	82 30       	cpi	r24, 0x02	; 2
 b54:	a1 f0       	breq	.+40     	; 0xb7e <MIDI_SendCommand+0x4a>
 b56:	25 c0       	rjmp	.+74     	; 0xba2 <MIDI_SendCommand+0x6e>
 b58:	84 30       	cpi	r24, 0x04	; 4
 b5a:	f1 f0       	breq	.+60     	; 0xb98 <MIDI_SendCommand+0x64>
 b5c:	85 30       	cpi	r24, 0x05	; 5
 b5e:	f9 f0       	breq	.+62     	; 0xb9e <MIDI_SendCommand+0x6a>
 b60:	20 c0       	rjmp	.+64     	; 0xba2 <MIDI_SendCommand+0x6e>
	{
		case MIDI_TYPE_REAL_TIME:
		{
			// second nymble!
			UART_PushWord(command.status);
 b62:	8c 2f       	mov	r24, r28
 b64:	b4 d2       	rcall	.+1384   	; 0x10ce <UART_PushWord>
			break;
 b66:	1d c0       	rjmp	.+58     	; 0xba2 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_ONE_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 b68:	80 e1       	ldi	r24, 0x10	; 16
 b6a:	c8 9f       	mul	r28, r24
 b6c:	b0 01       	movw	r22, r0
 b6e:	11 24       	eor	r1, r1
 b70:	8d 2f       	mov	r24, r29
 b72:	8f 70       	andi	r24, 0x0F	; 15
 b74:	86 2b       	or	r24, r22
 b76:	ab d2       	rcall	.+1366   	; 0x10ce <UART_PushWord>
			UART_PushWord(command.data1);
 b78:	81 2f       	mov	r24, r17
 b7a:	a9 d2       	rcall	.+1362   	; 0x10ce <UART_PushWord>
			break;
 b7c:	12 c0       	rjmp	.+36     	; 0xba2 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_TWO_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 b7e:	80 e1       	ldi	r24, 0x10	; 16
 b80:	c8 9f       	mul	r28, r24
 b82:	b0 01       	movw	r22, r0
 b84:	11 24       	eor	r1, r1
 b86:	8d 2f       	mov	r24, r29
 b88:	8f 70       	andi	r24, 0x0F	; 15
 b8a:	86 2b       	or	r24, r22
 b8c:	a0 d2       	rcall	.+1344   	; 0x10ce <UART_PushWord>
			UART_PushWord(command.data1);
 b8e:	81 2f       	mov	r24, r17
 b90:	9e d2       	rcall	.+1340   	; 0x10ce <UART_PushWord>
			UART_PushWord(command.data2);
 b92:	80 2f       	mov	r24, r16
 b94:	9c d2       	rcall	.+1336   	; 0x10ce <UART_PushWord>
			break;
 b96:	05 c0       	rjmp	.+10     	; 0xba2 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_START_SYS_EX:
		{
			// second nymble!
			UART_PushWord(command.status);
 b98:	8c 2f       	mov	r24, r28
 b9a:	99 d2       	rcall	.+1330   	; 0x10ce <UART_PushWord>
			break;
 b9c:	02 c0       	rjmp	.+4      	; 0xba2 <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_STOP_SYS_EX:
		{
			// second nymble!!!
			UART_PushWord(command.status);
 b9e:	8c 2f       	mov	r24, r28
 ba0:	96 d2       	rcall	.+1324   	; 0x10ce <UART_PushWord>
			break;
		}
		case MIDI_TYPE_UNDEFINED: break;
	}
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	08 95       	ret

Disassembly of section .text.setChannelLeds:

000014c2 <setChannelLeds>:
	SH100CTRL_SetAB(ampState.swAB);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	47 de       	rcall	.-882    	; 0x1156 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    14c8:	60 e0       	ldi	r22, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	44 de       	rcall	.-888    	; 0x1156 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	82 e0       	ldi	r24, 0x02	; 2
    14d2:	41 de       	rcall	.-894    	; 0x1156 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	3e de       	rcall	.-900    	; 0x1156 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    14da:	61 e0       	ldi	r22, 0x01	; 1
    14dc:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ampState>
    14e0:	3a de       	rcall	.-908    	; 0x1156 <SH100HW_SetNewLedState>
    14e2:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

0000132a <SH100CTRL_SetAmpLeds>:
}

void SH100CTRL_SetAmpLeds()
{
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
	setChannelLeds();
    132e:	c9 d0       	rcall	.+402    	; 0x14c2 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    1330:	c9 e2       	ldi	r28, 0x29	; 41
    1332:	d1 e0       	ldi	r29, 0x01	; 1
    1334:	e8 81       	ld	r30, Y
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	e7 5d       	subi	r30, 0xD7	; 215
    133a:	fe 4f       	sbci	r31, 0xFE	; 254
    133c:	61 81       	ldd	r22, Z+1	; 0x01
    133e:	84 e0       	ldi	r24, 0x04	; 4
    1340:	0a df       	rcall	.-492    	; 0x1156 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1342:	6d 81       	ldd	r22, Y+5	; 0x05
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	68 27       	eor	r22, r24
    1348:	85 e0       	ldi	r24, 0x05	; 5
    134a:	05 df       	rcall	.-502    	; 0x1156 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    134c:	6d 81       	ldd	r22, Y+5	; 0x05
    134e:	86 e0       	ldi	r24, 0x06	; 6
    1350:	02 df       	rcall	.-508    	; 0x1156 <SH100HW_SetNewLedState>
}
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

Disassembly of section .text.SH100CTRL_StoreAmpState:

000014e4 <SH100CTRL_StoreAmpState>:

void SH100CTRL_StoreAmpState()
{
	eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
    14e4:	6b ea       	ldi	r22, 0xAB	; 171
    14e6:	7c ea       	ldi	r23, 0xAC	; 172
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	c9 d0       	rcall	.+402    	; 0x1680 <eeprom_write_word>
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
    14ee:	69 e2       	ldi	r22, 0x29	; 41
    14f0:	71 e0       	ldi	r23, 0x01	; 1
    14f2:	80 e8       	ldi	r24, 0x80	; 128
    14f4:	26 e0       	ldi	r18, 0x06	; 6
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	48 e0       	ldi	r20, 0x08	; 8
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	cf de       	rcall	.-610    	; 0x129c <eeprom_write_block>
    14fe:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetLoop:

000013da <SH100CTRL_SetLoop>:
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
}

void SH100CTRL_SetLoop(bool en)
{
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
	ampState.loopOn[ampState.channelNum] = en;
    13de:	c9 e2       	ldi	r28, 0x29	; 41
    13e0:	d1 e0       	ldi	r29, 0x01	; 1
    13e2:	e8 81       	ld	r30, Y
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	e7 5d       	subi	r30, 0xD7	; 215
    13e8:	fe 4f       	sbci	r31, 0xFE	; 254
    13ea:	81 83       	std	Z+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn[ampState.channelNum]);
    13ec:	a4 d0       	rcall	.+328    	; 0x1536 <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    13ee:	e8 81       	ld	r30, Y
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	e7 5d       	subi	r30, 0xD7	; 215
    13f4:	fe 4f       	sbci	r31, 0xFE	; 254
    13f6:	61 81       	ldd	r22, Z+1	; 0x01
    13f8:	84 e0       	ldi	r24, 0x04	; 4
    13fa:	ad de       	rcall	.-678    	; 0x1156 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendLoopEnComm();
    13fc:	c4 df       	rcall	.-120    	; 0x1386 <MIDICTRL_SendLoopEnComm>
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

00001358 <SH100CTRL_SwChannel>:
		SH100CTRL_SwLoop();
	}
}

void SH100CTRL_SwChannel(uint8_t chNum)
{
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	c8 2f       	mov	r28, r24
	ampState.channelNum = chNum;
    1360:	09 e2       	ldi	r16, 0x29	; 41
    1362:	11 e0       	ldi	r17, 0x01	; 1
    1364:	d8 01       	movw	r26, r16
    1366:	8c 93       	st	X, r24
	
	SH100HW_SetCh(chNum);
    1368:	1c de       	rcall	.-968    	; 0xfa2 <SH100HW_SetCh>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    136a:	d8 01       	movw	r26, r16
    136c:	ec 91       	ld	r30, X
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	e7 5d       	subi	r30, 0xD7	; 215
    1372:	fe 4f       	sbci	r31, 0xFE	; 254
    1374:	81 81       	ldd	r24, Z+1	; 0x01
    1376:	31 d0       	rcall	.+98     	; 0x13da <SH100CTRL_SetLoop>
	setChannelLeds();
    1378:	a4 d0       	rcall	.+328    	; 0x14c2 <setChannelLeds>
	
	MIDICTRL_SendSwChComm(chNum);
    137a:	8c 2f       	mov	r24, r28
    137c:	f9 dc       	rcall	.-1550   	; 0xd70 <MIDICTRL_SendSwChComm>
}
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

000015aa <SH100CTRL_SwLoop>:

void SH100CTRL_SwLoop()
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
    15aa:	e0 91 29 01 	lds	r30, 0x0129	; 0x800129 <ampState>
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	e7 5d       	subi	r30, 0xD7	; 215
    15b2:	fe 4f       	sbci	r31, 0xFE	; 254
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	89 27       	eor	r24, r25
    15ba:	0f df       	rcall	.-482    	; 0x13da <SH100CTRL_SetLoop>
    15bc:	08 95       	ret

Disassembly of section .text.SH100CTRL_BtnSwChannel:

000015e2 <SH100CTRL_BtnSwChannel>:
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
}

void SH100CTRL_BtnSwChannel(uint8_t chNum)
{
	if(ampState.channelNum != chNum)
    15e2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <ampState>
    15e6:	98 17       	cp	r25, r24
    15e8:	11 f0       	breq	.+4      	; 0x15ee <SH100CTRL_BtnSwChannel+0xc>
	{
		SH100CTRL_SwChannel(chNum);
    15ea:	b6 de       	rcall	.-660    	; 0x1358 <SH100CTRL_SwChannel>
    15ec:	08 95       	ret
	}
	else
	{
		SH100CTRL_SwLoop();
    15ee:	dd df       	rcall	.-70     	; 0x15aa <SH100CTRL_SwLoop>
    15f0:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAB:

0000147a <SH100CTRL_SetAB>:
{
	SH100CTRL_SetAB(!ampState.swAB);
}

void SH100CTRL_SetAB(bool isB)
{
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
	ampState.swAB = isB;
    147e:	c9 e2       	ldi	r28, 0x29	; 41
    1480:	d1 e0       	ldi	r29, 0x01	; 1
    1482:	8d 83       	std	Y+5, r24	; 0x05
	SH100HW_SetAB(ampState.swAB);
    1484:	f7 d0       	rcall	.+494    	; 0x1674 <SH100HW_SetAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1486:	6d 81       	ldd	r22, Y+5	; 0x05
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	68 27       	eor	r22, r24
    148c:	85 e0       	ldi	r24, 0x05	; 5
    148e:	63 de       	rcall	.-826    	; 0x1156 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    1490:	6d 81       	ldd	r22, Y+5	; 0x05
    1492:	86 e0       	ldi	r24, 0x06	; 6
    1494:	60 de       	rcall	.-832    	; 0x1156 <SH100HW_SetNewLedState>
	
	MIDICTRL_SendSwABComm();
    1496:	8c df       	rcall	.-232    	; 0x13b0 <MIDICTRL_SendSwABComm>
}
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

00000dda <SH100CTRL_SetAmpState>:
	
	SH100CTRL_SetAmpState(ampState);
}

void SH100CTRL_SetAmpState(SH100_State_t state)
{
 dda:	0f 93       	push	r16
 ddc:	1f 93       	push	r17
 dde:	cf 93       	push	r28
 de0:	df 93       	push	r29
 de2:	00 d0       	rcall	.+0      	; 0xde4 <SH100CTRL_SetAmpState+0xa>
 de4:	00 d0       	rcall	.+0      	; 0xde6 <SH100CTRL_SetAmpState+0xc>
 de6:	00 d0       	rcall	.+0      	; 0xde8 <SH100CTRL_SetAmpState+0xe>
 de8:	cd b7       	in	r28, 0x3d	; 61
 dea:	de b7       	in	r29, 0x3e	; 62
 dec:	49 83       	std	Y+1, r20	; 0x01
 dee:	5a 83       	std	Y+2, r21	; 0x02
 df0:	6b 83       	std	Y+3, r22	; 0x03
 df2:	7c 83       	std	Y+4, r23	; 0x04
 df4:	8d 83       	std	Y+5, r24	; 0x05
 df6:	9e 83       	std	Y+6, r25	; 0x06
	ampState = state;
 df8:	86 e0       	ldi	r24, 0x06	; 6
 dfa:	fe 01       	movw	r30, r28
 dfc:	31 96       	adiw	r30, 0x01	; 1
 dfe:	a9 e2       	ldi	r26, 0x29	; 41
 e00:	b1 e0       	ldi	r27, 0x01	; 1
 e02:	01 90       	ld	r0, Z+
 e04:	0d 92       	st	X+, r0
 e06:	8a 95       	dec	r24
 e08:	e1 f7       	brne	.-8      	; 0xe02 <SH100CTRL_SetAmpState+0x28>
	
	SH100CTRL_SwChannel(ampState.channelNum);
 e0a:	09 e2       	ldi	r16, 0x29	; 41
 e0c:	11 e0       	ldi	r17, 0x01	; 1
 e0e:	d8 01       	movw	r26, r16
 e10:	8c 91       	ld	r24, X
 e12:	a2 d2       	rcall	.+1348   	; 0x1358 <SH100CTRL_SwChannel>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
 e14:	d8 01       	movw	r26, r16
 e16:	ec 91       	ld	r30, X
 e18:	f0 e0       	ldi	r31, 0x00	; 0
 e1a:	e7 5d       	subi	r30, 0xD7	; 215
 e1c:	fe 4f       	sbci	r31, 0xFE	; 254
 e1e:	81 81       	ldd	r24, Z+1	; 0x01
 e20:	dc d2       	rcall	.+1464   	; 0x13da <SH100CTRL_SetLoop>
	SH100CTRL_SetAB(ampState.swAB);
 e22:	f8 01       	movw	r30, r16
 e24:	85 81       	ldd	r24, Z+5	; 0x05
 e26:	29 d3       	rcall	.+1618   	; 0x147a <SH100CTRL_SetAB>
}
 e28:	26 96       	adiw	r28, 0x06	; 6
 e2a:	0f b6       	in	r0, 0x3f	; 63
 e2c:	f8 94       	cli
 e2e:	de bf       	out	0x3e, r29	; 62
 e30:	0f be       	out	0x3f, r0	; 63
 e32:	cd bf       	out	0x3d, r28	; 61
 e34:	df 91       	pop	r29
 e36:	cf 91       	pop	r28
 e38:	1f 91       	pop	r17
 e3a:	0f 91       	pop	r16
 e3c:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000a30 <SH100CTRL_Init>:
SH100_State_t ampState;

void setChannelLeds();

void SH100CTRL_Init()
{
 a30:	cf 93       	push	r28
 a32:	df 93       	push	r29
 a34:	00 d0       	rcall	.+0      	; 0xa36 <SH100CTRL_Init+0x6>
 a36:	00 d0       	rcall	.+0      	; 0xa38 <SH100CTRL_Init+0x8>
 a38:	00 d0       	rcall	.+0      	; 0xa3a <SH100CTRL_Init+0xa>
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 a3e:	60 e0       	ldi	r22, 0x00	; 0
 a40:	70 e0       	ldi	r23, 0x00	; 0
 a42:	80 e0       	ldi	r24, 0x00	; 0
 a44:	f6 d5       	rcall	.+3052   	; 0x1632 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 a46:	8b 3a       	cpi	r24, 0xAB	; 171
 a48:	9c 4a       	sbci	r25, 0xAC	; 172
 a4a:	91 f4       	brne	.+36     	; 0xa70 <SH100CTRL_Init+0x40>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
 a4c:	48 e0       	ldi	r20, 0x08	; 8
 a4e:	50 e0       	ldi	r21, 0x00	; 0
 a50:	60 e8       	ldi	r22, 0x80	; 128
 a52:	26 e0       	ldi	r18, 0x06	; 6
 a54:	30 e0       	ldi	r19, 0x00	; 0
 a56:	ce 01       	movw	r24, r28
 a58:	01 96       	adiw	r24, 0x01	; 1
 a5a:	21 d5       	rcall	.+2626   	; 0x149e <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 a5c:	86 e0       	ldi	r24, 0x06	; 6
 a5e:	fe 01       	movw	r30, r28
 a60:	31 96       	adiw	r30, 0x01	; 1
 a62:	a9 e2       	ldi	r26, 0x29	; 41
 a64:	b1 e0       	ldi	r27, 0x01	; 1
 a66:	01 90       	ld	r0, Z+
 a68:	0d 92       	st	X+, r0
 a6a:	8a 95       	dec	r24
 a6c:	e1 f7       	brne	.-8      	; 0xa66 <SH100CTRL_Init+0x36>
 a6e:	0f c0       	rjmp	.+30     	; 0xa8e <SH100CTRL_Init+0x5e>
	}
	else
	{
		ampState.channelNum = 0;
 a70:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <ampState>
		for(int i=0; i<4; i++)
 a74:	80 e0       	ldi	r24, 0x00	; 0
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	05 c0       	rjmp	.+10     	; 0xa84 <SH100CTRL_Init+0x54>
		{
			ampState.loopOn[i] = false;
 a7a:	fc 01       	movw	r30, r24
 a7c:	e7 5d       	subi	r30, 0xD7	; 215
 a7e:	fe 4f       	sbci	r31, 0xFE	; 254
 a80:	11 82       	std	Z+1, r1	; 0x01
		ampState = *ampState_ptr;
	}
	else
	{
		ampState.channelNum = 0;
		for(int i=0; i<4; i++)
 a82:	01 96       	adiw	r24, 0x01	; 1
 a84:	84 30       	cpi	r24, 0x04	; 4
 a86:	91 05       	cpc	r25, r1
 a88:	c4 f3       	brlt	.-16     	; 0xa7a <SH100CTRL_Init+0x4a>
		{
			ampState.loopOn[i] = false;
		}		
		ampState.swAB = false;		
 a8a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <ampState+0x5>
	}
	
	SH100CTRL_SetAmpState(ampState);
 a8e:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <ampState>
 a92:	50 91 2a 01 	lds	r21, 0x012A	; 0x80012a <ampState+0x1>
 a96:	60 91 2b 01 	lds	r22, 0x012B	; 0x80012b <ampState+0x2>
 a9a:	70 91 2c 01 	lds	r23, 0x012C	; 0x80012c <ampState+0x3>
 a9e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ampState+0x4>
 aa2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ampState+0x5>
 aa6:	99 d1       	rcall	.+818    	; 0xdda <SH100CTRL_SetAmpState>
}
 aa8:	26 96       	adiw	r28, 0x06	; 6
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	cd bf       	out	0x3d, r28	; 61
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

0000161a <SH100CTRL_SwAB>:
	MIDICTRL_SendLoopEnComm();
}

void SH100CTRL_SwAB()
{
	SH100CTRL_SetAB(!ampState.swAB);
    161a:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <ampState+0x5>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 27       	eor	r24, r25
    1622:	2b df       	rcall	.-426    	; 0x147a <SH100CTRL_SetAB>
    1624:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

0000166e <SH100CTRL_MuteAmp>:
	MIDICTRL_SendSwABComm();
}

void SH100CTRL_MuteAmp()
{
	SH100HW_SetPAState(OUTPUT_MUTE);
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	f1 de       	rcall	.-542    	; 0x1454 <SH100HW_SetPAState>
    1672:	08 95       	ret

Disassembly of section .text.SH100CTRL_UnmuteAmp:

00001626 <SH100CTRL_UnmuteAmp>:
}

void SH100CTRL_UnmuteAmp()
{
	if(SH100HW_GetOutputJacks() != OUT_NONE)
    1626:	93 df       	rcall	.-218    	; 0x154e <SH100HW_GetOutputJacks>
    1628:	88 23       	and	r24, r24
    162a:	11 f0       	breq	.+4      	; 0x1630 <SH100CTRL_UnmuteAmp+0xa>
	{
		SH100HW_SetPAState(OUTPUT_ENABLED);	
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	12 df       	rcall	.-476    	; 0x1454 <SH100HW_SetPAState>
    1630:	08 95       	ret

Disassembly of section .text.SH100CTRL_CheckOutputJacks:

00000c20 <SH100CTRL_CheckOutputJacks>:
	}		
}

void SH100CTRL_CheckOutputJacks()
{
	SH100HW_OutputJacks_t outJacksState = SH100HW_GetOutputJacks();
 c20:	96 d4       	rcall	.+2348   	; 0x154e <SH100HW_GetOutputJacks>
	
	switch(outJacksState)
 c22:	81 30       	cpi	r24, 0x01	; 1
 c24:	89 f0       	breq	.+34     	; 0xc48 <SH100CTRL_CheckOutputJacks+0x28>
 c26:	28 f0       	brcs	.+10     	; 0xc32 <SH100CTRL_CheckOutputJacks+0x12>
 c28:	82 30       	cpi	r24, 0x02	; 2
 c2a:	d9 f0       	breq	.+54     	; 0xc62 <SH100CTRL_CheckOutputJacks+0x42>
 c2c:	83 30       	cpi	r24, 0x03	; 3
 c2e:	31 f1       	breq	.+76     	; 0xc7c <SH100CTRL_CheckOutputJacks+0x5c>
 c30:	08 95       	ret
	{
		case OUT_NONE:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c32:	0e d5       	rcall	.+2588   	; 0x1650 <MIDICTRL_MidiMode>
 c34:	81 11       	cpse	r24, r1
 c36:	06 c0       	rjmp	.+12     	; 0xc44 <SH100CTRL_CheckOutputJacks+0x24>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 c38:	60 e0       	ldi	r22, 0x00	; 0
 c3a:	87 e0       	ldi	r24, 0x07	; 7
 c3c:	8c d2       	rcall	.+1304   	; 0x1156 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 c3e:	61 e0       	ldi	r22, 0x01	; 1
 c40:	88 e0       	ldi	r24, 0x08	; 8
 c42:	89 d2       	rcall	.+1298   	; 0x1156 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 c44:	14 d5       	rcall	.+2600   	; 0x166e <SH100CTRL_MuteAmp>
			break;
 c46:	08 95       	ret
		}
		case OUT_16OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c48:	03 d5       	rcall	.+2566   	; 0x1650 <MIDICTRL_MidiMode>
 c4a:	81 11       	cpse	r24, r1
 c4c:	21 c0       	rjmp	.+66     	; 0xc90 <SH100CTRL_CheckOutputJacks+0x70>
			{
				SH100CTRL_UnmuteAmp();
 c4e:	eb d4       	rcall	.+2518   	; 0x1626 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_16OHM);
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	13 d5       	rcall	.+2598   	; 0x167a <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 c54:	61 e0       	ldi	r22, 0x01	; 1
 c56:	87 e0       	ldi	r24, 0x07	; 7
 c58:	7e d2       	rcall	.+1276   	; 0x1156 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 c5a:	60 e0       	ldi	r22, 0x00	; 0
 c5c:	88 e0       	ldi	r24, 0x08	; 8
 c5e:	7b d2       	rcall	.+1270   	; 0x1156 <SH100HW_SetNewLedState>
 c60:	08 95       	ret
			}			
			break;
		}
		case OUT_8OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c62:	f6 d4       	rcall	.+2540   	; 0x1650 <MIDICTRL_MidiMode>
 c64:	81 11       	cpse	r24, r1
 c66:	14 c0       	rjmp	.+40     	; 0xc90 <SH100CTRL_CheckOutputJacks+0x70>
			{
				SH100CTRL_UnmuteAmp();
 c68:	de d4       	rcall	.+2492   	; 0x1626 <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_8OHM);
 c6a:	80 e0       	ldi	r24, 0x00	; 0
 c6c:	06 d5       	rcall	.+2572   	; 0x167a <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 c6e:	61 e0       	ldi	r22, 0x01	; 1
 c70:	87 e0       	ldi	r24, 0x07	; 7
 c72:	71 d2       	rcall	.+1250   	; 0x1156 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 c74:	60 e0       	ldi	r22, 0x00	; 0
 c76:	88 e0       	ldi	r24, 0x08	; 8
 c78:	6e d2       	rcall	.+1244   	; 0x1156 <SH100HW_SetNewLedState>
 c7a:	08 95       	ret

			break;
		}
		case OUT_BOTH:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 c7c:	e9 d4       	rcall	.+2514   	; 0x1650 <MIDICTRL_MidiMode>
 c7e:	81 11       	cpse	r24, r1
 c80:	06 c0       	rjmp	.+12     	; 0xc8e <SH100CTRL_CheckOutputJacks+0x6e>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 c82:	60 e0       	ldi	r22, 0x00	; 0
 c84:	87 e0       	ldi	r24, 0x07	; 7
 c86:	67 d2       	rcall	.+1230   	; 0x1156 <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 c88:	61 e0       	ldi	r22, 0x01	; 1
 c8a:	88 e0       	ldi	r24, 0x08	; 8
 c8c:	64 d2       	rcall	.+1224   	; 0x1156 <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp(); //can load be less than 8Ohm?
 c8e:	ef d4       	rcall	.+2526   	; 0x166e <SH100CTRL_MuteAmp>
 c90:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000bac <SH100HW_Init>:
SH100HW_Buttons_t buttonsState;
void readButtonsState();
void writeShiftRegs(uint16_t data);

void SH100HW_Init()
{
 bac:	1f 93       	push	r17
 bae:	cf 93       	push	r28
 bb0:	df 93       	push	r29
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 bb2:	55 b1       	in	r21, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 bb4:	84 b1       	in	r24, 0x04	; 4
 bb6:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 bb8:	28 b1       	in	r18, 0x08	; 8
 bba:	20 61       	ori	r18, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 bbc:	97 b1       	in	r25, 0x07	; 7
 bbe:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 bc0:	3b b1       	in	r19, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 bc2:	4a b1       	in	r20, 0x0a	; 10
 bc4:	40 6e       	ori	r20, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 bc6:	3b 71       	andi	r19, 0x1B	; 27
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 bc8:	4b 7e       	andi	r20, 0xEB	; 235
 bca:	4a b9       	out	0x0a, r20	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 bcc:	30 61       	ori	r19, 0x10	; 16
 bce:	3b b9       	out	0x0b, r19	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 bd0:	9b 7d       	andi	r25, 0xDB	; 219
 bd2:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 bd4:	21 7d       	andi	r18, 0xD1	; 209
 bd6:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 bd8:	9a 60       	ori	r25, 0x0A	; 10
 bda:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 bdc:	95 2f       	mov	r25, r21
 bde:	90 7d       	andi	r25, 0xD0	; 208
 be0:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 be2:	84 60       	ori	r24, 0x04	; 4
 be4:	84 b9       	out	0x04, r24	; 4
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 be6:	10 e0       	ldi	r17, 0x00	; 0
 be8:	0c c0       	rjmp	.+24     	; 0xc02 <SH100HW_Init+0x56>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
 bea:	c1 2f       	mov	r28, r17
 bec:	d0 e0       	ldi	r29, 0x00	; 0
 bee:	81 e0       	ldi	r24, 0x01	; 1
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	b5 de       	rcall	.-662    	; 0x95e <__simple_malloc>
 bf4:	cc 0f       	add	r28, r28
 bf6:	dd 1f       	adc	r29, r29
 bf8:	cc 5b       	subi	r28, 0xBC	; 188
 bfa:	de 4f       	sbci	r29, 0xFE	; 254
 bfc:	99 83       	std	Y+1, r25	; 0x01
 bfe:	88 83       	st	Y, r24
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 c00:	1f 5f       	subi	r17, 0xFF	; 255
 c02:	12 31       	cpi	r17, 0x12	; 18
 c04:	90 f3       	brcs	.-28     	; 0xbea <SH100HW_Init+0x3e>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
	
	// ADC settings
	ADMUX = (1<<REFS0) | (1<<ADLAR); // AREF ext pin, Left-adjustment result
 c06:	80 e6       	ldi	r24, 0x60	; 96
 c08:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	DIDR0 = 0x01; // Disable digital io on PC0
 c0c:	81 e0       	ldi	r24, 0x01	; 1
 c0e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7fe07e>
	ADCSRA = (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, INT enable, prescaler = 64
 c12:	8e e8       	ldi	r24, 0x8E	; 142
 c14:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
}
 c18:	df 91       	pop	r29
 c1a:	cf 91       	pop	r28
 c1c:	1f 91       	pop	r17
 c1e:	08 95       	ret

Disassembly of section .text.SH100HW_GetButtonsState:

000015be <SH100HW_GetButtonsState>:

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
    15be:	2f e0       	ldi	r18, 0x0F	; 15
    15c0:	e5 e3       	ldi	r30, 0x35	; 53
    15c2:	f1 e0       	ldi	r31, 0x01	; 1
    15c4:	dc 01       	movw	r26, r24
    15c6:	01 90       	ld	r0, Z+
    15c8:	0d 92       	st	X+, r0
    15ca:	2a 95       	dec	r18
    15cc:	e1 f7       	brne	.-8      	; 0x15c6 <SH100HW_GetButtonsState+0x8>
}
    15ce:	08 95       	ret

Disassembly of section .text.SH100HW_SetCh:

00000fa2 <SH100HW_SetCh>:

void SH100HW_SetCh(uint8_t chNum)
{
	switch(chNum)
 fa2:	81 30       	cpi	r24, 0x01	; 1
 fa4:	69 f0       	breq	.+26     	; 0xfc0 <SH100HW_SetCh+0x1e>
 fa6:	28 f0       	brcs	.+10     	; 0xfb2 <SH100HW_SetCh+0x10>
 fa8:	82 30       	cpi	r24, 0x02	; 2
 faa:	91 f0       	breq	.+36     	; 0xfd0 <SH100HW_SetCh+0x2e>
 fac:	83 30       	cpi	r24, 0x03	; 3
 fae:	c1 f0       	breq	.+48     	; 0xfe0 <SH100HW_SetCh+0x3e>
 fb0:	08 95       	ret
	{
		case 0:
		{
			RELAY_13_24 = REL_OFF;
 fb2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 fb6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 fba:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RELAY_2_4>
			break;
 fbe:	08 95       	ret
		}
		case 1:
		{
			RELAY_13_24 = REL_ON;
 fc0:	81 e0       	ldi	r24, 0x01	; 1
 fc2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 fc6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 fca:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RELAY_2_4>
			break;
 fce:	08 95       	ret
		}
		case 2:
		{
			RELAY_13_24 = REL_OFF;
 fd0:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_ON;
 fd4:	81 e0       	ldi	r24, 0x01	; 1
 fd6:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
 fda:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <RELAY_2_4>
			break;
 fde:	08 95       	ret
		}
		case 3:
		{
			RELAY_13_24 = REL_ON;
 fe0:	81 e0       	ldi	r24, 0x01	; 1
 fe2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
 fe6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <RELAY_1_3>
			RELAY_2_4 = REL_ON;
 fea:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <RELAY_2_4>
 fee:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

00001536 <SH100HW_LoopEn>:
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
	RELAY_LOOP = isEnabled;
    1536:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <RELAY_LOOP>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    153a:	88 23       	and	r24, r24
    153c:	21 f0       	breq	.+8      	; 0x1546 <SH100HW_LoopEn+0x10>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    153e:	85 b1       	in	r24, 0x05	; 5
    1540:	84 60       	ori	r24, 0x04	; 4
    1542:	85 b9       	out	0x05, r24	; 5
    1544:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1546:	85 b1       	in	r24, 0x05	; 5
    1548:	8b 7f       	andi	r24, 0xFB	; 251
    154a:	85 b9       	out	0x05, r24	; 5
    154c:	08 95       	ret

Disassembly of section .text.SH100HW_SetAB:

00001674 <SH100HW_SetAB>:
	ioport_set_pin_level(PIN_RELAY_LOOP, RELAY_LOOP);
}

void SH100HW_SetAB(bool isBEn)
{
	RELAY_AB = isBEn;
    1674:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <RELAY_AB>
    1678:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

00001156 <SH100HW_SetNewLedState>:
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
    115a:	e8 2f       	mov	r30, r24
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	df 01       	movw	r26, r30
    1160:	19 96       	adiw	r26, 0x09	; 9
    1162:	aa 0f       	add	r26, r26
    1164:	bb 1f       	adc	r27, r27
    1166:	ac 5b       	subi	r26, 0xBC	; 188
    1168:	be 4f       	sbci	r27, 0xFE	; 254
    116a:	0d 90       	ld	r0, X+
    116c:	bc 91       	ld	r27, X
    116e:	a0 2d       	mov	r26, r0
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	ec 5b       	subi	r30, 0xBC	; 188
    1176:	fe 4f       	sbci	r31, 0xFE	; 254
    1178:	c0 81       	ld	r28, Z
    117a:	d1 81       	ldd	r29, Z+1	; 0x01
    117c:	88 81       	ld	r24, Y
    117e:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
    1180:	01 90       	ld	r0, Z+
    1182:	f0 81       	ld	r31, Z
    1184:	e0 2d       	mov	r30, r0
    1186:	60 83       	st	Z, r22
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

0000142c <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ec 5b       	subi	r30, 0xBC	; 188
    1436:	fe 4f       	sbci	r31, 0xFE	; 254
    1438:	a0 81       	ld	r26, Z
    143a:	b1 81       	ldd	r27, Z+1	; 0x01
    143c:	fc 01       	movw	r30, r24
    143e:	39 96       	adiw	r30, 0x09	; 9
    1440:	ee 0f       	add	r30, r30
    1442:	ff 1f       	adc	r31, r31
    1444:	ec 5b       	subi	r30, 0xBC	; 188
    1446:	fe 4f       	sbci	r31, 0xFE	; 254
    1448:	01 90       	ld	r0, Z+
    144a:	f0 81       	ld	r31, Z
    144c:	e0 2d       	mov	r30, r0
    144e:	80 81       	ld	r24, Z
    1450:	8c 93       	st	X, r24
    1452:	08 95       	ret

Disassembly of section .text.SH100HW_GetOutputJacks:

0000154e <SH100HW_GetOutputJacks>:
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    154e:	21 e0       	ldi	r18, 0x01	; 1
    1550:	18 9b       	sbis	0x03, 0	; 3
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	19 9b       	sbis	0x03, 1	; 3
    1558:	90 e0       	ldi	r25, 0x00	; 0

SH100HW_OutputJacks_t SH100HW_GetOutputJacks()
{
	bool is16Ohm = ioport_get_pin_level(PIN_M16_DETECT);
	bool is8Ohm = ioport_get_pin_level(PIN_M8_DETECT);
	return ((is16Ohm) | (is8Ohm<<1));
    155a:	89 2f       	mov	r24, r25
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
}
    1562:	82 2b       	or	r24, r18
    1564:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAState:

00001454 <SH100HW_SetPAState>:
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1454:	81 11       	cpse	r24, r1
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <SH100HW_SetPAState+0xc>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1458:	98 b1       	in	r25, 0x08	; 8
    145a:	92 60       	ori	r25, 0x02	; 2
    145c:	98 b9       	out	0x08, r25	; 8
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <SH100HW_SetPAState+0x12>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1460:	98 b1       	in	r25, 0x08	; 8
    1462:	9d 7f       	andi	r25, 0xFD	; 253
    1464:	98 b9       	out	0x08, r25	; 8
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1466:	88 23       	and	r24, r24
    1468:	21 f0       	breq	.+8      	; 0x1472 <SH100HW_SetPAState+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    146a:	88 b1       	in	r24, 0x08	; 8
    146c:	88 60       	ori	r24, 0x08	; 8
    146e:	88 b9       	out	0x08, r24	; 8
    1470:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1472:	88 b1       	in	r24, 0x08	; 8
    1474:	87 7f       	andi	r24, 0xF7	; 247
    1476:	88 b9       	out	0x08, r24	; 8
    1478:	08 95       	ret

Disassembly of section .text.SH100HW_SetOutputMode:

0000167a <SH100HW_SetOutputMode>:
	ioport_set_pin_level(PIN_RELE_W, state);
}

void SH100HW_SetOutputMode(SH100HW_PAMode_t mode)
{
	RELAY_8_16 = mode;
    167a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <RELAY_8_16>
    167e:	08 95       	ret

Disassembly of section .text.readButtonsState:

00000670 <readButtonsState>:
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	af c0       	rjmp	.+350    	; 0x7d2 <readButtonsState+0x162>
	{
		
		switch(cnt)
 674:	48 2f       	mov	r20, r24
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	48 30       	cpi	r20, 0x08	; 8
 67a:	51 05       	cpc	r21, r1
 67c:	08 f0       	brcs	.+2      	; 0x680 <readButtonsState+0x10>
 67e:	a8 c0       	rjmp	.+336    	; 0x7d0 <readButtonsState+0x160>
 680:	fa 01       	movw	r30, r20
 682:	ef 5d       	subi	r30, 0xDF	; 223
 684:	ff 4f       	sbci	r31, 0xFF	; 255
 686:	09 94       	ijmp
 688:	2b b1       	in	r18, 0x0b	; 11
 68a:	2f 7d       	andi	r18, 0xDF	; 223
 68c:	2b b9       	out	0x0b, r18	; 11
 68e:	2b b1       	in	r18, 0x0b	; 11
 690:	2f 7b       	andi	r18, 0xBF	; 191
 692:	2b b9       	out	0x0b, r18	; 11
 694:	2b b1       	in	r18, 0x0b	; 11
 696:	2f 77       	andi	r18, 0x7F	; 127
 698:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	4c 9b       	sbis	0x09, 4	; 9
 69e:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = ioport_get_pin_level(PIN_MIDI_SWITCH);
 6a0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <buttonsState+0x1>
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	35 9b       	sbis	0x06, 5	; 6
 6a8:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 6aa:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <buttonsState+0xc>
				break;
 6ae:	90 c0       	rjmp	.+288    	; 0x7d0 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6b0:	9b b1       	in	r25, 0x0b	; 11
 6b2:	90 62       	ori	r25, 0x20	; 32
 6b4:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6b6:	9b b1       	in	r25, 0x0b	; 11
 6b8:	9f 7b       	andi	r25, 0xBF	; 191
 6ba:	9b b9       	out	0x0b, r25	; 11
 6bc:	9b b1       	in	r25, 0x0b	; 11
 6be:	9f 77       	andi	r25, 0x7F	; 127
 6c0:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	4c 9b       	sbis	0x09, 4	; 9
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	21 e0       	ldi	r18, 0x01	; 1
 6ca:	4a 9b       	sbis	0x09, 2	; 9
 6cc:	20 e0       	ldi	r18, 0x00	; 0
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = ioport_get_pin_level(PIN_BUTTONS);
 6ce:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <buttonsState+0x7>
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	35 9b       	sbis	0x06, 5	; 6
 6d6:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 6d8:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <buttonsState+0xe>
				break;
 6dc:	79 c0       	rjmp	.+242    	; 0x7d0 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6de:	2b b1       	in	r18, 0x0b	; 11
 6e0:	2f 7d       	andi	r18, 0xDF	; 223
 6e2:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6e4:	2b b1       	in	r18, 0x0b	; 11
 6e6:	20 64       	ori	r18, 0x40	; 64
 6e8:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6ea:	2b b1       	in	r18, 0x0b	; 11
 6ec:	2f 77       	andi	r18, 0x7F	; 127
 6ee:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	4c 9b       	sbis	0x09, 4	; 9
 6f4:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 6f6:	32 2f       	mov	r19, r18
 6f8:	21 e0       	ldi	r18, 0x01	; 1
 6fa:	4a 9b       	sbis	0x09, 2	; 9
 6fc:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnLoop = ioport_get_pin_level(PIN_BUTTONS);
 6fe:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <buttonsState+0x8>
 702:	21 e0       	ldi	r18, 0x01	; 1
 704:	35 9b       	sbis	0x06, 5	; 6
 706:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 708:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <buttonsState+0xb>
				break;
 70c:	61 c0       	rjmp	.+194    	; 0x7d0 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 70e:	2b b1       	in	r18, 0x0b	; 11
 710:	20 62       	ori	r18, 0x20	; 32
 712:	2b b9       	out	0x0b, r18	; 11
 714:	2b b1       	in	r18, 0x0b	; 11
 716:	20 64       	ori	r18, 0x40	; 64
 718:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 71a:	2b b1       	in	r18, 0x0b	; 11
 71c:	2f 77       	andi	r18, 0x7F	; 127
 71e:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 720:	21 e0       	ldi	r18, 0x01	; 1
 722:	4c 9b       	sbis	0x09, 4	; 9
 724:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = ioport_get_pin_level(PIN_MIDI_SWITCH);
 726:	20 93 37 01 	sts	0x0137, r18	; 0x800137 <buttonsState+0x2>
 72a:	21 e0       	ldi	r18, 0x01	; 1
 72c:	35 9b       	sbis	0x06, 5	; 6
 72e:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 730:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <buttonsState+0x9>
				break;
 734:	4d c0       	rjmp	.+154    	; 0x7d0 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 736:	2b b1       	in	r18, 0x0b	; 11
 738:	2f 7d       	andi	r18, 0xDF	; 223
 73a:	2b b9       	out	0x0b, r18	; 11
 73c:	2b b1       	in	r18, 0x0b	; 11
 73e:	2f 7b       	andi	r18, 0xBF	; 191
 740:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 742:	2b b1       	in	r18, 0x0b	; 11
 744:	20 68       	ori	r18, 0x80	; 128
 746:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 748:	41 e0       	ldi	r20, 0x01	; 1
 74a:	4c 9b       	sbis	0x09, 4	; 9
 74c:	40 e0       	ldi	r20, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 74e:	b4 2f       	mov	r27, r20
 750:	21 e0       	ldi	r18, 0x01	; 1
 752:	4a 9b       	sbis	0x09, 2	; 9
 754:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnCh2 = ioport_get_pin_level(PIN_BUTTONS);
 756:	20 93 39 01 	sts	0x0139, r18	; 0x800139 <buttonsState+0x4>
 75a:	21 e0       	ldi	r18, 0x01	; 1
 75c:	35 9b       	sbis	0x06, 5	; 6
 75e:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 760:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <buttonsState+0xa>
				break;
 764:	35 c0       	rjmp	.+106    	; 0x7d0 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 766:	2b b1       	in	r18, 0x0b	; 11
 768:	20 62       	ori	r18, 0x20	; 32
 76a:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 76c:	2b b1       	in	r18, 0x0b	; 11
 76e:	2f 7b       	andi	r18, 0xBF	; 191
 770:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 772:	2b b1       	in	r18, 0x0b	; 11
 774:	20 68       	ori	r18, 0x80	; 128
 776:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 778:	21 e0       	ldi	r18, 0x01	; 1
 77a:	4a 9b       	sbis	0x09, 2	; 9
 77c:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = ioport_get_pin_level(PIN_BUTTONS);
 77e:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <buttonsState+0x5>
				break;
 782:	26 c0       	rjmp	.+76     	; 0x7d0 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 784:	2b b1       	in	r18, 0x0b	; 11
 786:	2f 7d       	andi	r18, 0xDF	; 223
 788:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 78a:	2b b1       	in	r18, 0x0b	; 11
 78c:	20 64       	ori	r18, 0x40	; 64
 78e:	2b b9       	out	0x0b, r18	; 11
 790:	2b b1       	in	r18, 0x0b	; 11
 792:	20 68       	ori	r18, 0x80	; 128
 794:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 796:	41 e0       	ldi	r20, 0x01	; 1
 798:	4c 9b       	sbis	0x09, 4	; 9
 79a:	40 e0       	ldi	r20, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[1] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 79c:	a4 2f       	mov	r26, r20
 79e:	21 e0       	ldi	r18, 0x01	; 1
 7a0:	4a 9b       	sbis	0x09, 2	; 9
 7a2:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnCh4 = ioport_get_pin_level(PIN_BUTTONS);
 7a4:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <buttonsState+0x6>
 7a8:	21 e0       	ldi	r18, 0x01	; 1
 7aa:	35 9b       	sbis	0x06, 5	; 6
 7ac:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 7ae:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <buttonsState+0xd>
				break;
 7b2:	0e c0       	rjmp	.+28     	; 0x7d0 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 7b4:	2b b1       	in	r18, 0x0b	; 11
 7b6:	20 62       	ori	r18, 0x20	; 32
 7b8:	2b b9       	out	0x0b, r18	; 11
 7ba:	2b b1       	in	r18, 0x0b	; 11
 7bc:	20 64       	ori	r18, 0x40	; 64
 7be:	2b b9       	out	0x0b, r18	; 11
 7c0:	2b b1       	in	r18, 0x0b	; 11
 7c2:	20 68       	ori	r18, 0x80	; 128
 7c4:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 7c6:	21 e0       	ldi	r18, 0x01	; 1
 7c8:	4a 9b       	sbis	0x09, 2	; 9
 7ca:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = ioport_get_pin_level(PIN_BUTTONS);
 7cc:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <buttonsState+0x3>
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 7d0:	8f 5f       	subi	r24, 0xFF	; 255
 7d2:	88 30       	cpi	r24, 0x08	; 8
 7d4:	08 f4       	brcc	.+2      	; 0x7d8 <readButtonsState+0x168>
 7d6:	4e cf       	rjmp	.-356    	; 0x674 <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 7d8:	4a 2f       	mov	r20, r26
 7da:	50 e0       	ldi	r21, 0x00	; 0
 7dc:	44 0f       	add	r20, r20
 7de:	55 1f       	adc	r21, r21
 7e0:	23 2f       	mov	r18, r19
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	22 0f       	add	r18, r18
 7e6:	33 1f       	adc	r19, r19
 7e8:	22 0f       	add	r18, r18
 7ea:	33 1f       	adc	r19, r19
 7ec:	89 2f       	mov	r24, r25
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	88 0f       	add	r24, r24
 7f2:	99 1f       	adc	r25, r25
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	4b 2b       	or	r20, r27
 7fe:	24 2b       	or	r18, r20
 800:	82 2b       	or	r24, r18
 802:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <buttonsState>
 806:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

00001114 <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
    1114:	ac 01       	movw	r20, r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1116:	88 b1       	in	r24, 0x08	; 8
    1118:	8f 7e       	andi	r24, 0xEF	; 239
    111a:	88 b9       	out	0x08, r24	; 8
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	12 c0       	rjmp	.+36     	; 0x1144 <writeShiftRegs+0x30>
    1120:	95 b1       	in	r25, 0x05	; 5
    1122:	9f 7d       	andi	r25, 0xDF	; 223
    1124:	95 b9       	out	0x05, r25	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1126:	55 23       	and	r21, r21
    1128:	24 f4       	brge	.+8      	; 0x1132 <writeShiftRegs+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    112a:	85 b1       	in	r24, 0x05	; 5
    112c:	88 60       	ori	r24, 0x08	; 8
    112e:	85 b9       	out	0x05, r24	; 5
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <writeShiftRegs+0x24>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1132:	85 b1       	in	r24, 0x05	; 5
    1134:	87 7f       	andi	r24, 0xF7	; 247
    1136:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    1138:	95 b1       	in	r25, 0x05	; 5
    113a:	90 62       	ori	r25, 0x20	; 32
    113c:	95 b9       	out	0x05, r25	; 5
	{
		ioport_set_pin_level(PIN_SCK, 0);
		ioport_set_pin_level(PIN_MOSI, (data & 0x8000));
		ioport_set_pin_level(PIN_SCK, 1);
		data = data << 1;
    113e:	44 0f       	add	r20, r20
    1140:	55 1f       	adc	r21, r21
}

void writeShiftRegs(uint16_t data)
{
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    1142:	2f 5f       	subi	r18, 0xFF	; 255
    1144:	20 31       	cpi	r18, 0x10	; 16
    1146:	60 f3       	brcs	.-40     	; 0x1120 <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1148:	85 b1       	in	r24, 0x05	; 5
    114a:	8f 7d       	andi	r24, 0xDF	; 223
    114c:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    114e:	88 b1       	in	r24, 0x08	; 8
    1150:	80 61       	ori	r24, 0x10	; 16
    1152:	88 b9       	out	0x08, r24	; 8
    1154:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000002dc <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	29 97       	sbiw	r28, 0x09	; 9
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	readButtonsState();
 2f0:	bf d1       	rcall	.+894    	; 0x670 <readButtonsState>
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 2f2:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <blinkCounter>
 2f6:	89 e2       	ldi	r24, 0x29	; 41
 2f8:	98 9f       	mul	r25, r24
 2fa:	81 2d       	mov	r24, r1
 2fc:	11 24       	eor	r1, r1
 2fe:	86 95       	lsr	r24
 300:	86 95       	lsr	r24
 302:	39 2f       	mov	r19, r25
 304:	29 e1       	ldi	r18, 0x19	; 25
 306:	82 9f       	mul	r24, r18
 308:	30 19       	sub	r19, r0
 30a:	11 24       	eor	r1, r1
 30c:	31 11       	cpse	r19, r1
 30e:	08 c0       	rjmp	.+16     	; 0x320 <SH100HW_MainTask+0x44>
 310:	99 23       	and	r25, r25
 312:	31 f0       	breq	.+12     	; 0x320 <SH100HW_MainTask+0x44>
	{
		fastBlink = !fastBlink;
 314:	20 91 b3 01 	lds	r18, 0x01B3	; 0x8001b3 <fastBlink>
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	82 27       	eor	r24, r18
 31c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <fastBlink>
	}
	
	if(blinkCounter == 50)
 320:	92 33       	cpi	r25, 0x32	; 50
 322:	51 f4       	brne	.+20     	; 0x338 <SH100HW_MainTask+0x5c>
	{
		blinkCounter = 0;
 324:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <blinkCounter>
		slowBlink = !slowBlink;
 328:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <slowBlink>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	89 27       	eor	r24, r25
 330:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	47 c0       	rjmp	.+142    	; 0x3c6 <SH100HW_MainTask+0xea>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 338:	9f 5f       	subi	r25, 0xFF	; 255
 33a:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <blinkCounter>
 33e:	fa cf       	rjmp	.-12     	; 0x334 <SH100HW_MainTask+0x58>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 340:	82 2f       	mov	r24, r18
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	ee 0f       	add	r30, r30
 348:	ff 1f       	adc	r31, r31
 34a:	ec 5b       	subi	r30, 0xBC	; 188
 34c:	fe 4f       	sbci	r31, 0xFE	; 254
 34e:	01 90       	ld	r0, Z+
 350:	f0 81       	ld	r31, Z
 352:	e0 2d       	mov	r30, r0
 354:	30 81       	ld	r19, Z
 356:	31 30       	cpi	r19, 0x01	; 1
 358:	71 f0       	breq	.+28     	; 0x376 <SH100HW_MainTask+0x9a>
 35a:	28 f0       	brcs	.+10     	; 0x366 <SH100HW_MainTask+0x8a>
 35c:	32 30       	cpi	r19, 0x02	; 2
 35e:	a1 f0       	breq	.+40     	; 0x388 <SH100HW_MainTask+0xac>
 360:	33 30       	cpi	r19, 0x03	; 3
 362:	e1 f0       	breq	.+56     	; 0x39c <SH100HW_MainTask+0xc0>
 364:	28 c0       	rjmp	.+80     	; 0x3b6 <SH100HW_MainTask+0xda>
		{
			case LED_OFF: isLedOn[i] = false; break;
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ec 0f       	add	r30, r28
 36c:	fd 1f       	adc	r31, r29
 36e:	e8 0f       	add	r30, r24
 370:	f9 1f       	adc	r31, r25
 372:	10 82       	st	Z, r1
 374:	27 c0       	rjmp	.+78     	; 0x3c4 <SH100HW_MainTask+0xe8>
			case LED_ON: isLedOn[i] = true; break;
 376:	e1 e0       	ldi	r30, 0x01	; 1
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	ec 0f       	add	r30, r28
 37c:	fd 1f       	adc	r31, r29
 37e:	e8 0f       	add	r30, r24
 380:	f9 1f       	adc	r31, r25
 382:	31 e0       	ldi	r19, 0x01	; 1
 384:	30 83       	st	Z, r19
 386:	1e c0       	rjmp	.+60     	; 0x3c4 <SH100HW_MainTask+0xe8>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 388:	e1 e0       	ldi	r30, 0x01	; 1
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ec 0f       	add	r30, r28
 38e:	fd 1f       	adc	r31, r29
 390:	e8 0f       	add	r30, r24
 392:	f9 1f       	adc	r31, r25
 394:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <fastBlink>
 398:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 39a:	14 c0       	rjmp	.+40     	; 0x3c4 <SH100HW_MainTask+0xe8>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 39c:	30 91 b4 01 	lds	r19, 0x01B4	; 0x8001b4 <slowBlink>
 3a0:	e1 e0       	ldi	r30, 0x01	; 1
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ec 0f       	add	r30, r28
 3a6:	fd 1f       	adc	r31, r29
 3a8:	e8 0f       	add	r30, r24
 3aa:	f9 1f       	adc	r31, r25
 3ac:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	83 27       	eor	r24, r19
 3b2:	88 87       	std	Y+8, r24	; 0x08
				break;
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <SH100HW_MainTask+0xe8>
			}	
			default: isLedOn[i] = LED_OFF;
 3b6:	e1 e0       	ldi	r30, 0x01	; 1
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	ec 0f       	add	r30, r28
 3bc:	fd 1f       	adc	r31, r29
 3be:	e8 0f       	add	r30, r24
 3c0:	f9 1f       	adc	r31, r25
 3c2:	10 82       	st	Z, r1
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	29 30       	cpi	r18, 0x09	; 9
 3c8:	08 f4       	brcc	.+2      	; 0x3cc <SH100HW_MainTask+0xf0>
 3ca:	ba cf       	rjmp	.-140    	; 0x340 <SH100HW_MainTask+0x64>
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3cc:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 3d0:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <RELAY_1_3>
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3da:	ac 01       	movw	r20, r24
 3dc:	42 2b       	or	r20, r18
 3de:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 3e0:	9b 81       	ldd	r25, Y+3	; 0x03
 3e2:	89 2f       	mov	r24, r25
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 3ee:	82 2b       	or	r24, r18
 3f0:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 3f2:	29 81       	ldd	r18, Y+1	; 0x01
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	22 0f       	add	r18, r18
 3f8:	33 1f       	adc	r19, r19
 3fa:	22 0f       	add	r18, r18
 3fc:	33 1f       	adc	r19, r19
 3fe:	22 0f       	add	r18, r18
 400:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 402:	82 2b       	or	r24, r18
 404:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 406:	2a 81       	ldd	r18, Y+2	; 0x02
 408:	50 e1       	ldi	r21, 0x10	; 16
 40a:	25 9f       	mul	r18, r21
 40c:	90 01       	movw	r18, r0
 40e:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 410:	28 2b       	or	r18, r24
 412:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 414:	4c 81       	ldd	r20, Y+4	; 0x04
 416:	80 e2       	ldi	r24, 0x20	; 32
 418:	48 9f       	mul	r20, r24
 41a:	a0 01       	movw	r20, r0
 41c:	11 24       	eor	r1, r1
 41e:	24 2b       	or	r18, r20
 420:	35 2b       	or	r19, r21
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 422:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <RELAY_8_16>
 426:	80 e8       	ldi	r24, 0x80	; 128
 428:	48 9f       	mul	r20, r24
 42a:	a0 01       	movw	r20, r0
 42c:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 42e:	24 2b       	or	r18, r20
 430:	35 2b       	or	r19, r21
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 432:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <RELAY_2_4>
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	98 2f       	mov	r25, r24
 43a:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 43c:	28 2b       	or	r18, r24
 43e:	39 2b       	or	r19, r25
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 440:	8e 81       	ldd	r24, Y+6	; 0x06
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	98 2f       	mov	r25, r24
 446:	88 27       	eor	r24, r24
 448:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 44a:	28 2b       	or	r18, r24
 44c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 44e:	8f 81       	ldd	r24, Y+7	; 0x07
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	98 2f       	mov	r25, r24
 454:	88 27       	eor	r24, r24
 456:	99 0f       	add	r25, r25
 458:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 45a:	28 2b       	or	r18, r24
 45c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 45e:	88 85       	ldd	r24, Y+8	; 0x08
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	98 2f       	mov	r25, r24
 464:	88 27       	eor	r24, r24
 466:	99 0f       	add	r25, r25
 468:	99 0f       	add	r25, r25
 46a:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 46c:	28 2b       	or	r18, r24
 46e:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 470:	99 85       	ldd	r25, Y+9	; 0x09
 472:	89 2f       	mov	r24, r25
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	98 2f       	mov	r25, r24
 478:	88 27       	eor	r24, r24
 47a:	92 95       	swap	r25
 47c:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 47e:	28 2b       	or	r18, r24
 480:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
 482:	4d 81       	ldd	r20, Y+5	; 0x05
 484:	50 e0       	ldi	r21, 0x00	; 0
 486:	54 2f       	mov	r21, r20
 488:	44 27       	eor	r20, r20
 48a:	52 95       	swap	r21
 48c:	55 0f       	add	r21, r21
 48e:	50 7e       	andi	r21, 0xE0	; 224
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 490:	24 2b       	or	r18, r20
 492:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
								((uint16_t)RELAY_AB << (8+6)) |
 494:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <RELAY_AB>
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	90 e4       	ldi	r25, 0x40	; 64
 49c:	89 9f       	mul	r24, r25
 49e:	90 2d       	mov	r25, r0
 4a0:	88 27       	eor	r24, r24
 4a2:	11 24       	eor	r1, r1
								(0 << (8+7));

	writeShiftRegs(resultSendWord);
 4a4:	82 2b       	or	r24, r18
 4a6:	93 2b       	or	r25, r19
 4a8:	35 d6       	rcall	.+3178   	; 0x1114 <writeShiftRegs>
 4aa:	29 96       	adiw	r28, 0x09	; 9
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

Disassembly of section .text.UART_init:

00001566 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    1566:	88 ed       	ldi	r24, 0xD8	; 216
    1568:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00); 
    156c:	86 e0       	ldi	r24, 0x06	; 6
    156e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0;
    1572:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=19;
    1576:	83 e1       	ldi	r24, 0x13	; 19
    1578:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    157c:	08 95       	ret

Disassembly of section .text.__vector_18:

00000e3e <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 e3e:	1f 92       	push	r1
 e40:	0f 92       	push	r0
 e42:	0f b6       	in	r0, 0x3f	; 63
 e44:	0f 92       	push	r0
 e46:	11 24       	eor	r1, r1
 e48:	8f 93       	push	r24
 e4a:	9f 93       	push	r25
 e4c:	ef 93       	push	r30
 e4e:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 e50:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 e54:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 e58:	8c 71       	andi	r24, 0x1C	; 28
 e5a:	d1 f4       	brne	.+52     	; 0xe90 <__vector_18+0x52>
	{
		rx_buffer0[rx_wr_index++] = data;
 e5c:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <rx_wr_index>
 e60:	81 e0       	ldi	r24, 0x01	; 1
 e62:	8e 0f       	add	r24, r30
 e64:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <rx_wr_index>
 e68:	f0 e0       	ldi	r31, 0x00	; 0
 e6a:	ec 58       	subi	r30, 0x8C	; 140
 e6c:	fe 4f       	sbci	r31, 0xFE	; 254
 e6e:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 e70:	80 31       	cpi	r24, 0x10	; 16
 e72:	11 f4       	brne	.+4      	; 0xe78 <__vector_18+0x3a>
 e74:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 e78:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_counter>
 e7c:	8f 5f       	subi	r24, 0xFF	; 255
 e7e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <rx_counter>
 e82:	80 31       	cpi	r24, 0x10	; 16
 e84:	29 f4       	brne	.+10     	; 0xe90 <__vector_18+0x52>
		{
			rx_counter=0;
 e86:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <rx_counter>
			rx_buffer_overflow=1;
 e8a:	81 e0       	ldi	r24, 0x01	; 1
 e8c:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <rx_buffer_overflow>
		}
	}
}
 e90:	ff 91       	pop	r31
 e92:	ef 91       	pop	r30
 e94:	9f 91       	pop	r25
 e96:	8f 91       	pop	r24
 e98:	0f 90       	pop	r0
 e9a:	0f be       	out	0x3f, r0	; 63
 e9c:	0f 90       	pop	r0
 e9e:	1f 90       	pop	r1
 ea0:	18 95       	reti

Disassembly of section .text.UART_PopWord:

00001268 <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
    1268:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <rx_counter>
    126c:	88 23       	and	r24, r24
    126e:	e1 f3       	breq	.-8      	; 0x1268 <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
    1270:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <rx_rd_index>
    1274:	91 e0       	ldi	r25, 0x01	; 1
    1276:	9e 0f       	add	r25, r30
    1278:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <rx_rd_index>
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	ec 58       	subi	r30, 0x8C	; 140
    1280:	fe 4f       	sbci	r31, 0xFE	; 254
    1282:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
    1284:	90 31       	cpi	r25, 0x10	; 16
    1286:	11 f4       	brne	.+4      	; 0x128c <UART_PopWord+0x24>
    1288:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
    128c:	f8 94       	cli
	--rx_counter;
    128e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rx_counter>
    1292:	91 50       	subi	r25, 0x01	; 1
    1294:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <rx_counter>
	cpu_irq_enable();
    1298:	78 94       	sei
	return data;
}
    129a:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000015f2 <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <rx_counter>
    15f8:	91 11       	cpse	r25, r1
    15fa:	01 c0       	rjmp	.+2      	; 0x15fe <UART_RxBufferNotEmpty+0xc>
    15fc:	80 e0       	ldi	r24, 0x00	; 0
}
    15fe:	08 95       	ret

Disassembly of section .text.__vector_20:

00000f50 <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 f50:	1f 92       	push	r1
 f52:	0f 92       	push	r0
 f54:	0f b6       	in	r0, 0x3f	; 63
 f56:	0f 92       	push	r0
 f58:	11 24       	eor	r1, r1
 f5a:	8f 93       	push	r24
 f5c:	ef 93       	push	r30
 f5e:	ff 93       	push	r31
	if (tx_counter)
 f60:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <tx_counter>
 f64:	88 23       	and	r24, r24
 f66:	a9 f0       	breq	.+42     	; 0xf92 <__vector_20+0x42>
	{
		--tx_counter;
 f68:	81 50       	subi	r24, 0x01	; 1
 f6a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 f6e:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <tx_rd_index>
 f72:	81 e0       	ldi	r24, 0x01	; 1
 f74:	8e 0f       	add	r24, r30
 f76:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <tx_rd_index>
 f7a:	f0 e0       	ldi	r31, 0x00	; 0
 f7c:	e5 59       	subi	r30, 0x95	; 149
 f7e:	fe 4f       	sbci	r31, 0xFE	; 254
 f80:	80 81       	ld	r24, Z
 f82:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 f86:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <tx_rd_index>
 f8a:	88 30       	cpi	r24, 0x08	; 8
 f8c:	11 f4       	brne	.+4      	; 0xf92 <__vector_20+0x42>
 f8e:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <tx_rd_index>
		#endif
	}
}
 f92:	ff 91       	pop	r31
 f94:	ef 91       	pop	r30
 f96:	8f 91       	pop	r24
 f98:	0f 90       	pop	r0
 f9a:	0f be       	out	0x3f, r0	; 63
 f9c:	0f 90       	pop	r0
 f9e:	1f 90       	pop	r1
 fa0:	18 95       	reti

Disassembly of section .text.UART_PushWord:

000010ce <UART_PushWord>:

// Write a character to the USART Transmitter buffer
void UART_PushWord(uint8_t c)
{	
	while (tx_counter == TX_BUFFER_SIZE);
    10ce:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <tx_counter>
    10d2:	98 30       	cpi	r25, 0x08	; 8
    10d4:	e1 f3       	breq	.-8      	; 0x10ce <UART_PushWord>
	
	cpu_irq_disable();
    10d6:	f8 94       	cli
	
	if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
    10d8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <tx_counter>
    10dc:	91 11       	cpse	r25, r1
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <UART_PushWord+0x1a>
    10e0:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
    10e4:	25 fd       	sbrc	r18, 5
    10e6:	12 c0       	rjmp	.+36     	; 0x110c <UART_PushWord+0x3e>
	{
		tx_buffer[tx_wr_index++] = c;
    10e8:	e0 91 86 01 	lds	r30, 0x0186	; 0x800186 <tx_wr_index>
    10ec:	21 e0       	ldi	r18, 0x01	; 1
    10ee:	2e 0f       	add	r18, r30
    10f0:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <tx_wr_index>
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	e5 59       	subi	r30, 0x95	; 149
    10f8:	fe 4f       	sbci	r31, 0xFE	; 254
    10fa:	80 83       	st	Z, r24
		
		#if TX_BUFFER_SIZE0 != 256
			if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
    10fc:	28 30       	cpi	r18, 0x08	; 8
    10fe:	11 f4       	brne	.+4      	; 0x1104 <UART_PushWord+0x36>
    1100:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <tx_wr_index>
		#endif
		
		++tx_counter;
    1104:	9f 5f       	subi	r25, 0xFF	; 255
    1106:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <tx_counter>
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <UART_PushWord+0x42>
	}
	else UDR0=c;
    110c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	cpu_irq_enable();
    1110:	78 94       	sei
    1112:	08 95       	ret

Disassembly of section .text.libgcc:

0000157e <__xload_4>:
    157e:	57 fd       	sbrc	r21, 7
    1580:	05 c0       	rjmp	.+10     	; 0x158c <__xload_4+0xe>
    1582:	65 91       	lpm	r22, Z+
    1584:	75 91       	lpm	r23, Z+
    1586:	85 91       	lpm	r24, Z+
    1588:	95 91       	lpm	r25, Z+
    158a:	08 95       	ret
    158c:	61 91       	ld	r22, Z+
    158e:	71 91       	ld	r23, Z+
    1590:	81 91       	ld	r24, Z+
    1592:	91 91       	ld	r25, Z+
    1594:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000168c <_fini>:
    168c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000168e <__funcs_on_exit>:
    168e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001690 <__simulator_exit>:
    1690:	08 95       	ret

Disassembly of section .text.exit:

00001600 <exit>:
    1600:	ec 01       	movw	r28, r24
    1602:	45 d0       	rcall	.+138    	; 0x168e <__funcs_on_exit>
    1604:	43 d0       	rcall	.+134    	; 0x168c <_fini>
    1606:	ce 01       	movw	r24, r28
    1608:	43 d0       	rcall	.+134    	; 0x1690 <__simulator_exit>
    160a:	ce 01       	movw	r24, r28
    160c:	42 d0       	rcall	.+132    	; 0x1692 <_Exit>

Disassembly of section .text.__simple_malloc:

0000095e <__simple_malloc>:
 95e:	a2 e0       	ldi	r26, 0x02	; 2
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	e4 eb       	ldi	r30, 0xB4	; 180
 964:	f4 e0       	ldi	r31, 0x04	; 4
 966:	1d c4       	rjmp	.+2106   	; 0x11a2 <__prologue_saves__+0x14>
 968:	8c 01       	movw	r16, r24
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	01 15       	cp	r16, r1
 970:	11 05       	cpc	r17, r1
 972:	09 f4       	brne	.+2      	; 0x976 <__simple_malloc+0x18>
 974:	53 c0       	rjmp	.+166    	; 0xa1c <__simple_malloc+0xbe>
 976:	89 2b       	or	r24, r25
 978:	71 f0       	breq	.+28     	; 0x996 <__simple_malloc+0x38>
 97a:	02 30       	cpi	r16, 0x02	; 2
 97c:	11 05       	cpc	r17, r1
 97e:	10 f4       	brcc	.+4      	; 0x984 <__simple_malloc+0x26>
 980:	02 e0       	ldi	r16, 0x02	; 2
 982:	10 e0       	ldi	r17, 0x00	; 0
 984:	c8 01       	movw	r24, r16
 986:	3c db       	rcall	.-2440   	; 0x0 <__vectors>
 988:	00 97       	sbiw	r24, 0x00	; 0
 98a:	09 f0       	breq	.+2      	; 0x98e <__simple_malloc+0x30>
 98c:	4e c0       	rjmp	.+156    	; 0xa2a <__simple_malloc+0xcc>
 98e:	92 e0       	ldi	r25, 0x02	; 2
 990:	e9 2e       	mov	r14, r25
 992:	f1 2c       	mov	r15, r1
 994:	04 c0       	rjmp	.+8      	; 0x99e <__simple_malloc+0x40>
 996:	80 e0       	ldi	r24, 0x00	; 0
 998:	e8 2e       	mov	r14, r24
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	f8 2e       	mov	r15, r24
 99e:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <end.1483>
 9a2:	90 91 a2 01 	lds	r25, 0x01A2	; 0x8001a2 <end.1483+0x1>
 9a6:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <cur.1482>
 9aa:	30 91 a4 01 	lds	r19, 0x01A4	; 0x8001a4 <cur.1482+0x1>
 9ae:	82 1b       	sub	r24, r18
 9b0:	93 0b       	sbc	r25, r19
 9b2:	67 01       	movw	r12, r14
 9b4:	c0 0e       	add	r12, r16
 9b6:	d1 1e       	adc	r13, r17
 9b8:	80 17       	cp	r24, r16
 9ba:	91 07       	cpc	r25, r17
 9bc:	e8 f4       	brcc	.+58     	; 0x9f8 <__simple_malloc+0x9a>
 9be:	da 82       	std	Y+2, r13	; 0x02
 9c0:	c9 82       	std	Y+1, r12	; 0x01
 9c2:	ce 01       	movw	r24, r28
 9c4:	01 96       	adiw	r24, 0x01	; 1
 9c6:	9d d1       	rcall	.+826    	; 0xd02 <__expand_heap>
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	19 f4       	brne	.+6      	; 0x9d2 <__simple_malloc+0x74>
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	2c c0       	rjmp	.+88     	; 0xa2a <__simple_malloc+0xcc>
 9d2:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <end.1483>
 9d6:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <end.1483+0x1>
 9da:	82 17       	cp	r24, r18
 9dc:	93 07       	cpc	r25, r19
 9de:	21 f0       	breq	.+8      	; 0x9e8 <__simple_malloc+0x8a>
 9e0:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <cur.1482+0x1>
 9e4:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <cur.1482>
 9e8:	29 81       	ldd	r18, Y+1	; 0x01
 9ea:	3a 81       	ldd	r19, Y+2	; 0x02
 9ec:	82 0f       	add	r24, r18
 9ee:	93 1f       	adc	r25, r19
 9f0:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <end.1483+0x1>
 9f4:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <end.1483>
 9f8:	e0 91 a3 01 	lds	r30, 0x01A3	; 0x8001a3 <cur.1482>
 9fc:	f0 91 a4 01 	lds	r31, 0x01A4	; 0x8001a4 <cur.1482+0x1>
 a00:	cf 01       	movw	r24, r30
 a02:	e1 14       	cp	r14, r1
 a04:	f1 04       	cpc	r15, r1
 a06:	19 f0       	breq	.+6      	; 0xa0e <__simple_malloc+0xb0>
 a08:	02 96       	adiw	r24, 0x02	; 2
 a0a:	11 83       	std	Z+1, r17	; 0x01
 a0c:	00 83       	st	Z, r16
 a0e:	ce 0e       	add	r12, r30
 a10:	df 1e       	adc	r13, r31
 a12:	d0 92 a4 01 	sts	0x01A4, r13	; 0x8001a4 <cur.1482+0x1>
 a16:	c0 92 a3 01 	sts	0x01A3, r12	; 0x8001a3 <cur.1482>
 a1a:	07 c0       	rjmp	.+14     	; 0xa2a <__simple_malloc+0xcc>
 a1c:	00 97       	sbiw	r24, 0x00	; 0
 a1e:	09 f0       	breq	.+2      	; 0xa22 <__simple_malloc+0xc4>
 a20:	af cf       	rjmp	.-162    	; 0x980 <__simple_malloc+0x22>
 a22:	7c 01       	movw	r14, r24
 a24:	01 e0       	ldi	r16, 0x01	; 1
 a26:	10 e0       	ldi	r17, 0x00	; 0
 a28:	ba cf       	rjmp	.-140    	; 0x99e <__simple_malloc+0x40>
 a2a:	22 96       	adiw	r28, 0x02	; 2
 a2c:	e8 e0       	ldi	r30, 0x08	; 8
 a2e:	0b c4       	rjmp	.+2070   	; 0x1246 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

00001692 <_Exit>:
    1692:	20 d5       	rcall	.+2624   	; 0x20d4 <__TEXT_REGION_LENGTH__+0xd4>

Disassembly of section .text.__expand_heap:

00000d02 <__expand_heap>:
 d02:	fc 01       	movw	r30, r24
 d04:	40 81       	ld	r20, Z
 d06:	51 81       	ldd	r21, Z+1	; 0x01
 d08:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <__brkval>
 d0c:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <__brkval+0x1>
 d10:	89 2b       	or	r24, r25
 d12:	41 f4       	brne	.+16     	; 0xd24 <__expand_heap+0x22>
 d14:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__malloc_heap_start>
 d18:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <__malloc_heap_start+0x1>
 d1c:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <__brkval+0x1>
 d20:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <__brkval>
 d24:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__malloc_heap_end>
 d28:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__malloc_heap_end+0x1>
 d2c:	00 97       	sbiw	r24, 0x00	; 0
 d2e:	19 f4       	brne	.+6      	; 0xd36 <__expand_heap+0x34>
 d30:	8d b7       	in	r24, 0x3d	; 61
 d32:	9e b7       	in	r25, 0x3e	; 62
 d34:	80 97       	sbiw	r24, 0x20	; 32
 d36:	20 91 a5 01 	lds	r18, 0x01A5	; 0x8001a5 <__brkval>
 d3a:	30 91 a6 01 	lds	r19, 0x01A6	; 0x8001a6 <__brkval+0x1>
 d3e:	28 17       	cp	r18, r24
 d40:	39 07       	cpc	r19, r25
 d42:	48 f0       	brcs	.+18     	; 0xd56 <__expand_heap+0x54>
 d44:	8c e0       	ldi	r24, 0x0C	; 12
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <__errno_val+0x1>
 d4c:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <__errno_val>
 d50:	80 e0       	ldi	r24, 0x00	; 0
 d52:	90 e0       	ldi	r25, 0x00	; 0
 d54:	08 95       	ret
 d56:	82 1b       	sub	r24, r18
 d58:	93 0b       	sbc	r25, r19
 d5a:	84 17       	cp	r24, r20
 d5c:	95 07       	cpc	r25, r21
 d5e:	90 f3       	brcs	.-28     	; 0xd44 <__expand_heap+0x42>
 d60:	42 0f       	add	r20, r18
 d62:	53 1f       	adc	r21, r19
 d64:	50 93 a6 01 	sts	0x01A6, r21	; 0x8001a6 <__brkval+0x1>
 d68:	40 93 a5 01 	sts	0x01A5, r20	; 0x8001a5 <__brkval>
 d6c:	c9 01       	movw	r24, r18
 d6e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000149e <eeprom_read_block>:
    149e:	ba 01       	movw	r22, r20
    14a0:	a9 01       	movw	r20, r18
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22

000014a6 <eeprom_read_blraw>:
    14a6:	fc 01       	movw	r30, r24
    14a8:	f9 99       	sbic	0x1f, 1	; 31
    14aa:	fe cf       	rjmp	.-4      	; 0x14a8 <eeprom_read_blraw+0x2>
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <eeprom_read_blraw+0x14>
    14ae:	f2 bd       	out	0x22, r31	; 34
    14b0:	e1 bd       	out	0x21, r30	; 33
    14b2:	f8 9a       	sbi	0x1f, 0	; 31
    14b4:	31 96       	adiw	r30, 0x01	; 1
    14b6:	00 b4       	in	r0, 0x20	; 32
    14b8:	0d 92       	st	X+, r0
    14ba:	41 50       	subi	r20, 0x01	; 1
    14bc:	50 40       	sbci	r21, 0x00	; 0
    14be:	b8 f7       	brcc	.-18     	; 0x14ae <eeprom_read_blraw+0x8>
    14c0:	08 95       	ret

Disassembly of section .text.avrlibc:

000015d0 <eeprom_read_byte>:
    15d0:	cb 01       	movw	r24, r22
    15d2:	f9 99       	sbic	0x1f, 1	; 31
    15d4:	fe cf       	rjmp	.-4      	; 0x15d2 <eeprom_read_byte+0x2>
    15d6:	92 bd       	out	0x22, r25	; 34
    15d8:	81 bd       	out	0x21, r24	; 33
    15da:	f8 9a       	sbi	0x1f, 0	; 31
    15dc:	99 27       	eor	r25, r25
    15de:	80 b5       	in	r24, 0x20	; 32
    15e0:	08 95       	ret

Disassembly of section .text.avrlibc:

00001632 <eeprom_read_word>:
    1632:	cb 01       	movw	r24, r22
    1634:	a8 e1       	ldi	r26, 0x18	; 24
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	42 e0       	ldi	r20, 0x02	; 2
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	34 cf       	rjmp	.-408    	; 0x14a6 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000129c <eeprom_write_block>:
    129c:	cf 92       	push	r12
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	6b 01       	movw	r12, r22
    12a4:	e8 2e       	mov	r14, r24
    12a6:	ca 01       	movw	r24, r20
    12a8:	42 2f       	mov	r20, r18
    12aa:	73 2f       	mov	r23, r19
    12ac:	09 c0       	rjmp	.+18     	; 0x12c0 <eeprom_write_block+0x24>
    12ae:	f6 01       	movw	r30, r12
    12b0:	5e 2d       	mov	r21, r14
    12b2:	c5 d1       	rcall	.+906    	; 0x163e <__xload_1>
    12b4:	26 2f       	mov	r18, r22
    12b6:	25 d1       	rcall	.+586    	; 0x1502 <eeprom_write_r18>
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	c3 1a       	sub	r12, r19
    12bc:	d3 0a       	sbc	r13, r19
    12be:	e3 0a       	sbc	r14, r19
    12c0:	41 50       	subi	r20, 0x01	; 1
    12c2:	70 40       	sbci	r23, 0x00	; 0
    12c4:	a0 f7       	brcc	.-24     	; 0x12ae <eeprom_write_block+0x12>
    12c6:	ef 90       	pop	r14
    12c8:	df 90       	pop	r13
    12ca:	cf 90       	pop	r12
    12cc:	08 95       	ret

Disassembly of section .text.avrlibc:

00001500 <eeprom_write_byte>:
    1500:	26 2f       	mov	r18, r22

00001502 <eeprom_write_r18>:
    1502:	f9 99       	sbic	0x1f, 1	; 31
    1504:	fe cf       	rjmp	.-4      	; 0x1502 <eeprom_write_r18>
    1506:	1f ba       	out	0x1f, r1	; 31
    1508:	92 bd       	out	0x22, r25	; 34
    150a:	81 bd       	out	0x21, r24	; 33
    150c:	20 bd       	out	0x20, r18	; 32
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	fa 9a       	sbi	0x1f, 2	; 31
    1514:	f9 9a       	sbi	0x1f, 1	; 31
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	08 95       	ret

Disassembly of section .text.avrlibc:

00001680 <eeprom_write_word>:
    1680:	3f df       	rcall	.-386    	; 0x1500 <eeprom_write_byte>
    1682:	27 2f       	mov	r18, r23
    1684:	3e cf       	rjmp	.-388    	; 0x1502 <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

0000118e <__prologue_saves__>:
    118e:	2f 92       	push	r2
    1190:	3f 92       	push	r3
    1192:	4f 92       	push	r4
    1194:	5f 92       	push	r5
    1196:	6f 92       	push	r6
    1198:	7f 92       	push	r7
    119a:	8f 92       	push	r8
    119c:	9f 92       	push	r9
    119e:	af 92       	push	r10
    11a0:	bf 92       	push	r11
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	ca 1b       	sub	r28, r26
    11b8:	db 0b       	sbc	r29, r27
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00001232 <__epilogue_restores__>:
    1232:	2a 88       	ldd	r2, Y+18	; 0x12
    1234:	39 88       	ldd	r3, Y+17	; 0x11
    1236:	48 88       	ldd	r4, Y+16	; 0x10
    1238:	5f 84       	ldd	r5, Y+15	; 0x0f
    123a:	6e 84       	ldd	r6, Y+14	; 0x0e
    123c:	7d 84       	ldd	r7, Y+13	; 0x0d
    123e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1240:	9b 84       	ldd	r9, Y+11	; 0x0b
    1242:	aa 84       	ldd	r10, Y+10	; 0x0a
    1244:	b9 84       	ldd	r11, Y+9	; 0x09
    1246:	c8 84       	ldd	r12, Y+8	; 0x08
    1248:	df 80       	ldd	r13, Y+7	; 0x07
    124a:	ee 80       	ldd	r14, Y+6	; 0x06
    124c:	fd 80       	ldd	r15, Y+5	; 0x05
    124e:	0c 81       	ldd	r16, Y+4	; 0x04
    1250:	1b 81       	ldd	r17, Y+3	; 0x03
    1252:	aa 81       	ldd	r26, Y+2	; 0x02
    1254:	b9 81       	ldd	r27, Y+1	; 0x01
    1256:	ce 0f       	add	r28, r30
    1258:	d1 1d       	adc	r29, r1
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	ed 01       	movw	r28, r26
    1266:	08 95       	ret

Disassembly of section .text.libgcc:

0000163e <__xload_1>:
    163e:	57 fd       	sbrc	r21, 7
    1640:	60 81       	ld	r22, Z
    1642:	57 ff       	sbrs	r21, 7
    1644:	64 91       	lpm	r22, Z
    1646:	08 95       	ret
