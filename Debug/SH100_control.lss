
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001b0e  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008e  00800100  00800100  00001b0e  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 000000a8  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001be8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006aef  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000119b  00000000  00000000  00008a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f74  00000000  00000000  00009c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000728  00000000  00000000  0000bb90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000072c  00000000  00000000  0000c2b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001978  00000000  00000000  0000c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000e35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  00001950  00001950  00001ae4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000e5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.__portable_avr_delay_cycles 00000016  00001812  00001812  000019a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.initTest 000000d8  00000974  00000974  00000b08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000003a  000013f4  000013f4  00001588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_16 000001c0  000004c6  000004c6  0000065a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__vector_4 00000046  000012ea  000012ea  0000147e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__vector_21 000000c2  00000b1e  00000b1e  00000cb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .bss.measSwitch 00000001  008001b0  008001b0  00001b0e  2**0
                  ALLOC
 22 .bss.leaveDefSettings_cnt 00000001  008001b1  008001b1  00001b0e  2**0
                  ALLOC
 23 .bss.swProgrammingMode_cnt 00000001  008001b2  008001b2  00001b0e  2**0
                  ALLOC
 24 .data.protectionInterval_cnt 00000001  008001b3  00001978  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss.isAmpStarted 00000001  008001b4  008001b4  00001b0e  2**0
                  ALLOC
 26 .text.MIDI_IsStatusWord 00000008  00001906  00001906  00001a9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MIDI_IsSysRealTime 0000000c  000018c2  000018c2  00001a56  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MIDI_GetStatusType 00000070  00000e4e  00000e4e  00000fe2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.isEqualCommands 00000014  00001828  00001828  000019bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.loadCommSetFromMemory 0000007a  00000c6a  00000c6a  00000dfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.setMidiLeds 00000052  0000111c  0000111c  000012b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.MIDICTRL_Init 00000028  000016a6  000016a6  0000183a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.MIDICTRL_MidiMode 00000006  00001916  00001916  00001aaa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.MIDICTRL_SetProgrammingButton 0000002e  00001570  00001570  00001704  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.MIDICTRL_SwitchMode 0000004c  0000120a  0000120a  0000139e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_SetMidiChannel 00000006  0000191c  0000191c  00001ab0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.MIDICTRL_OmniModeEn 00000006  00001922  00001922  00001ab6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.MIDICTRL_MuteCommEn 00000006  00001928  00001928  00001abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.programmBtn 0000004c  00001256  00001256  000013ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.MIDICTRL_SendSwChComm 0000006a  00000f2c  00000f2c  000010c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.MIDICTRL_SendLoopEnComm 0000002a  00001628  00001628  000017bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.MIDICTRL_SendSwABComm 0000002a  00001652  00001652  000017e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.MIDICTRL_StoreUserCommands 00000036  0000149e  0000149e  00001632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.MIDICTRL_DiscardCommands 0000001a  00001798  00001798  0000192c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.indicateMidiError 0000002e  0000159e  0000159e  00001732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.MIDICTRL_HandleCommand 00000200  000000dc  000000dc  00000270  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__vector_13 0000005c  000010c0  000010c0  00001254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .data.defaultCommands 00000018  0080018e  0000195c  00001af0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 49 .progmemx.data.muteCommand 00000004  000000d8  000000d8  0000026c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 50 .bss.channelNum 00000001  008001b5  008001b5  00001b0e  2**0
                  ALLOC
 51 .bss.muteCommandEnabled 00000001  008001b6  008001b6  00001b0e  2**0
                  ALLOC
 52 .bss.omniModeEnabled 00000001  008001b7  008001b7  00001b0e  2**0
                  ALLOC
 53 .text.handleRealTimeStatus 00000004  0000194c  0000194c  00001ae0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.MIDI_ParserTask 00000156  0000081e  0000081e  000009b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.MIDI_SetRetranslateState 00000006  0000192e  0000192e  00001ac2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.MIDI_SendCommand 00000078  00000d5e  00000d5e  00000ef2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .bss.state    00000001  008001b8  008001b8  00001b0e  2**0
                  ALLOC
 58 .data.retranslate 00000001  008001b9  00001979  00001b0d  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 59 .text.setChannelLeds 00000022  0000173e  0000173e  000018d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SH100CTRL_SetAmpLeds 0000002e  000015cc  000015cc  00001760  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.SH100CTRL_StoreAmpState 0000001c  00001760  00001760  000018f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100CTRL_SetLoop 0000002a  0000167c  0000167c  00001810  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.SH100CTRL_SwChannel 0000002e  000015fa  000015fa  0000178e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.SH100CTRL_SwLoop 00000014  0000183c  0000183c  000019d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.SH100CTRL_BtnSwChannel 00000010  00001888  00001888  00001a1c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .text.SH100CTRL_SetAB 00000024  000016f6  000016f6  0000188a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.SH100CTRL_SetAmpState 00000064  00000ffc  00000ffc  00001190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.SH100CTRL_Init 0000008a  00000be0  00000be0  00000d74  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SH100CTRL_SwAB 0000000c  000018ce  000018ce  00001a62  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.SH100CTRL_MuteAmp 00000006  00001934  00001934  00001ac8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.SH100CTRL_UnmuteAmp 0000000c  000018da  000018da  00001a6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.SH100CTRL_CheckOutputJacks 00000078  00000dd6  00000dd6  00000f6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.SH100HW_Init 00000066  00000f96  00000f96  0000112a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.SH100HW_SetPAFailure 0000000e  00001898  00001898  00001a2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.SH100HW_GetPAFailure 0000000a  000018f2  000018f2  00001a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.SH100HW_GetButtonsState 00000012  00001864  00001864  000019f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.SH100HW_SetCh 0000004e  0000116e  0000116e  00001302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.SH100HW_LoopEn 00000018  000017b2  000017b2  00001946  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.SH100HW_SetAB 00000006  0000193a  0000193a  00001ace  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.SH100HW_SetNewLedState 00000038  0000142e  0000142e  000015c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.SH100HW_SetPreviousLedState 00000028  000016ce  000016ce  00001862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .text.SH100HW_GetOutputJacks 00000018  000017ca  000017ca  0000195e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 83 .text.SH100HW_SetPAState 0000003c  000013b8  000013b8  0000154c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .text.SH100HW_SetOutputMode 00000006  00001940  00001940  00001ad4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.SH100HW_StartADConvertion 00000014  00001850  00001850  000019e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.readButtonsState 00000198  00000686  00000686  0000081a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.writeShiftRegs 00000042  00001376  00001376  0000150a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.SH100HW_MainTask 000001ea  000002dc  000002dc  00000470  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .bss.fastBlink 00000001  008001ba  008001ba  00001b0e  2**0
                  ALLOC
 90 .bss.slowBlink 00000001  008001bb  008001bb  00001b0e  2**0
                  ALLOC
 91 .bss.blinkCounter 00000001  008001bc  008001bc  00001b0e  2**0
                  ALLOC
 92 .text.board_init 00000002  00001952  00001952  00001ae6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.UART_init 00000018  000017e2  000017e2  00001976  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__vector_18 00000060  00001060  00001060  000011f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.UART_PopWord 00000034  0000150a  0000150a  0000169e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.UART_RxBufferNotEmpty 0000000e  000018a6  000018a6  00001a3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__vector_20 0000004e  000011bc  000011bc  00001350  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.UART_PushWord 00000046  00001330  00001330  000014c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text         0000007a  00000ce4  00000ce4  00000e78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text         00000008  0000190e  0000190e  00001aa2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .text         00000048  000012a2  000012a2  00001436  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
102 .text.libgcc  00000018  000017fa  000017fa  0000198e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
103 .text.__dummy_fini 00000002  00001954  00001954  00001ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.__dummy_funcs_on_exit 00000002  00001956  00001956  00001aea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.__dummy_simulator_exit 00000002  00001958  00001958  00001aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.exit    0000000e  000018b4  000018b4  00001a48  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.__simple_malloc 000000d2  00000a4c  00000a4c  00000be0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .bss.end.1483 00000002  008001a6  008001a6  00001b0e  2**0
                  ALLOC
109 .bss.cur.1482 00000002  008001a8  008001a8  00001b0e  2**0
                  ALLOC
110 .text._Exit   00000002  0000195a  0000195a  00001aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
111 .text.__expand_heap 0000006e  00000ebe  00000ebe  00001052  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
112 .bss.__brkval 00000002  008001aa  008001aa  00001b0e  2**0
                  ALLOC
113 .data.__malloc_heap_end 00000002  008001ac  00001974  00001b08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
114 .data.__malloc_heap_start 00000002  008001ae  00001976  00001b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
115 .text.avrlibc 00000024  0000171a  0000171a  000018ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.avrlibc 00000012  00001876  00001876  00001a0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.avrlibc 0000000c  000018e6  000018e6  00001a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
118 .text.avrlibc 00000032  0000153e  0000153e  000016d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
119 .text.avrlibc 0000001c  0000177c  0000177c  00001910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
120 .text.avrlibc 00000006  00001946  00001946  00001ada  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
121 .text.libgcc.prologue 00000038  00001466  00001466  000015fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
122 .text.libgcc.prologue 00000036  000014d4  000014d4  00001668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
123 .text.libgcc  0000000a  000018fc  000018fc  00001a90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	43 c0       	rjmp	.+134    	; 0x88 <__ctors_end>
   2:	a6 cc       	rjmp	.-1716   	; 0xfffff950 <__eeprom_end+0xff7ef950>
   4:	a5 cc       	rjmp	.-1718   	; 0xfffff950 <__eeprom_end+0xff7ef950>
   6:	a4 cc       	rjmp	.-1720   	; 0xfffff950 <__eeprom_end+0xff7ef950>
   8:	70 c9       	rjmp	.-3360   	; 0xfffff2ea <__eeprom_end+0xff7ef2ea>
   a:	a2 cc       	rjmp	.-1724   	; 0xfffff950 <__eeprom_end+0xff7ef950>
   c:	a1 cc       	rjmp	.-1726   	; 0xfffff950 <__eeprom_end+0xff7ef950>
   e:	a0 cc       	rjmp	.-1728   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  10:	9f cc       	rjmp	.-1730   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  12:	9e cc       	rjmp	.-1732   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  14:	9d cc       	rjmp	.-1734   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  16:	9c cc       	rjmp	.-1736   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  18:	9b cc       	rjmp	.-1738   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  1a:	52 c8       	rjmp	.-3932   	; 0xfffff0c0 <__eeprom_end+0xff7ef0c0>
  1c:	99 cc       	rjmp	.-1742   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  1e:	98 cc       	rjmp	.-1744   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  20:	52 c2       	rjmp	.+1188   	; 0x4c6 <__vector_16>
  22:	96 cc       	rjmp	.-1748   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  24:	1d c8       	rjmp	.-4038   	; 0xfffff060 <__eeprom_end+0xff7ef060>
  26:	94 cc       	rjmp	.-1752   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  28:	c9 c8       	rjmp	.-3694   	; 0xfffff1bc <__eeprom_end+0xff7ef1bc>
  2a:	79 c5       	rjmp	.+2802   	; 0xb1e <__vector_21>
  2c:	91 cc       	rjmp	.-1758   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  2e:	90 cc       	rjmp	.-1760   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  30:	8f cc       	rjmp	.-1762   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  32:	8e cc       	rjmp	.-1764   	; 0xfffff950 <__eeprom_end+0xff7ef950>
  34:	00 c4       	rjmp	.+2048   	; 0x836 <MIDI_ParserTask+0x18>
  36:	0c c4       	rjmp	.+2072   	; 0x850 <MIDI_ParserTask+0x32>
  38:	4b c4       	rjmp	.+2198   	; 0x8d0 <MIDI_ParserTask+0xb2>
  3a:	7e c4       	rjmp	.+2300   	; 0x938 <MIDI_ParserTask+0x11a>
  3c:	5e c4       	rjmp	.+2236   	; 0x8fa <MIDI_ParserTask+0xdc>
  3e:	8d c4       	rjmp	.+2330   	; 0x95a <MIDI_ParserTask+0x13c>
  40:	90 c4       	rjmp	.+2336   	; 0x962 <MIDI_ParserTask+0x144>
  42:	2d c3       	rjmp	.+1626   	; 0x69e <readButtonsState+0x18>
  44:	40 c3       	rjmp	.+1664   	; 0x6c6 <readButtonsState+0x40>
  46:	56 c3       	rjmp	.+1708   	; 0x6f4 <readButtonsState+0x6e>
  48:	6d c3       	rjmp	.+1754   	; 0x724 <readButtonsState+0x9e>
  4a:	80 c3       	rjmp	.+1792   	; 0x74c <readButtonsState+0xc6>
  4c:	97 c3       	rjmp	.+1838   	; 0x77c <readButtonsState+0xf6>
  4e:	a5 c3       	rjmp	.+1866   	; 0x79a <readButtonsState+0x114>
  50:	bc c3       	rjmp	.+1912   	; 0x7ca <readButtonsState+0x144>

00000052 <.dinit>:
  52:	01 00       	.word	0x0001	; ????
  54:	01 8e       	std	Z+25, r0	; 0x19
  56:	80 01       	movw	r16, r0
  58:	8e 01       	movw	r16, r28
  5a:	a6 00       	.word	0x00a6	; ????
  5c:	19 5c       	subi	r17, 0xC9	; 201
  5e:	01 a6       	std	Z+41, r0	; 0x29
  60:	01 ac       	ldd	r0, Z+57	; 0x39
  62:	80 01       	movw	r16, r0
  64:	ac 01       	movw	r20, r24
  66:	b0 00       	.word	0x00b0	; ????
  68:	19 74       	andi	r17, 0x49	; 73
  6a:	01 b0       	in	r0, 0x01	; 1
  6c:	01 b3       	in	r16, 0x11	; 17
  6e:	80 01       	movw	r16, r0
  70:	b3 01       	movw	r22, r6
  72:	b4 00       	.word	0x00b4	; ????
  74:	19 78       	andi	r17, 0x89	; 137
  76:	01 b4       	in	r0, 0x21	; 33
  78:	01 b9       	out	0x01, r16	; 1
  7a:	80 01       	movw	r16, r0
  7c:	b9 01       	movw	r22, r18
  7e:	ba 00       	.word	0x00ba	; ????
  80:	19 79       	andi	r17, 0x99	; 153
  82:	01 ba       	out	0x11, r0	; 17
  84:	01 bd       	out	0x21, r16	; 33
  86:	80 00       	.word	0x0080	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d4 e0       	ldi	r29, 0x04	; 4
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	e2 e5       	ldi	r30, 0x52	; 82
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	40 e0       	ldi	r20, 0x00	; 0
  9a:	17 c0       	rjmp	.+46     	; 0xca <__do_clear_bss+0x8>
  9c:	b5 91       	lpm	r27, Z+
  9e:	a5 91       	lpm	r26, Z+
  a0:	35 91       	lpm	r19, Z+
  a2:	25 91       	lpm	r18, Z+
  a4:	05 91       	lpm	r16, Z+
  a6:	07 fd       	sbrc	r16, 7
  a8:	0c c0       	rjmp	.+24     	; 0xc2 <__do_clear_bss>
  aa:	95 91       	lpm	r25, Z+
  ac:	85 91       	lpm	r24, Z+
  ae:	ef 01       	movw	r28, r30
  b0:	f9 2f       	mov	r31, r25
  b2:	e8 2f       	mov	r30, r24
  b4:	05 90       	lpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a2 17       	cp	r26, r18
  ba:	b3 07       	cpc	r27, r19
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x20>
  be:	fe 01       	movw	r30, r28
  c0:	04 c0       	rjmp	.+8      	; 0xca <__do_clear_bss+0x8>

000000c2 <__do_clear_bss>:
  c2:	1d 92       	st	X+, r1
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	e1 f7       	brne	.-8      	; 0xc2 <__do_clear_bss>
  ca:	e7 38       	cpi	r30, 0x87	; 135
  cc:	f4 07       	cpc	r31, r20
  ce:	31 f7       	brne	.-52     	; 0x9c <__do_copy_data+0x8>
  d0:	91 d9       	rcall	.-3294   	; 0xfffff3f4 <__eeprom_end+0xff7ef3f4>
  d2:	f0 cb       	rjmp	.-2080   	; 0xfffff8b4 <__eeprom_end+0xff7ef8b4>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>

Disassembly of section .text:

00001950 <__bad_interrupt>:
    1950:	57 c3       	rjmp	.+1710   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.__portable_avr_delay_cycles:

00001812 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1812:	04 c0       	rjmp	.+8      	; 0x181c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1814:	61 50       	subi	r22, 0x01	; 1
    1816:	71 09       	sbc	r23, r1
    1818:	81 09       	sbc	r24, r1
    181a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    181c:	61 15       	cp	r22, r1
    181e:	71 05       	cpc	r23, r1
    1820:	81 05       	cpc	r24, r1
    1822:	91 05       	cpc	r25, r1
    1824:	b9 f7       	brne	.-18     	; 0x1814 <__portable_avr_delay_cycles+0x2>
    1826:	08 95       	ret

Disassembly of section .text.initTest:

00000974 <initTest>:
bool isAmpStarted = false;
int16_t negVdd;
int16_t posVdd;
void initTest()
{
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_FAST_BLINKING);
 974:	62 e0       	ldi	r22, 0x02	; 2
 976:	87 e0       	ldi	r24, 0x07	; 7
 978:	5a d5       	rcall	.+2740   	; 0x142e <SH100HW_SetNewLedState>
	delay_ms(20000);
 97a:	66 ed       	ldi	r22, 0xD6	; 214
 97c:	7c ed       	ldi	r23, 0xDC	; 220
 97e:	82 e3       	ldi	r24, 0x32	; 50
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	47 d7       	rcall	.+3726   	; 0x1812 <__portable_avr_delay_cycles>
	
	SH100HW_StartADConvertion(ADC_V_SIGNAL);
 984:	86 e0       	ldi	r24, 0x06	; 6
 986:	64 d7       	rcall	.+3784   	; 0x1850 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 988:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 98c:	86 fd       	sbrc	r24, 6
 98e:	fc cf       	rjmp	.-8      	; 0x988 <initTest+0x14>
		
	int32_t outLineValue = ADC;
 990:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 994:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 998:	cb 01       	movw	r24, r22
 99a:	a0 e0       	ldi	r26, 0x00	; 0
 99c:	b0 e0       	ldi	r27, 0x00	; 0
	
	if(fabs(outLineValue - 0x3FF/2) > 100)
 99e:	bc 01       	movw	r22, r24
 9a0:	cd 01       	movw	r24, r26
 9a2:	6f 5f       	subi	r22, 0xFF	; 255
 9a4:	71 40       	sbci	r23, 0x01	; 1
 9a6:	81 09       	sbc	r24, r1
 9a8:	91 09       	sbc	r25, r1
 9aa:	9e d1       	rcall	.+828    	; 0xce8 <__floatsisf>
 9ac:	9f 77       	andi	r25, 0x7F	; 127
 9ae:	20 e0       	ldi	r18, 0x00	; 0
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	48 ec       	ldi	r20, 0xC8	; 200
 9b4:	52 e4       	ldi	r21, 0x42	; 66
 9b6:	ab d7       	rcall	.+3926   	; 0x190e <__gesf2>
 9b8:	18 16       	cp	r1, r24
 9ba:	4c f4       	brge	.+18     	; 0x9ce <initTest+0x5a>
	{
		// DC on output!
		SH100HW_SetPAFailure(true);
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	6c d7       	rcall	.+3800   	; 0x1898 <SH100HW_SetPAFailure>
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 9c0:	60 e0       	ldi	r22, 0x00	; 0
 9c2:	87 e0       	ldi	r24, 0x07	; 7
 9c4:	34 d5       	rcall	.+2664   	; 0x142e <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 9c6:	62 e0       	ldi	r22, 0x02	; 2
 9c8:	88 e0       	ldi	r24, 0x08	; 8
 9ca:	31 d5       	rcall	.+2658   	; 0x142e <SH100HW_SetNewLedState>
 9cc:	ff cf       	rjmp	.-2      	; 0x9cc <initTest+0x58>
		while(1) {}
	}
	
	SH100HW_StartADConvertion(ADC_V_NEGATIVE);
 9ce:	87 e0       	ldi	r24, 0x07	; 7
 9d0:	3f d7       	rcall	.+3710   	; 0x1850 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 9d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 9d6:	86 fd       	sbrc	r24, 6
 9d8:	fc cf       	rjmp	.-8      	; 0x9d2 <initTest+0x5e>
		
	negVdd = ADC;
 9da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 9de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 9e2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 9e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	SH100HW_StartADConvertion(ADC_V_POSITIVE);
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	31 d7       	rcall	.+3682   	; 0x1850 <SH100HW_StartADConvertion>
	while(ADCSRA & (1<<ADSC)){}
 9ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
 9f2:	86 fd       	sbrc	r24, 6
 9f4:	fc cf       	rjmp	.-8      	; 0x9ee <initTest+0x7a>
		
	posVdd = ADC;
 9f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 9fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 9fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <posVdd+0x1>
 a02:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <posVdd>
	
	if(fabs(negVdd-posVdd) > 100)
 a06:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 a0a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 a0e:	68 1b       	sub	r22, r24
 a10:	79 0b       	sbc	r23, r25
 a12:	07 2e       	mov	r0, r23
 a14:	00 0c       	add	r0, r0
 a16:	88 0b       	sbc	r24, r24
 a18:	99 0b       	sbc	r25, r25
 a1a:	66 d1       	rcall	.+716    	; 0xce8 <__floatsisf>
 a1c:	9f 77       	andi	r25, 0x7F	; 127
 a1e:	20 e0       	ldi	r18, 0x00	; 0
 a20:	30 e0       	ldi	r19, 0x00	; 0
 a22:	48 ec       	ldi	r20, 0xC8	; 200
 a24:	52 e4       	ldi	r21, 0x42	; 66
 a26:	73 d7       	rcall	.+3814   	; 0x190e <__gesf2>
 a28:	18 16       	cp	r1, r24
 a2a:	4c f4       	brge	.+18     	; 0xa3e <initTest+0xca>
	{
		// one of Vdd rail is out
		SH100HW_SetPAFailure(true);
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	34 d7       	rcall	.+3688   	; 0x1898 <SH100HW_SetPAFailure>
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 a30:	60 e0       	ldi	r22, 0x00	; 0
 a32:	87 e0       	ldi	r24, 0x07	; 7
 a34:	fc d4       	rcall	.+2552   	; 0x142e <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 a36:	62 e0       	ldi	r22, 0x02	; 2
 a38:	88 e0       	ldi	r24, 0x08	; 8
 a3a:	f9 d4       	rcall	.+2546   	; 0x142e <SH100HW_SetNewLedState>
 a3c:	ff cf       	rjmp	.-2      	; 0xa3c <initTest+0xc8>
		while(1) {}
	}
		
	SH100HW_SetPAFailure(false);
 a3e:	80 e0       	ldi	r24, 0x00	; 0
 a40:	2b d7       	rcall	.+3670   	; 0x1898 <SH100HW_SetPAFailure>
	SH100CTRL_CheckOutputJacks();
 a42:	c9 d1       	rcall	.+914    	; 0xdd6 <SH100CTRL_CheckOutputJacks>
	isAmpStarted = true;
 a44:	81 e0       	ldi	r24, 0x01	; 1
 a46:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <isAmpStarted>
 a4a:	08 95       	ret

Disassembly of section .text.main:

000013f4 <main>:
}

int main(void)
{
	board_init();
    13f4:	ae d2       	rcall	.+1372   	; 0x1952 <board_init>
	
	UART_init();
    13f6:	f5 d1       	rcall	.+1002   	; 0x17e2 <UART_init>
	SH100HW_Init();
    13f8:	ce dd       	rcall	.-1124   	; 0xf96 <SH100HW_Init>
	SH100CTRL_Init();
    13fa:	f2 db       	rcall	.-2076   	; 0xbe0 <SH100CTRL_Init>
	MIDICTRL_Init();
    13fc:	54 d1       	rcall	.+680    	; 0x16a6 <MIDICTRL_Init>
	
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    13fe:	85 b5       	in	r24, 0x25	; 37
    1400:	85 60       	ori	r24, 0x05	; 5
    1402:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    1404:	ee e6       	ldi	r30, 0x6E	; 110
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	81 60       	ori	r24, 0x01	; 1
    140c:	80 83       	st	Z, r24
	TCNT0 = 100;
    140e:	84 e6       	ldi	r24, 0x64	; 100
    1410:	86 bd       	out	0x26, r24	; 38
	
	// PCINT10, interrupt for PC2 pin(SW detect)
	PCICR |= 0x02;
    1412:	e8 e6       	ldi	r30, 0x68	; 104
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	82 60       	ori	r24, 0x02	; 2
    141a:	80 83       	st	Z, r24
	PCMSK1 |= 0x04;
    141c:	ec e6       	ldi	r30, 0x6C	; 108
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	84 60       	ori	r24, 0x04	; 4
    1424:	80 83       	st	Z, r24
	
	cpu_irq_enable();
    1426:	78 94       	sei
	
	initTest();
    1428:	a5 da       	rcall	.-2742   	; 0x974 <initTest>
		
    while(1)
    {
		MIDI_ParserTask();
    142a:	f9 d9       	rcall	.-3086   	; 0x81e <MIDI_ParserTask>
    142c:	fe cf       	rjmp	.-4      	; 0x142a <main+0x36>

Disassembly of section .text.__vector_16:

000004c6 <__vector_16>:
uint8_t protectionInterval_cnt = PROTECTION_INTERVAL;
uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

ISR(TIMER0_OVF_vect)
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	2f 97       	sbiw	r28, 0x0f	; 15
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 4f6:	f2 de       	rcall	.-540    	; 0x2dc <SH100HW_MainTask>
	
	if(isAmpStarted)
 4f8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <isAmpStarted>
 4fc:	88 23       	and	r24, r24
 4fe:	19 f0       	breq	.+6      	; 0x506 <__stack+0x7>
	{
		SH100CTRL_CheckOutputJacks();
 500:	6a d4       	rcall	.+2260   	; 0xdd6 <SH100CTRL_CheckOutputJacks>
		SH100HW_StartADConvertion(ADC_V_NEGATIVE);
 502:	87 e0       	ldi	r24, 0x07	; 7
 504:	a5 d9       	rcall	.-3254   	; 0xfffff850 <__eeprom_end+0xff7ef850>
	}
	
	SH100HW_Buttons_t pressedButtons = SH100HW_GetButtonsState();
 506:	ce 01       	movw	r24, r28
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	ac d9       	rcall	.-3240   	; 0xfffff864 <__eeprom_end+0xff7ef864>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	06 da       	rcall	.-3060   	; 0xfffff91c <__eeprom_end+0xff7ef91c>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 510:	8a 81       	ldd	r24, Y+2	; 0x02
 512:	07 da       	rcall	.-3058   	; 0xfffff922 <__eeprom_end+0xff7ef922>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 514:	8b 81       	ldd	r24, Y+3	; 0x03
 516:	08 da       	rcall	.-3056   	; 0xfffff928 <__eeprom_end+0xff7ef928>
	
	// FOOTSWITCH handling
	
	if(protectionInterval_cnt == 0)
 518:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <protectionInterval_cnt>
 51c:	81 11       	cpse	r24, r1
 51e:	97 c0       	rjmp	.+302    	; 0x64e <__stack+0x14f>
	{		
		//=============BTN CH1==========================
		if(pressedButtons.btnCh1 == BT_ON)
 520:	8c 81       	ldd	r24, Y+4	; 0x04
 522:	81 11       	cpse	r24, r1
 524:	27 c0       	rjmp	.+78     	; 0x574 <__stack+0x75>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 526:	84 e1       	ldi	r24, 0x14	; 20
 528:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			if(swProgrammingMode_cnt == SWITCH_MODE_DELAY)
 52c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <swProgrammingMode_cnt>
 530:	8a 30       	cpi	r24, 0x0A	; 10
 532:	69 f4       	brne	.+26     	; 0x54e <__stack+0x4f>
			{
				swProgrammingMode_cnt = 0;
 534:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <swProgrammingMode_cnt>
				//enter prog mode, or save settings
				if(MIDICTRL_MidiMode() == RUNNING)
 538:	ee d9       	rcall	.-3108   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 53a:	81 11       	cpse	r24, r1
 53c:	04 c0       	rjmp	.+8      	; 0x546 <__stack+0x47>
				{
					MIDICTRL_SwitchMode(PROGRAMMING);
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	64 d6       	rcall	.+3272   	; 0x120a <MIDICTRL_SwitchMode>
					SH100CTRL_MuteAmp();
 542:	f8 d9       	rcall	.-3088   	; 0xfffff934 <__eeprom_end+0xff7ef934>
 544:	87 c0       	rjmp	.+270    	; 0x654 <__stack+0x155>
				}
				else
				{
					MIDICTRL_StoreUserCommands();
 546:	ab d7       	rcall	.+3926   	; 0x149e <MIDICTRL_StoreUserCommands>
					SH100CTRL_SetAmpLeds();
 548:	41 d8       	rcall	.-3966   	; 0xfffff5cc <__eeprom_end+0xff7ef5cc>
					SH100CTRL_UnmuteAmp();
 54a:	c7 d9       	rcall	.-3186   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 54c:	83 c0       	rjmp	.+262    	; 0x654 <__stack+0x155>
				}
			}
			else
			{		
				if(swProgrammingMode_cnt == 0)
 54e:	81 11       	cpse	r24, r1
 550:	0b c0       	rjmp	.+22     	; 0x568 <__stack+0x69>
				{
					switch(MIDICTRL_MidiMode())
 552:	e1 d9       	rcall	.-3134   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 554:	88 23       	and	r24, r24
 556:	19 f0       	breq	.+6      	; 0x55e <__stack+0x5f>
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	21 f0       	breq	.+8      	; 0x564 <__stack+0x65>
 55c:	05 c0       	rjmp	.+10     	; 0x568 <__stack+0x69>
					{
						case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL1); break;
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	93 d9       	rcall	.-3290   	; 0xfffff888 <__eeprom_end+0xff7ef888>
 562:	02 c0       	rjmp	.+4      	; 0x568 <__stack+0x69>
						case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	04 d8       	rcall	.-4088   	; 0xfffff570 <__eeprom_end+0xff7ef570>
					}
				}
				swProgrammingMode_cnt++;
 568:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <swProgrammingMode_cnt>
 56c:	8f 5f       	subi	r24, 0xFF	; 255
 56e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <swProgrammingMode_cnt>
 572:	70 c0       	rjmp	.+224    	; 0x654 <__stack+0x155>
			}
			return;
		}
		else swProgrammingMode_cnt=0;	
 574:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <swProgrammingMode_cnt>
		
		//=============BTN CH2==========================
		if(pressedButtons.btnCh2 == BT_ON)
 578:	8d 81       	ldd	r24, Y+5	; 0x05
 57a:	81 11       	cpse	r24, r1
 57c:	0f c0       	rjmp	.+30     	; 0x59c <__stack+0x9d>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 57e:	84 e1       	ldi	r24, 0x14	; 20
 580:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 584:	c8 d9       	rcall	.-3184   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 586:	88 23       	and	r24, r24
 588:	19 f0       	breq	.+6      	; 0x590 <__stack+0x91>
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	21 f0       	breq	.+8      	; 0x596 <__stack+0x97>
 58e:	62 c0       	rjmp	.+196    	; 0x654 <__stack+0x155>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL2); break;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	7a d9       	rcall	.-3340   	; 0xfffff888 <__eeprom_end+0xff7ef888>
 594:	5f c0       	rjmp	.+190    	; 0x654 <__stack+0x155>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	eb d7       	rcall	.+4054   	; 0x1570 <MIDICTRL_SetProgrammingButton>
 59a:	5c c0       	rjmp	.+184    	; 0x654 <__stack+0x155>
			}
			return;
		}
		
		//=============BTN CH3==========================
		if(pressedButtons.btnCh3 == BT_ON)
 59c:	8e 81       	ldd	r24, Y+6	; 0x06
 59e:	81 11       	cpse	r24, r1
 5a0:	0f c0       	rjmp	.+30     	; 0x5c0 <__stack+0xc1>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5a2:	84 e1       	ldi	r24, 0x14	; 20
 5a4:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 5a8:	b6 d9       	rcall	.-3220   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 5aa:	88 23       	and	r24, r24
 5ac:	19 f0       	breq	.+6      	; 0x5b4 <__stack+0xb5>
 5ae:	81 30       	cpi	r24, 0x01	; 1
 5b0:	21 f0       	breq	.+8      	; 0x5ba <__stack+0xbb>
 5b2:	50 c0       	rjmp	.+160    	; 0x654 <__stack+0x155>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL3); break;
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	68 d9       	rcall	.-3376   	; 0xfffff888 <__eeprom_end+0xff7ef888>
 5b8:	4d c0       	rjmp	.+154    	; 0x654 <__stack+0x155>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	d9 d7       	rcall	.+4018   	; 0x1570 <MIDICTRL_SetProgrammingButton>
 5be:	4a c0       	rjmp	.+148    	; 0x654 <__stack+0x155>
			}
			return;
		}
		
		//=============BTN CH4==========================
		if(pressedButtons.btnCh4 == BT_ON)
 5c0:	8f 81       	ldd	r24, Y+7	; 0x07
 5c2:	81 11       	cpse	r24, r1
 5c4:	0f c0       	rjmp	.+30     	; 0x5e4 <__stack+0xe5>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5c6:	84 e1       	ldi	r24, 0x14	; 20
 5c8:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 5cc:	a4 d9       	rcall	.-3256   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 5ce:	88 23       	and	r24, r24
 5d0:	19 f0       	breq	.+6      	; 0x5d8 <__stack+0xd9>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	21 f0       	breq	.+8      	; 0x5de <__stack+0xdf>
 5d6:	3e c0       	rjmp	.+124    	; 0x654 <__stack+0x155>
			{
				case RUNNING: SH100CTRL_BtnSwChannel(SH100_CHANNEL4); break;
 5d8:	83 e0       	ldi	r24, 0x03	; 3
 5da:	56 d9       	rcall	.-3412   	; 0xfffff888 <__eeprom_end+0xff7ef888>
 5dc:	3b c0       	rjmp	.+118    	; 0x654 <__stack+0x155>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 5de:	83 e0       	ldi	r24, 0x03	; 3
 5e0:	c7 d7       	rcall	.+3982   	; 0x1570 <MIDICTRL_SetProgrammingButton>
 5e2:	38 c0       	rjmp	.+112    	; 0x654 <__stack+0x155>
			}
			return;
		}
		
		//=============BTN LOOP=========================
		if(pressedButtons.btnLoop == BT_ON)
 5e4:	89 85       	ldd	r24, Y+9	; 0x09
 5e6:	81 11       	cpse	r24, r1
 5e8:	0e c0       	rjmp	.+28     	; 0x606 <__stack+0x107>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 5ea:	84 e1       	ldi	r24, 0x14	; 20
 5ec:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			switch(MIDICTRL_MidiMode())
 5f0:	92 d9       	rcall	.-3292   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 5f2:	88 23       	and	r24, r24
 5f4:	19 f0       	breq	.+6      	; 0x5fc <__stack+0xfd>
 5f6:	81 30       	cpi	r24, 0x01	; 1
 5f8:	19 f0       	breq	.+6      	; 0x600 <__stack+0x101>
 5fa:	2c c0       	rjmp	.+88     	; 0x654 <__stack+0x155>
			{
				case RUNNING:
				{
					SH100CTRL_SwLoop();
 5fc:	1f d9       	rcall	.-3522   	; 0xfffff83c <__eeprom_end+0xff7ef83c>
					break;
 5fe:	2a c0       	rjmp	.+84     	; 0x654 <__stack+0x155>
				}
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 600:	84 e0       	ldi	r24, 0x04	; 4
 602:	b6 d7       	rcall	.+3948   	; 0x1570 <MIDICTRL_SetProgrammingButton>
 604:	27 c0       	rjmp	.+78     	; 0x654 <__stack+0x155>
			}
			return;
		}
			
		//=============BTN AB===========================
		if(pressedButtons.btnAB == BT_ON)
 606:	88 85       	ldd	r24, Y+8	; 0x08
 608:	81 11       	cpse	r24, r1
 60a:	1e c0       	rjmp	.+60     	; 0x648 <__stack+0x149>
		{
			protectionInterval_cnt = PROTECTION_INTERVAL;
 60c:	84 e1       	ldi	r24, 0x14	; 20
 60e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
			if(leaveDefSettings_cnt == SWITCH_MODE_DELAY)
 612:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <leaveDefSettings_cnt>
 616:	8a 30       	cpi	r24, 0x0A	; 10
 618:	49 f4       	brne	.+18     	; 0x62c <__stack+0x12d>
			{
				if(MIDICTRL_MidiMode() == PROGRAMMING)
 61a:	7d d9       	rcall	.-3334   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 61c:	81 30       	cpi	r24, 0x01	; 1
 61e:	d1 f4       	brne	.+52     	; 0x654 <__stack+0x155>
				{
					leaveDefSettings_cnt = 0;
 620:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <leaveDefSettings_cnt>
					MIDICTRL_DiscardCommands();
 624:	b9 d8       	rcall	.-3726   	; 0xfffff798 <__eeprom_end+0xff7ef798>
					SH100CTRL_SetAmpLeds();
 626:	d2 d7       	rcall	.+4004   	; 0x15cc <SH100CTRL_SetAmpLeds>
					SH100CTRL_UnmuteAmp();
 628:	58 d9       	rcall	.-3408   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
 62a:	14 c0       	rjmp	.+40     	; 0x654 <__stack+0x155>
				}
			}
			else
			{
				leaveDefSettings_cnt++;
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <leaveDefSettings_cnt>
				switch(MIDICTRL_MidiMode())
 632:	71 d9       	rcall	.-3358   	; 0xfffff916 <__eeprom_end+0xff7ef916>
 634:	88 23       	and	r24, r24
 636:	19 f0       	breq	.+6      	; 0x63e <__stack+0x13f>
 638:	81 30       	cpi	r24, 0x01	; 1
 63a:	19 f0       	breq	.+6      	; 0x642 <__stack+0x143>
 63c:	0b c0       	rjmp	.+22     	; 0x654 <__stack+0x155>
				{
					case RUNNING: 
					{
						SH100CTRL_SwAB(); 
 63e:	47 d9       	rcall	.-3442   	; 0xfffff8ce <__eeprom_end+0xff7ef8ce>
						break;
 640:	09 c0       	rjmp	.+18     	; 0x654 <__stack+0x155>
					}
					case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 642:	85 e0       	ldi	r24, 0x05	; 5
 644:	95 d7       	rcall	.+3882   	; 0x1570 <MIDICTRL_SetProgrammingButton>
 646:	06 c0       	rjmp	.+12     	; 0x654 <__stack+0x155>
				}
			}
			return;
		}
		else leaveDefSettings_cnt=0;
 648:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <leaveDefSettings_cnt>
 64c:	03 c0       	rjmp	.+6      	; 0x654 <__stack+0x155>
	}
	else
	{
		protectionInterval_cnt--;
 64e:	81 50       	subi	r24, 0x01	; 1
 650:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <protectionInterval_cnt>
	}
}
 654:	2f 96       	adiw	r28, 0x0f	; 15
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

Disassembly of section .text.__vector_4:

000012ea <__vector_4>:

ISR(PCINT1_vect)
{
    12ea:	1f 92       	push	r1
    12ec:	0f 92       	push	r0
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	0f 92       	push	r0
    12f2:	11 24       	eor	r1, r1
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
	// Power off
	// need to check pin level?
	SH100CTRL_StoreAmpState();
    130c:	29 d2       	rcall	.+1106   	; 0x1760 <SH100CTRL_StoreAmpState>
}
    130e:	ff 91       	pop	r31
    1310:	ef 91       	pop	r30
    1312:	bf 91       	pop	r27
    1314:	af 91       	pop	r26
    1316:	9f 91       	pop	r25
    1318:	8f 91       	pop	r24
    131a:	7f 91       	pop	r23
    131c:	6f 91       	pop	r22
    131e:	5f 91       	pop	r21
    1320:	4f 91       	pop	r20
    1322:	3f 91       	pop	r19
    1324:	2f 91       	pop	r18
    1326:	0f 90       	pop	r0
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	0f 90       	pop	r0
    132c:	1f 90       	pop	r1
    132e:	18 95       	reti

Disassembly of section .text.__vector_21:

00000b1e <__vector_21>:

int16_t negVdd;
int16_t posVdd;
bool measSwitch = false;
ISR(ADC_vect)
{
 b1e:	1f 92       	push	r1
 b20:	0f 92       	push	r0
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	0f 92       	push	r0
 b26:	11 24       	eor	r1, r1
 b28:	2f 93       	push	r18
 b2a:	3f 93       	push	r19
 b2c:	4f 93       	push	r20
 b2e:	5f 93       	push	r21
 b30:	6f 93       	push	r22
 b32:	7f 93       	push	r23
 b34:	8f 93       	push	r24
 b36:	9f 93       	push	r25
 b38:	af 93       	push	r26
 b3a:	bf 93       	push	r27
 b3c:	ef 93       	push	r30
 b3e:	ff 93       	push	r31
	if(isAmpStarted)
 b40:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <isAmpStarted>
 b44:	88 23       	and	r24, r24
 b46:	d9 f1       	breq	.+118    	; 0xbbe <__vector_21+0xa0>
	{
		if(measSwitch)
 b48:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <measSwitch>
 b4c:	88 23       	and	r24, r24
 b4e:	59 f0       	breq	.+22     	; 0xb66 <__vector_21+0x48>
		{
			posVdd = ADC;
 b50:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 b54:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 b58:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <posVdd+0x1>
 b5c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <posVdd>
			measSwitch = false;
 b60:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <measSwitch>
 b64:	0d c0       	rjmp	.+26     	; 0xb80 <__vector_21+0x62>
			//SH100HW_StartADConvertion(ADC_V_NEGATIVE);
		}
		else
		{
			negVdd = ADC;
 b66:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7fe078>
 b6a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7fe079>
 b6e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 b72:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			measSwitch = true;
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <measSwitch>
			SH100HW_StartADConvertion(ADC_V_POSITIVE);
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	68 d6       	rcall	.+3280   	; 0x1850 <SH100HW_StartADConvertion>
		}
		
		if(fabs(negVdd-posVdd) > 100)
 b80:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <_edata>
 b84:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <_edata+0x1>
 b88:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <posVdd>
 b8c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <posVdd+0x1>
 b90:	68 1b       	sub	r22, r24
 b92:	79 0b       	sbc	r23, r25
 b94:	07 2e       	mov	r0, r23
 b96:	00 0c       	add	r0, r0
 b98:	88 0b       	sbc	r24, r24
 b9a:	99 0b       	sbc	r25, r25
 b9c:	a5 d0       	rcall	.+330    	; 0xce8 <__floatsisf>
 b9e:	9f 77       	andi	r25, 0x7F	; 127
 ba0:	20 e0       	ldi	r18, 0x00	; 0
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	48 ec       	ldi	r20, 0xC8	; 200
 ba6:	52 e4       	ldi	r21, 0x42	; 66
 ba8:	b2 d6       	rcall	.+3428   	; 0x190e <__gesf2>
 baa:	18 16       	cp	r1, r24
 bac:	44 f4       	brge	.+16     	; 0xbbe <__vector_21+0xa0>
		{
			// one of Vdd rail is out
			SH100HW_SetPAFailure(true);
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	73 d6       	rcall	.+3302   	; 0x1898 <SH100HW_SetPAFailure>
			SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 bb2:	60 e0       	ldi	r22, 0x00	; 0
 bb4:	87 e0       	ldi	r24, 0x07	; 7
 bb6:	3b d4       	rcall	.+2166   	; 0x142e <SH100HW_SetNewLedState>
			SH100HW_SetNewLedState(LED_PWR_RED, LED_FAST_BLINKING);
 bb8:	62 e0       	ldi	r22, 0x02	; 2
 bba:	88 e0       	ldi	r24, 0x08	; 8
 bbc:	38 d4       	rcall	.+2160   	; 0x142e <SH100HW_SetNewLedState>
		}
	}
 bbe:	ff 91       	pop	r31
 bc0:	ef 91       	pop	r30
 bc2:	bf 91       	pop	r27
 bc4:	af 91       	pop	r26
 bc6:	9f 91       	pop	r25
 bc8:	8f 91       	pop	r24
 bca:	7f 91       	pop	r23
 bcc:	6f 91       	pop	r22
 bce:	5f 91       	pop	r21
 bd0:	4f 91       	pop	r20
 bd2:	3f 91       	pop	r19
 bd4:	2f 91       	pop	r18
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	0f 90       	pop	r0
 bdc:	1f 90       	pop	r1
 bde:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

00001906 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    1906:	88 1f       	adc	r24, r24
    1908:	88 27       	eor	r24, r24
    190a:	88 1f       	adc	r24, r24
    190c:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

000018c2 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    18c2:	91 e0       	ldi	r25, 0x01	; 1
    18c4:	88 3f       	cpi	r24, 0xF8	; 248
    18c6:	08 f4       	brcc	.+2      	; 0x18ca <MIDI_IsSysRealTime+0x8>
    18c8:	90 e0       	ldi	r25, 0x00	; 0
}
    18ca:	89 2f       	mov	r24, r25
    18cc:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000e4e <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 e4e:	82 3f       	cpi	r24, 0xF2	; 242
 e50:	01 f1       	breq	.+64     	; 0xe92 <MIDI_GetStatusType+0x44>
 e52:	68 f4       	brcc	.+26     	; 0xe6e <MIDI_GetStatusType+0x20>
 e54:	8e 30       	cpi	r24, 0x0E	; 14
 e56:	28 f4       	brcc	.+10     	; 0xe62 <MIDI_GetStatusType+0x14>
 e58:	8c 30       	cpi	r24, 0x0C	; 12
 e5a:	78 f5       	brcc	.+94     	; 0xeba <MIDI_GetStatusType+0x6c>
 e5c:	88 30       	cpi	r24, 0x08	; 8
 e5e:	c8 f4       	brcc	.+50     	; 0xe92 <MIDI_GetStatusType+0x44>
 e60:	2a c0       	rjmp	.+84     	; 0xeb6 <MIDI_GetStatusType+0x68>
 e62:	80 3f       	cpi	r24, 0xF0	; 240
 e64:	21 f1       	breq	.+72     	; 0xeae <MIDI_GetStatusType+0x60>
 e66:	48 f5       	brcc	.+82     	; 0xeba <MIDI_GetStatusType+0x6c>
 e68:	8e 30       	cpi	r24, 0x0E	; 14
 e6a:	99 f0       	breq	.+38     	; 0xe92 <MIDI_GetStatusType+0x44>
 e6c:	24 c0       	rjmp	.+72     	; 0xeb6 <MIDI_GetStatusType+0x68>
 e6e:	8a 3f       	cpi	r24, 0xFA	; 250
 e70:	a1 f0       	breq	.+40     	; 0xe9a <MIDI_GetStatusType+0x4c>
 e72:	38 f4       	brcc	.+14     	; 0xe82 <MIDI_GetStatusType+0x34>
 e74:	87 3f       	cpi	r24, 0xF7	; 247
 e76:	e9 f0       	breq	.+58     	; 0xeb2 <MIDI_GetStatusType+0x64>
 e78:	88 3f       	cpi	r24, 0xF8	; 248
 e7a:	69 f0       	breq	.+26     	; 0xe96 <MIDI_GetStatusType+0x48>
 e7c:	83 3f       	cpi	r24, 0xF3	; 243
 e7e:	e9 f0       	breq	.+58     	; 0xeba <MIDI_GetStatusType+0x6c>
 e80:	1a c0       	rjmp	.+52     	; 0xeb6 <MIDI_GetStatusType+0x68>
 e82:	8c 3f       	cpi	r24, 0xFC	; 252
 e84:	71 f0       	breq	.+28     	; 0xea2 <MIDI_GetStatusType+0x54>
 e86:	58 f0       	brcs	.+22     	; 0xe9e <MIDI_GetStatusType+0x50>
 e88:	8e 3f       	cpi	r24, 0xFE	; 254
 e8a:	69 f0       	breq	.+26     	; 0xea6 <MIDI_GetStatusType+0x58>
 e8c:	8f 3f       	cpi	r24, 0xFF	; 255
 e8e:	69 f0       	breq	.+26     	; 0xeaa <MIDI_GetStatusType+0x5c>
 e90:	12 c0       	rjmp	.+36     	; 0xeb6 <MIDI_GetStatusType+0x68>
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 e92:	82 e0       	ldi	r24, 0x02	; 2
 e94:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 e96:	83 e0       	ldi	r24, 0x03	; 3
 e98:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 e9a:	83 e0       	ldi	r24, 0x03	; 3
 e9c:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 e9e:	83 e0       	ldi	r24, 0x03	; 3
 ea0:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 ea2:	83 e0       	ldi	r24, 0x03	; 3
 ea4:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 ea6:	83 e0       	ldi	r24, 0x03	; 3
 ea8:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 eaa:	83 e0       	ldi	r24, 0x03	; 3
 eac:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 eae:	84 e0       	ldi	r24, 0x04	; 4
 eb0:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 eb2:	85 e0       	ldi	r24, 0x05	; 5
 eb4:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 eb6:	80 e0       	ldi	r24, 0x00	; 0
 eb8:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 eba:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 ebc:	08 95       	ret

Disassembly of section .text.isEqualCommands:

00001828 <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    1828:	62 13       	cpse	r22, r18
    182a:	04 c0       	rjmp	.+8      	; 0x1834 <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data1) return false;
    182c:	84 17       	cp	r24, r20
    182e:	21 f0       	breq	.+8      	; 0x1838 <isEqualCommands+0x10>
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data1) return false;
			
	return true;
    1838:	81 e0       	ldi	r24, 0x01	; 1
}
    183a:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

00000c6a <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 c6a:	cf 93       	push	r28
 c6c:	df 93       	push	r29
 c6e:	cd b7       	in	r28, 0x3d	; 61
 c70:	de b7       	in	r29, 0x3e	; 62
 c72:	68 97       	sbiw	r28, 0x18	; 24
 c74:	0f b6       	in	r0, 0x3f	; 63
 c76:	f8 94       	cli
 c78:	de bf       	out	0x3e, r29	; 62
 c7a:	0f be       	out	0x3f, r0	; 63
 c7c:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word((uint16_t*)0x02);
 c7e:	62 e0       	ldi	r22, 0x02	; 2
 c80:	70 e0       	ldi	r23, 0x00	; 0
 c82:	80 e8       	ldi	r24, 0x80	; 128
 c84:	30 d6       	rcall	.+3168   	; 0x18e6 <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 c86:	8b 3a       	cpi	r24, 0xAB	; 171
 c88:	9c 4a       	sbci	r25, 0xAC	; 172
 c8a:	c1 f4       	brne	.+48     	; 0xcbc <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 c8c:	4f e0       	ldi	r20, 0x0F	; 15
 c8e:	50 e0       	ldi	r21, 0x00	; 0
 c90:	60 e8       	ldi	r22, 0x80	; 128
 c92:	28 e1       	ldi	r18, 0x18	; 24
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	ce 01       	movw	r24, r28
 c98:	01 96       	adiw	r24, 0x01	; 1
 c9a:	3f d5       	rcall	.+2686   	; 0x171a <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 c9c:	88 e1       	ldi	r24, 0x18	; 24
 c9e:	fe 01       	movw	r30, r28
 ca0:	31 96       	adiw	r30, 0x01	; 1
 ca2:	ac e0       	ldi	r26, 0x0C	; 12
 ca4:	b1 e0       	ldi	r27, 0x01	; 1
 ca6:	01 90       	ld	r0, Z+
 ca8:	0d 92       	st	X+, r0
 caa:	8a 95       	dec	r24
 cac:	e1 f7       	brne	.-8      	; 0xca6 <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 cae:	6e e0       	ldi	r22, 0x0E	; 14
 cb0:	70 e0       	ldi	r23, 0x00	; 0
 cb2:	80 e8       	ldi	r24, 0x80	; 128
 cb4:	e0 d5       	rcall	.+3008   	; 0x1876 <eeprom_read_byte>
 cb6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <commandSet>
 cba:	0b c0       	rjmp	.+22     	; 0xcd2 <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 cbc:	88 e1       	ldi	r24, 0x18	; 24
 cbe:	ee e8       	ldi	r30, 0x8E	; 142
 cc0:	f1 e0       	ldi	r31, 0x01	; 1
 cc2:	ac e0       	ldi	r26, 0x0C	; 12
 cc4:	b1 e0       	ldi	r27, 0x01	; 1
 cc6:	01 90       	ld	r0, Z+
 cc8:	0d 92       	st	X+, r0
 cca:	8a 95       	dec	r24
 ccc:	e1 f7       	brne	.-8      	; 0xcc6 <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 cce:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <commandSet>
	}
}
 cd2:	68 96       	adiw	r28, 0x18	; 24
 cd4:	0f b6       	in	r0, 0x3f	; 63
 cd6:	f8 94       	cli
 cd8:	de bf       	out	0x3e, r29	; 62
 cda:	0f be       	out	0x3f, r0	; 63
 cdc:	cd bf       	out	0x3d, r28	; 61
 cde:	df 91       	pop	r29
 ce0:	cf 91       	pop	r28
 ce2:	08 95       	ret

Disassembly of section .text.setMidiLeds:

0000111c <setMidiLeds>:

void setMidiLeds()
{
    111c:	cf 93       	push	r28
	if(mode == PROGRAMMING)
    111e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	11 f5       	brne	.+68     	; 0x116a <setMidiLeds+0x4e>
    1126:	18 c0       	rjmp	.+48     	; 0x1158 <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
    1128:	ec 2f       	mov	r30, r28
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	eb 5f       	subi	r30, 0xFB	; 251
    112e:	fe 4f       	sbci	r31, 0xFE	; 254
    1130:	80 81       	ld	r24, Z
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	41 f0       	breq	.+16     	; 0x1146 <setMidiLeds+0x2a>
    1136:	18 f0       	brcs	.+6      	; 0x113e <setMidiLeds+0x22>
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	49 f0       	breq	.+18     	; 0x114e <setMidiLeds+0x32>
    113c:	0b c0       	rjmp	.+22     	; 0x1154 <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	8c 2f       	mov	r24, r28
    1142:	75 d1       	rcall	.+746    	; 0x142e <SH100HW_SetNewLedState>
    1144:	07 c0       	rjmp	.+14     	; 0x1154 <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
    1146:	62 e0       	ldi	r22, 0x02	; 2
    1148:	8c 2f       	mov	r24, r28
    114a:	71 d1       	rcall	.+738    	; 0x142e <SH100HW_SetNewLedState>
    114c:	03 c0       	rjmp	.+6      	; 0x1154 <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	8c 2f       	mov	r24, r28
    1152:	6d d1       	rcall	.+730    	; 0x142e <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
    1154:	cf 5f       	subi	r28, 0xFF	; 255
    1156:	01 c0       	rjmp	.+2      	; 0x115a <setMidiLeds+0x3e>
    1158:	c0 e0       	ldi	r28, 0x00	; 0
    115a:	c6 30       	cpi	r28, 0x06	; 6
    115c:	28 f3       	brcs	.-54     	; 0x1128 <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
    115e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <currentErrBtnId>
    1162:	8f 3f       	cpi	r24, 0xFF	; 255
    1164:	11 f0       	breq	.+4      	; 0x116a <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	62 d1       	rcall	.+708    	; 0x142e <SH100HW_SetNewLedState>
		}
	}
}
    116a:	cf 91       	pop	r28
    116c:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

000016a6 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x00; // psc = 1024 if on
    16a6:	e1 e8       	ldi	r30, 0x81	; 129
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
    16ae:	ef e6       	ldi	r30, 0x6F	; 111
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	81 60       	ori	r24, 0x01	; 1
    16b6:	80 83       	st	Z, r24
	TCNT1 = 0;
    16b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    16bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    16c0:	8f ef       	ldi	r24, 0xFF	; 255
    16c2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	
	loadCommSetFromMemory();
    16c6:	d1 da       	rcall	.-2654   	; 0xc6a <loadCommSetFromMemory>
	mode = RUNNING;
    16c8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    16cc:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

00001916 <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    1916:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    191a:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

00001570 <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
    1570:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <currentProgBtn>
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	eb 5f       	subi	r30, 0xFB	; 251
    157a:	fe 4f       	sbci	r31, 0xFE	; 254
    157c:	90 81       	ld	r25, Z
    157e:	91 30       	cpi	r25, 0x01	; 1
    1580:	21 f4       	brne	.+8      	; 0x158a <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
    1582:	f9 01       	movw	r30, r18
    1584:	eb 5f       	subi	r30, 0xFB	; 251
    1586:	fe 4f       	sbci	r31, 0xFE	; 254
    1588:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
    158a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
    158e:	e8 2f       	mov	r30, r24
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	eb 5f       	subi	r30, 0xFB	; 251
    1594:	fe 4f       	sbci	r31, 0xFE	; 254
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 83       	st	Z, r24
	setMidiLeds();
    159a:	c0 dd       	rcall	.-1152   	; 0x111c <setMidiLeds>
    159c:	08 95       	ret

Disassembly of section .text.MIDICTRL_SwitchMode:

0000120a <MIDICTRL_SwitchMode>:
	loadCommSetFromMemory();
	mode = RUNNING;
}

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
    120a:	cf 93       	push	r28
    120c:	c8 2f       	mov	r28, r24
	if(mode == RUNNING)
    120e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1212:	81 11       	cpse	r24, r1
    1214:	17 c0       	rjmp	.+46     	; 0x1244 <MIDICTRL_SwitchMode+0x3a>
	{
		MIDI_SetRetranslateState(false);
    1216:	8b d3       	rcall	.+1814   	; 0x192e <MIDI_SetRetranslateState>
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <MIDICTRL_SwitchMode+0x1e>
			midiProgBtnState[i] = PROG_CLEAR;
    121c:	e8 2f       	mov	r30, r24
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	eb 5f       	subi	r30, 0xFB	; 251
    1222:	fe 4f       	sbci	r31, 0xFE	; 254
    1224:	10 82       	st	Z, r1
{	
	if(mode == RUNNING)
	{
		MIDI_SetRetranslateState(false);
		
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
    1226:	8f 5f       	subi	r24, 0xFF	; 255
    1228:	86 30       	cpi	r24, 0x06	; 6
    122a:	c0 f3       	brcs	.-16     	; 0x121c <MIDICTRL_SwitchMode+0x12>
			midiProgBtnState[i] = PROG_CLEAR;
		
		MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	a0 d1       	rcall	.+832    	; 0x1570 <MIDICTRL_SetProgrammingButton>
		
		
		SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
    1230:	63 e0       	ldi	r22, 0x03	; 3
    1232:	87 e0       	ldi	r24, 0x07	; 7
    1234:	fc d0       	rcall	.+504    	; 0x142e <SH100HW_SetNewLedState>
		SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
    1236:	63 e0       	ldi	r22, 0x03	; 3
    1238:	88 e0       	ldi	r24, 0x08	; 8
    123a:	f9 d0       	rcall	.+498    	; 0x142e <SH100HW_SetNewLedState>
		
		SH100HW_SetNewLedState(LED_B, LED_OFF);
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	86 e0       	ldi	r24, 0x06	; 6
    1240:	f6 d0       	rcall	.+492    	; 0x142e <SH100HW_SetNewLedState>
    1242:	04 c0       	rjmp	.+8      	; 0x124c <MIDICTRL_SwitchMode+0x42>
	}
	else
	{
		SH100HW_SetPreviousLedState(LED_B);
    1244:	86 e0       	ldi	r24, 0x06	; 6
    1246:	43 d2       	rcall	.+1158   	; 0x16ce <SH100HW_SetPreviousLedState>
		
		MIDI_SetRetranslateState(true);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	71 d3       	rcall	.+1762   	; 0x192e <MIDI_SetRetranslateState>
	}
	mode = newMode;
    124c:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <mode>
	
	setMidiLeds();
    1250:	65 df       	rcall	.-310    	; 0x111c <setMidiLeds>
}
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

0000191c <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    191c:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <channelNum>
    1920:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

00001922 <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    1922:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <omniModeEnabled>
    1926:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

00001928 <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    1928:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <muteCommandEnabled>
    192c:	08 95       	ret

Disassembly of section .text.programmBtn:

00001256 <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	f9 01       	movw	r30, r18
    1262:	eb 5f       	subi	r30, 0xFB	; 251
    1264:	fe 4f       	sbci	r31, 0xFE	; 254
    1266:	90 81       	ld	r25, Z
    1268:	91 30       	cpi	r25, 0x01	; 1
    126a:	b9 f4       	brne	.+46     	; 0x129a <programmBtn+0x44>
    126c:	6a 01       	movw	r12, r20
    126e:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
    1270:	fa 01       	movw	r30, r20
    1272:	84 91       	lpm	r24, Z
    1274:	e7 fc       	sbrc	r14, 7
    1276:	80 81       	ld	r24, Z
    1278:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	c8 0e       	add	r12, r24
    127e:	d1 1c       	adc	r13, r1
    1280:	e1 1c       	adc	r14, r1
    1282:	f6 01       	movw	r30, r12
    1284:	84 91       	lpm	r24, Z
    1286:	e7 fc       	sbrc	r14, 7
    1288:	80 81       	ld	r24, Z
    128a:	12 96       	adiw	r26, 0x02	; 2
    128c:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
    128e:	f9 01       	movw	r30, r18
    1290:	eb 5f       	subi	r30, 0xFB	; 251
    1292:	fe 4f       	sbci	r31, 0xFE	; 254
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	80 83       	st	Z, r24
		setMidiLeds();
    1298:	41 df       	rcall	.-382    	; 0x111c <setMidiLeds>
	}
}
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwChComm:

00000f2c <MIDICTRL_SendSwChComm>:

void MIDICTRL_SendSwChComm(uint8_t chNum)
{
	if(mode == RUNNING)
 f2c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <mode>
 f30:	91 11       	cpse	r25, r1
 f32:	30 c0       	rjmp	.+96     	; 0xf94 <MIDICTRL_SendSwChComm+0x68>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
 f34:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <commandSet>
 f38:	91 30       	cpi	r25, 0x01	; 1
 f3a:	19 f4       	brne	.+6      	; 0xf42 <MIDICTRL_SendSwChComm+0x16>
 f3c:	ec e0       	ldi	r30, 0x0C	; 12
 f3e:	f1 e0       	ldi	r31, 0x01	; 1
 f40:	02 c0       	rjmp	.+4      	; 0xf46 <MIDICTRL_SendSwChComm+0x1a>
		else currentCommandBlock = &defaultCommands;
 f42:	ee e8       	ldi	r30, 0x8E	; 142
 f44:	f1 e0       	ldi	r31, 0x01	; 1
		
		switch(chNum)
 f46:	81 30       	cpi	r24, 0x01	; 1
 f48:	71 f0       	breq	.+28     	; 0xf66 <MIDICTRL_SendSwChComm+0x3a>
 f4a:	28 f0       	brcs	.+10     	; 0xf56 <MIDICTRL_SendSwChComm+0x2a>
 f4c:	82 30       	cpi	r24, 0x02	; 2
 f4e:	99 f0       	breq	.+38     	; 0xf76 <MIDICTRL_SendSwChComm+0x4a>
 f50:	83 30       	cpi	r24, 0x03	; 3
 f52:	c9 f0       	breq	.+50     	; 0xf86 <MIDICTRL_SendSwChComm+0x5a>
 f54:	08 95       	ret
		{
			case SH100_CHANNEL1: MIDI_SendCommand(currentCommandBlock->channel1, channelNum); break;
 f56:	60 81       	ld	r22, Z
 f58:	71 81       	ldd	r23, Z+1	; 0x01
 f5a:	82 81       	ldd	r24, Z+2	; 0x02
 f5c:	93 81       	ldd	r25, Z+3	; 0x03
 f5e:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f62:	fd de       	rcall	.-518    	; 0xd5e <MIDI_SendCommand>
 f64:	08 95       	ret
			case SH100_CHANNEL2: MIDI_SendCommand(currentCommandBlock->channel2, channelNum); break;
 f66:	64 81       	ldd	r22, Z+4	; 0x04
 f68:	75 81       	ldd	r23, Z+5	; 0x05
 f6a:	86 81       	ldd	r24, Z+6	; 0x06
 f6c:	97 81       	ldd	r25, Z+7	; 0x07
 f6e:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f72:	f5 de       	rcall	.-534    	; 0xd5e <MIDI_SendCommand>
 f74:	08 95       	ret
			case SH100_CHANNEL3: MIDI_SendCommand(currentCommandBlock->channel3, channelNum); break;
 f76:	60 85       	ldd	r22, Z+8	; 0x08
 f78:	71 85       	ldd	r23, Z+9	; 0x09
 f7a:	82 85       	ldd	r24, Z+10	; 0x0a
 f7c:	93 85       	ldd	r25, Z+11	; 0x0b
 f7e:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f82:	ed de       	rcall	.-550    	; 0xd5e <MIDI_SendCommand>
 f84:	08 95       	ret
			case SH100_CHANNEL4: MIDI_SendCommand(currentCommandBlock->channel4, channelNum); break;
 f86:	64 85       	ldd	r22, Z+12	; 0x0c
 f88:	75 85       	ldd	r23, Z+13	; 0x0d
 f8a:	86 85       	ldd	r24, Z+14	; 0x0e
 f8c:	97 85       	ldd	r25, Z+15	; 0x0f
 f8e:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
 f92:	e5 de       	rcall	.-566    	; 0xd5e <MIDI_SendCommand>
 f94:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendLoopEnComm:

00001628 <MIDICTRL_SendLoopEnComm>:
	}
}

void MIDICTRL_SendLoopEnComm()
{
	if(mode == RUNNING)
    1628:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    162c:	81 11       	cpse	r24, r1
    162e:	10 c0       	rjmp	.+32     	; 0x1650 <MIDICTRL_SendLoopEnComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    1630:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	19 f4       	brne	.+6      	; 0x163e <MIDICTRL_SendLoopEnComm+0x16>
    1638:	ec e0       	ldi	r30, 0x0C	; 12
    163a:	f1 e0       	ldi	r31, 0x01	; 1
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <MIDICTRL_SendLoopEnComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    163e:	ee e8       	ldi	r30, 0x8E	; 142
    1640:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->loopOn, channelNum);
    1642:	60 89       	ldd	r22, Z+16	; 0x10
    1644:	71 89       	ldd	r23, Z+17	; 0x11
    1646:	82 89       	ldd	r24, Z+18	; 0x12
    1648:	93 89       	ldd	r25, Z+19	; 0x13
    164a:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
    164e:	87 db       	rcall	.-2290   	; 0xd5e <MIDI_SendCommand>
    1650:	08 95       	ret

Disassembly of section .text.MIDICTRL_SendSwABComm:

00001652 <MIDICTRL_SendSwABComm>:
	}
}

void MIDICTRL_SendSwABComm()
{
	if(mode == RUNNING)
    1652:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    1656:	81 11       	cpse	r24, r1
    1658:	10 c0       	rjmp	.+32     	; 0x167a <MIDICTRL_SendSwABComm+0x28>
	{
		MIDICTRL_CommandBlock_t* currentCommandBlock;
		if(commandSet == USER) currentCommandBlock = &userCommands;
    165a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	19 f4       	brne	.+6      	; 0x1668 <MIDICTRL_SendSwABComm+0x16>
    1662:	ec e0       	ldi	r30, 0x0C	; 12
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	02 c0       	rjmp	.+4      	; 0x166c <MIDICTRL_SendSwABComm+0x1a>
		else currentCommandBlock = &defaultCommands;
    1668:	ee e8       	ldi	r30, 0x8E	; 142
    166a:	f1 e0       	ldi	r31, 0x01	; 1
		
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
    166c:	64 89       	ldd	r22, Z+20	; 0x14
    166e:	75 89       	ldd	r23, Z+21	; 0x15
    1670:	86 89       	ldd	r24, Z+22	; 0x16
    1672:	97 89       	ldd	r25, Z+23	; 0x17
    1674:	40 91 b5 01 	lds	r20, 0x01B5	; 0x8001b5 <channelNum>
    1678:	72 db       	rcall	.-2332   	; 0xd5e <MIDI_SendCommand>
    167a:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

0000149e <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
    149e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	b1 f4       	brne	.+44     	; 0x14d2 <MIDICTRL_StoreUserCommands+0x34>
	{
		commandSet = USER;
    14a6:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <commandSet>
		
		eeprom_write_word((uint16_t*)0x02, MEMORY_MAGIC_WORD);
    14aa:	6b ea       	ldi	r22, 0xAB	; 171
    14ac:	7c ea       	ldi	r23, 0xAC	; 172
    14ae:	82 e0       	ldi	r24, 0x02	; 2
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	49 d2       	rcall	.+1170   	; 0x1946 <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
    14b4:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <commandSet>
    14b8:	8e e0       	ldi	r24, 0x0E	; 14
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	5f d1       	rcall	.+702    	; 0x177c <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
    14be:	6c e0       	ldi	r22, 0x0C	; 12
    14c0:	71 e0       	ldi	r23, 0x01	; 1
    14c2:	80 e8       	ldi	r24, 0x80	; 128
    14c4:	28 e1       	ldi	r18, 0x18	; 24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	4f e0       	ldi	r20, 0x0F	; 15
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	38 d0       	rcall	.+112    	; 0x153e <eeprom_write_block>
		
		mode = RUNNING;
    14ce:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    14d2:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

00001798 <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    1798:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
    179c:	81 30       	cpi	r24, 0x01	; 1
    179e:	41 f4       	brne	.+16     	; 0x17b0 <MIDICTRL_DiscardCommands+0x18>
	{
		commandSet = DEFAULT;
    17a0:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <commandSet>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);		
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	8e e0       	ldi	r24, 0x0E	; 14
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	e8 df       	rcall	.-48     	; 0x177c <eeprom_write_byte>
		mode = RUNNING;
    17ac:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <mode>
    17b0:	08 95       	ret

Disassembly of section .text.indicateMidiError:

0000159e <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 255 - 75;
    159e:	84 eb       	ldi	r24, 0xB4	; 180
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    15a6:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	TCCR1B |= 0x05; // psc = 1024, timer on
    15aa:	e1 e8       	ldi	r30, 0x81	; 129
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	85 60       	ori	r24, 0x05	; 5
    15b2:	80 83       	st	Z, r24
	currentErrBtnId = currentProgBtn;
    15b4:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
    15b8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	setMidiLeds();
    15bc:	af dd       	rcall	.-1186   	; 0x111c <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    15be:	60 e0       	ldi	r22, 0x00	; 0
    15c0:	87 e0       	ldi	r24, 0x07	; 7
    15c2:	35 df       	rcall	.-406    	; 0x142e <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	88 e0       	ldi	r24, 0x08	; 8
    15c8:	32 df       	rcall	.-412    	; 0x142e <SH100HW_SetNewLedState>
    15ca:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

000000dc <MIDICTRL_HandleCommand>:
		MIDI_SendCommand(currentCommandBlock->outAB, channelNum);
	}
}

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	00 d0       	rcall	.+0      	; 0xe6 <MIDICTRL_HandleCommand+0xa>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <MIDICTRL_HandleCommand+0xc>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	69 83       	std	Y+1, r22	; 0x01
  ee:	7a 83       	std	Y+2, r23	; 0x02
  f0:	8b 83       	std	Y+3, r24	; 0x03
  f2:	9c 83       	std	Y+4, r25	; 0x04
	switch(mode)
  f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <mode>
  f8:	88 23       	and	r24, r24
  fa:	21 f0       	breq	.+8      	; 0x104 <MIDICTRL_HandleCommand+0x28>
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	09 f4       	brne	.+2      	; 0x102 <MIDICTRL_HandleCommand+0x26>
 100:	8f c0       	rjmp	.+286    	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 102:	e3 c0       	rjmp	.+454    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 104:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <omniModeEnabled>
 108:	81 11       	cpse	r24, r1
 10a:	05 c0       	rjmp	.+10     	; 0x116 <MIDICTRL_HandleCommand+0x3a>
			{
				if(channelNum != command.channel_type) return;
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <channelNum>
 112:	98 13       	cpse	r25, r24
 114:	da c0       	rjmp	.+436    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			
			if(muteCommandEnabled)
 116:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <muteCommandEnabled>
 11a:	88 23       	and	r24, r24
 11c:	a9 f0       	breq	.+42     	; 0x148 <MIDICTRL_HandleCommand+0x6c>
			{
				if(isEqualCommands(command, muteCommand)) 
 11e:	88 ed       	ldi	r24, 0xD8	; 216
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	fc 01       	movw	r30, r24
 126:	5a 2f       	mov	r21, r26
 128:	68 db       	rcall	.-2352   	; 0xfffff7fa <__eeprom_end+0xff7ef7fa>
 12a:	9b 01       	movw	r18, r22
 12c:	ac 01       	movw	r20, r24
 12e:	69 81       	ldd	r22, Y+1	; 0x01
 130:	7a 81       	ldd	r23, Y+2	; 0x02
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	9c 81       	ldd	r25, Y+4	; 0x04
 136:	78 db       	rcall	.-2320   	; 0xfffff828 <__eeprom_end+0xff7ef828>
 138:	88 23       	and	r24, r24
 13a:	31 f0       	breq	.+12     	; 0x148 <MIDICTRL_HandleCommand+0x6c>
				{
					if((command.data2>63) ? 1 : 0) SH100CTRL_MuteAmp();
 13c:	8c 81       	ldd	r24, Y+4	; 0x04
 13e:	80 34       	cpi	r24, 0x40	; 64
 140:	10 f0       	brcs	.+4      	; 0x146 <MIDICTRL_HandleCommand+0x6a>
 142:	f8 db       	rcall	.-2064   	; 0xfffff934 <__eeprom_end+0xff7ef934>
 144:	01 c0       	rjmp	.+2      	; 0x148 <MIDICTRL_HandleCommand+0x6c>
					else SH100CTRL_UnmuteAmp();
 146:	c9 db       	rcall	.-2158   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
				}
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 148:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <commandSet>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	19 f4       	brne	.+6      	; 0x156 <MIDICTRL_HandleCommand+0x7a>
 150:	0c e0       	ldi	r16, 0x0C	; 12
 152:	11 e0       	ldi	r17, 0x01	; 1
 154:	02 c0       	rjmp	.+4      	; 0x15a <MIDICTRL_HandleCommand+0x7e>
			else currentCommandBlock = &defaultCommands;
 156:	0e e8       	ldi	r16, 0x8E	; 142
 158:	11 e0       	ldi	r17, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) 
 15a:	f8 01       	movw	r30, r16
 15c:	20 81       	ld	r18, Z
 15e:	31 81       	ldd	r19, Z+1	; 0x01
 160:	42 81       	ldd	r20, Z+2	; 0x02
 162:	53 81       	ldd	r21, Z+3	; 0x03
 164:	69 81       	ldd	r22, Y+1	; 0x01
 166:	7a 81       	ldd	r23, Y+2	; 0x02
 168:	8b 81       	ldd	r24, Y+3	; 0x03
 16a:	9c 81       	ldd	r25, Y+4	; 0x04
 16c:	5d db       	rcall	.-2374   	; 0xfffff828 <__eeprom_end+0xff7ef828>
 16e:	88 23       	and	r24, r24
 170:	19 f0       	breq	.+6      	; 0x178 <MIDICTRL_HandleCommand+0x9c>
			{
				SH100CTRL_SwChannel(0); 
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	42 da       	rcall	.-2940   	; 0xfffff5fa <__eeprom_end+0xff7ef5fa>
				return;
 176:	a9 c0       	rjmp	.+338    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->channel2)) 
 178:	f8 01       	movw	r30, r16
 17a:	24 81       	ldd	r18, Z+4	; 0x04
 17c:	35 81       	ldd	r19, Z+5	; 0x05
 17e:	46 81       	ldd	r20, Z+6	; 0x06
 180:	57 81       	ldd	r21, Z+7	; 0x07
 182:	69 81       	ldd	r22, Y+1	; 0x01
 184:	7a 81       	ldd	r23, Y+2	; 0x02
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	9c 81       	ldd	r25, Y+4	; 0x04
 18a:	4e db       	rcall	.-2404   	; 0xfffff828 <__eeprom_end+0xff7ef828>
 18c:	88 23       	and	r24, r24
 18e:	19 f0       	breq	.+6      	; 0x196 <MIDICTRL_HandleCommand+0xba>
			{
				SH100CTRL_SwChannel(1); 
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	33 da       	rcall	.-2970   	; 0xfffff5fa <__eeprom_end+0xff7ef5fa>
				return;
 194:	9a c0       	rjmp	.+308    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->channel3)) 
 196:	f8 01       	movw	r30, r16
 198:	20 85       	ldd	r18, Z+8	; 0x08
 19a:	31 85       	ldd	r19, Z+9	; 0x09
 19c:	42 85       	ldd	r20, Z+10	; 0x0a
 19e:	53 85       	ldd	r21, Z+11	; 0x0b
 1a0:	69 81       	ldd	r22, Y+1	; 0x01
 1a2:	7a 81       	ldd	r23, Y+2	; 0x02
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	3f db       	rcall	.-2434   	; 0xfffff828 <__eeprom_end+0xff7ef828>
 1aa:	88 23       	and	r24, r24
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <MIDICTRL_HandleCommand+0xd8>
			{
				SH100CTRL_SwChannel(2); 
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	24 da       	rcall	.-3000   	; 0xfffff5fa <__eeprom_end+0xff7ef5fa>
				return;
 1b2:	8b c0       	rjmp	.+278    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->channel4)) 
 1b4:	f8 01       	movw	r30, r16
 1b6:	24 85       	ldd	r18, Z+12	; 0x0c
 1b8:	35 85       	ldd	r19, Z+13	; 0x0d
 1ba:	46 85       	ldd	r20, Z+14	; 0x0e
 1bc:	57 85       	ldd	r21, Z+15	; 0x0f
 1be:	69 81       	ldd	r22, Y+1	; 0x01
 1c0:	7a 81       	ldd	r23, Y+2	; 0x02
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	9c 81       	ldd	r25, Y+4	; 0x04
 1c6:	30 db       	rcall	.-2464   	; 0xfffff828 <__eeprom_end+0xff7ef828>
 1c8:	88 23       	and	r24, r24
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <MIDICTRL_HandleCommand+0xf6>
			{
				SH100CTRL_SwChannel(3); 
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	15 da       	rcall	.-3030   	; 0xfffff5fa <__eeprom_end+0xff7ef5fa>
				return;
 1d0:	7c c0       	rjmp	.+248    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}		
			if(isEqualCommands(command, currentCommandBlock->loopOn)) 
 1d2:	f8 01       	movw	r30, r16
 1d4:	20 89       	ldd	r18, Z+16	; 0x10
 1d6:	31 89       	ldd	r19, Z+17	; 0x11
 1d8:	42 89       	ldd	r20, Z+18	; 0x12
 1da:	53 89       	ldd	r21, Z+19	; 0x13
 1dc:	69 81       	ldd	r22, Y+1	; 0x01
 1de:	7a 81       	ldd	r23, Y+2	; 0x02
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	21 db       	rcall	.-2494   	; 0xfffff828 <__eeprom_end+0xff7ef828>
 1e6:	88 23       	and	r24, r24
 1e8:	39 f0       	breq	.+14     	; 0x1f8 <MIDICTRL_HandleCommand+0x11c>
			{
				SH100CTRL_SetLoop((command.data2>63) ? 1 : 0); 
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 34       	cpi	r25, 0x40	; 64
 1f0:	08 f4       	brcc	.+2      	; 0x1f4 <MIDICTRL_HandleCommand+0x118>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	43 da       	rcall	.-2938   	; 0xfffff67c <__eeprom_end+0xff7ef67c>
				return;
 1f6:	69 c0       	rjmp	.+210    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			}
			if(isEqualCommands(command, currentCommandBlock->outAB)) 
 1f8:	f8 01       	movw	r30, r16
 1fa:	24 89       	ldd	r18, Z+20	; 0x14
 1fc:	35 89       	ldd	r19, Z+21	; 0x15
 1fe:	46 89       	ldd	r20, Z+22	; 0x16
 200:	57 89       	ldd	r21, Z+23	; 0x17
 202:	69 81       	ldd	r22, Y+1	; 0x01
 204:	7a 81       	ldd	r23, Y+2	; 0x02
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	9c 81       	ldd	r25, Y+4	; 0x04
 20a:	0e db       	rcall	.-2532   	; 0xfffff828 <__eeprom_end+0xff7ef828>
 20c:	88 23       	and	r24, r24
 20e:	09 f4       	brne	.+2      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 210:	5c c0       	rjmp	.+184    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			{
				SH100CTRL_SetAB((command.data2>63) ? 1 : 0); 
 212:	9c 81       	ldd	r25, Y+4	; 0x04
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 34       	cpi	r25, 0x40	; 64
 218:	08 f4       	brcc	.+2      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	6c da       	rcall	.-2856   	; 0xfffff6f6 <__eeprom_end+0xff7ef6f6>
				return;
 21e:	55 c0       	rjmp	.+170    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command.status == MIDI_COMM_PROGRAM_CHANGE)
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	8c 30       	cpi	r24, 0x0C	; 12
 224:	81 f5       	brne	.+96     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
			{
				switch(currentProgBtn)
 226:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	79 f0       	breq	.+30     	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 22e:	28 f0       	brcs	.+10     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	a9 f0       	breq	.+42     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	e1 f0       	breq	.+56     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 238:	24 c0       	rjmp	.+72     	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), &command, MIDI_PROG_BTN_CH1); break;
 23a:	ae 01       	movw	r20, r28
 23c:	4f 5f       	subi	r20, 0xFF	; 255
 23e:	5f 4f       	sbci	r21, 0xFF	; 255
 240:	60 e8       	ldi	r22, 0x80	; 128
 242:	20 e0       	ldi	r18, 0x00	; 0
 244:	8c e0       	ldi	r24, 0x0C	; 12
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	06 d8       	rcall	.-4084   	; 0xfffff256 <__eeprom_end+0xff7ef256>
 24a:	3f c0       	rjmp	.+126    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), &command, MIDI_PROG_BTN_CH2); break;
 24c:	ae 01       	movw	r20, r28
 24e:	4f 5f       	subi	r20, 0xFF	; 255
 250:	5f 4f       	sbci	r21, 0xFF	; 255
 252:	60 e8       	ldi	r22, 0x80	; 128
 254:	21 e0       	ldi	r18, 0x01	; 1
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	fd d7       	rcall	.+4090   	; 0x1256 <programmBtn>
 25c:	36 c0       	rjmp	.+108    	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), &command, MIDI_PROG_BTN_CH3); break;
 25e:	ae 01       	movw	r20, r28
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	60 e8       	ldi	r22, 0x80	; 128
 266:	22 e0       	ldi	r18, 0x02	; 2
 268:	84 e1       	ldi	r24, 0x14	; 20
 26a:	91 e0       	ldi	r25, 0x01	; 1
 26c:	f4 d7       	rcall	.+4072   	; 0x1256 <programmBtn>
 26e:	2d c0       	rjmp	.+90     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), &command, MIDI_PROG_BTN_CH4); break;
 270:	ae 01       	movw	r20, r28
 272:	4f 5f       	subi	r20, 0xFF	; 255
 274:	5f 4f       	sbci	r21, 0xFF	; 255
 276:	60 e8       	ldi	r22, 0x80	; 128
 278:	23 e0       	ldi	r18, 0x03	; 3
 27a:	88 e1       	ldi	r24, 0x18	; 24
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	eb d7       	rcall	.+4054   	; 0x1256 <programmBtn>
 280:	24 c0       	rjmp	.+72     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					default: indicateMidiError(); break; 
 282:	8d d9       	rcall	.-3302   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
 284:	22 c0       	rjmp	.+68     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
				}
			}
			else if(command.status == MIDI_COMM_CONTROL_CHANGE)
 286:	8b 30       	cpi	r24, 0x0B	; 11
 288:	f9 f4       	brne	.+62     	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
			{
				if(command.data1 == muteCommand.data1)
 28a:	8b 81       	ldd	r24, Y+3	; 0x03
 28c:	87 30       	cpi	r24, 0x07	; 7
 28e:	11 f4       	brne	.+4      	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
				{
					indicateMidiError();
 290:	86 d9       	rcall	.-3316   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
 292:	1b c0       	rjmp	.+54     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
				}
				else
				{
					switch(currentProgBtn)
 294:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <currentProgBtn>
 298:	84 30       	cpi	r24, 0x04	; 4
 29a:	59 f0       	breq	.+22     	; 0x2b2 <__EEPROM_REGION_LENGTH__+0xb2>
 29c:	85 30       	cpi	r24, 0x05	; 5
 29e:	91 f4       	brne	.+36     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), &command, MIDI_PROG_BTN_AB); break;
 2a0:	ae 01       	movw	r20, r28
 2a2:	4f 5f       	subi	r20, 0xFF	; 255
 2a4:	5f 4f       	sbci	r21, 0xFF	; 255
 2a6:	60 e8       	ldi	r22, 0x80	; 128
 2a8:	25 e0       	ldi	r18, 0x05	; 5
 2aa:	80 e2       	ldi	r24, 0x20	; 32
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	d3 d7       	rcall	.+4006   	; 0x1256 <programmBtn>
 2b0:	0c c0       	rjmp	.+24     	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), &command, MIDI_PROG_BTN_LOOP); break;
 2b2:	ae 01       	movw	r20, r28
 2b4:	4f 5f       	subi	r20, 0xFF	; 255
 2b6:	5f 4f       	sbci	r21, 0xFF	; 255
 2b8:	60 e8       	ldi	r22, 0x80	; 128
 2ba:	24 e0       	ldi	r18, 0x04	; 4
 2bc:	8c e1       	ldi	r24, 0x1C	; 28
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	ca d7       	rcall	.+3988   	; 0x1256 <programmBtn>
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
						default: indicateMidiError(); break;
 2c4:	6c d9       	rcall	.-3368   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
 2c6:	01 c0       	rjmp	.+2      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
					}
				}
			}
			else
			{
				indicateMidiError();
 2c8:	6a d9       	rcall	.-3372   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
			}			
			break;
		}
	}	
}
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

Disassembly of section .text.__vector_13:

000010c0 <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
    10c0:	1f 92       	push	r1
    10c2:	0f 92       	push	r0
    10c4:	0f b6       	in	r0, 0x3f	; 63
    10c6:	0f 92       	push	r0
    10c8:	11 24       	eor	r1, r1
    10ca:	2f 93       	push	r18
    10cc:	3f 93       	push	r19
    10ce:	4f 93       	push	r20
    10d0:	5f 93       	push	r21
    10d2:	6f 93       	push	r22
    10d4:	7f 93       	push	r23
    10d6:	8f 93       	push	r24
    10d8:	9f 93       	push	r25
    10da:	af 93       	push	r26
    10dc:	bf 93       	push	r27
    10de:	ef 93       	push	r30
    10e0:	ff 93       	push	r31
	TCCR1B |= 0x00; // psc = 0, timer off
    10e2:	e1 e8       	ldi	r30, 0x81	; 129
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	80 83       	st	Z, r24
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
    10ea:	8f ef       	ldi	r24, 0xFF	; 255
    10ec:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <currentErrBtnId>
	setMidiLeds();
    10f0:	15 d0       	rcall	.+42     	; 0x111c <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
    10f2:	87 e0       	ldi	r24, 0x07	; 7
    10f4:	ec d2       	rcall	.+1496   	; 0x16ce <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
    10f6:	88 e0       	ldi	r24, 0x08	; 8
    10f8:	ea d2       	rcall	.+1492   	; 0x16ce <SH100HW_SetPreviousLedState>
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	0f 90       	pop	r0
    1118:	1f 90       	pop	r1
    111a:	18 95       	reti

Disassembly of section .text.handleRealTimeStatus:

0000194c <handleRealTimeStatus>:
	HADLE_SYS_EX
}state = RESET;

void handleRealTimeStatus(MIDI_Status_t status)
{
	UART_PushWord(status);
    194c:	f1 dc       	rcall	.-1566   	; 0x1330 <UART_PushWord>
    194e:	08 95       	ret

Disassembly of section .text.MIDI_ParserTask:

0000081e <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 81e:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <state>
 822:	8e 2f       	mov	r24, r30
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	87 30       	cpi	r24, 0x07	; 7
 828:	91 05       	cpc	r25, r1
 82a:	08 f0       	brcs	.+2      	; 0x82e <MIDI_ParserTask+0x10>
 82c:	a2 c0       	rjmp	.+324    	; 0x972 <MIDI_ParserTask+0x154>
 82e:	fc 01       	movw	r30, r24
 830:	e6 5e       	subi	r30, 0xE6	; 230
 832:	ff 4f       	sbci	r31, 0xFF	; 255
 834:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 836:	e8 e2       	ldi	r30, 0x28	; 40
 838:	f1 e0       	ldi	r31, 0x01	; 1
 83a:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 83c:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 83e:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 840:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <currentStatusType>
			isSecondDataWord = false;
 844:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
			state = WAIT_WORD;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 84e:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 850:	2a d8       	rcall	.-4012   	; 0xfffff8a6 <__eeprom_end+0xff7ef8a6>
 852:	88 23       	and	r24, r24
 854:	09 f4       	brne	.+2      	; 0x858 <MIDI_ParserTask+0x3a>
 856:	8d c0       	rjmp	.+282    	; 0x972 <MIDI_ParserTask+0x154>
			{
				recievedWord = UART_PopWord();
 858:	58 d6       	rcall	.+3248   	; 0x150a <UART_PopWord>
 85a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 85e:	31 d8       	rcall	.-3998   	; 0xfffff8c2 <__eeprom_end+0xff7ef8c2>
 860:	88 23       	and	r24, r24
 862:	21 f0       	breq	.+8      	; 0x86c <MIDI_ParserTask+0x4e>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
 864:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 868:	71 d8       	rcall	.-3870   	; 0xfffff94c <__eeprom_end+0xff7ef94c>
					return;
 86a:	08 95       	ret
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 86c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 870:	4a d8       	rcall	.-3948   	; 0xfffff906 <__eeprom_end+0xff7ef906>
 872:	88 23       	and	r24, r24
 874:	21 f0       	breq	.+8      	; 0x87e <MIDI_ParserTask+0x60>
				{					
					state = DISPATCH_STATUS;
 876:	82 e0       	ldi	r24, 0x02	; 2
 878:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 87c:	20 c0       	rjmp	.+64     	; 0x8be <MIDI_ParserTask+0xa0>
				}
				else
				{
					switch(currentStatusType)
 87e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <currentStatusType>
 882:	82 30       	cpi	r24, 0x02	; 2
 884:	49 f0       	breq	.+18     	; 0x898 <MIDI_ParserTask+0x7a>
 886:	18 f4       	brcc	.+6      	; 0x88e <MIDI_ParserTask+0x70>
 888:	81 30       	cpi	r24, 0x01	; 1
 88a:	51 f0       	breq	.+20     	; 0x8a0 <MIDI_ParserTask+0x82>
 88c:	15 c0       	rjmp	.+42     	; 0x8b8 <MIDI_ParserTask+0x9a>
 88e:	84 30       	cpi	r24, 0x04	; 4
 890:	59 f0       	breq	.+22     	; 0x8a8 <MIDI_ParserTask+0x8a>
 892:	85 30       	cpi	r24, 0x05	; 5
 894:	69 f0       	breq	.+26     	; 0x8b0 <MIDI_ParserTask+0x92>
 896:	10 c0       	rjmp	.+32     	; 0x8b8 <MIDI_ParserTask+0x9a>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 898:	84 e0       	ldi	r24, 0x04	; 4
 89a:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 89e:	0f c0       	rjmp	.+30     	; 0x8be <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 8a6:	0b c0       	rjmp	.+22     	; 0x8be <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 8a8:	85 e0       	ldi	r24, 0x05	; 5
 8aa:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <MIDI_ParserTask+0xa0>
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 8b0:	86 e0       	ldi	r24, 0x06	; 6
 8b2:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <MIDI_ParserTask+0xa0>
						default: state = WAIT_WORD;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
					}
				}
				
				if(retranslate)
 8be:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <retranslate>
 8c2:	88 23       	and	r24, r24
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <MIDI_ParserTask+0xaa>
 8c6:	55 c0       	rjmp	.+170    	; 0x972 <MIDI_ParserTask+0x154>
				{
					UART_PushWord(recievedWord);
 8c8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 8cc:	31 d5       	rcall	.+2658   	; 0x1330 <UART_PushWord>
 8ce:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 8d0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <recievedWord>
 8d4:	89 2f       	mov	r24, r25
 8d6:	82 95       	swap	r24
 8d8:	8f 70       	andi	r24, 0x0F	; 15
 8da:	e8 e2       	ldi	r30, 0x28	; 40
 8dc:	f1 e0       	ldi	r31, 0x01	; 1
 8de:	80 83       	st	Z, r24
			currentCommand.channel_type = recievedWord & 0x0F;
 8e0:	9f 70       	andi	r25, 0x0F	; 15
 8e2:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 8e4:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 8e6:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 8e8:	b2 d2       	rcall	.+1380   	; 0xe4e <MIDI_GetStatusType>
 8ea:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <currentStatusType>
			isSecondDataWord = false;
 8ee:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
			state = WAIT_WORD;
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 8f8:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 8fa:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <isSecondDataWord>
 8fe:	88 23       	and	r24, r24
 900:	81 f0       	breq	.+32     	; 0x922 <MIDI_ParserTask+0x104>
			{
				currentCommand.data2 = recievedWord;
 902:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 906:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <currentCommand+0x3>
				isSecondDataWord = false;			
 90a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 90e:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <currentCommand>
 912:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <currentCommand+0x1>
 916:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <currentCommand+0x2>
 91a:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <currentCommand+0x3>
 91e:	de db       	rcall	.-2116   	; 0xdc <MIDICTRL_HandleCommand>
 920:	07 c0       	rjmp	.+14     	; 0x930 <MIDI_ParserTask+0x112>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 922:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 926:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <currentCommand+0x2>
				isSecondDataWord = true;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <isSecondDataWord>
			}
			state = WAIT_WORD;
 930:	81 e0       	ldi	r24, 0x01	; 1
 932:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 936:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 938:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <recievedWord>
 93c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 940:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <currentCommand>
 944:	70 91 29 01 	lds	r23, 0x0129	; 0x800129 <currentCommand+0x1>
 948:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <currentCommand+0x2>
 94c:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <currentCommand+0x3>
 950:	c5 db       	rcall	.-2166   	; 0xdc <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 958:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
			break;
 960:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 962:	e8 e2       	ldi	r30, 0x28	; 40
 964:	f1 e0       	ldi	r31, 0x01	; 1
 966:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 968:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 96a:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <state>
 972:	08 95       	ret

Disassembly of section .text.MIDI_SetRetranslateState:

0000192e <MIDI_SetRetranslateState>:
	}
}

void MIDI_SetRetranslateState(bool enabled)
{
	retranslate = enabled;
    192e:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <retranslate>
    1932:	08 95       	ret

Disassembly of section .text.MIDI_SendCommand:

00000d5e <MIDI_SendCommand>:
}

void MIDI_SendCommand(MIDI_Command_t command, uint8_t channel)
{
 d5e:	0f 93       	push	r16
 d60:	1f 93       	push	r17
 d62:	cf 93       	push	r28
 d64:	df 93       	push	r29
 d66:	c6 2f       	mov	r28, r22
 d68:	18 2f       	mov	r17, r24
 d6a:	09 2f       	mov	r16, r25
 d6c:	d4 2f       	mov	r29, r20
	switch(MIDI_GetStatusType(command.status))
 d6e:	86 2f       	mov	r24, r22
 d70:	6e d0       	rcall	.+220    	; 0xe4e <MIDI_GetStatusType>
 d72:	83 30       	cpi	r24, 0x03	; 3
 d74:	59 f0       	breq	.+22     	; 0xd8c <MIDI_SendCommand+0x2e>
 d76:	28 f4       	brcc	.+10     	; 0xd82 <MIDI_SendCommand+0x24>
 d78:	81 30       	cpi	r24, 0x01	; 1
 d7a:	59 f0       	breq	.+22     	; 0xd92 <MIDI_SendCommand+0x34>
 d7c:	82 30       	cpi	r24, 0x02	; 2
 d7e:	a1 f0       	breq	.+40     	; 0xda8 <MIDI_SendCommand+0x4a>
 d80:	25 c0       	rjmp	.+74     	; 0xdcc <MIDI_SendCommand+0x6e>
 d82:	84 30       	cpi	r24, 0x04	; 4
 d84:	f1 f0       	breq	.+60     	; 0xdc2 <MIDI_SendCommand+0x64>
 d86:	85 30       	cpi	r24, 0x05	; 5
 d88:	f9 f0       	breq	.+62     	; 0xdc8 <MIDI_SendCommand+0x6a>
 d8a:	20 c0       	rjmp	.+64     	; 0xdcc <MIDI_SendCommand+0x6e>
	{
		case MIDI_TYPE_REAL_TIME:
		{
			// second nymble!
			UART_PushWord(command.status);
 d8c:	8c 2f       	mov	r24, r28
 d8e:	d0 d2       	rcall	.+1440   	; 0x1330 <UART_PushWord>
			break;
 d90:	1d c0       	rjmp	.+58     	; 0xdcc <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_ONE_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 d92:	80 e1       	ldi	r24, 0x10	; 16
 d94:	c8 9f       	mul	r28, r24
 d96:	b0 01       	movw	r22, r0
 d98:	11 24       	eor	r1, r1
 d9a:	8d 2f       	mov	r24, r29
 d9c:	8f 70       	andi	r24, 0x0F	; 15
 d9e:	86 2b       	or	r24, r22
 da0:	c7 d2       	rcall	.+1422   	; 0x1330 <UART_PushWord>
			UART_PushWord(command.data1);
 da2:	81 2f       	mov	r24, r17
 da4:	c5 d2       	rcall	.+1418   	; 0x1330 <UART_PushWord>
			break;
 da6:	12 c0       	rjmp	.+36     	; 0xdcc <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_TWO_BYTE:
		{
			UART_PushWord((command.status << 4) | (channel & 0xF));
 da8:	80 e1       	ldi	r24, 0x10	; 16
 daa:	c8 9f       	mul	r28, r24
 dac:	b0 01       	movw	r22, r0
 dae:	11 24       	eor	r1, r1
 db0:	8d 2f       	mov	r24, r29
 db2:	8f 70       	andi	r24, 0x0F	; 15
 db4:	86 2b       	or	r24, r22
 db6:	bc d2       	rcall	.+1400   	; 0x1330 <UART_PushWord>
			UART_PushWord(command.data1);
 db8:	81 2f       	mov	r24, r17
 dba:	ba d2       	rcall	.+1396   	; 0x1330 <UART_PushWord>
			UART_PushWord(command.data2);
 dbc:	80 2f       	mov	r24, r16
 dbe:	b8 d2       	rcall	.+1392   	; 0x1330 <UART_PushWord>
			break;
 dc0:	05 c0       	rjmp	.+10     	; 0xdcc <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_START_SYS_EX:
		{
			// second nymble!
			UART_PushWord(command.status);
 dc2:	8c 2f       	mov	r24, r28
 dc4:	b5 d2       	rcall	.+1386   	; 0x1330 <UART_PushWord>
			break;
 dc6:	02 c0       	rjmp	.+4      	; 0xdcc <MIDI_SendCommand+0x6e>
		}
		case MIDI_TYPE_STOP_SYS_EX:
		{
			// second nymble!!!
			UART_PushWord(command.status);
 dc8:	8c 2f       	mov	r24, r28
 dca:	b2 d2       	rcall	.+1380   	; 0x1330 <UART_PushWord>
			break;
		}
		case MIDI_TYPE_UNDEFINED: break;
	}
 dcc:	df 91       	pop	r29
 dce:	cf 91       	pop	r28
 dd0:	1f 91       	pop	r17
 dd2:	0f 91       	pop	r16
 dd4:	08 95       	ret

Disassembly of section .text.setChannelLeds:

0000173e <setChannelLeds>:
	SH100CTRL_SetAB(ampState.swAB);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	80 e0       	ldi	r24, 0x00	; 0
    1742:	75 de       	rcall	.-790    	; 0x142e <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	72 de       	rcall	.-796    	; 0x142e <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	6f de       	rcall	.-802    	; 0x142e <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    1750:	60 e0       	ldi	r22, 0x00	; 0
    1752:	83 e0       	ldi	r24, 0x03	; 3
    1754:	6c de       	rcall	.-808    	; 0x142e <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <ampState>
    175c:	68 de       	rcall	.-816    	; 0x142e <SH100HW_SetNewLedState>
    175e:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

000015cc <SH100CTRL_SetAmpLeds>:
}

void SH100CTRL_SetAmpLeds()
{
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
	setChannelLeds();
    15d0:	b6 d0       	rcall	.+364    	; 0x173e <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    15d2:	cd e2       	ldi	r28, 0x2D	; 45
    15d4:	d1 e0       	ldi	r29, 0x01	; 1
    15d6:	e8 81       	ld	r30, Y
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	e3 5d       	subi	r30, 0xD3	; 211
    15dc:	fe 4f       	sbci	r31, 0xFE	; 254
    15de:	61 81       	ldd	r22, Z+1	; 0x01
    15e0:	84 e0       	ldi	r24, 0x04	; 4
    15e2:	25 df       	rcall	.-438    	; 0x142e <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    15e4:	6d 81       	ldd	r22, Y+5	; 0x05
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	68 27       	eor	r22, r24
    15ea:	85 e0       	ldi	r24, 0x05	; 5
    15ec:	20 df       	rcall	.-448    	; 0x142e <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    15ee:	6d 81       	ldd	r22, Y+5	; 0x05
    15f0:	86 e0       	ldi	r24, 0x06	; 6
    15f2:	1d df       	rcall	.-454    	; 0x142e <SH100HW_SetNewLedState>
}
    15f4:	df 91       	pop	r29
    15f6:	cf 91       	pop	r28
    15f8:	08 95       	ret

Disassembly of section .text.SH100CTRL_StoreAmpState:

00001760 <SH100CTRL_StoreAmpState>:

void SH100CTRL_StoreAmpState()
{
	eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
    1760:	6b ea       	ldi	r22, 0xAB	; 171
    1762:	7c ea       	ldi	r23, 0xAC	; 172
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	ee d0       	rcall	.+476    	; 0x1946 <eeprom_write_word>
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
    176a:	6d e2       	ldi	r22, 0x2D	; 45
    176c:	71 e0       	ldi	r23, 0x01	; 1
    176e:	80 e8       	ldi	r24, 0x80	; 128
    1770:	26 e0       	ldi	r18, 0x06	; 6
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	48 e0       	ldi	r20, 0x08	; 8
    1776:	50 e0       	ldi	r21, 0x00	; 0
    1778:	e2 de       	rcall	.-572    	; 0x153e <eeprom_write_block>
    177a:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetLoop:

0000167c <SH100CTRL_SetLoop>:
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
}

void SH100CTRL_SetLoop(bool en)
{
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
	ampState.loopOn[ampState.channelNum] = en;
    1680:	cd e2       	ldi	r28, 0x2D	; 45
    1682:	d1 e0       	ldi	r29, 0x01	; 1
    1684:	e8 81       	ld	r30, Y
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	e3 5d       	subi	r30, 0xD3	; 211
    168a:	fe 4f       	sbci	r31, 0xFE	; 254
    168c:	81 83       	std	Z+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn[ampState.channelNum]);
    168e:	91 d0       	rcall	.+290    	; 0x17b2 <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn[ampState.channelNum]);
    1690:	e8 81       	ld	r30, Y
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	e3 5d       	subi	r30, 0xD3	; 211
    1696:	fe 4f       	sbci	r31, 0xFE	; 254
    1698:	61 81       	ldd	r22, Z+1	; 0x01
    169a:	84 e0       	ldi	r24, 0x04	; 4
    169c:	c8 de       	rcall	.-624    	; 0x142e <SH100HW_SetNewLedState>
	
	MIDICTRL_SendLoopEnComm();
    169e:	c4 df       	rcall	.-120    	; 0x1628 <MIDICTRL_SendLoopEnComm>
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

000015fa <SH100CTRL_SwChannel>:
		SH100CTRL_SwLoop();
	}
}

void SH100CTRL_SwChannel(uint8_t chNum)
{
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	c8 2f       	mov	r28, r24
	ampState.channelNum = chNum;
    1602:	0d e2       	ldi	r16, 0x2D	; 45
    1604:	11 e0       	ldi	r17, 0x01	; 1
    1606:	d8 01       	movw	r26, r16
    1608:	8c 93       	st	X, r24
	
	SH100HW_SetCh(chNum);
    160a:	b1 dd       	rcall	.-1182   	; 0x116e <SH100HW_SetCh>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    160c:	d8 01       	movw	r26, r16
    160e:	ec 91       	ld	r30, X
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	e3 5d       	subi	r30, 0xD3	; 211
    1614:	fe 4f       	sbci	r31, 0xFE	; 254
    1616:	81 81       	ldd	r24, Z+1	; 0x01
    1618:	31 d0       	rcall	.+98     	; 0x167c <SH100CTRL_SetLoop>
	setChannelLeds();
    161a:	91 d0       	rcall	.+290    	; 0x173e <setChannelLeds>
	
	MIDICTRL_SendSwChComm(chNum);
    161c:	8c 2f       	mov	r24, r28
    161e:	86 dc       	rcall	.-1780   	; 0xf2c <MIDICTRL_SendSwChComm>
}
    1620:	cf 91       	pop	r28
    1622:	1f 91       	pop	r17
    1624:	0f 91       	pop	r16
    1626:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

0000183c <SH100CTRL_SwLoop>:

void SH100CTRL_SwLoop()
{
	SH100CTRL_SetLoop(!ampState.loopOn[ampState.channelNum]);
    183c:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <ampState>
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	e3 5d       	subi	r30, 0xD3	; 211
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	89 27       	eor	r24, r25
    184c:	17 df       	rcall	.-466    	; 0x167c <SH100CTRL_SetLoop>
    184e:	08 95       	ret

Disassembly of section .text.SH100CTRL_BtnSwChannel:

00001888 <SH100CTRL_BtnSwChannel>:
	eeprom_write_block(&ampState, (void*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
}

void SH100CTRL_BtnSwChannel(uint8_t chNum)
{
	if(ampState.channelNum != chNum)
    1888:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <ampState>
    188c:	98 17       	cp	r25, r24
    188e:	11 f0       	breq	.+4      	; 0x1894 <SH100CTRL_BtnSwChannel+0xc>
	{
		SH100CTRL_SwChannel(chNum);
    1890:	b4 de       	rcall	.-664    	; 0x15fa <SH100CTRL_SwChannel>
    1892:	08 95       	ret
	}
	else
	{
		SH100CTRL_SwLoop();
    1894:	d3 df       	rcall	.-90     	; 0x183c <SH100CTRL_SwLoop>
    1896:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAB:

000016f6 <SH100CTRL_SetAB>:
{
	SH100CTRL_SetAB(!ampState.swAB);
}

void SH100CTRL_SetAB(bool isB)
{
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
	ampState.swAB = isB;
    16fa:	cd e2       	ldi	r28, 0x2D	; 45
    16fc:	d1 e0       	ldi	r29, 0x01	; 1
    16fe:	8d 83       	std	Y+5, r24	; 0x05
	SH100HW_SetAB(ampState.swAB);
    1700:	1c d1       	rcall	.+568    	; 0x193a <SH100HW_SetAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1702:	6d 81       	ldd	r22, Y+5	; 0x05
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	68 27       	eor	r22, r24
    1708:	85 e0       	ldi	r24, 0x05	; 5
    170a:	91 de       	rcall	.-734    	; 0x142e <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    170c:	6d 81       	ldd	r22, Y+5	; 0x05
    170e:	86 e0       	ldi	r24, 0x06	; 6
    1710:	8e de       	rcall	.-740    	; 0x142e <SH100HW_SetNewLedState>
	
	MIDICTRL_SendSwABComm();
    1712:	9f df       	rcall	.-194    	; 0x1652 <MIDICTRL_SendSwABComm>
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

00000ffc <SH100CTRL_SetAmpState>:
	
	SH100CTRL_SetAmpState(ampState);
}

void SH100CTRL_SetAmpState(SH100_State_t state)
{
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	00 d0       	rcall	.+0      	; 0x1006 <SH100CTRL_SetAmpState+0xa>
    1006:	00 d0       	rcall	.+0      	; 0x1008 <SH100CTRL_SetAmpState+0xc>
    1008:	00 d0       	rcall	.+0      	; 0x100a <SH100CTRL_SetAmpState+0xe>
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	49 83       	std	Y+1, r20	; 0x01
    1010:	5a 83       	std	Y+2, r21	; 0x02
    1012:	6b 83       	std	Y+3, r22	; 0x03
    1014:	7c 83       	std	Y+4, r23	; 0x04
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	9e 83       	std	Y+6, r25	; 0x06
	ampState = state;
    101a:	86 e0       	ldi	r24, 0x06	; 6
    101c:	fe 01       	movw	r30, r28
    101e:	31 96       	adiw	r30, 0x01	; 1
    1020:	ad e2       	ldi	r26, 0x2D	; 45
    1022:	b1 e0       	ldi	r27, 0x01	; 1
    1024:	01 90       	ld	r0, Z+
    1026:	0d 92       	st	X+, r0
    1028:	8a 95       	dec	r24
    102a:	e1 f7       	brne	.-8      	; 0x1024 <SH100CTRL_SetAmpState+0x28>
	
	SH100CTRL_SwChannel(ampState.channelNum);
    102c:	0d e2       	ldi	r16, 0x2D	; 45
    102e:	11 e0       	ldi	r17, 0x01	; 1
    1030:	d8 01       	movw	r26, r16
    1032:	8c 91       	ld	r24, X
    1034:	e2 d2       	rcall	.+1476   	; 0x15fa <SH100CTRL_SwChannel>
	SH100CTRL_SetLoop(ampState.loopOn[ampState.channelNum]);
    1036:	d8 01       	movw	r26, r16
    1038:	ec 91       	ld	r30, X
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	e3 5d       	subi	r30, 0xD3	; 211
    103e:	fe 4f       	sbci	r31, 0xFE	; 254
    1040:	81 81       	ldd	r24, Z+1	; 0x01
    1042:	1c d3       	rcall	.+1592   	; 0x167c <SH100CTRL_SetLoop>
	SH100CTRL_SetAB(ampState.swAB);
    1044:	f8 01       	movw	r30, r16
    1046:	85 81       	ldd	r24, Z+5	; 0x05
    1048:	56 d3       	rcall	.+1708   	; 0x16f6 <SH100CTRL_SetAB>
}
    104a:	26 96       	adiw	r28, 0x06	; 6
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000be0 <SH100CTRL_Init>:
SH100_State_t ampState;

void setChannelLeds();

void SH100CTRL_Init()
{
 be0:	cf 93       	push	r28
 be2:	df 93       	push	r29
 be4:	00 d0       	rcall	.+0      	; 0xbe6 <SH100CTRL_Init+0x6>
 be6:	00 d0       	rcall	.+0      	; 0xbe8 <SH100CTRL_Init+0x8>
 be8:	00 d0       	rcall	.+0      	; 0xbea <SH100CTRL_Init+0xa>
 bea:	cd b7       	in	r28, 0x3d	; 61
 bec:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 bee:	60 e0       	ldi	r22, 0x00	; 0
 bf0:	70 e0       	ldi	r23, 0x00	; 0
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	78 d6       	rcall	.+3312   	; 0x18e6 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 bf6:	8b 3a       	cpi	r24, 0xAB	; 171
 bf8:	9c 4a       	sbci	r25, 0xAC	; 172
 bfa:	91 f4       	brne	.+36     	; 0xc20 <SH100CTRL_Init+0x40>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_AMP_STATE_OFFSET, sizeof(SH100_State_t));
 bfc:	48 e0       	ldi	r20, 0x08	; 8
 bfe:	50 e0       	ldi	r21, 0x00	; 0
 c00:	60 e8       	ldi	r22, 0x80	; 128
 c02:	26 e0       	ldi	r18, 0x06	; 6
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	ce 01       	movw	r24, r28
 c08:	01 96       	adiw	r24, 0x01	; 1
 c0a:	87 d5       	rcall	.+2830   	; 0x171a <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 c0c:	86 e0       	ldi	r24, 0x06	; 6
 c0e:	fe 01       	movw	r30, r28
 c10:	31 96       	adiw	r30, 0x01	; 1
 c12:	ad e2       	ldi	r26, 0x2D	; 45
 c14:	b1 e0       	ldi	r27, 0x01	; 1
 c16:	01 90       	ld	r0, Z+
 c18:	0d 92       	st	X+, r0
 c1a:	8a 95       	dec	r24
 c1c:	e1 f7       	brne	.-8      	; 0xc16 <SH100CTRL_Init+0x36>
 c1e:	0f c0       	rjmp	.+30     	; 0xc3e <SH100CTRL_Init+0x5e>
	}
	else
	{
		ampState.channelNum = 0;
 c20:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <ampState>
		for(int i=0; i<4; i++)
 c24:	80 e0       	ldi	r24, 0x00	; 0
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	05 c0       	rjmp	.+10     	; 0xc34 <SH100CTRL_Init+0x54>
		{
			ampState.loopOn[i] = false;
 c2a:	fc 01       	movw	r30, r24
 c2c:	e3 5d       	subi	r30, 0xD3	; 211
 c2e:	fe 4f       	sbci	r31, 0xFE	; 254
 c30:	11 82       	std	Z+1, r1	; 0x01
		ampState = *ampState_ptr;
	}
	else
	{
		ampState.channelNum = 0;
		for(int i=0; i<4; i++)
 c32:	01 96       	adiw	r24, 0x01	; 1
 c34:	84 30       	cpi	r24, 0x04	; 4
 c36:	91 05       	cpc	r25, r1
 c38:	c4 f3       	brlt	.-16     	; 0xc2a <SH100CTRL_Init+0x4a>
		{
			ampState.loopOn[i] = false;
		}		
		ampState.swAB = false;		
 c3a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <ampState+0x5>
	}
	
	SH100CTRL_SetAmpState(ampState);
 c3e:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <ampState>
 c42:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <ampState+0x1>
 c46:	60 91 2f 01 	lds	r22, 0x012F	; 0x80012f <ampState+0x2>
 c4a:	70 91 30 01 	lds	r23, 0x0130	; 0x800130 <ampState+0x3>
 c4e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <ampState+0x4>
 c52:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <ampState+0x5>
 c56:	d2 d1       	rcall	.+932    	; 0xffc <SH100CTRL_SetAmpState>
}
 c58:	26 96       	adiw	r28, 0x06	; 6
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	f8 94       	cli
 c5e:	de bf       	out	0x3e, r29	; 62
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	cd bf       	out	0x3d, r28	; 61
 c64:	df 91       	pop	r29
 c66:	cf 91       	pop	r28
 c68:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

000018ce <SH100CTRL_SwAB>:
	MIDICTRL_SendLoopEnComm();
}

void SH100CTRL_SwAB()
{
	SH100CTRL_SetAB(!ampState.swAB);
    18ce:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <ampState+0x5>
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	89 27       	eor	r24, r25
    18d6:	0f df       	rcall	.-482    	; 0x16f6 <SH100CTRL_SetAB>
    18d8:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

00001934 <SH100CTRL_MuteAmp>:
	MIDICTRL_SendSwABComm();
}

void SH100CTRL_MuteAmp()
{
	SH100HW_SetPAState(OUTPUT_MUTE);
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	40 dd       	rcall	.-1408   	; 0x13b8 <SH100HW_SetPAState>
    1938:	08 95       	ret

Disassembly of section .text.SH100CTRL_UnmuteAmp:

000018da <SH100CTRL_UnmuteAmp>:
}

void SH100CTRL_UnmuteAmp()
{
	if(SH100HW_GetOutputJacks() != OUT_NONE)
    18da:	77 df       	rcall	.-274    	; 0x17ca <SH100HW_GetOutputJacks>
    18dc:	88 23       	and	r24, r24
    18de:	11 f0       	breq	.+4      	; 0x18e4 <SH100CTRL_UnmuteAmp+0xa>
	{
		SH100HW_SetPAState(OUTPUT_ENABLED);	
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	6a dd       	rcall	.-1324   	; 0x13b8 <SH100HW_SetPAState>
    18e4:	08 95       	ret

Disassembly of section .text.SH100CTRL_CheckOutputJacks:

00000dd6 <SH100CTRL_CheckOutputJacks>:
	}		
}

void SH100CTRL_CheckOutputJacks()
{
	if(SH100HW_GetPAFailure()) return;
 dd6:	8d d5       	rcall	.+2842   	; 0x18f2 <SH100HW_GetPAFailure>
 dd8:	81 11       	cpse	r24, r1
 dda:	38 c0       	rjmp	.+112    	; 0xe4c <SH100CTRL_CheckOutputJacks+0x76>
	
	SH100HW_OutputJacks_t outJacksState = SH100HW_GetOutputJacks();
 ddc:	f6 d4       	rcall	.+2540   	; 0x17ca <SH100HW_GetOutputJacks>
	
	switch(outJacksState)
 dde:	81 30       	cpi	r24, 0x01	; 1
 de0:	89 f0       	breq	.+34     	; 0xe04 <SH100CTRL_CheckOutputJacks+0x2e>
 de2:	28 f0       	brcs	.+10     	; 0xdee <SH100CTRL_CheckOutputJacks+0x18>
 de4:	82 30       	cpi	r24, 0x02	; 2
 de6:	d9 f0       	breq	.+54     	; 0xe1e <SH100CTRL_CheckOutputJacks+0x48>
 de8:	83 30       	cpi	r24, 0x03	; 3
 dea:	31 f1       	breq	.+76     	; 0xe38 <SH100CTRL_CheckOutputJacks+0x62>
 dec:	08 95       	ret
	{
		case OUT_NONE:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 dee:	93 d5       	rcall	.+2854   	; 0x1916 <MIDICTRL_MidiMode>
 df0:	81 11       	cpse	r24, r1
 df2:	06 c0       	rjmp	.+12     	; 0xe00 <SH100CTRL_CheckOutputJacks+0x2a>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 df4:	60 e0       	ldi	r22, 0x00	; 0
 df6:	87 e0       	ldi	r24, 0x07	; 7
 df8:	1a d3       	rcall	.+1588   	; 0x142e <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 dfa:	61 e0       	ldi	r22, 0x01	; 1
 dfc:	88 e0       	ldi	r24, 0x08	; 8
 dfe:	17 d3       	rcall	.+1582   	; 0x142e <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 e00:	99 d5       	rcall	.+2866   	; 0x1934 <SH100CTRL_MuteAmp>
			break;
 e02:	08 95       	ret
		}
		case OUT_16OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 e04:	88 d5       	rcall	.+2832   	; 0x1916 <MIDICTRL_MidiMode>
 e06:	81 11       	cpse	r24, r1
 e08:	21 c0       	rjmp	.+66     	; 0xe4c <SH100CTRL_CheckOutputJacks+0x76>
			{
				SH100CTRL_UnmuteAmp();
 e0a:	67 d5       	rcall	.+2766   	; 0x18da <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_16OHM);
 e0c:	81 e0       	ldi	r24, 0x01	; 1
 e0e:	98 d5       	rcall	.+2864   	; 0x1940 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 e10:	61 e0       	ldi	r22, 0x01	; 1
 e12:	87 e0       	ldi	r24, 0x07	; 7
 e14:	0c d3       	rcall	.+1560   	; 0x142e <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 e16:	60 e0       	ldi	r22, 0x00	; 0
 e18:	88 e0       	ldi	r24, 0x08	; 8
 e1a:	09 d3       	rcall	.+1554   	; 0x142e <SH100HW_SetNewLedState>
 e1c:	08 95       	ret
			}			
			break;
		}
		case OUT_8OHM:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 e1e:	7b d5       	rcall	.+2806   	; 0x1916 <MIDICTRL_MidiMode>
 e20:	81 11       	cpse	r24, r1
 e22:	14 c0       	rjmp	.+40     	; 0xe4c <SH100CTRL_CheckOutputJacks+0x76>
			{
				SH100CTRL_UnmuteAmp();
 e24:	5a d5       	rcall	.+2740   	; 0x18da <SH100CTRL_UnmuteAmp>
				SH100HW_SetOutputMode(OUTPUT_8OHM);
 e26:	80 e0       	ldi	r24, 0x00	; 0
 e28:	8b d5       	rcall	.+2838   	; 0x1940 <SH100HW_SetOutputMode>
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_ON);
 e2a:	61 e0       	ldi	r22, 0x01	; 1
 e2c:	87 e0       	ldi	r24, 0x07	; 7
 e2e:	ff d2       	rcall	.+1534   	; 0x142e <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_OFF);
 e30:	60 e0       	ldi	r22, 0x00	; 0
 e32:	88 e0       	ldi	r24, 0x08	; 8
 e34:	fc d2       	rcall	.+1528   	; 0x142e <SH100HW_SetNewLedState>
 e36:	08 95       	ret

			break;
		}
		case OUT_BOTH:
		{
			if(MIDICTRL_MidiMode() == RUNNING)
 e38:	6e d5       	rcall	.+2780   	; 0x1916 <MIDICTRL_MidiMode>
 e3a:	81 11       	cpse	r24, r1
 e3c:	06 c0       	rjmp	.+12     	; 0xe4a <SH100CTRL_CheckOutputJacks+0x74>
			{
				SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
 e3e:	60 e0       	ldi	r22, 0x00	; 0
 e40:	87 e0       	ldi	r24, 0x07	; 7
 e42:	f5 d2       	rcall	.+1514   	; 0x142e <SH100HW_SetNewLedState>
				SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
 e44:	61 e0       	ldi	r22, 0x01	; 1
 e46:	88 e0       	ldi	r24, 0x08	; 8
 e48:	f2 d2       	rcall	.+1508   	; 0x142e <SH100HW_SetNewLedState>
			}
			SH100CTRL_MuteAmp();
 e4a:	74 d5       	rcall	.+2792   	; 0x1934 <SH100CTRL_MuteAmp>
 e4c:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000f96 <SH100HW_Init>:
void writeShiftRegs(uint16_t data);

bool isPAOk;

void SH100HW_Init()
{
 f96:	1f 93       	push	r17
 f98:	cf 93       	push	r28
 f9a:	df 93       	push	r29
	isPAOk = false;
 f9c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <isPAOk>
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 fa0:	55 b1       	in	r21, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 fa2:	84 b1       	in	r24, 0x04	; 4
 fa4:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 fa6:	28 b1       	in	r18, 0x08	; 8
 fa8:	20 61       	ori	r18, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 faa:	97 b1       	in	r25, 0x07	; 7
 fac:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 fae:	3b b1       	in	r19, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 fb0:	4a b1       	in	r20, 0x0a	; 10
 fb2:	40 6e       	ori	r20, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 fb4:	3b 71       	andi	r19, 0x1B	; 27
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 fb6:	4b 7e       	andi	r20, 0xEB	; 235
 fb8:	4a b9       	out	0x0a, r20	; 10
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 fba:	30 61       	ori	r19, 0x10	; 16
 fbc:	3b b9       	out	0x0b, r19	; 11
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 fbe:	9b 7d       	andi	r25, 0xDB	; 219
 fc0:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 fc2:	21 7d       	andi	r18, 0xD1	; 209
 fc4:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 fc6:	9a 60       	ori	r25, 0x0A	; 10
 fc8:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 fca:	95 2f       	mov	r25, r21
 fcc:	90 7d       	andi	r25, 0xD0	; 208
 fce:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 fd0:	84 60       	ori	r24, 0x04	; 4
 fd2:	84 b9       	out	0x04, r24	; 4
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 fd4:	10 e0       	ldi	r17, 0x00	; 0
 fd6:	0c c0       	rjmp	.+24     	; 0xff0 <SH100HW_Init+0x5a>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
 fd8:	c1 2f       	mov	r28, r17
 fda:	d0 e0       	ldi	r29, 0x00	; 0
 fdc:	81 e0       	ldi	r24, 0x01	; 1
 fde:	90 e0       	ldi	r25, 0x00	; 0
 fe0:	35 dd       	rcall	.-1430   	; 0xa4c <__simple_malloc>
 fe2:	cc 0f       	add	r28, r28
 fe4:	dd 1f       	adc	r29, r29
 fe6:	c7 5b       	subi	r28, 0xB7	; 183
 fe8:	de 4f       	sbci	r29, 0xFE	; 254
 fea:	99 83       	std	Y+1, r25	; 0x01
 fec:	88 83       	st	Y, r24
	//gpio_configure_pin(PIN_SW, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_MUTE, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELE_W, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	gpio_configure_pin(PIN_RELAY_LOOP, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
	
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 fee:	1f 5f       	subi	r17, 0xFF	; 255
 ff0:	12 31       	cpi	r17, 0x12	; 18
 ff2:	90 f3       	brcs	.-28     	; 0xfd8 <SH100HW_Init+0x42>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
}
 ff4:	df 91       	pop	r29
 ff6:	cf 91       	pop	r28
 ff8:	1f 91       	pop	r17
 ffa:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAFailure:

00001898 <SH100HW_SetPAFailure>:

void SH100HW_SetPAFailure(bool isFail)
{
	isPAOk = !isFail;
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	98 27       	eor	r25, r24
    189c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <isPAOk>
	if(isFail)
    18a0:	81 11       	cpse	r24, r1
	{
		SH100CTRL_MuteAmp();
    18a2:	48 d0       	rcall	.+144    	; 0x1934 <SH100CTRL_MuteAmp>
    18a4:	08 95       	ret

Disassembly of section .text.SH100HW_GetPAFailure:

000018f2 <SH100HW_GetPAFailure>:
	}
}

bool SH100HW_GetPAFailure()
{
	return !isPAOk;
    18f2:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <isPAOk>
}
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	89 27       	eor	r24, r25
    18fa:	08 95       	ret

Disassembly of section .text.SH100HW_GetButtonsState:

00001864 <SH100HW_GetButtonsState>:

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
    1864:	2f e0       	ldi	r18, 0x0F	; 15
    1866:	e9 e3       	ldi	r30, 0x39	; 57
    1868:	f1 e0       	ldi	r31, 0x01	; 1
    186a:	dc 01       	movw	r26, r24
    186c:	01 90       	ld	r0, Z+
    186e:	0d 92       	st	X+, r0
    1870:	2a 95       	dec	r18
    1872:	e1 f7       	brne	.-8      	; 0x186c <SH100HW_GetButtonsState+0x8>
}
    1874:	08 95       	ret

Disassembly of section .text.SH100HW_SetCh:

0000116e <SH100HW_SetCh>:

void SH100HW_SetCh(uint8_t chNum)
{
	switch(chNum)
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	69 f0       	breq	.+26     	; 0x118c <SH100HW_SetCh+0x1e>
    1172:	28 f0       	brcs	.+10     	; 0x117e <SH100HW_SetCh+0x10>
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	91 f0       	breq	.+36     	; 0x119c <SH100HW_SetCh+0x2e>
    1178:	83 30       	cpi	r24, 0x03	; 3
    117a:	c1 f0       	breq	.+48     	; 0x11ac <SH100HW_SetCh+0x3e>
    117c:	08 95       	ret
	{
		case 0:
		{
			RELAY_13_24 = REL_OFF;
    117e:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    1182:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    1186:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    118a:	08 95       	ret
		}
		case 1:
		{
			RELAY_13_24 = REL_ON;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    1192:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    1196:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    119a:	08 95       	ret
		}
		case 2:
		{
			RELAY_13_24 = REL_OFF;
    119c:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_ON;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_OFF;
    11a6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <RELAY_2_4>
			break;
    11aa:	08 95       	ret
		}
		case 3:
		{
			RELAY_13_24 = REL_ON;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <RELAY_13_24>
			RELAY_1_3 = REL_OFF;
    11b2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <RELAY_1_3>
			RELAY_2_4 = REL_ON;
    11b6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <RELAY_2_4>
    11ba:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

000017b2 <SH100HW_LoopEn>:
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
	RELAY_LOOP = isEnabled;
    17b2:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RELAY_LOOP>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    17b6:	88 23       	and	r24, r24
    17b8:	21 f0       	breq	.+8      	; 0x17c2 <SH100HW_LoopEn+0x10>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    17ba:	85 b1       	in	r24, 0x05	; 5
    17bc:	84 60       	ori	r24, 0x04	; 4
    17be:	85 b9       	out	0x05, r24	; 5
    17c0:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    17c2:	85 b1       	in	r24, 0x05	; 5
    17c4:	8b 7f       	andi	r24, 0xFB	; 251
    17c6:	85 b9       	out	0x05, r24	; 5
    17c8:	08 95       	ret

Disassembly of section .text.SH100HW_SetAB:

0000193a <SH100HW_SetAB>:
	ioport_set_pin_level(PIN_RELAY_LOOP, RELAY_LOOP);
}

void SH100HW_SetAB(bool isBEn)
{
	RELAY_AB = isBEn;
    193a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <RELAY_AB>
    193e:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

0000142e <SH100HW_SetNewLedState>:
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
    1432:	e8 2f       	mov	r30, r24
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	df 01       	movw	r26, r30
    1438:	19 96       	adiw	r26, 0x09	; 9
    143a:	aa 0f       	add	r26, r26
    143c:	bb 1f       	adc	r27, r27
    143e:	a7 5b       	subi	r26, 0xB7	; 183
    1440:	be 4f       	sbci	r27, 0xFE	; 254
    1442:	0d 90       	ld	r0, X+
    1444:	bc 91       	ld	r27, X
    1446:	a0 2d       	mov	r26, r0
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	e7 5b       	subi	r30, 0xB7	; 183
    144e:	fe 4f       	sbci	r31, 0xFE	; 254
    1450:	c0 81       	ld	r28, Z
    1452:	d1 81       	ldd	r29, Z+1	; 0x01
    1454:	88 81       	ld	r24, Y
    1456:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
    1458:	01 90       	ld	r0, Z+
    145a:	f0 81       	ld	r31, Z
    145c:	e0 2d       	mov	r30, r0
    145e:	60 83       	st	Z, r22
}
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

000016ce <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	fc 01       	movw	r30, r24
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	e7 5b       	subi	r30, 0xB7	; 183
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	a0 81       	ld	r26, Z
    16dc:	b1 81       	ldd	r27, Z+1	; 0x01
    16de:	fc 01       	movw	r30, r24
    16e0:	39 96       	adiw	r30, 0x09	; 9
    16e2:	ee 0f       	add	r30, r30
    16e4:	ff 1f       	adc	r31, r31
    16e6:	e7 5b       	subi	r30, 0xB7	; 183
    16e8:	fe 4f       	sbci	r31, 0xFE	; 254
    16ea:	01 90       	ld	r0, Z+
    16ec:	f0 81       	ld	r31, Z
    16ee:	e0 2d       	mov	r30, r0
    16f0:	80 81       	ld	r24, Z
    16f2:	8c 93       	st	X, r24
    16f4:	08 95       	ret

Disassembly of section .text.SH100HW_GetOutputJacks:

000017ca <SH100HW_GetOutputJacks>:
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
    17ca:	21 e0       	ldi	r18, 0x01	; 1
    17cc:	18 9b       	sbis	0x03, 0	; 3
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	91 e0       	ldi	r25, 0x01	; 1
    17d2:	19 9b       	sbis	0x03, 1	; 3
    17d4:	90 e0       	ldi	r25, 0x00	; 0

SH100HW_OutputJacks_t SH100HW_GetOutputJacks()
{
	bool is16Ohm = ioport_get_pin_level(PIN_M16_DETECT);
	bool is8Ohm = ioport_get_pin_level(PIN_M8_DETECT);
	return ((is16Ohm) | (is8Ohm<<1));
    17d6:	89 2f       	mov	r24, r25
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
}
    17de:	82 2b       	or	r24, r18
    17e0:	08 95       	ret

Disassembly of section .text.SH100HW_SetPAState:

000013b8 <SH100HW_SetPAState>:

void SH100HW_SetPAState(SH100HW_OutputState_t state)
{
	if(isPAOk)
    13b8:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <isPAOk>
    13bc:	99 23       	and	r25, r25
    13be:	99 f0       	breq	.+38     	; 0x13e6 <SH100HW_SetPAState+0x2e>
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    13c0:	81 11       	cpse	r24, r1
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <SH100HW_SetPAState+0x14>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    13c4:	98 b1       	in	r25, 0x08	; 8
    13c6:	92 60       	ori	r25, 0x02	; 2
    13c8:	98 b9       	out	0x08, r25	; 8
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <SH100HW_SetPAState+0x1a>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    13cc:	98 b1       	in	r25, 0x08	; 8
    13ce:	9d 7f       	andi	r25, 0xFD	; 253
    13d0:	98 b9       	out	0x08, r25	; 8
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    13d2:	88 23       	and	r24, r24
    13d4:	21 f0       	breq	.+8      	; 0x13de <SH100HW_SetPAState+0x26>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    13d6:	88 b1       	in	r24, 0x08	; 8
    13d8:	88 60       	ori	r24, 0x08	; 8
    13da:	88 b9       	out	0x08, r24	; 8
    13dc:	08 95       	ret
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    13de:	88 b1       	in	r24, 0x08	; 8
    13e0:	87 7f       	andi	r24, 0xF7	; 247
    13e2:	88 b9       	out	0x08, r24	; 8
    13e4:	08 95       	ret
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    13e6:	88 b1       	in	r24, 0x08	; 8
    13e8:	82 60       	ori	r24, 0x02	; 2
    13ea:	88 b9       	out	0x08, r24	; 8
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    13ec:	88 b1       	in	r24, 0x08	; 8
    13ee:	87 7f       	andi	r24, 0xF7	; 247
    13f0:	88 b9       	out	0x08, r24	; 8
    13f2:	08 95       	ret

Disassembly of section .text.SH100HW_SetOutputMode:

00001940 <SH100HW_SetOutputMode>:
	}
}

void SH100HW_SetOutputMode(SH100HW_PAMode_t mode)
{
	RELAY_8_16 = mode;
    1940:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <RELAY_8_16>
    1944:	08 95       	ret

Disassembly of section .text.SH100HW_StartADConvertion:

00001850 <SH100HW_StartADConvertion>:
}

void SH100HW_StartADConvertion(ADC_Channels_t channel)
{
	ADMUX = (1<<REFS0) | channel; // AREF ext pin, Left-adjustment result
    1850:	80 64       	ori	r24, 0x40	; 64
    1852:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fe07c>
	DIDR0 = 0x01; // Disable digital io on PC0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7fe07e>
	ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1); // ADC enable, INT enable, prescaler = 64
    185c:	8e ec       	ldi	r24, 0xCE	; 206
    185e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7fe07a>
    1862:	08 95       	ret

Disassembly of section .text.readButtonsState:

00000686 <readButtonsState>:
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	af c0       	rjmp	.+350    	; 0x7e8 <readButtonsState+0x162>
	{
		
		switch(cnt)
 68a:	48 2f       	mov	r20, r24
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	48 30       	cpi	r20, 0x08	; 8
 690:	51 05       	cpc	r21, r1
 692:	08 f0       	brcs	.+2      	; 0x696 <readButtonsState+0x10>
 694:	a8 c0       	rjmp	.+336    	; 0x7e6 <readButtonsState+0x160>
 696:	fa 01       	movw	r30, r20
 698:	ef 5d       	subi	r30, 0xDF	; 223
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	09 94       	ijmp
 69e:	2b b1       	in	r18, 0x0b	; 11
 6a0:	2f 7d       	andi	r18, 0xDF	; 223
 6a2:	2b b9       	out	0x0b, r18	; 11
 6a4:	2b b1       	in	r18, 0x0b	; 11
 6a6:	2f 7b       	andi	r18, 0xBF	; 191
 6a8:	2b b9       	out	0x0b, r18	; 11
 6aa:	2b b1       	in	r18, 0x0b	; 11
 6ac:	2f 77       	andi	r18, 0x7F	; 127
 6ae:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	4c 9b       	sbis	0x09, 4	; 9
 6b4:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = ioport_get_pin_level(PIN_MIDI_SWITCH);
 6b6:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <buttonsState+0x1>
 6ba:	21 e0       	ldi	r18, 0x01	; 1
 6bc:	35 9b       	sbis	0x06, 5	; 6
 6be:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 6c0:	20 93 45 01 	sts	0x0145, r18	; 0x800145 <buttonsState+0xc>
				break;
 6c4:	90 c0       	rjmp	.+288    	; 0x7e6 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6c6:	9b b1       	in	r25, 0x0b	; 11
 6c8:	90 62       	ori	r25, 0x20	; 32
 6ca:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6cc:	9b b1       	in	r25, 0x0b	; 11
 6ce:	9f 7b       	andi	r25, 0xBF	; 191
 6d0:	9b b9       	out	0x0b, r25	; 11
 6d2:	9b b1       	in	r25, 0x0b	; 11
 6d4:	9f 77       	andi	r25, 0x7F	; 127
 6d6:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 6d8:	91 e0       	ldi	r25, 0x01	; 1
 6da:	4c 9b       	sbis	0x09, 4	; 9
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	21 e0       	ldi	r18, 0x01	; 1
 6e0:	4a 9b       	sbis	0x09, 2	; 9
 6e2:	20 e0       	ldi	r18, 0x00	; 0
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = ioport_get_pin_level(PIN_BUTTONS);
 6e4:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <buttonsState+0x7>
 6e8:	21 e0       	ldi	r18, 0x01	; 1
 6ea:	35 9b       	sbis	0x06, 5	; 6
 6ec:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 6ee:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <buttonsState+0xe>
				break;
 6f2:	79 c0       	rjmp	.+242    	; 0x7e6 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 6f4:	2b b1       	in	r18, 0x0b	; 11
 6f6:	2f 7d       	andi	r18, 0xDF	; 223
 6f8:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 6fa:	2b b1       	in	r18, 0x0b	; 11
 6fc:	20 64       	ori	r18, 0x40	; 64
 6fe:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 700:	2b b1       	in	r18, 0x0b	; 11
 702:	2f 77       	andi	r18, 0x7F	; 127
 704:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 706:	21 e0       	ldi	r18, 0x01	; 1
 708:	4c 9b       	sbis	0x09, 4	; 9
 70a:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 70c:	32 2f       	mov	r19, r18
 70e:	21 e0       	ldi	r18, 0x01	; 1
 710:	4a 9b       	sbis	0x09, 2	; 9
 712:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnLoop = ioport_get_pin_level(PIN_BUTTONS);
 714:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <buttonsState+0x8>
 718:	21 e0       	ldi	r18, 0x01	; 1
 71a:	35 9b       	sbis	0x06, 5	; 6
 71c:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_presence = ioport_get_pin_level(PIN_FOOTSWITCH);
 71e:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <buttonsState+0xb>
				break;
 722:	61 c0       	rjmp	.+194    	; 0x7e6 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 724:	2b b1       	in	r18, 0x0b	; 11
 726:	20 62       	ori	r18, 0x20	; 32
 728:	2b b9       	out	0x0b, r18	; 11
 72a:	2b b1       	in	r18, 0x0b	; 11
 72c:	20 64       	ori	r18, 0x40	; 64
 72e:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 730:	2b b1       	in	r18, 0x0b	; 11
 732:	2f 77       	andi	r18, 0x7F	; 127
 734:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 736:	21 e0       	ldi	r18, 0x01	; 1
 738:	4c 9b       	sbis	0x09, 4	; 9
 73a:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = ioport_get_pin_level(PIN_MIDI_SWITCH);
 73c:	20 93 3b 01 	sts	0x013B, r18	; 0x80013b <buttonsState+0x2>
 740:	21 e0       	ldi	r18, 0x01	; 1
 742:	35 9b       	sbis	0x06, 5	; 6
 744:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_sleeve = ioport_get_pin_level(PIN_FOOTSWITCH);
 746:	20 93 42 01 	sts	0x0142, r18	; 0x800142 <buttonsState+0x9>
				break;
 74a:	4d c0       	rjmp	.+154    	; 0x7e6 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 74c:	2b b1       	in	r18, 0x0b	; 11
 74e:	2f 7d       	andi	r18, 0xDF	; 223
 750:	2b b9       	out	0x0b, r18	; 11
 752:	2b b1       	in	r18, 0x0b	; 11
 754:	2f 7b       	andi	r18, 0xBF	; 191
 756:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 758:	2b b1       	in	r18, 0x0b	; 11
 75a:	20 68       	ori	r18, 0x80	; 128
 75c:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 75e:	41 e0       	ldi	r20, 0x01	; 1
 760:	4c 9b       	sbis	0x09, 4	; 9
 762:	40 e0       	ldi	r20, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 764:	b4 2f       	mov	r27, r20
 766:	21 e0       	ldi	r18, 0x01	; 1
 768:	4a 9b       	sbis	0x09, 2	; 9
 76a:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnCh2 = ioport_get_pin_level(PIN_BUTTONS);
 76c:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <buttonsState+0x4>
 770:	21 e0       	ldi	r18, 0x01	; 1
 772:	35 9b       	sbis	0x06, 5	; 6
 774:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS1_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 776:	20 93 43 01 	sts	0x0143, r18	; 0x800143 <buttonsState+0xa>
				break;
 77a:	35 c0       	rjmp	.+106    	; 0x7e6 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 77c:	2b b1       	in	r18, 0x0b	; 11
 77e:	20 62       	ori	r18, 0x20	; 32
 780:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 782:	2b b1       	in	r18, 0x0b	; 11
 784:	2f 7b       	andi	r18, 0xBF	; 191
 786:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 788:	2b b1       	in	r18, 0x0b	; 11
 78a:	20 68       	ori	r18, 0x80	; 128
 78c:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 78e:	21 e0       	ldi	r18, 0x01	; 1
 790:	4a 9b       	sbis	0x09, 2	; 9
 792:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 0);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = ioport_get_pin_level(PIN_BUTTONS);
 794:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <buttonsState+0x5>
				break;
 798:	26 c0       	rjmp	.+76     	; 0x7e6 <readButtonsState+0x160>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 79a:	2b b1       	in	r18, 0x0b	; 11
 79c:	2f 7d       	andi	r18, 0xDF	; 223
 79e:	2b b9       	out	0x0b, r18	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 7a0:	2b b1       	in	r18, 0x0b	; 11
 7a2:	20 64       	ori	r18, 0x40	; 64
 7a4:	2b b9       	out	0x0b, r18	; 11
 7a6:	2b b1       	in	r18, 0x0b	; 11
 7a8:	20 68       	ori	r18, 0x80	; 128
 7aa:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 7ac:	41 e0       	ldi	r20, 0x01	; 1
 7ae:	4c 9b       	sbis	0x09, 4	; 9
 7b0:	40 e0       	ldi	r20, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 0);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[1] = ioport_get_pin_level(PIN_MIDI_SWITCH);
 7b2:	a4 2f       	mov	r26, r20
 7b4:	21 e0       	ldi	r18, 0x01	; 1
 7b6:	4a 9b       	sbis	0x09, 2	; 9
 7b8:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.btnCh4 = ioport_get_pin_level(PIN_BUTTONS);
 7ba:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <buttonsState+0x6>
 7be:	21 e0       	ldi	r18, 0x01	; 1
 7c0:	35 9b       	sbis	0x06, 5	; 6
 7c2:	20 e0       	ldi	r18, 0x00	; 0
				buttonsState.FS2_tip = ioport_get_pin_level(PIN_FOOTSWITCH);
 7c4:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <buttonsState+0xd>
				break;
 7c8:	0e c0       	rjmp	.+28     	; 0x7e6 <readButtonsState+0x160>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 7ca:	2b b1       	in	r18, 0x0b	; 11
 7cc:	20 62       	ori	r18, 0x20	; 32
 7ce:	2b b9       	out	0x0b, r18	; 11
 7d0:	2b b1       	in	r18, 0x0b	; 11
 7d2:	20 64       	ori	r18, 0x40	; 64
 7d4:	2b b9       	out	0x0b, r18	; 11
 7d6:	2b b1       	in	r18, 0x0b	; 11
 7d8:	20 68       	ori	r18, 0x80	; 128
 7da:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 7dc:	21 e0       	ldi	r18, 0x01	; 1
 7de:	4a 9b       	sbis	0x09, 2	; 9
 7e0:	20 e0       	ldi	r18, 0x00	; 0
			{
				ioport_set_pin_level(PIN_A, 1);
				ioport_set_pin_level(PIN_B, 1);
				ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = ioport_get_pin_level(PIN_BUTTONS);
 7e2:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <buttonsState+0x3>
}
//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 7e6:	8f 5f       	subi	r24, 0xFF	; 255
 7e8:	88 30       	cpi	r24, 0x08	; 8
 7ea:	08 f4       	brcc	.+2      	; 0x7ee <readButtonsState+0x168>
 7ec:	4e cf       	rjmp	.-356    	; 0x68a <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 7ee:	4a 2f       	mov	r20, r26
 7f0:	50 e0       	ldi	r21, 0x00	; 0
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	23 2f       	mov	r18, r19
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	22 0f       	add	r18, r18
 7fc:	33 1f       	adc	r19, r19
 7fe:	22 0f       	add	r18, r18
 800:	33 1f       	adc	r19, r19
 802:	89 2f       	mov	r24, r25
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	88 0f       	add	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	88 0f       	add	r24, r24
 810:	99 1f       	adc	r25, r25
 812:	4b 2b       	or	r20, r27
 814:	24 2b       	or	r18, r20
 816:	82 2b       	or	r24, r18
 818:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <buttonsState>
 81c:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

00001376 <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
    1376:	ac 01       	movw	r20, r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1378:	88 b1       	in	r24, 0x08	; 8
    137a:	8f 7e       	andi	r24, 0xEF	; 239
    137c:	88 b9       	out	0x08, r24	; 8
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	12 c0       	rjmp	.+36     	; 0x13a6 <writeShiftRegs+0x30>
    1382:	95 b1       	in	r25, 0x05	; 5
    1384:	9f 7d       	andi	r25, 0xDF	; 223
    1386:	95 b9       	out	0x05, r25	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
    1388:	55 23       	and	r21, r21
    138a:	24 f4       	brge	.+8      	; 0x1394 <writeShiftRegs+0x1e>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    138c:	85 b1       	in	r24, 0x05	; 5
    138e:	88 60       	ori	r24, 0x08	; 8
    1390:	85 b9       	out	0x05, r24	; 5
    1392:	03 c0       	rjmp	.+6      	; 0x139a <writeShiftRegs+0x24>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    1394:	85 b1       	in	r24, 0x05	; 5
    1396:	87 7f       	andi	r24, 0xF7	; 247
    1398:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    139a:	95 b1       	in	r25, 0x05	; 5
    139c:	90 62       	ori	r25, 0x20	; 32
    139e:	95 b9       	out	0x05, r25	; 5
	{
		ioport_set_pin_level(PIN_SCK, 0);
		ioport_set_pin_level(PIN_MOSI, (data & 0x8000));
		ioport_set_pin_level(PIN_SCK, 1);
		data = data << 1;
    13a0:	44 0f       	add	r20, r20
    13a2:	55 1f       	adc	r21, r21
}

void writeShiftRegs(uint16_t data)
{
	ioport_set_pin_level(PIN_ST, 0);
	for(uint8_t i=0; i<16; i++)
    13a4:	2f 5f       	subi	r18, 0xFF	; 255
    13a6:	20 31       	cpi	r18, 0x10	; 16
    13a8:	60 f3       	brcs	.-40     	; 0x1382 <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    13aa:	85 b1       	in	r24, 0x05	; 5
    13ac:	8f 7d       	andi	r24, 0xDF	; 223
    13ae:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    13b0:	88 b1       	in	r24, 0x08	; 8
    13b2:	80 61       	ori	r24, 0x10	; 16
    13b4:	88 b9       	out	0x08, r24	; 8
    13b6:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000002dc <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	29 97       	sbiw	r28, 0x09	; 9
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	f8 94       	cli
 2ea:	de bf       	out	0x3e, r29	; 62
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	cd bf       	out	0x3d, r28	; 61
	if(!isPAOk) SH100CTRL_MuteAmp();
 2f0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <isPAOk>
 2f4:	81 11       	cpse	r24, r1
 2f6:	01 c0       	rjmp	.+2      	; 0x2fa <SH100HW_MainTask+0x1e>
 2f8:	1d db       	rcall	.-2502   	; 0xfffff934 <__eeprom_end+0xff7ef934>
	
	readButtonsState();
 2fa:	c5 d1       	rcall	.+906    	; 0x686 <readButtonsState>
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 2fc:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <blinkCounter>
 300:	89 e2       	ldi	r24, 0x29	; 41
 302:	98 9f       	mul	r25, r24
 304:	81 2d       	mov	r24, r1
 306:	11 24       	eor	r1, r1
 308:	86 95       	lsr	r24
 30a:	86 95       	lsr	r24
 30c:	39 2f       	mov	r19, r25
 30e:	29 e1       	ldi	r18, 0x19	; 25
 310:	82 9f       	mul	r24, r18
 312:	30 19       	sub	r19, r0
 314:	11 24       	eor	r1, r1
 316:	31 11       	cpse	r19, r1
 318:	08 c0       	rjmp	.+16     	; 0x32a <SH100HW_MainTask+0x4e>
 31a:	99 23       	and	r25, r25
 31c:	31 f0       	breq	.+12     	; 0x32a <SH100HW_MainTask+0x4e>
	{
		fastBlink = !fastBlink;
 31e:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <fastBlink>
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	82 27       	eor	r24, r18
 326:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <fastBlink>
	}
	
	if(blinkCounter == 50)
 32a:	92 33       	cpi	r25, 0x32	; 50
 32c:	51 f4       	brne	.+20     	; 0x342 <SH100HW_MainTask+0x66>
	{
		blinkCounter = 0;
 32e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <blinkCounter>
		slowBlink = !slowBlink;
 332:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <slowBlink>
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	89 27       	eor	r24, r25
 33a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	47 c0       	rjmp	.+142    	; 0x3d0 <SH100HW_MainTask+0xf4>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 342:	9f 5f       	subi	r25, 0xFF	; 255
 344:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <blinkCounter>
 348:	fa cf       	rjmp	.-12     	; 0x33e <SH100HW_MainTask+0x62>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 34a:	82 2f       	mov	r24, r18
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	ee 0f       	add	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	e7 5b       	subi	r30, 0xB7	; 183
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	01 90       	ld	r0, Z+
 35a:	f0 81       	ld	r31, Z
 35c:	e0 2d       	mov	r30, r0
 35e:	30 81       	ld	r19, Z
 360:	31 30       	cpi	r19, 0x01	; 1
 362:	71 f0       	breq	.+28     	; 0x380 <SH100HW_MainTask+0xa4>
 364:	28 f0       	brcs	.+10     	; 0x370 <SH100HW_MainTask+0x94>
 366:	32 30       	cpi	r19, 0x02	; 2
 368:	a1 f0       	breq	.+40     	; 0x392 <SH100HW_MainTask+0xb6>
 36a:	33 30       	cpi	r19, 0x03	; 3
 36c:	e1 f0       	breq	.+56     	; 0x3a6 <SH100HW_MainTask+0xca>
 36e:	28 c0       	rjmp	.+80     	; 0x3c0 <SH100HW_MainTask+0xe4>
		{
			case LED_OFF: isLedOn[i] = false; break;
 370:	e1 e0       	ldi	r30, 0x01	; 1
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ec 0f       	add	r30, r28
 376:	fd 1f       	adc	r31, r29
 378:	e8 0f       	add	r30, r24
 37a:	f9 1f       	adc	r31, r25
 37c:	10 82       	st	Z, r1
 37e:	27 c0       	rjmp	.+78     	; 0x3ce <SH100HW_MainTask+0xf2>
			case LED_ON: isLedOn[i] = true; break;
 380:	e1 e0       	ldi	r30, 0x01	; 1
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 0f       	add	r30, r28
 386:	fd 1f       	adc	r31, r29
 388:	e8 0f       	add	r30, r24
 38a:	f9 1f       	adc	r31, r25
 38c:	31 e0       	ldi	r19, 0x01	; 1
 38e:	30 83       	st	Z, r19
 390:	1e c0       	rjmp	.+60     	; 0x3ce <SH100HW_MainTask+0xf2>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 392:	e1 e0       	ldi	r30, 0x01	; 1
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	ec 0f       	add	r30, r28
 398:	fd 1f       	adc	r31, r29
 39a:	e8 0f       	add	r30, r24
 39c:	f9 1f       	adc	r31, r25
 39e:	30 91 ba 01 	lds	r19, 0x01BA	; 0x8001ba <fastBlink>
 3a2:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 3a4:	14 c0       	rjmp	.+40     	; 0x3ce <SH100HW_MainTask+0xf2>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 3a6:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <slowBlink>
 3aa:	e1 e0       	ldi	r30, 0x01	; 1
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ec 0f       	add	r30, r28
 3b0:	fd 1f       	adc	r31, r29
 3b2:	e8 0f       	add	r30, r24
 3b4:	f9 1f       	adc	r31, r25
 3b6:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	83 27       	eor	r24, r19
 3bc:	88 87       	std	Y+8, r24	; 0x08
				break;
 3be:	07 c0       	rjmp	.+14     	; 0x3ce <SH100HW_MainTask+0xf2>
			}	
			default: isLedOn[i] = LED_OFF;
 3c0:	e1 e0       	ldi	r30, 0x01	; 1
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	ec 0f       	add	r30, r28
 3c6:	fd 1f       	adc	r31, r29
 3c8:	e8 0f       	add	r30, r24
 3ca:	f9 1f       	adc	r31, r25
 3cc:	10 82       	st	Z, r1
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 3ce:	2f 5f       	subi	r18, 0xFF	; 255
 3d0:	29 30       	cpi	r18, 0x09	; 9
 3d2:	08 f4       	brcc	.+2      	; 0x3d6 <SH100HW_MainTask+0xfa>
 3d4:	ba cf       	rjmp	.-140    	; 0x34a <SH100HW_MainTask+0x6e>
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3d6:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 3da:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <RELAY_1_3>
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
			default: isLedOn[i] = LED_OFF;
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 3e4:	ac 01       	movw	r20, r24
 3e6:	42 2b       	or	r20, r18
 3e8:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 3ea:	9b 81       	ldd	r25, Y+3	; 0x03
 3ec:	89 2f       	mov	r24, r25
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 3f8:	82 2b       	or	r24, r18
 3fa:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 3fc:	29 81       	ldd	r18, Y+1	; 0x01
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	22 0f       	add	r18, r18
 402:	33 1f       	adc	r19, r19
 404:	22 0f       	add	r18, r18
 406:	33 1f       	adc	r19, r19
 408:	22 0f       	add	r18, r18
 40a:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 40c:	82 2b       	or	r24, r18
 40e:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 410:	2a 81       	ldd	r18, Y+2	; 0x02
 412:	50 e1       	ldi	r21, 0x10	; 16
 414:	25 9f       	mul	r18, r21
 416:	90 01       	movw	r18, r0
 418:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 41a:	28 2b       	or	r18, r24
 41c:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 41e:	4c 81       	ldd	r20, Y+4	; 0x04
 420:	80 e2       	ldi	r24, 0x20	; 32
 422:	48 9f       	mul	r20, r24
 424:	a0 01       	movw	r20, r0
 426:	11 24       	eor	r1, r1
 428:	24 2b       	or	r18, r20
 42a:	35 2b       	or	r19, r21
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 42c:	40 91 36 01 	lds	r20, 0x0136	; 0x800136 <RELAY_8_16>
 430:	80 e8       	ldi	r24, 0x80	; 128
 432:	48 9f       	mul	r20, r24
 434:	a0 01       	movw	r20, r0
 436:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 438:	24 2b       	or	r18, r20
 43a:	35 2b       	or	r19, r21
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 43c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <RELAY_2_4>
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	98 2f       	mov	r25, r24
 444:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 446:	28 2b       	or	r18, r24
 448:	39 2b       	or	r19, r25
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 44a:	8e 81       	ldd	r24, Y+6	; 0x06
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	98 2f       	mov	r25, r24
 450:	88 27       	eor	r24, r24
 452:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
 454:	28 2b       	or	r18, r24
 456:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 458:	8f 81       	ldd	r24, Y+7	; 0x07
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	98 2f       	mov	r25, r24
 45e:	88 27       	eor	r24, r24
 460:	99 0f       	add	r25, r25
 462:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
 464:	28 2b       	or	r18, r24
 466:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 468:	88 85       	ldd	r24, Y+8	; 0x08
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	98 2f       	mov	r25, r24
 46e:	88 27       	eor	r24, r24
 470:	99 0f       	add	r25, r25
 472:	99 0f       	add	r25, r25
 474:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
 476:	28 2b       	or	r18, r24
 478:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 47a:	99 85       	ldd	r25, Y+9	; 0x09
 47c:	89 2f       	mov	r24, r25
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	98 2f       	mov	r25, r24
 482:	88 27       	eor	r24, r24
 484:	92 95       	swap	r25
 486:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
 488:	28 2b       	or	r18, r24
 48a:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
 48c:	4d 81       	ldd	r20, Y+5	; 0x05
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	54 2f       	mov	r21, r20
 492:	44 27       	eor	r20, r20
 494:	52 95       	swap	r21
 496:	55 0f       	add	r21, r21
 498:	50 7e       	andi	r21, 0xE0	; 224
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << (8+0))			|
								((uint16_t)isLedOn[LED_A] << (8+1))	|
								((uint16_t)isLedOn[LED_B] << (8+2))	|
								((uint16_t)isLedOn[LED_PWR_GRN] << (8+3))	|
								((uint16_t)isLedOn[LED_PWR_RED] << (8+4))	|
 49a:	24 2b       	or	r18, r20
 49c:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_LOOP] << (8+5))		|
								((uint16_t)RELAY_AB << (8+6)) |
 49e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <RELAY_AB>
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	90 e4       	ldi	r25, 0x40	; 64
 4a6:	89 9f       	mul	r24, r25
 4a8:	90 2d       	mov	r25, r0
 4aa:	88 27       	eor	r24, r24
 4ac:	11 24       	eor	r1, r1
								(0 << (8+7));

	writeShiftRegs(resultSendWord);
 4ae:	82 2b       	or	r24, r18
 4b0:	93 2b       	or	r25, r19
 4b2:	61 d7       	rcall	.+3778   	; 0x1376 <writeShiftRegs>
 4b4:	29 96       	adiw	r28, 0x09	; 9
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

Disassembly of section .text.board_init:

00001952 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
    1952:	08 95       	ret

Disassembly of section .text.UART_init:

000017e2 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    17e2:	88 ed       	ldi	r24, 0xD8	; 216
    17e4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C= (1<<UCSZ01) | (1<<UCSZ00); 
    17e8:	86 e0       	ldi	r24, 0x06	; 6
    17ea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0;
    17ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=19;
    17f2:	83 e1       	ldi	r24, 0x13	; 19
    17f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    17f8:	08 95       	ret

Disassembly of section .text.__vector_18:

00001060 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
    1060:	1f 92       	push	r1
    1062:	1f b6       	in	r1, 0x3f	; 63
    1064:	1f 92       	push	r1
    1066:	11 24       	eor	r1, r1
    1068:	8f 93       	push	r24
    106a:	9f 93       	push	r25
    106c:	ef 93       	push	r30
    106e:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
    1070:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
    1074:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
    1078:	8c 71       	andi	r24, 0x1C	; 28
    107a:	d1 f4       	brne	.+52     	; 0x10b0 <__vector_18+0x50>
	{
		rx_buffer0[rx_wr_index++] = data;
    107c:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <rx_wr_index>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	8e 0f       	add	r24, r30
    1084:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <rx_wr_index>
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	e7 58       	subi	r30, 0x87	; 135
    108c:	fe 4f       	sbci	r31, 0xFE	; 254
    108e:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
    1090:	80 31       	cpi	r24, 0x10	; 16
    1092:	11 f4       	brne	.+4      	; 0x1098 <__vector_18+0x38>
    1094:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
    1098:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_counter>
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <rx_counter>
    10a2:	80 31       	cpi	r24, 0x10	; 16
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <__vector_18+0x50>
		{
			rx_counter=0;
    10a6:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <rx_counter>
			rx_buffer_overflow=1;
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <rx_buffer_overflow>
		}
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	1f 90       	pop	r1
    10ba:	1f be       	out	0x3f, r1	; 63
    10bc:	1f 90       	pop	r1
    10be:	18 95       	reti

Disassembly of section .text.UART_PopWord:

0000150a <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
    150a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <rx_counter>
    150e:	88 23       	and	r24, r24
    1510:	e1 f3       	breq	.-8      	; 0x150a <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
    1512:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <rx_rd_index>
    1516:	91 e0       	ldi	r25, 0x01	; 1
    1518:	9e 0f       	add	r25, r30
    151a:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <rx_rd_index>
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e7 58       	subi	r30, 0x87	; 135
    1522:	fe 4f       	sbci	r31, 0xFE	; 254
    1524:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
    1526:	90 31       	cpi	r25, 0x10	; 16
    1528:	11 f4       	brne	.+4      	; 0x152e <UART_PopWord+0x24>
    152a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
    152e:	f8 94       	cli
	--rx_counter;
    1530:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_counter>
    1534:	91 50       	subi	r25, 0x01	; 1
    1536:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <rx_counter>
	cpu_irq_enable();
    153a:	78 94       	sei
	return data;
}
    153c:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

000018a6 <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <rx_counter>
    18ac:	91 11       	cpse	r25, r1
    18ae:	01 c0       	rjmp	.+2      	; 0x18b2 <UART_RxBufferNotEmpty+0xc>
    18b0:	80 e0       	ldi	r24, 0x00	; 0
}
    18b2:	08 95       	ret

Disassembly of section .text.__vector_20:

000011bc <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
    11bc:	1f 92       	push	r1
    11be:	1f b6       	in	r1, 0x3f	; 63
    11c0:	1f 92       	push	r1
    11c2:	11 24       	eor	r1, r1
    11c4:	8f 93       	push	r24
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
	if (tx_counter)
    11ca:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <tx_counter>
    11ce:	88 23       	and	r24, r24
    11d0:	a9 f0       	breq	.+42     	; 0x11fc <__vector_20+0x40>
	{
		--tx_counter;
    11d2:	81 50       	subi	r24, 0x01	; 1
    11d4:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
    11d8:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <tx_rd_index>
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	8e 0f       	add	r24, r30
    11e0:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <tx_rd_index>
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	e0 59       	subi	r30, 0x90	; 144
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	80 81       	ld	r24, Z
    11ec:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
    11f0:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <tx_rd_index>
    11f4:	88 30       	cpi	r24, 0x08	; 8
    11f6:	11 f4       	brne	.+4      	; 0x11fc <__vector_20+0x40>
    11f8:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <tx_rd_index>
		#endif
	}
}
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	8f 91       	pop	r24
    1202:	1f 90       	pop	r1
    1204:	1f be       	out	0x3f, r1	; 63
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

Disassembly of section .text.UART_PushWord:

00001330 <UART_PushWord>:

// Write a character to the USART Transmitter buffer
void UART_PushWord(uint8_t c)
{	
	while (tx_counter == TX_BUFFER_SIZE);
    1330:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <tx_counter>
    1334:	98 30       	cpi	r25, 0x08	; 8
    1336:	e1 f3       	breq	.-8      	; 0x1330 <UART_PushWord>
	
	cpu_irq_disable();
    1338:	f8 94       	cli
	
	if (tx_counter || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
    133a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <tx_counter>
    133e:	91 11       	cpse	r25, r1
    1340:	04 c0       	rjmp	.+8      	; 0x134a <UART_PushWord+0x1a>
    1342:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
    1346:	25 fd       	sbrc	r18, 5
    1348:	12 c0       	rjmp	.+36     	; 0x136e <UART_PushWord+0x3e>
	{
		tx_buffer[tx_wr_index++] = c;
    134a:	e0 91 8b 01 	lds	r30, 0x018B	; 0x80018b <tx_wr_index>
    134e:	21 e0       	ldi	r18, 0x01	; 1
    1350:	2e 0f       	add	r18, r30
    1352:	20 93 8b 01 	sts	0x018B, r18	; 0x80018b <tx_wr_index>
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	e0 59       	subi	r30, 0x90	; 144
    135a:	fe 4f       	sbci	r31, 0xFE	; 254
    135c:	80 83       	st	Z, r24
		
		#if TX_BUFFER_SIZE0 != 256
			if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
    135e:	28 30       	cpi	r18, 0x08	; 8
    1360:	11 f4       	brne	.+4      	; 0x1366 <UART_PushWord+0x36>
    1362:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <tx_wr_index>
		#endif
		
		++tx_counter;
    1366:	9f 5f       	subi	r25, 0xFF	; 255
    1368:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <tx_counter>
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <UART_PushWord+0x42>
	}
	else UDR0=c;
    136e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	cpu_irq_enable();
    1372:	78 94       	sei
    1374:	08 95       	ret

Disassembly of section .text:

00000ce4 <__floatunsisf>:
 ce4:	e8 94       	clt
 ce6:	09 c0       	rjmp	.+18     	; 0xcfa <__floatsisf+0x12>

00000ce8 <__floatsisf>:
 ce8:	97 fb       	bst	r25, 7
 cea:	3e f4       	brtc	.+14     	; 0xcfa <__floatsisf+0x12>
 cec:	90 95       	com	r25
 cee:	80 95       	com	r24
 cf0:	70 95       	com	r23
 cf2:	61 95       	neg	r22
 cf4:	7f 4f       	sbci	r23, 0xFF	; 255
 cf6:	8f 4f       	sbci	r24, 0xFF	; 255
 cf8:	9f 4f       	sbci	r25, 0xFF	; 255
 cfa:	99 23       	and	r25, r25
 cfc:	a9 f0       	breq	.+42     	; 0xd28 <__floatsisf+0x40>
 cfe:	f9 2f       	mov	r31, r25
 d00:	96 e9       	ldi	r25, 0x96	; 150
 d02:	bb 27       	eor	r27, r27
 d04:	93 95       	inc	r25
 d06:	f6 95       	lsr	r31
 d08:	87 95       	ror	r24
 d0a:	77 95       	ror	r23
 d0c:	67 95       	ror	r22
 d0e:	b7 95       	ror	r27
 d10:	f1 11       	cpse	r31, r1
 d12:	f8 cf       	rjmp	.-16     	; 0xd04 <__floatsisf+0x1c>
 d14:	fa f4       	brpl	.+62     	; 0xd54 <__floatsisf+0x6c>
 d16:	bb 0f       	add	r27, r27
 d18:	11 f4       	brne	.+4      	; 0xd1e <__floatsisf+0x36>
 d1a:	60 ff       	sbrs	r22, 0
 d1c:	1b c0       	rjmp	.+54     	; 0xd54 <__floatsisf+0x6c>
 d1e:	6f 5f       	subi	r22, 0xFF	; 255
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	16 c0       	rjmp	.+44     	; 0xd54 <__floatsisf+0x6c>
 d28:	88 23       	and	r24, r24
 d2a:	11 f0       	breq	.+4      	; 0xd30 <__floatsisf+0x48>
 d2c:	96 e9       	ldi	r25, 0x96	; 150
 d2e:	11 c0       	rjmp	.+34     	; 0xd52 <__floatsisf+0x6a>
 d30:	77 23       	and	r23, r23
 d32:	21 f0       	breq	.+8      	; 0xd3c <__floatsisf+0x54>
 d34:	9e e8       	ldi	r25, 0x8E	; 142
 d36:	87 2f       	mov	r24, r23
 d38:	76 2f       	mov	r23, r22
 d3a:	05 c0       	rjmp	.+10     	; 0xd46 <__floatsisf+0x5e>
 d3c:	66 23       	and	r22, r22
 d3e:	71 f0       	breq	.+28     	; 0xd5c <__floatsisf+0x74>
 d40:	96 e8       	ldi	r25, 0x86	; 134
 d42:	86 2f       	mov	r24, r22
 d44:	70 e0       	ldi	r23, 0x00	; 0
 d46:	60 e0       	ldi	r22, 0x00	; 0
 d48:	2a f0       	brmi	.+10     	; 0xd54 <__floatsisf+0x6c>
 d4a:	9a 95       	dec	r25
 d4c:	66 0f       	add	r22, r22
 d4e:	77 1f       	adc	r23, r23
 d50:	88 1f       	adc	r24, r24
 d52:	da f7       	brpl	.-10     	; 0xd4a <__floatsisf+0x62>
 d54:	88 0f       	add	r24, r24
 d56:	96 95       	lsr	r25
 d58:	87 95       	ror	r24
 d5a:	97 f9       	bld	r25, 7
 d5c:	08 95       	ret

Disassembly of section .text:

0000190e <__gesf2>:
    190e:	c9 dc       	rcall	.-1646   	; 0x12a2 <__fp_cmp>
    1910:	08 f4       	brcc	.+2      	; 0x1914 <__gesf2+0x6>
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	08 95       	ret

Disassembly of section .text:

000012a2 <__fp_cmp>:
    12a2:	99 0f       	add	r25, r25
    12a4:	00 08       	sbc	r0, r0
    12a6:	55 0f       	add	r21, r21
    12a8:	aa 0b       	sbc	r26, r26
    12aa:	e0 e8       	ldi	r30, 0x80	; 128
    12ac:	fe ef       	ldi	r31, 0xFE	; 254
    12ae:	16 16       	cp	r1, r22
    12b0:	17 06       	cpc	r1, r23
    12b2:	e8 07       	cpc	r30, r24
    12b4:	f9 07       	cpc	r31, r25
    12b6:	c0 f0       	brcs	.+48     	; 0x12e8 <__fp_cmp+0x46>
    12b8:	12 16       	cp	r1, r18
    12ba:	13 06       	cpc	r1, r19
    12bc:	e4 07       	cpc	r30, r20
    12be:	f5 07       	cpc	r31, r21
    12c0:	98 f0       	brcs	.+38     	; 0x12e8 <__fp_cmp+0x46>
    12c2:	62 1b       	sub	r22, r18
    12c4:	73 0b       	sbc	r23, r19
    12c6:	84 0b       	sbc	r24, r20
    12c8:	95 0b       	sbc	r25, r21
    12ca:	39 f4       	brne	.+14     	; 0x12da <__fp_cmp+0x38>
    12cc:	0a 26       	eor	r0, r26
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <__fp_cmp+0x46>
    12d0:	23 2b       	or	r18, r19
    12d2:	24 2b       	or	r18, r20
    12d4:	25 2b       	or	r18, r21
    12d6:	21 f4       	brne	.+8      	; 0x12e0 <__fp_cmp+0x3e>
    12d8:	08 95       	ret
    12da:	0a 26       	eor	r0, r26
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <__fp_cmp+0x3e>
    12de:	a1 40       	sbci	r26, 0x01	; 1
    12e0:	a6 95       	lsr	r26
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	81 1d       	adc	r24, r1
    12e6:	81 1d       	adc	r24, r1
    12e8:	08 95       	ret

Disassembly of section .text.libgcc:

000017fa <__xload_4>:
    17fa:	57 fd       	sbrc	r21, 7
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <__xload_4+0xe>
    17fe:	65 91       	lpm	r22, Z+
    1800:	75 91       	lpm	r23, Z+
    1802:	85 91       	lpm	r24, Z+
    1804:	95 91       	lpm	r25, Z+
    1806:	08 95       	ret
    1808:	61 91       	ld	r22, Z+
    180a:	71 91       	ld	r23, Z+
    180c:	81 91       	ld	r24, Z+
    180e:	91 91       	ld	r25, Z+
    1810:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00001954 <_fini>:
    1954:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00001956 <__funcs_on_exit>:
    1956:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00001958 <__simulator_exit>:
    1958:	08 95       	ret

Disassembly of section .text.exit:

000018b4 <exit>:
    18b4:	ec 01       	movw	r28, r24
    18b6:	4f d0       	rcall	.+158    	; 0x1956 <__funcs_on_exit>
    18b8:	4d d0       	rcall	.+154    	; 0x1954 <_fini>
    18ba:	ce 01       	movw	r24, r28
    18bc:	4d d0       	rcall	.+154    	; 0x1958 <__simulator_exit>
    18be:	ce 01       	movw	r24, r28
    18c0:	4c d0       	rcall	.+152    	; 0x195a <_Exit>

Disassembly of section .text.__simple_malloc:

00000a4c <__simple_malloc>:
 a4c:	a2 e0       	ldi	r26, 0x02	; 2
 a4e:	b0 e0       	ldi	r27, 0x00	; 0
 a50:	eb e2       	ldi	r30, 0x2B	; 43
 a52:	f5 e0       	ldi	r31, 0x05	; 5
 a54:	12 c5       	rjmp	.+2596   	; 0x147a <__prologue_saves__+0x14>
 a56:	8c 01       	movw	r16, r24
 a58:	80 e0       	ldi	r24, 0x00	; 0
 a5a:	90 e0       	ldi	r25, 0x00	; 0
 a5c:	01 15       	cp	r16, r1
 a5e:	11 05       	cpc	r17, r1
 a60:	09 f4       	brne	.+2      	; 0xa64 <__simple_malloc+0x18>
 a62:	53 c0       	rjmp	.+166    	; 0xb0a <__simple_malloc+0xbe>
 a64:	89 2b       	or	r24, r25
 a66:	71 f0       	breq	.+28     	; 0xa84 <__simple_malloc+0x38>
 a68:	02 30       	cpi	r16, 0x02	; 2
 a6a:	11 05       	cpc	r17, r1
 a6c:	10 f4       	brcc	.+4      	; 0xa72 <__simple_malloc+0x26>
 a6e:	02 e0       	ldi	r16, 0x02	; 2
 a70:	10 e0       	ldi	r17, 0x00	; 0
 a72:	c8 01       	movw	r24, r16
 a74:	c5 da       	rcall	.-2678   	; 0x0 <__vectors>
 a76:	00 97       	sbiw	r24, 0x00	; 0
 a78:	09 f0       	breq	.+2      	; 0xa7c <__simple_malloc+0x30>
 a7a:	4e c0       	rjmp	.+156    	; 0xb18 <__simple_malloc+0xcc>
 a7c:	92 e0       	ldi	r25, 0x02	; 2
 a7e:	e9 2e       	mov	r14, r25
 a80:	f1 2c       	mov	r15, r1
 a82:	04 c0       	rjmp	.+8      	; 0xa8c <__simple_malloc+0x40>
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	e8 2e       	mov	r14, r24
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	f8 2e       	mov	r15, r24
 a8c:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <end.1483>
 a90:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <end.1483+0x1>
 a94:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <cur.1482>
 a98:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <cur.1482+0x1>
 a9c:	82 1b       	sub	r24, r18
 a9e:	93 0b       	sbc	r25, r19
 aa0:	67 01       	movw	r12, r14
 aa2:	c0 0e       	add	r12, r16
 aa4:	d1 1e       	adc	r13, r17
 aa6:	80 17       	cp	r24, r16
 aa8:	91 07       	cpc	r25, r17
 aaa:	e8 f4       	brcc	.+58     	; 0xae6 <__simple_malloc+0x9a>
 aac:	da 82       	std	Y+2, r13	; 0x02
 aae:	c9 82       	std	Y+1, r12	; 0x01
 ab0:	ce 01       	movw	r24, r28
 ab2:	01 96       	adiw	r24, 0x01	; 1
 ab4:	04 d2       	rcall	.+1032   	; 0xebe <__expand_heap>
 ab6:	00 97       	sbiw	r24, 0x00	; 0
 ab8:	19 f4       	brne	.+6      	; 0xac0 <__simple_malloc+0x74>
 aba:	80 e0       	ldi	r24, 0x00	; 0
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	2c c0       	rjmp	.+88     	; 0xb18 <__simple_malloc+0xcc>
 ac0:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <end.1483>
 ac4:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <end.1483+0x1>
 ac8:	82 17       	cp	r24, r18
 aca:	93 07       	cpc	r25, r19
 acc:	21 f0       	breq	.+8      	; 0xad6 <__simple_malloc+0x8a>
 ace:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <cur.1482+0x1>
 ad2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <cur.1482>
 ad6:	29 81       	ldd	r18, Y+1	; 0x01
 ad8:	3a 81       	ldd	r19, Y+2	; 0x02
 ada:	82 0f       	add	r24, r18
 adc:	93 1f       	adc	r25, r19
 ade:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <end.1483+0x1>
 ae2:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <end.1483>
 ae6:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <cur.1482>
 aea:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <cur.1482+0x1>
 aee:	cf 01       	movw	r24, r30
 af0:	e1 14       	cp	r14, r1
 af2:	f1 04       	cpc	r15, r1
 af4:	19 f0       	breq	.+6      	; 0xafc <__simple_malloc+0xb0>
 af6:	02 96       	adiw	r24, 0x02	; 2
 af8:	11 83       	std	Z+1, r17	; 0x01
 afa:	00 83       	st	Z, r16
 afc:	ce 0e       	add	r12, r30
 afe:	df 1e       	adc	r13, r31
 b00:	d0 92 a9 01 	sts	0x01A9, r13	; 0x8001a9 <cur.1482+0x1>
 b04:	c0 92 a8 01 	sts	0x01A8, r12	; 0x8001a8 <cur.1482>
 b08:	07 c0       	rjmp	.+14     	; 0xb18 <__simple_malloc+0xcc>
 b0a:	00 97       	sbiw	r24, 0x00	; 0
 b0c:	09 f0       	breq	.+2      	; 0xb10 <__simple_malloc+0xc4>
 b0e:	af cf       	rjmp	.-162    	; 0xa6e <__simple_malloc+0x22>
 b10:	7c 01       	movw	r14, r24
 b12:	01 e0       	ldi	r16, 0x01	; 1
 b14:	10 e0       	ldi	r17, 0x00	; 0
 b16:	ba cf       	rjmp	.-140    	; 0xa8c <__simple_malloc+0x40>
 b18:	22 96       	adiw	r28, 0x02	; 2
 b1a:	e8 e0       	ldi	r30, 0x08	; 8
 b1c:	e5 c4       	rjmp	.+2506   	; 0x14e8 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

0000195a <_Exit>:
    195a:	bc d3       	rcall	.+1912   	; 0x20d4 <__TEXT_REGION_LENGTH__+0xd4>

Disassembly of section .text.__expand_heap:

00000ebe <__expand_heap>:
 ebe:	fc 01       	movw	r30, r24
 ec0:	40 81       	ld	r20, Z
 ec2:	51 81       	ldd	r21, Z+1	; 0x01
 ec4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__brkval>
 ec8:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__brkval+0x1>
 ecc:	89 2b       	or	r24, r25
 ece:	41 f4       	brne	.+16     	; 0xee0 <__expand_heap+0x22>
 ed0:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <__malloc_heap_start>
 ed4:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <__malloc_heap_start+0x1>
 ed8:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__brkval+0x1>
 edc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__brkval>
 ee0:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <__malloc_heap_end>
 ee4:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <__malloc_heap_end+0x1>
 ee8:	00 97       	sbiw	r24, 0x00	; 0
 eea:	19 f4       	brne	.+6      	; 0xef2 <__expand_heap+0x34>
 eec:	8d b7       	in	r24, 0x3d	; 61
 eee:	9e b7       	in	r25, 0x3e	; 62
 ef0:	80 97       	sbiw	r24, 0x20	; 32
 ef2:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
 ef6:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
 efa:	28 17       	cp	r18, r24
 efc:	39 07       	cpc	r19, r25
 efe:	48 f0       	brcs	.+18     	; 0xf12 <__expand_heap+0x54>
 f00:	8c e0       	ldi	r24, 0x0C	; 12
 f02:	90 e0       	ldi	r25, 0x00	; 0
 f04:	90 93 8d 01 	sts	0x018D, r25	; 0x80018d <__errno_val+0x1>
 f08:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <__errno_val>
 f0c:	80 e0       	ldi	r24, 0x00	; 0
 f0e:	90 e0       	ldi	r25, 0x00	; 0
 f10:	08 95       	ret
 f12:	82 1b       	sub	r24, r18
 f14:	93 0b       	sbc	r25, r19
 f16:	84 17       	cp	r24, r20
 f18:	95 07       	cpc	r25, r21
 f1a:	90 f3       	brcs	.-28     	; 0xf00 <__expand_heap+0x42>
 f1c:	42 0f       	add	r20, r18
 f1e:	53 1f       	adc	r21, r19
 f20:	50 93 ab 01 	sts	0x01AB, r21	; 0x8001ab <__brkval+0x1>
 f24:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <__brkval>
 f28:	c9 01       	movw	r24, r18
 f2a:	08 95       	ret

Disassembly of section .text.avrlibc:

0000171a <eeprom_read_block>:
    171a:	ba 01       	movw	r22, r20
    171c:	a9 01       	movw	r20, r18
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22

00001722 <eeprom_read_blraw>:
    1722:	fc 01       	movw	r30, r24
    1724:	f9 99       	sbic	0x1f, 1	; 31
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <eeprom_read_blraw+0x2>
    1728:	06 c0       	rjmp	.+12     	; 0x1736 <eeprom_read_blraw+0x14>
    172a:	f2 bd       	out	0x22, r31	; 34
    172c:	e1 bd       	out	0x21, r30	; 33
    172e:	f8 9a       	sbi	0x1f, 0	; 31
    1730:	31 96       	adiw	r30, 0x01	; 1
    1732:	00 b4       	in	r0, 0x20	; 32
    1734:	0d 92       	st	X+, r0
    1736:	41 50       	subi	r20, 0x01	; 1
    1738:	50 40       	sbci	r21, 0x00	; 0
    173a:	b8 f7       	brcc	.-18     	; 0x172a <eeprom_read_blraw+0x8>
    173c:	08 95       	ret

Disassembly of section .text.avrlibc:

00001876 <eeprom_read_byte>:
    1876:	cb 01       	movw	r24, r22
    1878:	f9 99       	sbic	0x1f, 1	; 31
    187a:	fe cf       	rjmp	.-4      	; 0x1878 <eeprom_read_byte+0x2>
    187c:	92 bd       	out	0x22, r25	; 34
    187e:	81 bd       	out	0x21, r24	; 33
    1880:	f8 9a       	sbi	0x1f, 0	; 31
    1882:	99 27       	eor	r25, r25
    1884:	80 b5       	in	r24, 0x20	; 32
    1886:	08 95       	ret

Disassembly of section .text.avrlibc:

000018e6 <eeprom_read_word>:
    18e6:	cb 01       	movw	r24, r22
    18e8:	a8 e1       	ldi	r26, 0x18	; 24
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	42 e0       	ldi	r20, 0x02	; 2
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	18 cf       	rjmp	.-464    	; 0x1722 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

0000153e <eeprom_write_block>:
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	6b 01       	movw	r12, r22
    1546:	e8 2e       	mov	r14, r24
    1548:	ca 01       	movw	r24, r20
    154a:	42 2f       	mov	r20, r18
    154c:	73 2f       	mov	r23, r19
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <eeprom_write_block+0x24>
    1550:	f6 01       	movw	r30, r12
    1552:	5e 2d       	mov	r21, r14
    1554:	d3 d1       	rcall	.+934    	; 0x18fc <__xload_1>
    1556:	26 2f       	mov	r18, r22
    1558:	12 d1       	rcall	.+548    	; 0x177e <eeprom_write_r18>
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	c3 1a       	sub	r12, r19
    155e:	d3 0a       	sbc	r13, r19
    1560:	e3 0a       	sbc	r14, r19
    1562:	41 50       	subi	r20, 0x01	; 1
    1564:	70 40       	sbci	r23, 0x00	; 0
    1566:	a0 f7       	brcc	.-24     	; 0x1550 <eeprom_write_block+0x12>
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	08 95       	ret

Disassembly of section .text.avrlibc:

0000177c <eeprom_write_byte>:
    177c:	26 2f       	mov	r18, r22

0000177e <eeprom_write_r18>:
    177e:	f9 99       	sbic	0x1f, 1	; 31
    1780:	fe cf       	rjmp	.-4      	; 0x177e <eeprom_write_r18>
    1782:	1f ba       	out	0x1f, r1	; 31
    1784:	92 bd       	out	0x22, r25	; 34
    1786:	81 bd       	out	0x21, r24	; 33
    1788:	20 bd       	out	0x20, r18	; 32
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	f8 94       	cli
    178e:	fa 9a       	sbi	0x1f, 2	; 31
    1790:	f9 9a       	sbi	0x1f, 1	; 31
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	08 95       	ret

Disassembly of section .text.avrlibc:

00001946 <eeprom_write_word>:
    1946:	1a df       	rcall	.-460    	; 0x177c <eeprom_write_byte>
    1948:	27 2f       	mov	r18, r23
    194a:	19 cf       	rjmp	.-462    	; 0x177e <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

00001466 <__prologue_saves__>:
    1466:	2f 92       	push	r2
    1468:	3f 92       	push	r3
    146a:	4f 92       	push	r4
    146c:	5f 92       	push	r5
    146e:	6f 92       	push	r6
    1470:	7f 92       	push	r7
    1472:	8f 92       	push	r8
    1474:	9f 92       	push	r9
    1476:	af 92       	push	r10
    1478:	bf 92       	push	r11
    147a:	cf 92       	push	r12
    147c:	df 92       	push	r13
    147e:	ef 92       	push	r14
    1480:	ff 92       	push	r15
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	ca 1b       	sub	r28, r26
    1490:	db 0b       	sbc	r29, r27
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000014d4 <__epilogue_restores__>:
    14d4:	2a 88       	ldd	r2, Y+18	; 0x12
    14d6:	39 88       	ldd	r3, Y+17	; 0x11
    14d8:	48 88       	ldd	r4, Y+16	; 0x10
    14da:	5f 84       	ldd	r5, Y+15	; 0x0f
    14dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    14de:	7d 84       	ldd	r7, Y+13	; 0x0d
    14e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    14e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    14e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    14e6:	b9 84       	ldd	r11, Y+9	; 0x09
    14e8:	c8 84       	ldd	r12, Y+8	; 0x08
    14ea:	df 80       	ldd	r13, Y+7	; 0x07
    14ec:	ee 80       	ldd	r14, Y+6	; 0x06
    14ee:	fd 80       	ldd	r15, Y+5	; 0x05
    14f0:	0c 81       	ldd	r16, Y+4	; 0x04
    14f2:	1b 81       	ldd	r17, Y+3	; 0x03
    14f4:	aa 81       	ldd	r26, Y+2	; 0x02
    14f6:	b9 81       	ldd	r27, Y+1	; 0x01
    14f8:	ce 0f       	add	r28, r30
    14fa:	d1 1d       	adc	r29, r1
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	ed 01       	movw	r28, r26
    1508:	08 95       	ret

Disassembly of section .text.libgcc:

000018fc <__xload_1>:
    18fc:	57 fd       	sbrc	r21, 7
    18fe:	60 81       	ld	r22, Z
    1900:	57 ff       	sbrs	r21, 7
    1902:	64 91       	lpm	r22, Z
    1904:	08 95       	ret
