
SH100_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000131c  2**0
                  ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800100  00800100  0000131c  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000007e  00000000  00000000  0000134b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000002e8  00000000  00000000  000013d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005043  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fec  00000000  00000000  000066fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017e4  00000000  00000000  000076e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00008ecc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  000093c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001164  00000000  00000000  000098fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000aa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000002  000011da  000011da  000012ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000ac48  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.main    00000022  00001072  00001072  00001186  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_16 00000170  00000502  00000502  00000616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.leaveDefSettings_cnt 00000001  008001a8  008001a8  0000131c  2**0
                  ALLOC
 18 .bss.swProgrammingMode_cnt 00000001  008001a9  008001a9  0000131c  2**0
                  ALLOC
 19 .text.MIDI_IsStatusWord 00000008  000011b4  000011b4  000012c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.MIDI_IsSysRealTime 0000000c  00001188  00001188  0000129c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.MIDI_GetStatusType 00000040  00000d5e  00000d5e  00000e72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.isEqualCommands 00000014  00001120  00001120  00001234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.loadCommSetFromMemory 0000007a  000009c4  000009c4  00000ad8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.setMidiLeds 00000052  00000c28  00000c28  00000d3c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.MIDICTRL_Init 0000002a  00000f88  00000f88  0000109c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.MIDICTRL_MidiMode 00000006  000011bc  000011bc  000012d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.MIDICTRL_SetProgrammingButton 0000002e  00000f5a  00000f5a  0000106e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.MIDICTRL_SwitchMode 0000003c  00000ddc  00000ddc  00000ef0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.MIDICTRL_SetMidiChannel 00000006  000011c2  000011c2  000012d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.MIDICTRL_OmniModeEn 00000006  000011c8  000011c8  000012dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.MIDICTRL_MuteCommEn 00000006  000011ce  000011ce  000012e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.programmBtn 0000004c  00000cc8  00000cc8  00000ddc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.MIDICTRL_StoreUserCommands 00000036  00000e88  00000e88  00000f9c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.MIDICTRL_DiscardCommands 00000014  00001134  00001134  00001248  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.indicateMidiError 00000024  0000102a  0000102a  0000113e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.MIDICTRL_HandleCommand 00000142  00000672  00000672  00000786  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__vector_13 00000054  00000bd4  00000bd4  00000ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .data.defaultCommands 00000018  00800186  000011ec  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 39 .progmemx.data.muteCommand 00000004  000001c0  000001c0  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 40 .bss.channelNum 00000001  008001aa  008001aa  0000131c  2**0
                  ALLOC
 41 .bss.muteCommandEnabled 00000001  008001ab  008001ab  0000131c  2**0
                  ALLOC
 42 .bss.omniModeEnabled 00000001  008001ac  008001ac  0000131c  2**0
                  ALLOC
 43 .text.MIDI_ParserTask 0000013e  000007b4  000007b4  000008c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .bss.state    00000001  008001ad  008001ad  0000131c  2**0
                  ALLOC
 45 .text.setChannelLeds 00000022  00001094  00001094  000011a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.SH100CTRL_SetAmpLeds 00000026  00001004  00001004  00001118  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.SH100CTRL_SwChannel 0000000a  000011a0  000011a0  000012b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.SH100CTRL_SwLoop 0000001e  000010b6  000010b6  000011ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.SH100CTRL_SwAB 0000002a  00000fb2  00000fb2  000010c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.SH100CTRL_MuteAmp 00000002  000011dc  000011dc  000012f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.SH100CTRL_SetAmpState 0000003e  00000d9e  00000d9e  00000eb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.SH100CTRL_Init 00000062  00000b12  00000b12  00000c26  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.SH100HW_Init 00000066  00000aac  00000aac  00000bc0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.SH100HW_GetButtonsState 00000012  00001148  00001148  0000125c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.SH100HW_SwitchCh 00000002  000011de  000011de  000012f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.SH100HW_LoopEn 00000002  000011e0  000011e0  000012f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.SH100HW_SwitchAB 00000002  000011e2  000011e2  000012f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.SH100HW_SetNewLedState 00000038  00000e18  00000e18  00000f2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.SH100HW_SetPreviousLedState 00000028  00000fdc  00000fdc  000010f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.readButtonsState 00000186  0000037c  0000037c  00000490  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.writeShiftRegs 0000004a  00000d14  00000d14  00000e28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SH100HW_MainTask 000001b8  000001c4  000001c4  000002d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .bss.fastBlink 00000001  008001ae  008001ae  0000131c  2**0
                  ALLOC
 64 .bss.slowBlink 00000001  008001af  008001af  0000131c  2**0
                  ALLOC
 65 .bss.blinkCounter 00000001  008001b0  008001b0  0000131c  2**0
                  ALLOC
 66 .text.UART_init 00000018  000010f0  000010f0  00001204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.__vector_18 00000060  00000b74  00000b74  00000c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.UART_PopWord 00000034  00000ef4  00000ef4  00001008  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.UART_RxBufferNotEmpty 0000000e  0000116c  0000116c  00001280  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_20 0000004e  00000c7a  00000c7a  00000d8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.libgcc  00000018  00001108  00001108  0000121c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.__dummy_fini 00000002  000011e4  000011e4  000012f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.__dummy_funcs_on_exit 00000002  000011e6  000011e6  000012fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.__dummy_simulator_exit 00000002  000011e8  000011e8  000012fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.exit    0000000e  0000117a  0000117a  0000128e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__simple_malloc 000000d2  000008f2  000008f2  00000a06  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .bss.end.1483 00000002  0080019e  0080019e  0000131c  2**0
                  ALLOC
 78 .bss.cur.1482 00000002  008001a0  008001a0  0000131c  2**0
                  ALLOC
 79 .text._Exit   00000002  000011ea  000011ea  000012fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__expand_heap 0000006e  00000a3e  00000a3e  00000b52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .bss.__brkval 00000002  008001a2  008001a2  0000131c  2**0
                  ALLOC
 82 .data.__malloc_heap_end 00000002  008001a4  00001204  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 83 .data.__malloc_heap_start 00000002  008001a6  00001206  0000131a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 84 .text.avrlibc 00000024  0000104e  0000104e  00001162  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 85 .text.avrlibc 00000012  0000115a  0000115a  0000126e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 86 .text.avrlibc 0000000c  00001194  00001194  000012a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.avrlibc 00000032  00000f28  00000f28  0000103c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.avrlibc 0000001c  000010d4  000010d4  000011e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.avrlibc 00000006  000011d4  000011d4  000012e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .text.libgcc.prologue 00000038  00000e50  00000e50  00000f64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 91 .text.libgcc.prologue 00000036  00000ebe  00000ebe  00000fd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.libgcc  0000000a  000011aa  000011aa  000012be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	b7 c0       	rjmp	.+366    	; 0x170 <__ctors_end>
   2:	eb c8       	rjmp	.-3626   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
   4:	ea c8       	rjmp	.-3628   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
   6:	e9 c8       	rjmp	.-3630   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
   8:	e8 c8       	rjmp	.-3632   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
   a:	e7 c8       	rjmp	.-3634   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
   c:	e6 c8       	rjmp	.-3636   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
   e:	e5 c8       	rjmp	.-3638   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  10:	e4 c8       	rjmp	.-3640   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  12:	e3 c8       	rjmp	.-3642   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  14:	e2 c8       	rjmp	.-3644   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  16:	e1 c8       	rjmp	.-3646   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  18:	e0 c8       	rjmp	.-3648   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  1a:	dc c5       	rjmp	.+3000   	; 0xbd4 <__vector_13>
  1c:	de c8       	rjmp	.-3652   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  1e:	dd c8       	rjmp	.-3654   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  20:	70 c2       	rjmp	.+1248   	; 0x502 <__vector_16>
  22:	db c8       	rjmp	.-3658   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  24:	a7 c5       	rjmp	.+2894   	; 0xb74 <__vector_18>
  26:	d9 c8       	rjmp	.-3662   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  28:	28 c6       	rjmp	.+3152   	; 0xc7a <__vector_20>
  2a:	d7 c8       	rjmp	.-3666   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  2c:	d6 c8       	rjmp	.-3668   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  2e:	d5 c8       	rjmp	.-3670   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  30:	d4 c8       	rjmp	.-3672   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  32:	d3 c8       	rjmp	.-3674   	; 0xfffff1da <__eeprom_end+0xff7ef1da>
  34:	9e c6       	rjmp	.+3388   	; 0xd72 <MIDI_GetStatusType+0x14>
  36:	af c6       	rjmp	.+3422   	; 0xd96 <MIDI_GetStatusType+0x38>
  38:	ae c6       	rjmp	.+3420   	; 0xd96 <MIDI_GetStatusType+0x38>
  3a:	ad c6       	rjmp	.+3418   	; 0xd96 <MIDI_GetStatusType+0x38>
  3c:	ac c6       	rjmp	.+3416   	; 0xd96 <MIDI_GetStatusType+0x38>
  3e:	ab c6       	rjmp	.+3414   	; 0xd96 <MIDI_GetStatusType+0x38>
  40:	aa c6       	rjmp	.+3412   	; 0xd96 <MIDI_GetStatusType+0x38>
  42:	a9 c6       	rjmp	.+3410   	; 0xd96 <MIDI_GetStatusType+0x38>
  44:	a8 c6       	rjmp	.+3408   	; 0xd96 <MIDI_GetStatusType+0x38>
  46:	a7 c6       	rjmp	.+3406   	; 0xd96 <MIDI_GetStatusType+0x38>
  48:	a6 c6       	rjmp	.+3404   	; 0xd96 <MIDI_GetStatusType+0x38>
  4a:	a5 c6       	rjmp	.+3402   	; 0xd96 <MIDI_GetStatusType+0x38>
  4c:	a4 c6       	rjmp	.+3400   	; 0xd96 <MIDI_GetStatusType+0x38>
  4e:	a3 c6       	rjmp	.+3398   	; 0xd96 <MIDI_GetStatusType+0x38>
  50:	a2 c6       	rjmp	.+3396   	; 0xd96 <MIDI_GetStatusType+0x38>
  52:	a1 c6       	rjmp	.+3394   	; 0xd96 <MIDI_GetStatusType+0x38>
  54:	8e c6       	rjmp	.+3356   	; 0xd72 <MIDI_GetStatusType+0x14>
  56:	9f c6       	rjmp	.+3390   	; 0xd96 <MIDI_GetStatusType+0x38>
  58:	9e c6       	rjmp	.+3388   	; 0xd96 <MIDI_GetStatusType+0x38>
  5a:	9d c6       	rjmp	.+3386   	; 0xd96 <MIDI_GetStatusType+0x38>
  5c:	9c c6       	rjmp	.+3384   	; 0xd96 <MIDI_GetStatusType+0x38>
  5e:	9b c6       	rjmp	.+3382   	; 0xd96 <MIDI_GetStatusType+0x38>
  60:	9a c6       	rjmp	.+3380   	; 0xd96 <MIDI_GetStatusType+0x38>
  62:	99 c6       	rjmp	.+3378   	; 0xd96 <MIDI_GetStatusType+0x38>
  64:	98 c6       	rjmp	.+3376   	; 0xd96 <MIDI_GetStatusType+0x38>
  66:	97 c6       	rjmp	.+3374   	; 0xd96 <MIDI_GetStatusType+0x38>
  68:	96 c6       	rjmp	.+3372   	; 0xd96 <MIDI_GetStatusType+0x38>
  6a:	95 c6       	rjmp	.+3370   	; 0xd96 <MIDI_GetStatusType+0x38>
  6c:	94 c6       	rjmp	.+3368   	; 0xd96 <MIDI_GetStatusType+0x38>
  6e:	93 c6       	rjmp	.+3366   	; 0xd96 <MIDI_GetStatusType+0x38>
  70:	92 c6       	rjmp	.+3364   	; 0xd96 <MIDI_GetStatusType+0x38>
  72:	91 c6       	rjmp	.+3362   	; 0xd96 <MIDI_GetStatusType+0x38>
  74:	7e c6       	rjmp	.+3324   	; 0xd72 <MIDI_GetStatusType+0x14>
  76:	8f c6       	rjmp	.+3358   	; 0xd96 <MIDI_GetStatusType+0x38>
  78:	8e c6       	rjmp	.+3356   	; 0xd96 <MIDI_GetStatusType+0x38>
  7a:	8d c6       	rjmp	.+3354   	; 0xd96 <MIDI_GetStatusType+0x38>
  7c:	8c c6       	rjmp	.+3352   	; 0xd96 <MIDI_GetStatusType+0x38>
  7e:	8b c6       	rjmp	.+3350   	; 0xd96 <MIDI_GetStatusType+0x38>
  80:	8a c6       	rjmp	.+3348   	; 0xd96 <MIDI_GetStatusType+0x38>
  82:	89 c6       	rjmp	.+3346   	; 0xd96 <MIDI_GetStatusType+0x38>
  84:	88 c6       	rjmp	.+3344   	; 0xd96 <MIDI_GetStatusType+0x38>
  86:	87 c6       	rjmp	.+3342   	; 0xd96 <MIDI_GetStatusType+0x38>
  88:	86 c6       	rjmp	.+3340   	; 0xd96 <MIDI_GetStatusType+0x38>
  8a:	85 c6       	rjmp	.+3338   	; 0xd96 <MIDI_GetStatusType+0x38>
  8c:	84 c6       	rjmp	.+3336   	; 0xd96 <MIDI_GetStatusType+0x38>
  8e:	83 c6       	rjmp	.+3334   	; 0xd96 <MIDI_GetStatusType+0x38>
  90:	82 c6       	rjmp	.+3332   	; 0xd96 <MIDI_GetStatusType+0x38>
  92:	81 c6       	rjmp	.+3330   	; 0xd96 <MIDI_GetStatusType+0x38>
  94:	6e c6       	rjmp	.+3292   	; 0xd72 <MIDI_GetStatusType+0x14>
  96:	7f c6       	rjmp	.+3326   	; 0xd96 <MIDI_GetStatusType+0x38>
  98:	7e c6       	rjmp	.+3324   	; 0xd96 <MIDI_GetStatusType+0x38>
  9a:	7d c6       	rjmp	.+3322   	; 0xd96 <MIDI_GetStatusType+0x38>
  9c:	7c c6       	rjmp	.+3320   	; 0xd96 <MIDI_GetStatusType+0x38>
  9e:	7b c6       	rjmp	.+3318   	; 0xd96 <MIDI_GetStatusType+0x38>
  a0:	7a c6       	rjmp	.+3316   	; 0xd96 <MIDI_GetStatusType+0x38>
  a2:	79 c6       	rjmp	.+3314   	; 0xd96 <MIDI_GetStatusType+0x38>
  a4:	78 c6       	rjmp	.+3312   	; 0xd96 <MIDI_GetStatusType+0x38>
  a6:	77 c6       	rjmp	.+3310   	; 0xd96 <MIDI_GetStatusType+0x38>
  a8:	76 c6       	rjmp	.+3308   	; 0xd96 <MIDI_GetStatusType+0x38>
  aa:	75 c6       	rjmp	.+3306   	; 0xd96 <MIDI_GetStatusType+0x38>
  ac:	74 c6       	rjmp	.+3304   	; 0xd96 <MIDI_GetStatusType+0x38>
  ae:	73 c6       	rjmp	.+3302   	; 0xd96 <MIDI_GetStatusType+0x38>
  b0:	72 c6       	rjmp	.+3300   	; 0xd96 <MIDI_GetStatusType+0x38>
  b2:	71 c6       	rjmp	.+3298   	; 0xd96 <MIDI_GetStatusType+0x38>
  b4:	72 c6       	rjmp	.+3300   	; 0xd9a <MIDI_GetStatusType+0x3c>
  b6:	6f c6       	rjmp	.+3294   	; 0xd96 <MIDI_GetStatusType+0x38>
  b8:	6e c6       	rjmp	.+3292   	; 0xd96 <MIDI_GetStatusType+0x38>
  ba:	6d c6       	rjmp	.+3290   	; 0xd96 <MIDI_GetStatusType+0x38>
  bc:	6c c6       	rjmp	.+3288   	; 0xd96 <MIDI_GetStatusType+0x38>
  be:	6b c6       	rjmp	.+3286   	; 0xd96 <MIDI_GetStatusType+0x38>
  c0:	6a c6       	rjmp	.+3284   	; 0xd96 <MIDI_GetStatusType+0x38>
  c2:	69 c6       	rjmp	.+3282   	; 0xd96 <MIDI_GetStatusType+0x38>
  c4:	68 c6       	rjmp	.+3280   	; 0xd96 <MIDI_GetStatusType+0x38>
  c6:	67 c6       	rjmp	.+3278   	; 0xd96 <MIDI_GetStatusType+0x38>
  c8:	66 c6       	rjmp	.+3276   	; 0xd96 <MIDI_GetStatusType+0x38>
  ca:	65 c6       	rjmp	.+3274   	; 0xd96 <MIDI_GetStatusType+0x38>
  cc:	64 c6       	rjmp	.+3272   	; 0xd96 <MIDI_GetStatusType+0x38>
  ce:	63 c6       	rjmp	.+3270   	; 0xd96 <MIDI_GetStatusType+0x38>
  d0:	62 c6       	rjmp	.+3268   	; 0xd96 <MIDI_GetStatusType+0x38>
  d2:	61 c6       	rjmp	.+3266   	; 0xd96 <MIDI_GetStatusType+0x38>
  d4:	62 c6       	rjmp	.+3268   	; 0xd9a <MIDI_GetStatusType+0x3c>
  d6:	5f c6       	rjmp	.+3262   	; 0xd96 <MIDI_GetStatusType+0x38>
  d8:	5e c6       	rjmp	.+3260   	; 0xd96 <MIDI_GetStatusType+0x38>
  da:	5d c6       	rjmp	.+3258   	; 0xd96 <MIDI_GetStatusType+0x38>
  dc:	5c c6       	rjmp	.+3256   	; 0xd96 <MIDI_GetStatusType+0x38>
  de:	5b c6       	rjmp	.+3254   	; 0xd96 <MIDI_GetStatusType+0x38>
  e0:	5a c6       	rjmp	.+3252   	; 0xd96 <MIDI_GetStatusType+0x38>
  e2:	59 c6       	rjmp	.+3250   	; 0xd96 <MIDI_GetStatusType+0x38>
  e4:	58 c6       	rjmp	.+3248   	; 0xd96 <MIDI_GetStatusType+0x38>
  e6:	57 c6       	rjmp	.+3246   	; 0xd96 <MIDI_GetStatusType+0x38>
  e8:	56 c6       	rjmp	.+3244   	; 0xd96 <MIDI_GetStatusType+0x38>
  ea:	55 c6       	rjmp	.+3242   	; 0xd96 <MIDI_GetStatusType+0x38>
  ec:	54 c6       	rjmp	.+3240   	; 0xd96 <MIDI_GetStatusType+0x38>
  ee:	53 c6       	rjmp	.+3238   	; 0xd96 <MIDI_GetStatusType+0x38>
  f0:	52 c6       	rjmp	.+3236   	; 0xd96 <MIDI_GetStatusType+0x38>
  f2:	51 c6       	rjmp	.+3234   	; 0xd96 <MIDI_GetStatusType+0x38>
  f4:	3e c6       	rjmp	.+3196   	; 0xd72 <MIDI_GetStatusType+0x14>
  f6:	4f c6       	rjmp	.+3230   	; 0xd96 <MIDI_GetStatusType+0x38>
  f8:	4e c6       	rjmp	.+3228   	; 0xd96 <MIDI_GetStatusType+0x38>
  fa:	4d c6       	rjmp	.+3226   	; 0xd96 <MIDI_GetStatusType+0x38>
  fc:	4c c6       	rjmp	.+3224   	; 0xd96 <MIDI_GetStatusType+0x38>
  fe:	4b c6       	rjmp	.+3222   	; 0xd96 <MIDI_GetStatusType+0x38>
 100:	4a c6       	rjmp	.+3220   	; 0xd96 <MIDI_GetStatusType+0x38>
 102:	49 c6       	rjmp	.+3218   	; 0xd96 <MIDI_GetStatusType+0x38>
 104:	48 c6       	rjmp	.+3216   	; 0xd96 <MIDI_GetStatusType+0x38>
 106:	47 c6       	rjmp	.+3214   	; 0xd96 <MIDI_GetStatusType+0x38>
 108:	46 c6       	rjmp	.+3212   	; 0xd96 <MIDI_GetStatusType+0x38>
 10a:	45 c6       	rjmp	.+3210   	; 0xd96 <MIDI_GetStatusType+0x38>
 10c:	44 c6       	rjmp	.+3208   	; 0xd96 <MIDI_GetStatusType+0x38>
 10e:	43 c6       	rjmp	.+3206   	; 0xd96 <MIDI_GetStatusType+0x38>
 110:	42 c6       	rjmp	.+3204   	; 0xd96 <MIDI_GetStatusType+0x38>
 112:	41 c6       	rjmp	.+3202   	; 0xd96 <MIDI_GetStatusType+0x38>
 114:	3c c6       	rjmp	.+3192   	; 0xd8e <MIDI_GetStatusType+0x30>
 116:	41 c6       	rjmp	.+3202   	; 0xd9a <MIDI_GetStatusType+0x3c>
 118:	2c c6       	rjmp	.+3160   	; 0xd72 <MIDI_GetStatusType+0x14>
 11a:	3f c6       	rjmp	.+3198   	; 0xd9a <MIDI_GetStatusType+0x3c>
 11c:	3c c6       	rjmp	.+3192   	; 0xd96 <MIDI_GetStatusType+0x38>
 11e:	3b c6       	rjmp	.+3190   	; 0xd96 <MIDI_GetStatusType+0x38>
 120:	3a c6       	rjmp	.+3188   	; 0xd96 <MIDI_GetStatusType+0x38>
 122:	37 c6       	rjmp	.+3182   	; 0xd92 <MIDI_GetStatusType+0x34>
 124:	28 c6       	rjmp	.+3152   	; 0xd76 <MIDI_GetStatusType+0x18>
 126:	37 c6       	rjmp	.+3182   	; 0xd96 <MIDI_GetStatusType+0x38>
 128:	28 c6       	rjmp	.+3152   	; 0xd7a <MIDI_GetStatusType+0x1c>
 12a:	29 c6       	rjmp	.+3154   	; 0xd7e <MIDI_GetStatusType+0x20>
 12c:	2a c6       	rjmp	.+3156   	; 0xd82 <MIDI_GetStatusType+0x24>
 12e:	33 c6       	rjmp	.+3174   	; 0xd96 <MIDI_GetStatusType+0x38>
 130:	2a c6       	rjmp	.+3156   	; 0xd86 <MIDI_GetStatusType+0x28>
 132:	2b c6       	rjmp	.+3158   	; 0xd8a <MIDI_GetStatusType+0x2c>
 134:	4b c3       	rjmp	.+1686   	; 0x7cc <MIDI_ParserTask+0x18>
 136:	57 c3       	rjmp	.+1710   	; 0x7e6 <MIDI_ParserTask+0x32>
 138:	8a c3       	rjmp	.+1812   	; 0x84e <MIDI_ParserTask+0x9a>
 13a:	bd c3       	rjmp	.+1914   	; 0x8b6 <MIDI_ParserTask+0x102>
 13c:	9d c3       	rjmp	.+1850   	; 0x878 <MIDI_ParserTask+0xc4>
 13e:	cc c3       	rjmp	.+1944   	; 0x8d8 <MIDI_ParserTask+0x124>
 140:	cf c3       	rjmp	.+1950   	; 0x8e0 <MIDI_ParserTask+0x12c>
 142:	28 c1       	rjmp	.+592    	; 0x394 <readButtonsState+0x18>
 144:	3b c1       	rjmp	.+630    	; 0x3bc <readButtonsState+0x40>
 146:	51 c1       	rjmp	.+674    	; 0x3ea <readButtonsState+0x6e>
 148:	67 c1       	rjmp	.+718    	; 0x418 <__DATA_REGION_LENGTH__+0x18>
 14a:	7a c1       	rjmp	.+756    	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 14c:	90 c1       	rjmp	.+800    	; 0x46e <__DATA_REGION_LENGTH__+0x6e>
 14e:	9e c1       	rjmp	.+828    	; 0x48c <__DATA_REGION_LENGTH__+0x8c>
 150:	b4 c1       	rjmp	.+872    	; 0x4ba <__DATA_REGION_LENGTH__+0xba>

00000152 <.dinit>:
 152:	01 00       	.word	0x0001	; ????
 154:	01 86       	std	Z+9, r0	; 0x09
 156:	80 01       	movw	r16, r0
 158:	86 01       	movw	r16, r12
 15a:	9e 00       	.word	0x009e	; ????
 15c:	11 ec       	ldi	r17, 0xC1	; 193
 15e:	01 9e       	mul	r0, r17
 160:	01 a4       	ldd	r0, Z+41	; 0x29
 162:	80 01       	movw	r16, r0
 164:	a4 01       	movw	r20, r8
 166:	a8 00       	.word	0x00a8	; ????
 168:	12 04       	cpc	r1, r2
 16a:	01 a8       	ldd	r0, Z+49	; 0x31
 16c:	01 b1       	in	r16, 0x01	; 1
 16e:	80 00       	.word	0x0080	; ????

00000170 <__ctors_end>:
 170:	11 24       	eor	r1, r1
 172:	1f be       	out	0x3f, r1	; 63
 174:	cf ef       	ldi	r28, 0xFF	; 255
 176:	d4 e0       	ldi	r29, 0x04	; 4
 178:	de bf       	out	0x3e, r29	; 62
 17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
 17c:	e2 e5       	ldi	r30, 0x52	; 82
 17e:	f1 e0       	ldi	r31, 0x01	; 1
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	17 c0       	rjmp	.+46     	; 0x1b2 <__do_clear_bss+0x8>
 184:	b5 91       	lpm	r27, Z+
 186:	a5 91       	lpm	r26, Z+
 188:	35 91       	lpm	r19, Z+
 18a:	25 91       	lpm	r18, Z+
 18c:	05 91       	lpm	r16, Z+
 18e:	07 fd       	sbrc	r16, 7
 190:	0c c0       	rjmp	.+24     	; 0x1aa <__do_clear_bss>
 192:	95 91       	lpm	r25, Z+
 194:	85 91       	lpm	r24, Z+
 196:	ef 01       	movw	r28, r30
 198:	f9 2f       	mov	r31, r25
 19a:	e8 2f       	mov	r30, r24
 19c:	05 90       	lpm	r0, Z+
 19e:	0d 92       	st	X+, r0
 1a0:	a2 17       	cp	r26, r18
 1a2:	b3 07       	cpc	r27, r19
 1a4:	d9 f7       	brne	.-10     	; 0x19c <__do_copy_data+0x20>
 1a6:	fe 01       	movw	r30, r28
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__do_clear_bss+0x8>

000001aa <__do_clear_bss>:
 1aa:	1d 92       	st	X+, r1
 1ac:	a2 17       	cp	r26, r18
 1ae:	b3 07       	cpc	r27, r19
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <__do_clear_bss>
 1b2:	ef 36       	cpi	r30, 0x6F	; 111
 1b4:	f4 07       	cpc	r31, r20
 1b6:	31 f7       	brne	.-52     	; 0x184 <__do_copy_data+0x8>
 1b8:	5c d7       	rcall	.+3768   	; 0x1072 <main>
 1ba:	df c7       	rjmp	.+4030   	; 0x117a <exit>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>

Disassembly of section .text:

000011da <__bad_interrupt>:
    11da:	12 c7       	rjmp	.+3620   	; 0x2000 <__TEXT_REGION_LENGTH__>

Disassembly of section .text.main:

00001072 <main>:
#include "sh100_hardware.h"
#include "sh100_controller.h"

int main(void)
{
	UART_init();
    1072:	3e d0       	rcall	.+124    	; 0x10f0 <UART_init>
	SH100HW_Init();
    1074:	1b dd       	rcall	.-1482   	; 0xaac <SH100HW_Init>
	SH100CTRL_Init();
    1076:	4d dd       	rcall	.-1382   	; 0xb12 <SH100CTRL_Init>
	MIDICTRL_Init();
    1078:	87 df       	rcall	.-242    	; 0xf88 <MIDICTRL_Init>
	
	// Timer0 init. For main task
	TCCR0B |= 0x05; // psc = 1024
    107a:	85 b5       	in	r24, 0x25	; 37
    107c:	85 60       	ori	r24, 0x05	; 5
    107e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= 0x01; // OVF INT enable, count pulse = 100us
    1080:	ee e6       	ldi	r30, 0x6E	; 110
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	81 60       	ori	r24, 0x01	; 1
    1088:	80 83       	st	Z, r24
	TCNT0 = 100;
    108a:	84 e6       	ldi	r24, 0x64	; 100
    108c:	86 bd       	out	0x26, r24	; 38
	
	cpu_irq_enable();
    108e:	78 94       	sei
	
    while(1)
    {
		MIDI_ParserTask();
    1090:	91 db       	rcall	.-2270   	; 0x7b4 <MIDI_ParserTask>
    1092:	fe cf       	rjmp	.-4      	; 0x1090 <main+0x1e>

Disassembly of section .text.__vector_16:

00000502 <__vector_16>:

uint8_t swProgrammingMode_cnt = 0;
uint8_t leaveDefSettings_cnt = 0;

ISR(TIMER0_OVF_vect)
{
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	1f 93       	push	r17
 50e:	2f 93       	push	r18
 510:	3f 93       	push	r19
 512:	4f 93       	push	r20
 514:	5f 93       	push	r21
 516:	6f 93       	push	r22
 518:	7f 93       	push	r23
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
 51e:	af 93       	push	r26
 520:	bf 93       	push	r27
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
 52e:	2f 97       	sbiw	r28, 0x0f	; 15
 530:	de bf       	out	0x3e, r29	; 62
 532:	cd bf       	out	0x3d, r28	; 61
	SH100HW_MainTask();
 534:	47 de       	rcall	.-882    	; 0x1c4 <SH100HW_MainTask>
	
	SH100HW_Buttons_t pressedButtons = SH100HW_GetButtonsState();
 536:	ce 01       	movw	r24, r28
 538:	01 96       	adiw	r24, 0x01	; 1
 53a:	06 d6       	rcall	.+3084   	; 0x1148 <SH100HW_GetButtonsState>
	
	MIDICTRL_SetMidiChannel(pressedButtons.midiChNum);
 53c:	89 81       	ldd	r24, Y+1	; 0x01
 53e:	41 d6       	rcall	.+3202   	; 0x11c2 <MIDICTRL_SetMidiChannel>
	MIDICTRL_OmniModeEn(pressedButtons.midiOmni);
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	91 11       	cpse	r25, r1
 546:	01 c0       	rjmp	.+2      	; 0x54a <__vector_16+0x48>
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	3e d6       	rcall	.+3196   	; 0x11c8 <MIDICTRL_OmniModeEn>
	MIDICTRL_MuteCommEn(pressedButtons.midiMuteComm);
 54c:	9b 81       	ldd	r25, Y+3	; 0x03
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	91 11       	cpse	r25, r1
 552:	01 c0       	rjmp	.+2      	; 0x556 <__vector_16+0x54>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	3b d6       	rcall	.+3190   	; 0x11ce <MIDICTRL_MuteCommEn>
	
	//=============BTN AB===========================
	if(pressedButtons.btnAB == BT_ON)
 558:	88 85       	ldd	r24, Y+8	; 0x08
 55a:	81 30       	cpi	r24, 0x01	; 1
 55c:	b9 f4       	brne	.+46     	; 0x58c <__vector_16+0x8a>
	{
		if(leaveDefSettings_cnt == 200)
 55e:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <leaveDefSettings_cnt>
 562:	88 3c       	cpi	r24, 0xC8	; 200
 564:	29 f4       	brne	.+10     	; 0x570 <__vector_16+0x6e>
		{
			leaveDefSettings_cnt = 0;
 566:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <leaveDefSettings_cnt>
			MIDICTRL_DiscardCommands();
 56a:	e4 d5       	rcall	.+3016   	; 0x1134 <MIDICTRL_DiscardCommands>
			SH100CTRL_SetAmpLeds();
 56c:	4b d5       	rcall	.+2710   	; 0x1004 <SH100CTRL_SetAmpLeds>
 56e:	10 c0       	rjmp	.+32     	; 0x590 <__vector_16+0x8e>
			// unmute amp
		}
		else
		{
			leaveDefSettings_cnt++;
 570:	8f 5f       	subi	r24, 0xFF	; 255
 572:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <leaveDefSettings_cnt>
			switch(MIDICTRL_MidiMode())
 576:	22 d6       	rcall	.+3140   	; 0x11bc <MIDICTRL_MidiMode>
 578:	88 23       	and	r24, r24
 57a:	19 f0       	breq	.+6      	; 0x582 <__vector_16+0x80>
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	19 f0       	breq	.+6      	; 0x586 <__vector_16+0x84>
 580:	07 c0       	rjmp	.+14     	; 0x590 <__vector_16+0x8e>
			{
				case RUNNING: SH100CTRL_SwAB(); break;
 582:	17 d5       	rcall	.+2606   	; 0xfb2 <SH100CTRL_SwAB>
 584:	05 c0       	rjmp	.+10     	; 0x590 <__vector_16+0x8e>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_AB); break;
 586:	85 e0       	ldi	r24, 0x05	; 5
 588:	e8 d4       	rcall	.+2512   	; 0xf5a <MIDICTRL_SetProgrammingButton>
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__vector_16+0x8e>
			}
		}
	}
	else leaveDefSettings_cnt=0;
 58c:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <leaveDefSettings_cnt>

	//=============BTN LOOP=========================
	if(pressedButtons.btnCh2 == BT_ON)
 590:	1d 81       	ldd	r17, Y+5	; 0x05
 592:	11 30       	cpi	r17, 0x01	; 1
 594:	51 f4       	brne	.+20     	; 0x5aa <__vector_16+0xa8>
	{
		switch(MIDICTRL_MidiMode())
 596:	12 d6       	rcall	.+3108   	; 0x11bc <MIDICTRL_MidiMode>
 598:	88 23       	and	r24, r24
 59a:	19 f0       	breq	.+6      	; 0x5a2 <__vector_16+0xa0>
 59c:	81 30       	cpi	r24, 0x01	; 1
 59e:	19 f0       	breq	.+6      	; 0x5a6 <__vector_16+0xa4>
 5a0:	04 c0       	rjmp	.+8      	; 0x5aa <__vector_16+0xa8>
		{
			case RUNNING: SH100CTRL_SwLoop(); break;
 5a2:	89 d5       	rcall	.+2834   	; 0x10b6 <SH100CTRL_SwLoop>
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <__vector_16+0xa8>
			case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_LOOP); break;
 5a6:	84 e0       	ldi	r24, 0x04	; 4
 5a8:	d8 d4       	rcall	.+2480   	; 0xf5a <MIDICTRL_SetProgrammingButton>
		}
	}
		
	//=============BTN CH4==========================
	if(pressedButtons.btnCh2 == BT_ON)
 5aa:	11 30       	cpi	r17, 0x01	; 1
 5ac:	59 f4       	brne	.+22     	; 0x5c4 <__vector_16+0xc2>
	{
		switch(MIDICTRL_MidiMode())
 5ae:	06 d6       	rcall	.+3084   	; 0x11bc <MIDICTRL_MidiMode>
 5b0:	88 23       	and	r24, r24
 5b2:	19 f0       	breq	.+6      	; 0x5ba <__vector_16+0xb8>
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	21 f0       	breq	.+8      	; 0x5c0 <__vector_16+0xbe>
 5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__vector_16+0xc2>
		{
			case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL4); break;
 5ba:	83 e0       	ldi	r24, 0x03	; 3
 5bc:	f1 d5       	rcall	.+3042   	; 0x11a0 <SH100CTRL_SwChannel>
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <__vector_16+0xc2>
			case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH4); break;
 5c0:	83 e0       	ldi	r24, 0x03	; 3
 5c2:	cb d4       	rcall	.+2454   	; 0xf5a <MIDICTRL_SetProgrammingButton>
		}
	}
		
	//=============BTN CH3==========================
	if(pressedButtons.btnCh2 == BT_ON)
 5c4:	11 30       	cpi	r17, 0x01	; 1
 5c6:	59 f4       	brne	.+22     	; 0x5de <__vector_16+0xdc>
	{
		switch(MIDICTRL_MidiMode())
 5c8:	f9 d5       	rcall	.+3058   	; 0x11bc <MIDICTRL_MidiMode>
 5ca:	88 23       	and	r24, r24
 5cc:	19 f0       	breq	.+6      	; 0x5d4 <__vector_16+0xd2>
 5ce:	81 30       	cpi	r24, 0x01	; 1
 5d0:	21 f0       	breq	.+8      	; 0x5da <__vector_16+0xd8>
 5d2:	05 c0       	rjmp	.+10     	; 0x5de <__vector_16+0xdc>
		{
			case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL3); break;
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	e4 d5       	rcall	.+3016   	; 0x11a0 <SH100CTRL_SwChannel>
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <__vector_16+0xdc>
			case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH3); break;
 5da:	82 e0       	ldi	r24, 0x02	; 2
 5dc:	be d4       	rcall	.+2428   	; 0xf5a <MIDICTRL_SetProgrammingButton>
		}
	}
		
	//=============BTN CH2==========================
	if(pressedButtons.btnCh2 == BT_ON)
 5de:	11 30       	cpi	r17, 0x01	; 1
 5e0:	59 f4       	brne	.+22     	; 0x5f8 <__vector_16+0xf6>
	{
		switch(MIDICTRL_MidiMode())
 5e2:	ec d5       	rcall	.+3032   	; 0x11bc <MIDICTRL_MidiMode>
 5e4:	88 23       	and	r24, r24
 5e6:	19 f0       	breq	.+6      	; 0x5ee <__vector_16+0xec>
 5e8:	81 30       	cpi	r24, 0x01	; 1
 5ea:	21 f0       	breq	.+8      	; 0x5f4 <__vector_16+0xf2>
 5ec:	05 c0       	rjmp	.+10     	; 0x5f8 <__vector_16+0xf6>
		{
			case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL2); break;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	d7 d5       	rcall	.+2990   	; 0x11a0 <SH100CTRL_SwChannel>
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__vector_16+0xf6>
			case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH2); break;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	b1 d4       	rcall	.+2402   	; 0xf5a <MIDICTRL_SetProgrammingButton>
		}
	}
	
	//=============BTN CH1==========================
	if(pressedButtons.btnCh1 == BT_ON)
 5f8:	8c 81       	ldd	r24, Y+4	; 0x04
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	f1 f4       	brne	.+60     	; 0x63a <__vector_16+0x138>
	{
		if(swProgrammingMode_cnt == 200)
 5fe:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <swProgrammingMode_cnt>
 602:	88 3c       	cpi	r24, 0xC8	; 200
 604:	59 f4       	brne	.+22     	; 0x61c <__vector_16+0x11a>
		{
			swProgrammingMode_cnt = 0;
 606:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <swProgrammingMode_cnt>
			//enter prog mode, or save settings
			if(MIDICTRL_MidiMode() == RUNNING)
 60a:	d8 d5       	rcall	.+2992   	; 0x11bc <MIDICTRL_MidiMode>
 60c:	81 11       	cpse	r24, r1
 60e:	03 c0       	rjmp	.+6      	; 0x616 <__vector_16+0x114>
			{
				MIDICTRL_SwitchMode(PROGRAMMING);
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	e4 d3       	rcall	.+1992   	; 0xddc <MIDICTRL_SwitchMode>
 614:	14 c0       	rjmp	.+40     	; 0x63e <__vector_16+0x13c>
				//mute amp
			}
			else
			{
				MIDICTRL_StoreUserCommands();
 616:	38 d4       	rcall	.+2160   	; 0xe88 <MIDICTRL_StoreUserCommands>
				SH100CTRL_SetAmpLeds();
 618:	f5 d4       	rcall	.+2538   	; 0x1004 <SH100CTRL_SetAmpLeds>
 61a:	11 c0       	rjmp	.+34     	; 0x63e <__vector_16+0x13c>
				// unmute amp
			}
		}
		else
		{
			swProgrammingMode_cnt++;
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <swProgrammingMode_cnt>
			switch(MIDICTRL_MidiMode()) 
 622:	cc d5       	rcall	.+2968   	; 0x11bc <MIDICTRL_MidiMode>
 624:	88 23       	and	r24, r24
 626:	19 f0       	breq	.+6      	; 0x62e <__vector_16+0x12c>
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	21 f0       	breq	.+8      	; 0x634 <__vector_16+0x132>
 62c:	08 c0       	rjmp	.+16     	; 0x63e <__vector_16+0x13c>
			{
				case RUNNING: SH100CTRL_SwChannel(SH100_CHANNEL1); break;
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	b7 d5       	rcall	.+2926   	; 0x11a0 <SH100CTRL_SwChannel>
 632:	05 c0       	rjmp	.+10     	; 0x63e <__vector_16+0x13c>
				case PROGRAMMING: MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1); break;
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	91 d4       	rcall	.+2338   	; 0xf5a <MIDICTRL_SetProgrammingButton>
 638:	02 c0       	rjmp	.+4      	; 0x63e <__vector_16+0x13c>
			}			
		}		
	}
	else swProgrammingMode_cnt=0;
 63a:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <swProgrammingMode_cnt>
 63e:	2f 96       	adiw	r28, 0x0f	; 15
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	f8 94       	cli
 644:	de bf       	out	0x3e, r29	; 62
 646:	0f be       	out	0x3f, r0	; 63
 648:	cd bf       	out	0x3d, r28	; 61
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	1f 91       	pop	r17
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

Disassembly of section .text.MIDI_IsStatusWord:

000011b4 <MIDI_IsStatusWord>:
#include "midi.h"

bool MIDI_IsStatusWord(uint8_t word)
{
	return (word & 0x80);
}
    11b4:	88 1f       	adc	r24, r24
    11b6:	88 27       	eor	r24, r24
    11b8:	88 1f       	adc	r24, r24
    11ba:	08 95       	ret

Disassembly of section .text.MIDI_IsSysRealTime:

00001188 <MIDI_IsSysRealTime>:

bool MIDI_IsSysRealTime(uint8_t word)
{
	return word > 0xF7;
    1188:	91 e0       	ldi	r25, 0x01	; 1
    118a:	88 3f       	cpi	r24, 0xF8	; 248
    118c:	08 f4       	brcc	.+2      	; 0x1190 <MIDI_IsSysRealTime+0x8>
    118e:	90 e0       	ldi	r25, 0x00	; 0
}
    1190:	89 2f       	mov	r24, r25
    1192:	08 95       	ret

Disassembly of section .text.MIDI_GetStatusType:

00000d5e <MIDI_GetStatusType>:

MIDI_StatusType_t MIDI_GetStatusType(MIDI_Status_t status)
{
	switch(status)
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	fc 01       	movw	r30, r24
 d62:	e0 58       	subi	r30, 0x80	; 128
 d64:	f1 09       	sbc	r31, r1
 d66:	e0 38       	cpi	r30, 0x80	; 128
 d68:	f1 05       	cpc	r31, r1
 d6a:	a8 f4       	brcc	.+42     	; 0xd96 <MIDI_GetStatusType+0x38>
 d6c:	e6 5e       	subi	r30, 0xE6	; 230
 d6e:	ff 4f       	sbci	r31, 0xFF	; 255
 d70:	09 94       	ijmp
	{
		// Status messages with 2 bytes
		case MIDI_COMM_NOTE_OFF: return MIDI_TYPE_TWO_BYTE;
 d72:	82 e0       	ldi	r24, 0x02	; 2
 d74:	08 95       	ret
		case MIDI_COMM_CHANNEL_PRESSURE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_TIME_CODE: return MIDI_TYPE_ONE_BYTE;
		case MIDI_COMM_SONG_SELECT: return MIDI_TYPE_ONE_BYTE;

		// System real-time messages(no data bytes)
		case MIDI_COMM_TIMING_CLOCK: return MIDI_TYPE_REAL_TIME;
 d76:	83 e0       	ldi	r24, 0x03	; 3
 d78:	08 95       	ret
		case MIDI_COMM_START: return MIDI_TYPE_REAL_TIME;
 d7a:	83 e0       	ldi	r24, 0x03	; 3
 d7c:	08 95       	ret
		case MIDI_COMM_CONTINUE: return MIDI_TYPE_REAL_TIME;
 d7e:	83 e0       	ldi	r24, 0x03	; 3
 d80:	08 95       	ret
		case MIDI_COMM_STO: return MIDI_TYPE_REAL_TIME;
 d82:	83 e0       	ldi	r24, 0x03	; 3
 d84:	08 95       	ret
		case MIDI_COMM_ACTIVE_SENSING: return MIDI_TYPE_REAL_TIME;
 d86:	83 e0       	ldi	r24, 0x03	; 3
 d88:	08 95       	ret
		case MIDI_COMM_SYSTEM_RESET: return MIDI_TYPE_REAL_TIME;
 d8a:	83 e0       	ldi	r24, 0x03	; 3
 d8c:	08 95       	ret

		// System exclusive
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
 d8e:	84 e0       	ldi	r24, 0x04	; 4
 d90:	08 95       	ret
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
 d92:	85 e0       	ldi	r24, 0x05	; 5
 d94:	08 95       	ret
		
		default: return MIDI_TYPE_UNDEFINED;
 d96:	80 e0       	ldi	r24, 0x00	; 0
 d98:	08 95       	ret
		case MIDI_COMM_CONTROL_CHANGE: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_PITCH_BEND: return MIDI_TYPE_TWO_BYTE;
		case MIDI_COMM_SONG_POSITION: return MIDI_TYPE_TWO_BYTE;

		// Status messages with 1 byte
		case MIDI_COMM_PROGRAM_CHANGE: return MIDI_TYPE_ONE_BYTE;
 d9a:	81 e0       	ldi	r24, 0x01	; 1
		case MIDI_COMM_START_SYS_EX: return MIDI_TYPE_START_SYS_EX;
		case MIDI_COMM_STOP_SYS_EX: return MIDI_TYPE_STOP_SYS_EX;
		
		default: return MIDI_TYPE_UNDEFINED;
	}
 d9c:	08 95       	ret

Disassembly of section .text.isEqualCommands:

00001120 <isEqualCommands>:

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    1120:	62 13       	cpse	r22, r18
    1122:	04 c0       	rjmp	.+8      	; 0x112c <isEqualCommands+0xc>
	if(commandRecieved.data1 != commandSaved.data2) return false;	
    1124:	85 17       	cp	r24, r21
    1126:	21 f0       	breq	.+8      	; 0x1130 <isEqualCommands+0x10>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	08 95       	ret

void indicateMidiError();

bool isEqualCommands(MIDI_Command_t commandRecieved, MIDI_Command_t commandSaved)
{
	if(commandRecieved.status != commandSaved.status) return false;
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret
	if(commandRecieved.data1 != commandSaved.data2) return false;	
	return true;
    1130:	81 e0       	ldi	r24, 0x01	; 1
}
    1132:	08 95       	ret

Disassembly of section .text.loadCommSetFromMemory:

000009c4 <loadCommSetFromMemory>:

void loadCommSetFromMemory()
{
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	cd b7       	in	r28, 0x3d	; 61
 9ca:	de b7       	in	r29, 0x3e	; 62
 9cc:	68 97       	sbiw	r28, 0x18	; 24
 9ce:	0f b6       	in	r0, 0x3f	; 63
 9d0:	f8 94       	cli
 9d2:	de bf       	out	0x3e, r29	; 62
 9d4:	0f be       	out	0x3f, r0	; 63
 9d6:	cd bf       	out	0x3d, r28	; 61
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 9d8:	60 e0       	ldi	r22, 0x00	; 0
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	80 e0       	ldi	r24, 0x00	; 0
 9de:	da d3       	rcall	.+1972   	; 0x1194 <eeprom_read_word>
		
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 9e0:	8b 3a       	cpi	r24, 0xAB	; 171
 9e2:	9c 4a       	sbci	r25, 0xAC	; 172
 9e4:	c1 f4       	brne	.+48     	; 0xa16 <loadCommSetFromMemory+0x52>
	{
		// memory is not empty. Load EEPROM values
		uint8_t readedData[sizeof(MIDICTRL_CommandBlock_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 9e6:	40 e1       	ldi	r20, 0x10	; 16
 9e8:	50 e0       	ldi	r21, 0x00	; 0
 9ea:	60 e8       	ldi	r22, 0x80	; 128
 9ec:	28 e1       	ldi	r18, 0x18	; 24
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	ce 01       	movw	r24, r28
 9f2:	01 96       	adiw	r24, 0x01	; 1
 9f4:	2c d3       	rcall	.+1624   	; 0x104e <eeprom_read_block>
		MIDICTRL_CommandBlock_t* userCommands_ptr = (MIDICTRL_CommandBlock_t*)readedData;
		userCommands = *userCommands_ptr;
 9f6:	88 e1       	ldi	r24, 0x18	; 24
 9f8:	fe 01       	movw	r30, r28
 9fa:	31 96       	adiw	r30, 0x01	; 1
 9fc:	a8 e0       	ldi	r26, 0x08	; 8
 9fe:	b1 e0       	ldi	r27, 0x01	; 1
 a00:	01 90       	ld	r0, Z+
 a02:	0d 92       	st	X+, r0
 a04:	8a 95       	dec	r24
 a06:	e1 f7       	brne	.-8      	; 0xa00 <loadCommSetFromMemory+0x3c>
			
		commandSet = eeprom_read_byte((uint8_t*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET);
 a08:	6b e0       	ldi	r22, 0x0B	; 11
 a0a:	70 e0       	ldi	r23, 0x00	; 0
 a0c:	80 e8       	ldi	r24, 0x80	; 128
 a0e:	a5 d3       	rcall	.+1866   	; 0x115a <eeprom_read_byte>
 a10:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
 a14:	0b c0       	rjmp	.+22     	; 0xa2c <loadCommSetFromMemory+0x68>
	}
	else
	{
		// memory empty. Load default values
		userCommands = defaultCommands;
 a16:	88 e1       	ldi	r24, 0x18	; 24
 a18:	e6 e8       	ldi	r30, 0x86	; 134
 a1a:	f1 e0       	ldi	r31, 0x01	; 1
 a1c:	a8 e0       	ldi	r26, 0x08	; 8
 a1e:	b1 e0       	ldi	r27, 0x01	; 1
 a20:	01 90       	ld	r0, Z+
 a22:	0d 92       	st	X+, r0
 a24:	8a 95       	dec	r24
 a26:	e1 f7       	brne	.-8      	; 0xa20 <loadCommSetFromMemory+0x5c>
		commandSet = DEFAULT;
 a28:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
	}
}
 a2c:	68 96       	adiw	r28, 0x18	; 24
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	08 95       	ret

Disassembly of section .text.setMidiLeds:

00000c28 <setMidiLeds>:

void setMidiLeds()
{
 c28:	cf 93       	push	r28
	if(mode == PROGRAMMING)
 c2a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 c2e:	81 30       	cpi	r24, 0x01	; 1
 c30:	11 f5       	brne	.+68     	; 0xc76 <setMidiLeds+0x4e>
 c32:	18 c0       	rjmp	.+48     	; 0xc64 <setMidiLeds+0x3c>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
		{
			switch(midiProgBtnState[i])
 c34:	ec 2f       	mov	r30, r28
 c36:	f0 e0       	ldi	r31, 0x00	; 0
 c38:	ef 5f       	subi	r30, 0xFF	; 255
 c3a:	fe 4f       	sbci	r31, 0xFE	; 254
 c3c:	80 81       	ld	r24, Z
 c3e:	81 30       	cpi	r24, 0x01	; 1
 c40:	41 f0       	breq	.+16     	; 0xc52 <setMidiLeds+0x2a>
 c42:	18 f0       	brcs	.+6      	; 0xc4a <setMidiLeds+0x22>
 c44:	82 30       	cpi	r24, 0x02	; 2
 c46:	49 f0       	breq	.+18     	; 0xc5a <setMidiLeds+0x32>
 c48:	0b c0       	rjmp	.+22     	; 0xc60 <setMidiLeds+0x38>
			{
				case PROG_CLEAR: SH100HW_SetNewLedState(i, LED_OFF); break;
 c4a:	60 e0       	ldi	r22, 0x00	; 0
 c4c:	8c 2f       	mov	r24, r28
 c4e:	e4 d0       	rcall	.+456    	; 0xe18 <SH100HW_SetNewLedState>
 c50:	07 c0       	rjmp	.+14     	; 0xc60 <setMidiLeds+0x38>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
 c52:	62 e0       	ldi	r22, 0x02	; 2
 c54:	8c 2f       	mov	r24, r28
 c56:	e0 d0       	rcall	.+448    	; 0xe18 <SH100HW_SetNewLedState>
 c58:	03 c0       	rjmp	.+6      	; 0xc60 <setMidiLeds+0x38>
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
 c5a:	61 e0       	ldi	r22, 0x01	; 1
 c5c:	8c 2f       	mov	r24, r28
 c5e:	dc d0       	rcall	.+440    	; 0xe18 <SH100HW_SetNewLedState>

void setMidiLeds()
{
	if(mode == PROGRAMMING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT; i++)
 c60:	cf 5f       	subi	r28, 0xFF	; 255
 c62:	01 c0       	rjmp	.+2      	; 0xc66 <setMidiLeds+0x3e>
 c64:	c0 e0       	ldi	r28, 0x00	; 0
 c66:	c6 30       	cpi	r28, 0x06	; 6
 c68:	28 f3       	brcs	.-54     	; 0xc34 <setMidiLeds+0xc>
				case PROG_ACTING: SH100HW_SetNewLedState(i, LED_FAST_BLINKING); break;
				case PROG_PROGRAMMED: SH100HW_SetNewLedState(i, LED_ON); break;
			}
		}
		
		if(currentErrBtnId != MIDI_PROG_BTN_UNDEFINED)
 c6a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 c6e:	8f 3f       	cpi	r24, 0xFF	; 255
 c70:	11 f0       	breq	.+4      	; 0xc76 <setMidiLeds+0x4e>
		{
			SH100HW_SetNewLedState(currentErrBtnId, LED_ON);
 c72:	61 e0       	ldi	r22, 0x01	; 1
 c74:	d1 d0       	rcall	.+418    	; 0xe18 <SH100HW_SetNewLedState>
		}
	}
}
 c76:	cf 91       	pop	r28
 c78:	08 95       	ret

Disassembly of section .text.MIDICTRL_Init:

00000f88 <MIDICTRL_Init>:

void MIDICTRL_Init()
{
	// Timer1 init. For error indication
	TCCR1B |= 0x05; // psc = 1024
 f88:	e1 e8       	ldi	r30, 0x81	; 129
 f8a:	f0 e0       	ldi	r31, 0x00	; 0
 f8c:	80 81       	ld	r24, Z
 f8e:	85 60       	ori	r24, 0x05	; 5
 f90:	80 83       	st	Z, r24
	TIMSK1 |= 0x01; // OVF INT enable, count pulse = 100us
 f92:	ef e6       	ldi	r30, 0x6F	; 111
 f94:	f0 e0       	ldi	r31, 0x00	; 0
 f96:	80 81       	ld	r24, Z
 f98:	81 60       	ori	r24, 0x01	; 1
 f9a:	80 83       	st	Z, r24
	TCNT1 = 0;
 f9c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
 fa0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
 fa4:	8f ef       	ldi	r24, 0xFF	; 255
 fa6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	loadCommSetFromMemory();
 faa:	0c dd       	rcall	.-1512   	; 0x9c4 <loadCommSetFromMemory>
	mode = RUNNING;
 fac:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
 fb0:	08 95       	ret

Disassembly of section .text.MIDICTRL_MidiMode:

000011bc <MIDICTRL_MidiMode>:
}

MIDICTRL_Mode_t MIDICTRL_MidiMode()
{
	return mode;
}
    11bc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    11c0:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetProgrammingButton:

00000f5a <MIDICTRL_SetProgrammingButton>:

void MIDICTRL_SetProgrammingButton(uint8_t progBtnId)
{
	if(midiProgBtnState[currentProgBtn] == PROG_ACTING) 
 f5a:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <currentProgBtn>
 f5e:	30 e0       	ldi	r19, 0x00	; 0
 f60:	f9 01       	movw	r30, r18
 f62:	ef 5f       	subi	r30, 0xFF	; 255
 f64:	fe 4f       	sbci	r31, 0xFE	; 254
 f66:	90 81       	ld	r25, Z
 f68:	91 30       	cpi	r25, 0x01	; 1
 f6a:	21 f4       	brne	.+8      	; 0xf74 <MIDICTRL_SetProgrammingButton+0x1a>
	{
		midiProgBtnState[currentProgBtn] = PROG_CLEAR;
 f6c:	f9 01       	movw	r30, r18
 f6e:	ef 5f       	subi	r30, 0xFF	; 255
 f70:	fe 4f       	sbci	r31, 0xFE	; 254
 f72:	10 82       	st	Z, r1
	}
	
	currentProgBtn = progBtnId;
 f74:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <currentProgBtn>
	midiProgBtnState[currentProgBtn] = PROG_ACTING;
 f78:	e8 2f       	mov	r30, r24
 f7a:	f0 e0       	ldi	r31, 0x00	; 0
 f7c:	ef 5f       	subi	r30, 0xFF	; 255
 f7e:	fe 4f       	sbci	r31, 0xFE	; 254
 f80:	81 e0       	ldi	r24, 0x01	; 1
 f82:	80 83       	st	Z, r24
	setMidiLeds();
 f84:	51 de       	rcall	.-862    	; 0xc28 <setMidiLeds>
 f86:	08 95       	ret

Disassembly of section .text.MIDICTRL_SwitchMode:

00000ddc <MIDICTRL_SwitchMode>:
	loadCommSetFromMemory();
	mode = RUNNING;
}

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
 ddc:	cf 93       	push	r28
 dde:	c8 2f       	mov	r28, r24
	if(mode == RUNNING)
 de0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 de4:	88 23       	and	r24, r24
 de6:	41 f0       	breq	.+16     	; 0xdf8 <MIDICTRL_SwitchMode+0x1c>
 de8:	13 c0       	rjmp	.+38     	; 0xe10 <MIDICTRL_SwitchMode+0x34>
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
			midiProgBtnState[i] = PROG_CLEAR;
 dea:	e8 2f       	mov	r30, r24
 dec:	f0 e0       	ldi	r31, 0x00	; 0
 dee:	ef 5f       	subi	r30, 0xFF	; 255
 df0:	fe 4f       	sbci	r31, 0xFE	; 254
 df2:	10 82       	st	Z, r1

void MIDICTRL_SwitchMode(MIDICTRL_Mode_t newMode)
{	
	if(mode == RUNNING)
	{
		for(uint8_t i=0; i<MIDI_PROG_BTN_COUNT;i++) 
 df4:	8f 5f       	subi	r24, 0xFF	; 255
 df6:	01 c0       	rjmp	.+2      	; 0xdfa <MIDICTRL_SwitchMode+0x1e>
 df8:	80 e0       	ldi	r24, 0x00	; 0
 dfa:	86 30       	cpi	r24, 0x06	; 6
 dfc:	b0 f3       	brcs	.-20     	; 0xdea <MIDICTRL_SwitchMode+0xe>
			midiProgBtnState[i] = PROG_CLEAR;
		
		MIDICTRL_SetProgrammingButton(MIDI_PROG_BTN_CH1);
 dfe:	80 e0       	ldi	r24, 0x00	; 0
 e00:	ac d0       	rcall	.+344    	; 0xf5a <MIDICTRL_SetProgrammingButton>
		setMidiLeds();
 e02:	12 df       	rcall	.-476    	; 0xc28 <setMidiLeds>
		
			SH100HW_SetNewLedState(LED_PWR_GRN, LED_SLOW_BLINKING);
 e04:	63 e0       	ldi	r22, 0x03	; 3
 e06:	87 e0       	ldi	r24, 0x07	; 7
 e08:	07 d0       	rcall	.+14     	; 0xe18 <SH100HW_SetNewLedState>
			SH100HW_SetNewLedState(LED_PWR_RED, LED_SLOW_BLINKING);
 e0a:	63 e0       	ldi	r22, 0x03	; 3
 e0c:	88 e0       	ldi	r24, 0x08	; 8
 e0e:	04 d0       	rcall	.+8      	; 0xe18 <SH100HW_SetNewLedState>
	}
	mode = newMode;
 e10:	c0 93 07 01 	sts	0x0107, r28	; 0x800107 <mode>
}
 e14:	cf 91       	pop	r28
 e16:	08 95       	ret

Disassembly of section .text.MIDICTRL_SetMidiChannel:

000011c2 <MIDICTRL_SetMidiChannel>:
	setMidiLeds();
}

void MIDICTRL_SetMidiChannel(uint8_t midiChNum)
{
	channelNum = midiChNum;
    11c2:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <channelNum>
    11c6:	08 95       	ret

Disassembly of section .text.MIDICTRL_OmniModeEn:

000011c8 <MIDICTRL_OmniModeEn>:
}

void MIDICTRL_OmniModeEn(bool isEnabled)
{
	omniModeEnabled = isEnabled;
    11c8:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <omniModeEnabled>
    11cc:	08 95       	ret

Disassembly of section .text.MIDICTRL_MuteCommEn:

000011ce <MIDICTRL_MuteCommEn>:
}

void MIDICTRL_MuteCommEn(bool isEnabled)
{
	muteCommandEnabled = isEnabled;
    11ce:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <muteCommandEnabled>
    11d2:	08 95       	ret

Disassembly of section .text.programmBtn:

00000cc8 <programmBtn>:
}

void programmBtn(MIDI_Command_t* targetComm, const MIDI_Command_t* srcComm, uint8_t targetBtnId)
{
 cc8:	cf 92       	push	r12
 cca:	df 92       	push	r13
 ccc:	ef 92       	push	r14
 cce:	dc 01       	movw	r26, r24
	if(midiProgBtnState[targetBtnId] == PROG_ACTING)
 cd0:	30 e0       	ldi	r19, 0x00	; 0
 cd2:	f9 01       	movw	r30, r18
 cd4:	ef 5f       	subi	r30, 0xFF	; 255
 cd6:	fe 4f       	sbci	r31, 0xFE	; 254
 cd8:	90 81       	ld	r25, Z
 cda:	91 30       	cpi	r25, 0x01	; 1
 cdc:	b9 f4       	brne	.+46     	; 0xd0c <programmBtn+0x44>
 cde:	6a 01       	movw	r12, r20
 ce0:	e6 2e       	mov	r14, r22
	{
		targetComm->status = srcComm->status;
 ce2:	fa 01       	movw	r30, r20
 ce4:	84 91       	lpm	r24, Z
 ce6:	e7 fc       	sbrc	r14, 7
 ce8:	80 81       	ld	r24, Z
 cea:	8c 93       	st	X, r24
		targetComm->data1 = srcComm->data1;
 cec:	82 e0       	ldi	r24, 0x02	; 2
 cee:	c8 0e       	add	r12, r24
 cf0:	d1 1c       	adc	r13, r1
 cf2:	e1 1c       	adc	r14, r1
 cf4:	f6 01       	movw	r30, r12
 cf6:	84 91       	lpm	r24, Z
 cf8:	e7 fc       	sbrc	r14, 7
 cfa:	80 81       	ld	r24, Z
 cfc:	12 96       	adiw	r26, 0x02	; 2
 cfe:	8c 93       	st	X, r24
		midiProgBtnState[targetBtnId] = PROG_PROGRAMMED;
 d00:	f9 01       	movw	r30, r18
 d02:	ef 5f       	subi	r30, 0xFF	; 255
 d04:	fe 4f       	sbci	r31, 0xFE	; 254
 d06:	82 e0       	ldi	r24, 0x02	; 2
 d08:	80 83       	st	Z, r24
		setMidiLeds();
 d0a:	8e df       	rcall	.-228    	; 0xc28 <setMidiLeds>
	}
}
 d0c:	ef 90       	pop	r14
 d0e:	df 90       	pop	r13
 d10:	cf 90       	pop	r12
 d12:	08 95       	ret

Disassembly of section .text.MIDICTRL_StoreUserCommands:

00000e88 <MIDICTRL_StoreUserCommands>:
	}	
}

void MIDICTRL_StoreUserCommands()
{
	if(mode == PROGRAMMING)
 e88:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 e8c:	81 30       	cpi	r24, 0x01	; 1
 e8e:	b1 f4       	brne	.+44     	; 0xebc <MIDICTRL_StoreUserCommands+0x34>
	{
		commandSet = USER;
 e90:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <commandSet>
		
		eeprom_write_word(0x00, MEMORY_MAGIC_WORD);
 e94:	6b ea       	ldi	r22, 0xAB	; 171
 e96:	7c ea       	ldi	r23, 0xAC	; 172
 e98:	80 e0       	ldi	r24, 0x00	; 0
 e9a:	90 e0       	ldi	r25, 0x00	; 0
 e9c:	9b d1       	rcall	.+822    	; 0x11d4 <eeprom_write_word>
		eeprom_write_byte((void*)MEMORY_COMMAND_BLOCK_TYPE_OFFSET, commandSet);
 e9e:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <commandSet>
 ea2:	8b e0       	ldi	r24, 0x0B	; 11
 ea4:	90 e0       	ldi	r25, 0x00	; 0
 ea6:	16 d1       	rcall	.+556    	; 0x10d4 <eeprom_write_byte>
		eeprom_write_block(&userCommands, (void*)MEMORY_USER_COMMANDS_OFFSET, sizeof(MIDICTRL_CommandBlock_t));
 ea8:	68 e0       	ldi	r22, 0x08	; 8
 eaa:	71 e0       	ldi	r23, 0x01	; 1
 eac:	80 e8       	ldi	r24, 0x80	; 128
 eae:	28 e1       	ldi	r18, 0x18	; 24
 eb0:	30 e0       	ldi	r19, 0x00	; 0
 eb2:	4c e0       	ldi	r20, 0x0C	; 12
 eb4:	50 e0       	ldi	r21, 0x00	; 0
 eb6:	38 d0       	rcall	.+112    	; 0xf28 <eeprom_write_block>
		
		mode = RUNNING;
 eb8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
 ebc:	08 95       	ret

Disassembly of section .text.MIDICTRL_DiscardCommands:

00001134 <MIDICTRL_DiscardCommands>:
	}
}

void MIDICTRL_DiscardCommands()
{
	if(mode == PROGRAMMING)
    1134:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	29 f4       	brne	.+10     	; 0x1146 <MIDICTRL_DiscardCommands+0x12>
	{
		commandSet = DEFAULT;
    113c:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <commandSet>
		loadCommSetFromMemory();
    1140:	41 dc       	rcall	.-1918   	; 0x9c4 <loadCommSetFromMemory>
		mode = RUNNING;
    1142:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mode>
    1146:	08 95       	ret

Disassembly of section .text.indicateMidiError:

0000102a <indicateMidiError>:
}

//===================ERROR indication=================
void indicateMidiError()
{
	TCNT1 = 100;
    102a:	84 e6       	ldi	r24, 0x64	; 100
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fe085>
    1032:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fe084>
	currentErrBtnId = currentProgBtn;
    1036:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
    103a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
    103e:	f4 dd       	rcall	.-1048   	; 0xc28 <setMidiLeds>
	
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	87 e0       	ldi	r24, 0x07	; 7
    1044:	e9 de       	rcall	.-558    	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
    1046:	61 e0       	ldi	r22, 0x01	; 1
    1048:	88 e0       	ldi	r24, 0x08	; 8
    104a:	e6 de       	rcall	.-564    	; 0xe18 <SH100HW_SetNewLedState>
    104c:	08 95       	ret

Disassembly of section .text.MIDICTRL_HandleCommand:

00000672 <MIDICTRL_HandleCommand>:
		setMidiLeds();
	}
}

void MIDICTRL_HandleCommand(MIDI_Command_t command)
{
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	00 d0       	rcall	.+0      	; 0x678 <MIDICTRL_HandleCommand+0x6>
 678:	00 d0       	rcall	.+0      	; 0x67a <MIDICTRL_HandleCommand+0x8>
 67a:	cd b7       	in	r28, 0x3d	; 61
 67c:	de b7       	in	r29, 0x3e	; 62
 67e:	69 83       	std	Y+1, r22	; 0x01
 680:	7a 83       	std	Y+2, r23	; 0x02
 682:	8b 83       	std	Y+3, r24	; 0x03
 684:	9c 83       	std	Y+4, r25	; 0x04
	switch(mode)
 686:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <mode>
 68a:	88 23       	and	r24, r24
 68c:	19 f0       	breq	.+6      	; 0x694 <MIDICTRL_HandleCommand+0x22>
 68e:	81 30       	cpi	r24, 0x01	; 1
 690:	a9 f1       	breq	.+106    	; 0x6fc <MIDICTRL_HandleCommand+0x8a>
 692:	89 c0       	rjmp	.+274    	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
	{
		case RUNNING:
		{
			if(!omniModeEnabled)
 694:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <omniModeEnabled>
 698:	81 11       	cpse	r24, r1
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <MIDICTRL_HandleCommand+0x34>
			{
				if(channelNum != command.channel) return;
 69c:	9a 81       	ldd	r25, Y+2	; 0x02
 69e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <channelNum>
 6a2:	98 13       	cpse	r25, r24
 6a4:	80 c0       	rjmp	.+256    	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
			}
			
			if(muteCommandEnabled)
 6a6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <muteCommandEnabled>
 6aa:	88 23       	and	r24, r24
 6ac:	79 f0       	breq	.+30     	; 0x6cc <MIDICTRL_HandleCommand+0x5a>
			{
				if(isEqualCommands(command, muteCommand)) SH100CTRL_MuteAmp();
 6ae:	80 ec       	ldi	r24, 0xC0	; 192
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	a0 e0       	ldi	r26, 0x00	; 0
 6b4:	fc 01       	movw	r30, r24
 6b6:	5a 2f       	mov	r21, r26
 6b8:	27 d5       	rcall	.+2638   	; 0x1108 <__xload_4>
 6ba:	9b 01       	movw	r18, r22
 6bc:	ac 01       	movw	r20, r24
 6be:	69 81       	ldd	r22, Y+1	; 0x01
 6c0:	7a 81       	ldd	r23, Y+2	; 0x02
 6c2:	8b 81       	ldd	r24, Y+3	; 0x03
 6c4:	9c 81       	ldd	r25, Y+4	; 0x04
 6c6:	2c d5       	rcall	.+2648   	; 0x1120 <isEqualCommands>
 6c8:	81 11       	cpse	r24, r1
 6ca:	88 d5       	rcall	.+2832   	; 0x11dc <SH100CTRL_MuteAmp>
			}
			
			MIDICTRL_CommandBlock_t* currentCommandBlock;
			if(commandSet == USER) currentCommandBlock = &userCommands;
 6cc:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <commandSet>
 6d0:	81 30       	cpi	r24, 0x01	; 1
 6d2:	19 f4       	brne	.+6      	; 0x6da <MIDICTRL_HandleCommand+0x68>
 6d4:	e8 e0       	ldi	r30, 0x08	; 8
 6d6:	f1 e0       	ldi	r31, 0x01	; 1
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <MIDICTRL_HandleCommand+0x6c>
			else currentCommandBlock = &defaultCommands;
 6da:	e6 e8       	ldi	r30, 0x86	; 134
 6dc:	f1 e0       	ldi	r31, 0x01	; 1
			
			// priority ch1, ch2, ch3, ch4, loop, AB. After handling, return. Only one switch by one command
			if(isEqualCommands(command, currentCommandBlock->channel1)) SH100CTRL_SwChannel(0); return;
 6de:	20 81       	ld	r18, Z
 6e0:	31 81       	ldd	r19, Z+1	; 0x01
 6e2:	42 81       	ldd	r20, Z+2	; 0x02
 6e4:	53 81       	ldd	r21, Z+3	; 0x03
 6e6:	69 81       	ldd	r22, Y+1	; 0x01
 6e8:	7a 81       	ldd	r23, Y+2	; 0x02
 6ea:	8b 81       	ldd	r24, Y+3	; 0x03
 6ec:	9c 81       	ldd	r25, Y+4	; 0x04
 6ee:	18 d5       	rcall	.+2608   	; 0x1120 <isEqualCommands>
 6f0:	88 23       	and	r24, r24
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <MIDICTRL_HandleCommand+0x84>
 6f4:	58 c0       	rjmp	.+176    	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	53 d5       	rcall	.+2726   	; 0x11a0 <SH100CTRL_SwChannel>
 6fa:	55 c0       	rjmp	.+170    	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
			break;
		}
		
		case PROGRAMMING:
		{
			if(command.status == MIDI_COMM_PROGRAM_CHANGE)
 6fc:	89 81       	ldd	r24, Y+1	; 0x01
 6fe:	80 3c       	cpi	r24, 0xC0	; 192
 700:	81 f5       	brne	.+96     	; 0x762 <MIDICTRL_HandleCommand+0xf0>
			{
				switch(currentProgBtn)
 702:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	79 f0       	breq	.+30     	; 0x728 <MIDICTRL_HandleCommand+0xb6>
 70a:	28 f0       	brcs	.+10     	; 0x716 <MIDICTRL_HandleCommand+0xa4>
 70c:	82 30       	cpi	r24, 0x02	; 2
 70e:	a9 f0       	breq	.+42     	; 0x73a <MIDICTRL_HandleCommand+0xc8>
 710:	83 30       	cpi	r24, 0x03	; 3
 712:	e1 f0       	breq	.+56     	; 0x74c <MIDICTRL_HandleCommand+0xda>
 714:	24 c0       	rjmp	.+72     	; 0x75e <MIDICTRL_HandleCommand+0xec>
				{
					case MIDI_PROG_BTN_CH1: programmBtn(&(userCommands.channel1), &command, MIDI_PROG_BTN_CH1); break;
 716:	ae 01       	movw	r20, r28
 718:	4f 5f       	subi	r20, 0xFF	; 255
 71a:	5f 4f       	sbci	r21, 0xFF	; 255
 71c:	60 e8       	ldi	r22, 0x80	; 128
 71e:	20 e0       	ldi	r18, 0x00	; 0
 720:	88 e0       	ldi	r24, 0x08	; 8
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	d1 d2       	rcall	.+1442   	; 0xcc8 <programmBtn>
 726:	3f c0       	rjmp	.+126    	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
					case MIDI_PROG_BTN_CH2: programmBtn(&(userCommands.channel2), &command, MIDI_PROG_BTN_CH2); break;
 728:	ae 01       	movw	r20, r28
 72a:	4f 5f       	subi	r20, 0xFF	; 255
 72c:	5f 4f       	sbci	r21, 0xFF	; 255
 72e:	60 e8       	ldi	r22, 0x80	; 128
 730:	21 e0       	ldi	r18, 0x01	; 1
 732:	8c e0       	ldi	r24, 0x0C	; 12
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	c8 d2       	rcall	.+1424   	; 0xcc8 <programmBtn>
 738:	36 c0       	rjmp	.+108    	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
					case MIDI_PROG_BTN_CH3: programmBtn(&(userCommands.channel3), &command, MIDI_PROG_BTN_CH3); break;
 73a:	ae 01       	movw	r20, r28
 73c:	4f 5f       	subi	r20, 0xFF	; 255
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	60 e8       	ldi	r22, 0x80	; 128
 742:	22 e0       	ldi	r18, 0x02	; 2
 744:	80 e1       	ldi	r24, 0x10	; 16
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	bf d2       	rcall	.+1406   	; 0xcc8 <programmBtn>
 74a:	2d c0       	rjmp	.+90     	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
					case MIDI_PROG_BTN_CH4: programmBtn(&(userCommands.channel4), &command, MIDI_PROG_BTN_CH4); break;
 74c:	ae 01       	movw	r20, r28
 74e:	4f 5f       	subi	r20, 0xFF	; 255
 750:	5f 4f       	sbci	r21, 0xFF	; 255
 752:	60 e8       	ldi	r22, 0x80	; 128
 754:	23 e0       	ldi	r18, 0x03	; 3
 756:	84 e1       	ldi	r24, 0x14	; 20
 758:	91 e0       	ldi	r25, 0x01	; 1
 75a:	b6 d2       	rcall	.+1388   	; 0xcc8 <programmBtn>
 75c:	24 c0       	rjmp	.+72     	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
					default: indicateMidiError(); break; 
 75e:	65 d4       	rcall	.+2250   	; 0x102a <indicateMidiError>
 760:	22 c0       	rjmp	.+68     	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
				}
			}
			else if(command.status == MIDI_COMM_CONTROL_CHANGE)
 762:	80 3b       	cpi	r24, 0xB0	; 176
 764:	f9 f4       	brne	.+62     	; 0x7a4 <MIDICTRL_HandleCommand+0x132>
			{
				if(command.data1 == muteCommand.data1)
 766:	8b 81       	ldd	r24, Y+3	; 0x03
 768:	87 30       	cpi	r24, 0x07	; 7
 76a:	11 f4       	brne	.+4      	; 0x770 <MIDICTRL_HandleCommand+0xfe>
				{
					indicateMidiError();
 76c:	5e d4       	rcall	.+2236   	; 0x102a <indicateMidiError>
 76e:	1b c0       	rjmp	.+54     	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
				}
				else
				{
					switch(currentProgBtn)
 770:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <currentProgBtn>
 774:	84 30       	cpi	r24, 0x04	; 4
 776:	59 f0       	breq	.+22     	; 0x78e <MIDICTRL_HandleCommand+0x11c>
 778:	85 30       	cpi	r24, 0x05	; 5
 77a:	91 f4       	brne	.+36     	; 0x7a0 <MIDICTRL_HandleCommand+0x12e>
					{
						case MIDI_PROG_BTN_AB: programmBtn(&(userCommands.outAB), &command, MIDI_PROG_BTN_AB); break;
 77c:	ae 01       	movw	r20, r28
 77e:	4f 5f       	subi	r20, 0xFF	; 255
 780:	5f 4f       	sbci	r21, 0xFF	; 255
 782:	60 e8       	ldi	r22, 0x80	; 128
 784:	25 e0       	ldi	r18, 0x05	; 5
 786:	8c e1       	ldi	r24, 0x1C	; 28
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	9e d2       	rcall	.+1340   	; 0xcc8 <programmBtn>
 78c:	0c c0       	rjmp	.+24     	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
						case MIDI_PROG_BTN_LOOP: programmBtn(&(userCommands.loopOn), &command, MIDI_PROG_BTN_LOOP); break;
 78e:	ae 01       	movw	r20, r28
 790:	4f 5f       	subi	r20, 0xFF	; 255
 792:	5f 4f       	sbci	r21, 0xFF	; 255
 794:	60 e8       	ldi	r22, 0x80	; 128
 796:	24 e0       	ldi	r18, 0x04	; 4
 798:	88 e1       	ldi	r24, 0x18	; 24
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	95 d2       	rcall	.+1322   	; 0xcc8 <programmBtn>
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
						default: indicateMidiError(); break;
 7a0:	44 d4       	rcall	.+2184   	; 0x102a <indicateMidiError>
 7a2:	01 c0       	rjmp	.+2      	; 0x7a6 <MIDICTRL_HandleCommand+0x134>
					}
				}
			}
			else
			{
				indicateMidiError();
 7a4:	42 d4       	rcall	.+2180   	; 0x102a <indicateMidiError>
			}			
			break;
		}
	}	
}
 7a6:	0f 90       	pop	r0
 7a8:	0f 90       	pop	r0
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

Disassembly of section .text.__vector_13:

00000bd4 <__vector_13>:
	SH100HW_SetNewLedState(LED_PWR_GRN, LED_OFF);
	SH100HW_SetNewLedState(LED_PWR_RED, LED_ON);
}

ISR(TIMER1_OVF_vect)
{
 bd4:	1f 92       	push	r1
 bd6:	0f 92       	push	r0
 bd8:	0f b6       	in	r0, 0x3f	; 63
 bda:	0f 92       	push	r0
 bdc:	11 24       	eor	r1, r1
 bde:	2f 93       	push	r18
 be0:	3f 93       	push	r19
 be2:	4f 93       	push	r20
 be4:	5f 93       	push	r21
 be6:	6f 93       	push	r22
 be8:	7f 93       	push	r23
 bea:	8f 93       	push	r24
 bec:	9f 93       	push	r25
 bee:	af 93       	push	r26
 bf0:	bf 93       	push	r27
 bf2:	ef 93       	push	r30
 bf4:	ff 93       	push	r31
	currentErrBtnId = MIDI_PROG_BTN_UNDEFINED;
 bf6:	8f ef       	ldi	r24, 0xFF	; 255
 bf8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	setMidiLeds();
 bfc:	15 d0       	rcall	.+42     	; 0xc28 <setMidiLeds>
	
	SH100HW_SetPreviousLedState(LED_PWR_GRN);
 bfe:	87 e0       	ldi	r24, 0x07	; 7
 c00:	ed d1       	rcall	.+986    	; 0xfdc <SH100HW_SetPreviousLedState>
	SH100HW_SetPreviousLedState(LED_PWR_RED);
 c02:	88 e0       	ldi	r24, 0x08	; 8
 c04:	eb d1       	rcall	.+982    	; 0xfdc <SH100HW_SetPreviousLedState>
 c06:	ff 91       	pop	r31
 c08:	ef 91       	pop	r30
 c0a:	bf 91       	pop	r27
 c0c:	af 91       	pop	r26
 c0e:	9f 91       	pop	r25
 c10:	8f 91       	pop	r24
 c12:	7f 91       	pop	r23
 c14:	6f 91       	pop	r22
 c16:	5f 91       	pop	r21
 c18:	4f 91       	pop	r20
 c1a:	3f 91       	pop	r19
 c1c:	2f 91       	pop	r18
 c1e:	0f 90       	pop	r0
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	0f 90       	pop	r0
 c24:	1f 90       	pop	r1
 c26:	18 95       	reti

Disassembly of section .text.MIDI_ParserTask:

000007b4 <MIDI_ParserTask>:
};

uint8_t recievedWord;
void MIDI_ParserTask()
{
	switch(state)
 7b4:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <state>
 7b8:	8e 2f       	mov	r24, r30
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	87 30       	cpi	r24, 0x07	; 7
 7be:	91 05       	cpc	r25, r1
 7c0:	08 f0       	brcs	.+2      	; 0x7c4 <MIDI_ParserTask+0x10>
 7c2:	96 c0       	rjmp	.+300    	; 0x8f0 <MIDI_ParserTask+0x13c>
 7c4:	fc 01       	movw	r30, r24
 7c6:	e6 56       	subi	r30, 0x66	; 102
 7c8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ca:	09 94       	ijmp
	{
		case RESET:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 7cc:	e4 e2       	ldi	r30, 0x24	; 36
 7ce:	f1 e0       	ldi	r31, 0x01	; 1
 7d0:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 7d2:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 7d4:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_TYPE_UNDEFINED;
 7d6:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 7da:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
			break;
 7e4:	08 95       	ret
		}
		
		case WAIT_WORD:
		{
			if(UART_RxBufferNotEmpty())
 7e6:	c2 d4       	rcall	.+2436   	; 0x116c <UART_RxBufferNotEmpty>
 7e8:	88 23       	and	r24, r24
 7ea:	09 f4       	brne	.+2      	; 0x7ee <MIDI_ParserTask+0x3a>
 7ec:	81 c0       	rjmp	.+258    	; 0x8f0 <MIDI_ParserTask+0x13c>
			{
				recievedWord = UART_PopWord();
 7ee:	82 d3       	rcall	.+1796   	; 0xef4 <UART_PopWord>
 7f0:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <recievedWord>
				if(MIDI_IsSysRealTime(recievedWord))
 7f4:	c9 d4       	rcall	.+2450   	; 0x1188 <MIDI_IsSysRealTime>
 7f6:	81 11       	cpse	r24, r1
 7f8:	7b c0       	rjmp	.+246    	; 0x8f0 <MIDI_ParserTask+0x13c>
				{ 
					handleRealTimeStatus((MIDI_Status_t)recievedWord);
					return;
				}
				
				if(MIDI_IsStatusWord(recievedWord))
 7fa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 7fe:	da d4       	rcall	.+2484   	; 0x11b4 <MIDI_IsStatusWord>
 800:	88 23       	and	r24, r24
 802:	21 f0       	breq	.+8      	; 0x80c <MIDI_ParserTask+0x58>
				{					
					state = DISPATCH_STATUS;
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
 80a:	08 95       	ret
				}
				else
				{
					switch(currentStatusType)
 80c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <currentStatusType>
 810:	82 30       	cpi	r24, 0x02	; 2
 812:	49 f0       	breq	.+18     	; 0x826 <MIDI_ParserTask+0x72>
 814:	18 f4       	brcc	.+6      	; 0x81c <MIDI_ParserTask+0x68>
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	51 f0       	breq	.+20     	; 0x82e <MIDI_ParserTask+0x7a>
 81a:	15 c0       	rjmp	.+42     	; 0x846 <MIDI_ParserTask+0x92>
 81c:	84 30       	cpi	r24, 0x04	; 4
 81e:	59 f0       	breq	.+22     	; 0x836 <MIDI_ParserTask+0x82>
 820:	85 30       	cpi	r24, 0x05	; 5
 822:	69 f0       	breq	.+26     	; 0x83e <MIDI_ParserTask+0x8a>
 824:	10 c0       	rjmp	.+32     	; 0x846 <MIDI_ParserTask+0x92>
					{
						case MIDI_TYPE_TWO_BYTE: state = REC_TWO_BYTE; break;
 826:	84 e0       	ldi	r24, 0x04	; 4
 828:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
 82c:	08 95       	ret
						case MIDI_TYPE_ONE_BYTE: state = REC_ONE_BYTE; break;
 82e:	83 e0       	ldi	r24, 0x03	; 3
 830:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
 834:	08 95       	ret
						case MIDI_TYPE_START_SYS_EX: state = REC_SYS_EX; break;
 836:	85 e0       	ldi	r24, 0x05	; 5
 838:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
 83c:	08 95       	ret
						case MIDI_TYPE_STOP_SYS_EX: state = HADLE_SYS_EX; break;
 83e:	86 e0       	ldi	r24, 0x06	; 6
 840:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
 844:	08 95       	ret
						default: state = WAIT_WORD;
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
 84c:	08 95       	ret
			break;
		}
		
		case DISPATCH_STATUS:
		{
			currentCommand.status = (MIDI_Status_t)((recievedWord & 0xF0) >> 4);
 84e:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <recievedWord>
 852:	89 2f       	mov	r24, r25
 854:	82 95       	swap	r24
 856:	8f 70       	andi	r24, 0x0F	; 15
 858:	e4 e2       	ldi	r30, 0x24	; 36
 85a:	f1 e0       	ldi	r31, 0x01	; 1
 85c:	80 83       	st	Z, r24
			currentCommand.channel = recievedWord & 0x0F;
 85e:	9f 70       	andi	r25, 0x0F	; 15
 860:	91 83       	std	Z+1, r25	; 0x01
			currentCommand.data1 = 0;
 862:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 864:	13 82       	std	Z+3, r1	; 0x03
			currentStatusType = MIDI_GetStatusType(currentCommand.status);
 866:	7b d2       	rcall	.+1270   	; 0xd5e <MIDI_GetStatusType>
 868:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <currentStatusType>
			isSecondDataWord = false;
 86c:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
			state = WAIT_WORD;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
			break;
 876:	08 95       	ret
		}				
		
		case REC_TWO_BYTE:
		{
			if(isSecondDataWord)
 878:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <isSecondDataWord>
 87c:	88 23       	and	r24, r24
 87e:	81 f0       	breq	.+32     	; 0x8a0 <MIDI_ParserTask+0xec>
			{
				currentCommand.data2 = recievedWord;
 880:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 884:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <currentCommand+0x3>
				isSecondDataWord = false;			
 888:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <isSecondDataWord>
				MIDICTRL_HandleCommand(currentCommand);
 88c:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 890:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 894:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 898:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 89c:	ea de       	rcall	.-556    	; 0x672 <MIDICTRL_HandleCommand>
 89e:	07 c0       	rjmp	.+14     	; 0x8ae <MIDI_ParserTask+0xfa>
			}
			else
			{
				currentCommand.data1 = recievedWord;
 8a0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 8a4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
				isSecondDataWord = true;
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <isSecondDataWord>
			}
			state = WAIT_WORD;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
			break;
 8b4:	08 95       	ret
		}
		
		case REC_ONE_BYTE:
		{
			currentCommand.data1 = recievedWord;
 8b6:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <recievedWord>
 8ba:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <currentCommand+0x2>
			MIDICTRL_HandleCommand(currentCommand);
 8be:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <currentCommand>
 8c2:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <currentCommand+0x1>
 8c6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <currentCommand+0x2>
 8ca:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <currentCommand+0x3>
 8ce:	d1 de       	rcall	.-606    	; 0x672 <MIDICTRL_HandleCommand>
			state = WAIT_WORD;
 8d0:	81 e0       	ldi	r24, 0x01	; 1
 8d2:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
			break;
 8d6:	08 95       	ret
		}
		
		case REC_SYS_EX:
		{
			state = WAIT_WORD;
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
			break;
 8de:	08 95       	ret
		}
		
		case HADLE_SYS_EX:
		{
			currentCommand.status = MIDI_COMM_UNDEFINED;
 8e0:	e4 e2       	ldi	r30, 0x24	; 36
 8e2:	f1 e0       	ldi	r31, 0x01	; 1
 8e4:	10 82       	st	Z, r1
			currentCommand.data1 = 0;
 8e6:	12 82       	std	Z+2, r1	; 0x02
			currentCommand.data2 = 0;
 8e8:	13 82       	std	Z+3, r1	; 0x03
			state = WAIT_WORD;
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <state>
 8f0:	08 95       	ret

Disassembly of section .text.setChannelLeds:

00001094 <setChannelLeds>:
	SH100CTRL_SetAmpState(ampState);
}

void setChannelLeds()
{
	SH100HW_SetNewLedState(LED_CH1, LED_OFF);
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	bf de       	rcall	.-642    	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH2, LED_OFF);
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	bc de       	rcall	.-648    	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH3, LED_OFF);
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	b9 de       	rcall	.-654    	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_CH4, LED_OFF);
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	83 e0       	ldi	r24, 0x03	; 3
    10aa:	b6 de       	rcall	.-660    	; 0xe18 <SH100HW_SetNewLedState>
	
	SH100HW_SetNewLedState(ampState.channelNum, LED_ON);
    10ac:	61 e0       	ldi	r22, 0x01	; 1
    10ae:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <ampState>
    10b2:	b2 de       	rcall	.-668    	; 0xe18 <SH100HW_SetNewLedState>
    10b4:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpLeds:

00001004 <SH100CTRL_SetAmpLeds>:
}

void SH100CTRL_SetAmpLeds()
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
	setChannelLeds();
    1008:	45 d0       	rcall	.+138    	; 0x1094 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
    100a:	c9 e2       	ldi	r28, 0x29	; 41
    100c:	d1 e0       	ldi	r29, 0x01	; 1
    100e:	69 81       	ldd	r22, Y+1	; 0x01
    1010:	85 e0       	ldi	r24, 0x05	; 5
    1012:	02 df       	rcall	.-508    	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
    1014:	6a 81       	ldd	r22, Y+2	; 0x02
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	68 27       	eor	r22, r24
    101a:	86 e0       	ldi	r24, 0x06	; 6
    101c:	fd de       	rcall	.-518    	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
    101e:	6a 81       	ldd	r22, Y+2	; 0x02
    1020:	87 e0       	ldi	r24, 0x07	; 7
    1022:	fa de       	rcall	.-524    	; 0xe18 <SH100HW_SetNewLedState>
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwChannel:

000011a0 <SH100CTRL_SwChannel>:

void SH100CTRL_SwChannel(uint8_t chNum)
{
	ampState.channelNum = chNum;
    11a0:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ampState>
	
	SH100HW_SwitchCh(chNum);
    11a4:	1c d0       	rcall	.+56     	; 0x11de <SH100HW_SwitchCh>
	setChannelLeds();
    11a6:	76 df       	rcall	.-276    	; 0x1094 <setChannelLeds>
    11a8:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwLoop:

000010b6 <SH100CTRL_SwLoop>:
}

void SH100CTRL_SwLoop()
{
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
	ampState.loopOn = !ampState.loopOn;
    10ba:	c9 e2       	ldi	r28, 0x29	; 41
    10bc:	d1 e0       	ldi	r29, 0x01	; 1
    10be:	99 81       	ldd	r25, Y+1	; 0x01
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	89 27       	eor	r24, r25
    10c4:	89 83       	std	Y+1, r24	; 0x01
	SH100HW_LoopEn(ampState.loopOn);
    10c6:	8c d0       	rcall	.+280    	; 0x11e0 <SH100HW_LoopEn>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
    10c8:	69 81       	ldd	r22, Y+1	; 0x01
    10ca:	85 e0       	ldi	r24, 0x05	; 5
    10cc:	a5 de       	rcall	.-694    	; 0xe18 <SH100HW_SetNewLedState>
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

Disassembly of section .text.SH100CTRL_SwAB:

00000fb2 <SH100CTRL_SwAB>:

void SH100CTRL_SwAB()
{
 fb2:	1f 93       	push	r17
 fb4:	cf 93       	push	r28
 fb6:	df 93       	push	r29
	ampState.swAB = !ampState.swAB;
 fb8:	c9 e2       	ldi	r28, 0x29	; 41
 fba:	d1 e0       	ldi	r29, 0x01	; 1
 fbc:	8a 81       	ldd	r24, Y+2	; 0x02
 fbe:	11 e0       	ldi	r17, 0x01	; 1
 fc0:	81 27       	eor	r24, r17
 fc2:	8a 83       	std	Y+2, r24	; 0x02
	SH100HW_SwitchAB(ampState.swAB);
 fc4:	0e d1       	rcall	.+540    	; 0x11e2 <SH100HW_SwitchAB>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
 fc6:	6a 81       	ldd	r22, Y+2	; 0x02
 fc8:	61 27       	eor	r22, r17
 fca:	86 e0       	ldi	r24, 0x06	; 6
 fcc:	25 df       	rcall	.-438    	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
 fce:	6a 81       	ldd	r22, Y+2	; 0x02
 fd0:	87 e0       	ldi	r24, 0x07	; 7
 fd2:	22 df       	rcall	.-444    	; 0xe18 <SH100HW_SetNewLedState>
}
 fd4:	df 91       	pop	r29
 fd6:	cf 91       	pop	r28
 fd8:	1f 91       	pop	r17
 fda:	08 95       	ret

Disassembly of section .text.SH100CTRL_MuteAmp:

000011dc <SH100CTRL_MuteAmp>:

void SH100CTRL_MuteAmp()
{
    11dc:	08 95       	ret

Disassembly of section .text.SH100CTRL_SetAmpState:

00000d9e <SH100CTRL_SetAmpState>:
	
}

void SH100CTRL_SetAmpState(SH100_State_t state)
{
 d9e:	cf 93       	push	r28
 da0:	df 93       	push	r29
	ampState = state;
 da2:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <ampState>
 da6:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <ampState+0x1>
 daa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <ampState+0x2>
	
	SH100HW_SwitchCh(ampState.channelNum);
 dae:	c9 e2       	ldi	r28, 0x29	; 41
 db0:	d1 e0       	ldi	r29, 0x01	; 1
 db2:	86 2f       	mov	r24, r22
 db4:	14 d2       	rcall	.+1064   	; 0x11de <SH100HW_SwitchCh>
	SH100HW_LoopEn(ampState.loopOn);
 db6:	89 81       	ldd	r24, Y+1	; 0x01
 db8:	13 d2       	rcall	.+1062   	; 0x11e0 <SH100HW_LoopEn>
	SH100HW_SwitchAB(ampState.swAB);
 dba:	8a 81       	ldd	r24, Y+2	; 0x02
 dbc:	12 d2       	rcall	.+1060   	; 0x11e2 <SH100HW_SwitchAB>
	
	setChannelLeds();
 dbe:	6a d1       	rcall	.+724    	; 0x1094 <setChannelLeds>
	SH100HW_SetNewLedState(LED_LOOP, ampState.loopOn);
 dc0:	69 81       	ldd	r22, Y+1	; 0x01
 dc2:	85 e0       	ldi	r24, 0x05	; 5
 dc4:	29 d0       	rcall	.+82     	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_A, !ampState.swAB);
 dc6:	6a 81       	ldd	r22, Y+2	; 0x02
 dc8:	81 e0       	ldi	r24, 0x01	; 1
 dca:	68 27       	eor	r22, r24
 dcc:	86 e0       	ldi	r24, 0x06	; 6
 dce:	24 d0       	rcall	.+72     	; 0xe18 <SH100HW_SetNewLedState>
	SH100HW_SetNewLedState(LED_B, ampState.swAB);
 dd0:	6a 81       	ldd	r22, Y+2	; 0x02
 dd2:	87 e0       	ldi	r24, 0x07	; 7
 dd4:	21 d0       	rcall	.+66     	; 0xe18 <SH100HW_SetNewLedState>
}
 dd6:	df 91       	pop	r29
 dd8:	cf 91       	pop	r28
 dda:	08 95       	ret

Disassembly of section .text.SH100CTRL_Init:

00000b12 <SH100CTRL_Init>:
#include "sh100_hardware.h"

SH100_State_t ampState;

void SH100CTRL_Init()
{
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	00 d0       	rcall	.+0      	; 0xb18 <SH100CTRL_Init+0x6>
 b18:	0f 92       	push	r0
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
	uint16_t readedMagicWord = eeprom_read_word(0x00);
 b1e:	60 e0       	ldi	r22, 0x00	; 0
 b20:	70 e0       	ldi	r23, 0x00	; 0
 b22:	80 e0       	ldi	r24, 0x00	; 0
 b24:	37 d3       	rcall	.+1646   	; 0x1194 <eeprom_read_word>
	
	if(readedMagicWord == MEMORY_MAGIC_WORD)
 b26:	8b 3a       	cpi	r24, 0xAB	; 171
 b28:	9c 4a       	sbci	r25, 0xAC	; 172
 b2a:	91 f4       	brne	.+36     	; 0xb50 <SH100CTRL_Init+0x3e>
	{
		uint8_t readedData[sizeof(SH100_State_t)];
		eeprom_read_block(&readedData, (uint16_t*)MEMORY_USER_COMMANDS_OFFSET, sizeof(SH100_State_t));
 b2c:	40 e1       	ldi	r20, 0x10	; 16
 b2e:	50 e0       	ldi	r21, 0x00	; 0
 b30:	60 e8       	ldi	r22, 0x80	; 128
 b32:	23 e0       	ldi	r18, 0x03	; 3
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	ce 01       	movw	r24, r28
 b38:	01 96       	adiw	r24, 0x01	; 1
 b3a:	89 d2       	rcall	.+1298   	; 0x104e <eeprom_read_block>
		SH100_State_t* ampState_ptr = (SH100_State_t*)readedData;
		ampState = *ampState_ptr;
 b3c:	89 81       	ldd	r24, Y+1	; 0x01
 b3e:	9a 81       	ldd	r25, Y+2	; 0x02
 b40:	ab 81       	ldd	r26, Y+3	; 0x03
 b42:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <ampState>
 b46:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <ampState+0x1>
 b4a:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <ampState+0x2>
 b4e:	05 c0       	rjmp	.+10     	; 0xb5a <SH100CTRL_Init+0x48>
	}
	else
	{
		ampState.channelNum = 0;
 b50:	e9 e2       	ldi	r30, 0x29	; 41
 b52:	f1 e0       	ldi	r31, 0x01	; 1
 b54:	10 82       	st	Z, r1
		ampState.loopOn = false;
 b56:	11 82       	std	Z+1, r1	; 0x01
		ampState.swAB = false;		
 b58:	12 82       	std	Z+2, r1	; 0x02
	}
	
	SH100CTRL_SetAmpState(ampState);
 b5a:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <ampState>
 b5e:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <ampState+0x1>
 b62:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <ampState+0x2>
 b66:	1b d1       	rcall	.+566    	; 0xd9e <SH100CTRL_SetAmpState>
}
 b68:	0f 90       	pop	r0
 b6a:	0f 90       	pop	r0
 b6c:	0f 90       	pop	r0
 b6e:	df 91       	pop	r29
 b70:	cf 91       	pop	r28
 b72:	08 95       	ret

Disassembly of section .text.SH100HW_Init:

00000aac <SH100HW_Init>:
SH100HW_Buttons_t buttonsState;
void readButtonsState();
void writeShiftRegs(uint16_t data);

void SH100HW_Init()
{
 aac:	1f 93       	push	r17
 aae:	cf 93       	push	r28
 ab0:	df 93       	push	r29
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 ab2:	45 b1       	in	r20, 0x05	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 ab4:	84 b1       	in	r24, 0x04	; 4
 ab6:	88 62       	ori	r24, 0x28	; 40
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 ab8:	28 b1       	in	r18, 0x08	; 8
 aba:	32 2f       	mov	r19, r18
 abc:	30 61       	ori	r19, 0x10	; 16
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
 abe:	97 b1       	in	r25, 0x07	; 7
 ac0:	90 61       	ori	r25, 0x10	; 16
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 ac2:	5b b1       	in	r21, 0x0b	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 ac4:	2a b1       	in	r18, 0x0a	; 10
 ac6:	20 6e       	ori	r18, 0xE0	; 224
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 ac8:	2b 7e       	andi	r18, 0xEB	; 235
 aca:	9b 7d       	andi	r25, 0xDB	; 219
 acc:	8c 7f       	andi	r24, 0xFC	; 252
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 ace:	53 70       	andi	r21, 0x03	; 3
 ad0:	5b b9       	out	0x0b, r21	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
 ad2:	28 60       	ori	r18, 0x08	; 8
 ad4:	2a b9       	out	0x0a, r18	; 10
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 ad6:	23 2f       	mov	r18, r19
 ad8:	21 7d       	andi	r18, 0xD1	; 209
 ada:	28 b9       	out	0x08, r18	; 8
		}

		*((uint8_t *)port + 1) |= pin_mask;
 adc:	9a 60       	ori	r25, 0x0A	; 10
 ade:	97 b9       	out	0x07, r25	; 7
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 ae0:	94 2f       	mov	r25, r20
 ae2:	90 7d       	andi	r25, 0xD0	; 208
 ae4:	95 b9       	out	0x05, r25	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
 ae6:	84 60       	ori	r24, 0x04	; 4
 ae8:	84 b9       	out	0x04, r24	; 4
	//led_ptr[LED_LOOP] = &ledLoop;
	//led_ptr[LED_A] = &ledA;
	//led_ptr[LED_B] = &ledB;
	//led_ptr[LED_PWR_GRN] = &ledPwrGrn;
	//led_ptr[LED_PWR_RED] = &ledPwrRed;
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 aea:	10 e0       	ldi	r17, 0x00	; 0
 aec:	0c c0       	rjmp	.+24     	; 0xb06 <SH100HW_Init+0x5a>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
 aee:	c1 2f       	mov	r28, r17
 af0:	d0 e0       	ldi	r29, 0x00	; 0
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	fd de       	rcall	.-518    	; 0x8f2 <__simple_malloc>
 af8:	cc 0f       	add	r28, r28
 afa:	dd 1f       	adc	r29, r29
 afc:	cf 5b       	subi	r28, 0xBF	; 191
 afe:	de 4f       	sbci	r29, 0xFE	; 254
 b00:	99 83       	std	Y+1, r25	; 0x01
 b02:	88 83       	st	Y, r24
	//led_ptr[LED_LOOP] = &ledLoop;
	//led_ptr[LED_A] = &ledA;
	//led_ptr[LED_B] = &ledB;
	//led_ptr[LED_PWR_GRN] = &ledPwrGrn;
	//led_ptr[LED_PWR_RED] = &ledPwrRed;
	for(uint8_t i=0; i < LED_COUNT*2; i++)
 b04:	1f 5f       	subi	r17, 0xFF	; 255
 b06:	12 31       	cpi	r17, 0x12	; 18
 b08:	90 f3       	brcs	.-28     	; 0xaee <SH100HW_Init+0x42>
	{
		led_ptr[i] = malloc(sizeof(SH100HW_LedState_t));
	}
}
 b0a:	df 91       	pop	r29
 b0c:	cf 91       	pop	r28
 b0e:	1f 91       	pop	r17
 b10:	08 95       	ret

Disassembly of section .text.SH100HW_GetButtonsState:

00001148 <SH100HW_GetButtonsState>:

SH100HW_Buttons_t SH100HW_GetButtonsState()
{
	return buttonsState;
    1148:	2f e0       	ldi	r18, 0x0F	; 15
    114a:	e2 e3       	ldi	r30, 0x32	; 50
    114c:	f1 e0       	ldi	r31, 0x01	; 1
    114e:	dc 01       	movw	r26, r24
    1150:	01 90       	ld	r0, Z+
    1152:	0d 92       	st	X+, r0
    1154:	2a 95       	dec	r18
    1156:	e1 f7       	brne	.-8      	; 0x1150 <SH100HW_GetButtonsState+0x8>
}
    1158:	08 95       	ret

Disassembly of section .text.SH100HW_SwitchCh:

000011de <SH100HW_SwitchCh>:

void SH100HW_SwitchCh(uint8_t chNum)
{
    11de:	08 95       	ret

Disassembly of section .text.SH100HW_LoopEn:

000011e0 <SH100HW_LoopEn>:
		default: break;
	}
}

void SH100HW_LoopEn(bool isEnabled)
{
    11e0:	08 95       	ret

Disassembly of section .text.SH100HW_SwitchAB:

000011e2 <SH100HW_SwitchAB>:
	
}

void SH100HW_SwitchAB(bool isBEn)
{
    11e2:	08 95       	ret

Disassembly of section .text.SH100HW_SetNewLedState:

00000e18 <SH100HW_SetNewLedState>:
	
}

void SH100HW_SetNewLedState(uint8_t ledId, SH100HW_LedState_t newState)
{
 e18:	cf 93       	push	r28
 e1a:	df 93       	push	r29
	*led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET] = *led_ptr[ledId];
 e1c:	e8 2f       	mov	r30, r24
 e1e:	f0 e0       	ldi	r31, 0x00	; 0
 e20:	df 01       	movw	r26, r30
 e22:	19 96       	adiw	r26, 0x09	; 9
 e24:	aa 0f       	add	r26, r26
 e26:	bb 1f       	adc	r27, r27
 e28:	af 5b       	subi	r26, 0xBF	; 191
 e2a:	be 4f       	sbci	r27, 0xFE	; 254
 e2c:	0d 90       	ld	r0, X+
 e2e:	bc 91       	ld	r27, X
 e30:	a0 2d       	mov	r26, r0
 e32:	ee 0f       	add	r30, r30
 e34:	ff 1f       	adc	r31, r31
 e36:	ef 5b       	subi	r30, 0xBF	; 191
 e38:	fe 4f       	sbci	r31, 0xFE	; 254
 e3a:	c0 81       	ld	r28, Z
 e3c:	d1 81       	ldd	r29, Z+1	; 0x01
 e3e:	88 81       	ld	r24, Y
 e40:	8c 93       	st	X, r24
	*led_ptr[ledId] = newState;
 e42:	01 90       	ld	r0, Z+
 e44:	f0 81       	ld	r31, Z
 e46:	e0 2d       	mov	r30, r0
 e48:	60 83       	st	Z, r22
}
 e4a:	df 91       	pop	r29
 e4c:	cf 91       	pop	r28
 e4e:	08 95       	ret

Disassembly of section .text.SH100HW_SetPreviousLedState:

00000fdc <SH100HW_SetPreviousLedState>:

void SH100HW_SetPreviousLedState(uint8_t ledId)
{
	*led_ptr[ledId] = *led_ptr[ledId+LED_PREVIOUS_STATE_OFFSET];
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	fc 01       	movw	r30, r24
     fe0:	ee 0f       	add	r30, r30
     fe2:	ff 1f       	adc	r31, r31
     fe4:	ef 5b       	subi	r30, 0xBF	; 191
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	a0 81       	ld	r26, Z
     fea:	b1 81       	ldd	r27, Z+1	; 0x01
     fec:	fc 01       	movw	r30, r24
     fee:	39 96       	adiw	r30, 0x09	; 9
     ff0:	ee 0f       	add	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	ef 5b       	subi	r30, 0xBF	; 191
     ff6:	fe 4f       	sbci	r31, 0xFE	; 254
     ff8:	01 90       	ld	r0, Z+
     ffa:	f0 81       	ld	r31, Z
     ffc:	e0 2d       	mov	r30, r0
     ffe:	80 81       	ld	r24, Z
    1000:	8c 93       	st	X, r24
    1002:	08 95       	ret

Disassembly of section .text.readButtonsState:

0000037c <readButtonsState>:

//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	ac c0       	rjmp	.+344    	; 0x4d8 <__DATA_REGION_LENGTH__+0xd8>
	{
		
		switch(cnt)
 380:	48 2f       	mov	r20, r24
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	48 30       	cpi	r20, 0x08	; 8
 386:	51 05       	cpc	r21, r1
 388:	08 f0       	brcs	.+2      	; 0x38c <readButtonsState+0x10>
 38a:	a5 c0       	rjmp	.+330    	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
 38c:	fa 01       	movw	r30, r20
 38e:	ef 55       	subi	r30, 0x5F	; 95
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	09 94       	ijmp
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 394:	3b b1       	in	r19, 0x0b	; 11
 396:	3f 7d       	andi	r19, 0xDF	; 223
 398:	3b b9       	out	0x0b, r19	; 11
 39a:	3b b1       	in	r19, 0x0b	; 11
 39c:	3f 7b       	andi	r19, 0xBF	; 191
 39e:	3b b9       	out	0x0b, r19	; 11
 3a0:	3b b1       	in	r19, 0x0b	; 11
 3a2:	3f 77       	andi	r19, 0x7F	; 127
 3a4:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 3a6:	31 e0       	ldi	r19, 0x01	; 1
 3a8:	4c 9b       	sbis	0x09, 4	; 9
 3aa:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiOmni = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
 3ac:	30 93 33 01 	sts	0x0133, r19	; 0x800133 <buttonsState+0x1>
 3b0:	31 e0       	ldi	r19, 0x01	; 1
 3b2:	35 9b       	sbis	0x06, 5	; 6
 3b4:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_sleeve = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 3b6:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <buttonsState+0xc>
				break;
 3ba:	8d c0       	rjmp	.+282    	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 3bc:	2b b1       	in	r18, 0x0b	; 11
 3be:	20 62       	ori	r18, 0x20	; 32
 3c0:	2b b9       	out	0x0b, r18	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 3c2:	2b b1       	in	r18, 0x0b	; 11
 3c4:	2f 7b       	andi	r18, 0xBF	; 191
 3c6:	2b b9       	out	0x0b, r18	; 11
 3c8:	2b b1       	in	r18, 0x0b	; 11
 3ca:	2f 77       	andi	r18, 0x7F	; 127
 3cc:	2b b9       	out	0x0b, r18	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	4c 9b       	sbis	0x09, 4	; 9
 3d2:	20 e0       	ldi	r18, 0x00	; 0
 3d4:	31 e0       	ldi	r19, 0x01	; 1
 3d6:	4a 9b       	sbis	0x09, 2	; 9
 3d8:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[3] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnAB = arch_ioport_get_pin_level(PIN_BUTTONS);
 3da:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <buttonsState+0x7>
 3de:	31 e0       	ldi	r19, 0x01	; 1
 3e0:	35 9b       	sbis	0x06, 5	; 6
 3e2:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_presence = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 3e4:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <buttonsState+0xe>
				break;
 3e8:	76 c0       	rjmp	.+236    	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 3ea:	9b b1       	in	r25, 0x0b	; 11
 3ec:	9f 7d       	andi	r25, 0xDF	; 223
 3ee:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 3f0:	9b b1       	in	r25, 0x0b	; 11
 3f2:	90 64       	ori	r25, 0x40	; 64
 3f4:	9b b9       	out	0x0b, r25	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 3f6:	9b b1       	in	r25, 0x0b	; 11
 3f8:	9f 77       	andi	r25, 0x7F	; 127
 3fa:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	4c 9b       	sbis	0x09, 4	; 9
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	31 e0       	ldi	r19, 0x01	; 1
 404:	4a 9b       	sbis	0x09, 2	; 9
 406:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				midiChBit[2] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnLoop = arch_ioport_get_pin_level(PIN_BUTTONS);
 408:	30 93 3a 01 	sts	0x013A, r19	; 0x80013a <buttonsState+0x8>
 40c:	31 e0       	ldi	r19, 0x01	; 1
 40e:	35 9b       	sbis	0x06, 5	; 6
 410:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_presence = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 412:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <buttonsState+0xb>
				break;
 416:	5f c0       	rjmp	.+190    	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 418:	3b b1       	in	r19, 0x0b	; 11
 41a:	30 62       	ori	r19, 0x20	; 32
 41c:	3b b9       	out	0x0b, r19	; 11
 41e:	3b b1       	in	r19, 0x0b	; 11
 420:	30 64       	ori	r19, 0x40	; 64
 422:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 424:	3b b1       	in	r19, 0x0b	; 11
 426:	3f 77       	andi	r19, 0x7F	; 127
 428:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 42a:	31 e0       	ldi	r19, 0x01	; 1
 42c:	4c 9b       	sbis	0x09, 4	; 9
 42e:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 0);
				
				buttonsState.midiMuteComm = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
 430:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <buttonsState+0x2>
 434:	31 e0       	ldi	r19, 0x01	; 1
 436:	35 9b       	sbis	0x06, 5	; 6
 438:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_sleeve = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 43a:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <buttonsState+0x9>
				break;
 43e:	4b c0       	rjmp	.+150    	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 440:	3b b1       	in	r19, 0x0b	; 11
 442:	3f 7d       	andi	r19, 0xDF	; 223
 444:	3b b9       	out	0x0b, r19	; 11
 446:	3b b1       	in	r19, 0x0b	; 11
 448:	3f 7b       	andi	r19, 0xBF	; 191
 44a:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 44c:	3b b1       	in	r19, 0x0b	; 11
 44e:	30 68       	ori	r19, 0x80	; 128
 450:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 452:	a1 e0       	ldi	r26, 0x01	; 1
 454:	4c 9b       	sbis	0x09, 4	; 9
 456:	a0 e0       	ldi	r26, 0x00	; 0
 458:	31 e0       	ldi	r19, 0x01	; 1
 45a:	4a 9b       	sbis	0x09, 2	; 9
 45c:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[0] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh2 = arch_ioport_get_pin_level(PIN_BUTTONS);
 45e:	30 93 36 01 	sts	0x0136, r19	; 0x800136 <buttonsState+0x4>
 462:	31 e0       	ldi	r19, 0x01	; 1
 464:	35 9b       	sbis	0x06, 5	; 6
 466:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS1_tip = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 468:	30 93 3c 01 	sts	0x013C, r19	; 0x80013c <buttonsState+0xa>
				break;
 46c:	34 c0       	rjmp	.+104    	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 46e:	3b b1       	in	r19, 0x0b	; 11
 470:	30 62       	ori	r19, 0x20	; 32
 472:	3b b9       	out	0x0b, r19	; 11
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 474:	3b b1       	in	r19, 0x0b	; 11
 476:	3f 7b       	andi	r19, 0xBF	; 191
 478:	3b b9       	out	0x0b, r19	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 47a:	3b b1       	in	r19, 0x0b	; 11
 47c:	30 68       	ori	r19, 0x80	; 128
 47e:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 480:	31 e0       	ldi	r19, 0x01	; 1
 482:	4a 9b       	sbis	0x09, 2	; 9
 484:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 0);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh3 = arch_ioport_get_pin_level(PIN_BUTTONS);
 486:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <buttonsState+0x5>
				break;
 48a:	25 c0       	rjmp	.+74     	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 48c:	9b b1       	in	r25, 0x0b	; 11
 48e:	9f 7d       	andi	r25, 0xDF	; 223
 490:	9b b9       	out	0x0b, r25	; 11
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 492:	9b b1       	in	r25, 0x0b	; 11
 494:	90 64       	ori	r25, 0x40	; 64
 496:	9b b9       	out	0x0b, r25	; 11
 498:	9b b1       	in	r25, 0x0b	; 11
 49a:	90 68       	ori	r25, 0x80	; 128
 49c:	9b b9       	out	0x0b, r25	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	4c 9b       	sbis	0x09, 4	; 9
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	31 e0       	ldi	r19, 0x01	; 1
 4a6:	4a 9b       	sbis	0x09, 2	; 9
 4a8:	30 e0       	ldi	r19, 0x00	; 0
				arch_ioport_set_pin_level(PIN_A, 0);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				midiChBit[2] = arch_ioport_get_pin_level(PIN_MIDI_SWITCH);
				buttonsState.btnCh4 = arch_ioport_get_pin_level(PIN_BUTTONS);
 4aa:	30 93 38 01 	sts	0x0138, r19	; 0x800138 <buttonsState+0x6>
 4ae:	31 e0       	ldi	r19, 0x01	; 1
 4b0:	35 9b       	sbis	0x06, 5	; 6
 4b2:	30 e0       	ldi	r19, 0x00	; 0
				buttonsState.FS2_tip = arch_ioport_get_pin_level(PIN_FOOTSWITCH);
 4b4:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <buttonsState+0xd>
				break;
 4b8:	0e c0       	rjmp	.+28     	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 4ba:	3b b1       	in	r19, 0x0b	; 11
 4bc:	30 62       	ori	r19, 0x20	; 32
 4be:	3b b9       	out	0x0b, r19	; 11
 4c0:	3b b1       	in	r19, 0x0b	; 11
 4c2:	30 64       	ori	r19, 0x40	; 64
 4c4:	3b b9       	out	0x0b, r19	; 11
 4c6:	3b b1       	in	r19, 0x0b	; 11
 4c8:	30 68       	ori	r19, 0x80	; 128
 4ca:	3b b9       	out	0x0b, r19	; 11
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
 4cc:	31 e0       	ldi	r19, 0x01	; 1
 4ce:	4a 9b       	sbis	0x09, 2	; 9
 4d0:	30 e0       	ldi	r19, 0x00	; 0
			{
				arch_ioport_set_pin_level(PIN_A, 1);
				arch_ioport_set_pin_level(PIN_B, 1);
				arch_ioport_set_pin_level(PIN_C, 1);
				
				buttonsState.btnCh1 = arch_ioport_get_pin_level(PIN_BUTTONS);
 4d2:	30 93 35 01 	sts	0x0135, r19	; 0x800135 <buttonsState+0x3>

//=================================== PRIVATE FUNCTIONS==============================
void readButtonsState()
{
	uint8_t midiChBit[4];
	for(uint8_t cnt = 0; cnt<8; cnt++)
 4d6:	8f 5f       	subi	r24, 0xFF	; 255
 4d8:	88 30       	cpi	r24, 0x08	; 8
 4da:	08 f4       	brcc	.+2      	; 0x4de <__DATA_REGION_LENGTH__+0xde>
 4dc:	51 cf       	rjmp	.-350    	; 0x380 <readButtonsState+0x4>
			}
			default: break;
		}
	}
	
	buttonsState.midiChNum = midiChBit[0] | (midiChBit[1]<<1) | (midiChBit[2]<<2) | (midiChBit[3]<<3);
 4de:	89 2f       	mov	r24, r25
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	22 0f       	add	r18, r18
 4ee:	33 1f       	adc	r19, r19
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	22 0f       	add	r18, r18
 4f6:	33 1f       	adc	r19, r19
 4f8:	8a 2b       	or	r24, r26
 4fa:	82 2b       	or	r24, r18
 4fc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <buttonsState>
 500:	08 95       	ret

Disassembly of section .text.writeShiftRegs:

00000d14 <writeShiftRegs>:
}

void writeShiftRegs(uint16_t data)
{
 d14:	ac 01       	movw	r20, r24
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 d16:	88 b1       	in	r24, 0x08	; 8
 d18:	80 61       	ori	r24, 0x10	; 16
 d1a:	88 b9       	out	0x08, r24	; 8
	arch_ioport_set_pin_level(PIN_ST, 1);
	for(uint8_t i=0; i<16; i++)
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	16 c0       	rjmp	.+44     	; 0xd4c <writeShiftRegs+0x38>
	{
		data = data << i;
 d20:	09 2e       	mov	r0, r25
 d22:	02 c0       	rjmp	.+4      	; 0xd28 <writeShiftRegs+0x14>
 d24:	44 0f       	add	r20, r20
 d26:	55 1f       	adc	r21, r21
 d28:	0a 94       	dec	r0
 d2a:	e2 f7       	brpl	.-8      	; 0xd24 <writeShiftRegs+0x10>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 d2c:	25 b1       	in	r18, 0x05	; 5
 d2e:	2f 7d       	andi	r18, 0xDF	; 223
 d30:	25 b9       	out	0x05, r18	; 5
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
 d32:	47 ff       	sbrs	r20, 7
 d34:	04 c0       	rjmp	.+8      	; 0xd3e <writeShiftRegs+0x2a>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 d36:	85 b1       	in	r24, 0x05	; 5
 d38:	88 60       	ori	r24, 0x08	; 8
 d3a:	85 b9       	out	0x05, r24	; 5
 d3c:	03 c0       	rjmp	.+6      	; 0xd44 <writeShiftRegs+0x30>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 d3e:	85 b1       	in	r24, 0x05	; 5
 d40:	87 7f       	andi	r24, 0xF7	; 247
 d42:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 d44:	25 b1       	in	r18, 0x05	; 5
 d46:	20 62       	ori	r18, 0x20	; 32
 d48:	25 b9       	out	0x05, r18	; 5
}

void writeShiftRegs(uint16_t data)
{
	arch_ioport_set_pin_level(PIN_ST, 1);
	for(uint8_t i=0; i<16; i++)
 d4a:	9f 5f       	subi	r25, 0xFF	; 255
 d4c:	90 31       	cpi	r25, 0x10	; 16
 d4e:	40 f3       	brcs	.-48     	; 0xd20 <writeShiftRegs+0xc>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 d50:	85 b1       	in	r24, 0x05	; 5
 d52:	8f 7d       	andi	r24, 0xDF	; 223
 d54:	85 b9       	out	0x05, r24	; 5
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 d56:	88 b1       	in	r24, 0x08	; 8
 d58:	80 61       	ori	r24, 0x10	; 16
 d5a:	88 b9       	out	0x08, r24	; 8
 d5c:	08 95       	ret

Disassembly of section .text.SH100HW_MainTask:

000001c4 <SH100HW_MainTask>:
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	29 97       	sbiw	r28, 0x09	; 9
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
	readButtonsState();
 1d8:	d1 d0       	rcall	.+418    	; 0x37c <readButtonsState>
	
	// blink work----------------------------------------------
	bool isLedOn[LED_COUNT];	
	if((blinkCounter % 25) == 0 && blinkCounter != 0)
 1da:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <blinkCounter>
 1de:	89 e2       	ldi	r24, 0x29	; 41
 1e0:	98 9f       	mul	r25, r24
 1e2:	81 2d       	mov	r24, r1
 1e4:	11 24       	eor	r1, r1
 1e6:	86 95       	lsr	r24
 1e8:	86 95       	lsr	r24
 1ea:	39 2f       	mov	r19, r25
 1ec:	29 e1       	ldi	r18, 0x19	; 25
 1ee:	82 9f       	mul	r24, r18
 1f0:	30 19       	sub	r19, r0
 1f2:	11 24       	eor	r1, r1
 1f4:	31 11       	cpse	r19, r1
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 1f8:	99 23       	and	r25, r25
 1fa:	31 f0       	breq	.+12     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
	{
		fastBlink = !fastBlink;
 1fc:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <fastBlink>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	82 27       	eor	r24, r18
 204:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <fastBlink>
	}
	
	if(blinkCounter == 100)
 208:	94 36       	cpi	r25, 0x64	; 100
 20a:	51 f4       	brne	.+20     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
	{
		blinkCounter = 0;
 20c:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <blinkCounter>
		slowBlink = !slowBlink;
 210:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <slowBlink>
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	89 27       	eor	r24, r25
 218:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <slowBlink>
uint8_t blinkCounter = 0;
bool slowBlink = false;
bool fastBlink = false;
uint8_t indErrorCnt = 0;
void SH100HW_MainTask()
{
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	3f c0       	rjmp	.+126    	; 0x29e <__EEPROM_REGION_LENGTH__+0x9e>
		blinkCounter = 0;
		slowBlink = !slowBlink;
	}
	else
	{
		blinkCounter++;
 220:	9f 5f       	subi	r25, 0xFF	; 255
 222:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <blinkCounter>
 226:	fa cf       	rjmp	.-12     	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
	{
		switch(*led_ptr[i])
 228:	82 2f       	mov	r24, r18
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	ef 5b       	subi	r30, 0xBF	; 191
 234:	fe 4f       	sbci	r31, 0xFE	; 254
 236:	01 90       	ld	r0, Z+
 238:	f0 81       	ld	r31, Z
 23a:	e0 2d       	mov	r30, r0
 23c:	30 81       	ld	r19, Z
 23e:	31 30       	cpi	r19, 0x01	; 1
 240:	71 f0       	breq	.+28     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 242:	28 f0       	brcs	.+10     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 244:	32 30       	cpi	r19, 0x02	; 2
 246:	a1 f0       	breq	.+40     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 248:	33 30       	cpi	r19, 0x03	; 3
 24a:	e1 f0       	breq	.+56     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
 24c:	27 c0       	rjmp	.+78     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
		{
			case LED_OFF: isLedOn[i] = false; break;
 24e:	e1 e0       	ldi	r30, 0x01	; 1
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	ec 0f       	add	r30, r28
 254:	fd 1f       	adc	r31, r29
 256:	e8 0f       	add	r30, r24
 258:	f9 1f       	adc	r31, r25
 25a:	10 82       	st	Z, r1
 25c:	1f c0       	rjmp	.+62     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
			case LED_ON: isLedOn[i] = true; break;
 25e:	e1 e0       	ldi	r30, 0x01	; 1
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	e8 0f       	add	r30, r24
 268:	f9 1f       	adc	r31, r25
 26a:	31 e0       	ldi	r19, 0x01	; 1
 26c:	30 83       	st	Z, r19
 26e:	16 c0       	rjmp	.+44     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
			case LED_FAST_BLINKING: 
			{
				isLedOn[i] = fastBlink; 
 270:	e1 e0       	ldi	r30, 0x01	; 1
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	ec 0f       	add	r30, r28
 276:	fd 1f       	adc	r31, r29
 278:	e8 0f       	add	r30, r24
 27a:	f9 1f       	adc	r31, r25
 27c:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <fastBlink>
 280:	30 83       	st	Z, r19
				//isLedOn[LED_PWR_GRN] = !fastBlink; // Green led blink 180deg phase of red led
				break;
 282:	0c c0       	rjmp	.+24     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
			}
			case LED_SLOW_BLINKING: 
			{
				isLedOn[i] = slowBlink;
 284:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <slowBlink>
 288:	e1 e0       	ldi	r30, 0x01	; 1
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	ec 0f       	add	r30, r28
 28e:	fd 1f       	adc	r31, r29
 290:	e8 0f       	add	r30, r24
 292:	f9 1f       	adc	r31, r25
 294:	30 83       	st	Z, r19
				isLedOn[LED_PWR_GRN] = !slowBlink; // Green led slow blink 180deg phase of red led
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	83 27       	eor	r24, r19
 29a:	88 87       	std	Y+8, r24	; 0x08
	else
	{
		blinkCounter++;
	}
	
	for(uint8_t i=0; i<LED_COUNT; i++)
 29c:	2f 5f       	subi	r18, 0xFF	; 255
 29e:	29 30       	cpi	r18, 0x09	; 9
 2a0:	18 f2       	brcs	.-122    	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
			}	
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2a2:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <RELAY_13_24>
								((uint16_t)RELAY_1_3 << 1)			|
 2a6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <RELAY_1_3>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
			}	
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
 2b0:	ac 01       	movw	r20, r24
 2b2:	42 2b       	or	r20, r18
 2b4:	9a 01       	movw	r18, r20
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 2b6:	9b 81       	ldd	r25, Y+3	; 0x03
 2b8:	89 2f       	mov	r24, r25
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
		}
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
 2c4:	82 2b       	or	r24, r18
 2c6:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 2c8:	29 81       	ldd	r18, Y+1	; 0x01
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	22 0f       	add	r18, r18
 2ce:	33 1f       	adc	r19, r19
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
	}
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
 2d8:	82 2b       	or	r24, r18
 2da:	93 2b       	or	r25, r19
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
 2dc:	4a 81       	ldd	r20, Y+2	; 0x02
 2de:	20 e1       	ldi	r18, 0x10	; 16
 2e0:	42 9f       	mul	r20, r18
 2e2:	a0 01       	movw	r20, r0
 2e4:	11 24       	eor	r1, r1
	
	// form result--------------------------------------------------------------
	uint16_t resultSendWord =	((uint16_t)RELAY_13_24)				|
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
 2e6:	48 2b       	or	r20, r24
 2e8:	59 2b       	or	r21, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
 2ea:	2c 81       	ldd	r18, Y+4	; 0x04
 2ec:	80 e2       	ldi	r24, 0x20	; 32
 2ee:	28 9f       	mul	r18, r24
 2f0:	90 01       	movw	r18, r0
 2f2:	11 24       	eor	r1, r1
 2f4:	42 2b       	or	r20, r18
 2f6:	53 2b       	or	r21, r19
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 2f8:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <RELAY_8_16>
 2fc:	80 e8       	ldi	r24, 0x80	; 128
 2fe:	28 9f       	mul	r18, r24
 300:	90 01       	movw	r18, r0
 302:	11 24       	eor	r1, r1
								((uint16_t)RELAY_1_3 << 1)			|
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
 304:	42 2b       	or	r20, r18
 306:	53 2b       	or	r21, r19
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << 8)			|
 308:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <RELAY_2_4>
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	98 2f       	mov	r25, r24
 310:	88 27       	eor	r24, r24
								((uint16_t)isLedOn[LED_CH3] << 2)	|
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
 312:	48 2b       	or	r20, r24
 314:	59 2b       	or	r21, r25
								((uint16_t)RELAY_2_4 << 8)			|
								((uint16_t)isLedOn[LED_A] << 9)	|
 316:	8f 81       	ldd	r24, Y+7	; 0x07
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	98 2f       	mov	r25, r24
 31c:	88 27       	eor	r24, r24
 31e:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH1] << 3)	|
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << 8)			|
 320:	48 2b       	or	r20, r24
 322:	59 2b       	or	r21, r25
								((uint16_t)isLedOn[LED_A] << 9)	|
								((uint16_t)isLedOn[LED_B] << 10)	|
 324:	98 85       	ldd	r25, Y+8	; 0x08
 326:	29 2f       	mov	r18, r25
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	c9 01       	movw	r24, r18
 32c:	98 2f       	mov	r25, r24
 32e:	88 27       	eor	r24, r24
 330:	99 0f       	add	r25, r25
 332:	99 0f       	add	r25, r25
								((uint16_t)isLedOn[LED_CH2] << 4)	|
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << 8)			|
								((uint16_t)isLedOn[LED_A] << 9)	|
 334:	48 2b       	or	r20, r24
 336:	59 2b       	or	r21, r25
								((uint16_t)isLedOn[LED_B] << 10)	|
								((uint16_t)isLedOn[LED_PWR_GRN] << 11)	|
 338:	32 2f       	mov	r19, r18
 33a:	22 27       	eor	r18, r18
 33c:	33 0f       	add	r19, r19
 33e:	33 0f       	add	r19, r19
 340:	33 0f       	add	r19, r19
								((uint16_t)isLedOn[LED_CH4] << 5)	|
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << 8)			|
								((uint16_t)isLedOn[LED_A] << 9)	|
								((uint16_t)isLedOn[LED_B] << 10)	|
 342:	24 2b       	or	r18, r20
 344:	35 2b       	or	r19, r21
								((uint16_t)isLedOn[LED_PWR_GRN] << 11)	|
								((uint16_t)isLedOn[LED_PWR_RED] << 12)	|
 346:	89 85       	ldd	r24, Y+9	; 0x09
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	98 2f       	mov	r25, r24
 34c:	88 27       	eor	r24, r24
 34e:	92 95       	swap	r25
 350:	90 7f       	andi	r25, 0xF0	; 240
								(0 << 6)					|
								((uint16_t)RELAY_8_16 << 7)			|
								((uint16_t)RELAY_2_4 << 8)			|
								((uint16_t)isLedOn[LED_A] << 9)	|
								((uint16_t)isLedOn[LED_B] << 10)	|
								((uint16_t)isLedOn[LED_PWR_GRN] << 11)	|
 352:	28 2b       	or	r18, r24
 354:	39 2b       	or	r19, r25
								((uint16_t)isLedOn[LED_PWR_RED] << 12)	|
								((uint16_t)isLedOn[LED_LOOP] << 13);
 356:	8e 81       	ldd	r24, Y+6	; 0x06
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	98 2f       	mov	r25, r24
 35c:	88 27       	eor	r24, r24
 35e:	92 95       	swap	r25
 360:	99 0f       	add	r25, r25
 362:	90 7e       	andi	r25, 0xE0	; 224

	writeShiftRegs(resultSendWord);
 364:	82 2b       	or	r24, r18
 366:	93 2b       	or	r25, r19
 368:	d5 d4       	rcall	.+2474   	; 0xd14 <writeShiftRegs>
 36a:	29 96       	adiw	r28, 0x09	; 9
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	f8 94       	cli
 370:	de bf       	out	0x3e, r29	; 62
 372:	0f be       	out	0x3f, r0	; 63
 374:	cd bf       	out	0x3d, r28	; 61
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	08 95       	ret

Disassembly of section .text.UART_init:

000010f0 <UART_init>:
	// Rx INT: On
	// Tx INT: On
	// Receiver: On
	// Transmitter: On
	
	UCSR0B = (1<<RXCIE0) | (1<<TXCIE0) | (1<<RXEN0) | (1<<TXEN0); //UCSR1B=0x98;
    10f0:	88 ed       	ldi	r24, 0xD8	; 216
    10f2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fe0c1>
	
	// 8 Data, 1 Stop, No Parity
	UCSR0C=0x06; 
    10f6:	86 e0       	ldi	r24, 0x06	; 6
    10f8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fe0c2>
	
	// USART0 Mode: Asynchronous
	// USART Baud Rate: Fosc/320 = Fosc/16(UBRR+1)
	UBRR0H=0x00;
    10fc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fe0c5>
	UBRR0L=0x13;
    1100:	83 e1       	ldi	r24, 0x13	; 19
    1102:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fe0c4>
    1106:	08 95       	ret

Disassembly of section .text.__vector_18:

00000b74 <__vector_18>:
uint8_t rx_wr_index, rx_rd_index, rx_counter;

bool rx_buffer_overflow;

ISR(USART_RX_vect)
{
 b74:	1f 92       	push	r1
 b76:	1f b6       	in	r1, 0x3f	; 63
 b78:	1f 92       	push	r1
 b7a:	11 24       	eor	r1, r1
 b7c:	8f 93       	push	r24
 b7e:	9f 93       	push	r25
 b80:	ef 93       	push	r30
 b82:	ff 93       	push	r31
	uint8_t status, data;
	status = UCSR0A;
 b84:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fe0c0>
	data = UDR0;
 b88:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
	
	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
 b8c:	8c 71       	andi	r24, 0x1C	; 28
 b8e:	d1 f4       	brne	.+52     	; 0xbc4 <__vector_18+0x50>
	{
		rx_buffer0[rx_wr_index++] = data;
 b90:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <rx_wr_index>
 b94:	81 e0       	ldi	r24, 0x01	; 1
 b96:	8e 0f       	add	r24, r30
 b98:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <rx_wr_index>
 b9c:	f0 e0       	ldi	r31, 0x00	; 0
 b9e:	ef 58       	subi	r30, 0x8F	; 143
 ba0:	fe 4f       	sbci	r31, 0xFE	; 254
 ba2:	90 83       	st	Z, r25
		
		if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
 ba4:	80 31       	cpi	r24, 0x10	; 16
 ba6:	11 f4       	brne	.+4      	; 0xbac <__vector_18+0x38>
 ba8:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <rx_wr_index>
		
		if (++rx_counter == RX_BUFFER_SIZE)
 bac:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_counter>
 bb0:	8f 5f       	subi	r24, 0xFF	; 255
 bb2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <rx_counter>
 bb6:	80 31       	cpi	r24, 0x10	; 16
 bb8:	29 f4       	brne	.+10     	; 0xbc4 <__vector_18+0x50>
		{
			rx_counter=0;
 bba:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <rx_counter>
			rx_buffer_overflow=1;
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <rx_buffer_overflow>
		}
	}
}
 bc4:	ff 91       	pop	r31
 bc6:	ef 91       	pop	r30
 bc8:	9f 91       	pop	r25
 bca:	8f 91       	pop	r24
 bcc:	1f 90       	pop	r1
 bce:	1f be       	out	0x3f, r1	; 63
 bd0:	1f 90       	pop	r1
 bd2:	18 95       	reti

Disassembly of section .text.UART_PopWord:

00000ef4 <UART_PopWord>:

uint8_t UART_PopWord()
{
	uint8_t data;
	
	while (rx_counter == 0); // blocking
 ef4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <rx_counter>
 ef8:	88 23       	and	r24, r24
 efa:	e1 f3       	breq	.-8      	; 0xef4 <UART_PopWord>
	
	data = rx_buffer0[rx_rd_index++];
 efc:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <rx_rd_index>
 f00:	91 e0       	ldi	r25, 0x01	; 1
 f02:	9e 0f       	add	r25, r30
 f04:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <rx_rd_index>
 f08:	f0 e0       	ldi	r31, 0x00	; 0
 f0a:	ef 58       	subi	r30, 0x8F	; 143
 f0c:	fe 4f       	sbci	r31, 0xFE	; 254
 f0e:	80 81       	ld	r24, Z
	
	#if RX_BUFFER_SIZE != 256
		if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index = 0;
 f10:	90 31       	cpi	r25, 0x10	; 16
 f12:	11 f4       	brne	.+4      	; 0xf18 <UART_PopWord+0x24>
 f14:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <rx_rd_index>
	#endif
	
	cpu_irq_disable();
 f18:	f8 94       	cli
	--rx_counter;
 f1a:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_counter>
 f1e:	91 50       	subi	r25, 0x01	; 1
 f20:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <rx_counter>
	cpu_irq_enable();
 f24:	78 94       	sei
	return data;
}
 f26:	08 95       	ret

Disassembly of section .text.UART_RxBufferNotEmpty:

0000116c <UART_RxBufferNotEmpty>:

bool UART_RxBufferNotEmpty()
{
	return (bool)rx_counter;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <rx_counter>
    1172:	91 11       	cpse	r25, r1
    1174:	01 c0       	rjmp	.+2      	; 0x1178 <UART_RxBufferNotEmpty+0xc>
    1176:	80 e0       	ldi	r24, 0x00	; 0
}
    1178:	08 95       	ret

Disassembly of section .text.__vector_20:

00000c7a <__vector_20>:
uint8_t tx_buffer[TX_BUFFER_SIZE];
uint8_t tx_wr_index, tx_rd_index, tx_counter;

// USART Transmitter interrupt service routine
ISR(USART_TX_vect)
{
 c7a:	1f 92       	push	r1
 c7c:	1f b6       	in	r1, 0x3f	; 63
 c7e:	1f 92       	push	r1
 c80:	11 24       	eor	r1, r1
 c82:	8f 93       	push	r24
 c84:	ef 93       	push	r30
 c86:	ff 93       	push	r31
	if (tx_counter)
 c88:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <tx_counter>
 c8c:	88 23       	and	r24, r24
 c8e:	a9 f0       	breq	.+42     	; 0xcba <__vector_20+0x40>
	{
		--tx_counter;
 c90:	81 50       	subi	r24, 0x01	; 1
 c92:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <tx_counter>
		UDR0=tx_buffer[tx_rd_index++];
 c96:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <tx_rd_index>
 c9a:	81 e0       	ldi	r24, 0x01	; 1
 c9c:	8e 0f       	add	r24, r30
 c9e:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tx_rd_index>
 ca2:	f0 e0       	ldi	r31, 0x00	; 0
 ca4:	e8 59       	subi	r30, 0x98	; 152
 ca6:	fe 4f       	sbci	r31, 0xFE	; 254
 ca8:	80 81       	ld	r24, Z
 caa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fe0c6>
		
		#if TX_BUFFER_SIZE != 256
			if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index = 0;
 cae:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <tx_rd_index>
 cb2:	88 30       	cpi	r24, 0x08	; 8
 cb4:	11 f4       	brne	.+4      	; 0xcba <__vector_20+0x40>
 cb6:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <tx_rd_index>
		#endif
	}
}
 cba:	ff 91       	pop	r31
 cbc:	ef 91       	pop	r30
 cbe:	8f 91       	pop	r24
 cc0:	1f 90       	pop	r1
 cc2:	1f be       	out	0x3f, r1	; 63
 cc4:	1f 90       	pop	r1
 cc6:	18 95       	reti

Disassembly of section .text.libgcc:

00001108 <__xload_4>:
    1108:	57 fd       	sbrc	r21, 7
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <__xload_4+0xe>
    110c:	65 91       	lpm	r22, Z+
    110e:	75 91       	lpm	r23, Z+
    1110:	85 91       	lpm	r24, Z+
    1112:	95 91       	lpm	r25, Z+
    1114:	08 95       	ret
    1116:	61 91       	ld	r22, Z+
    1118:	71 91       	ld	r23, Z+
    111a:	81 91       	ld	r24, Z+
    111c:	91 91       	ld	r25, Z+
    111e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

000011e4 <_fini>:
    11e4:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000011e6 <__funcs_on_exit>:
    11e6:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000011e8 <__simulator_exit>:
    11e8:	08 95       	ret

Disassembly of section .text.exit:

0000117a <exit>:
    117a:	ec 01       	movw	r28, r24
    117c:	34 d0       	rcall	.+104    	; 0x11e6 <__funcs_on_exit>
    117e:	32 d0       	rcall	.+100    	; 0x11e4 <_fini>
    1180:	ce 01       	movw	r24, r28
    1182:	32 d0       	rcall	.+100    	; 0x11e8 <__simulator_exit>
    1184:	ce 01       	movw	r24, r28
    1186:	31 d0       	rcall	.+98     	; 0x11ea <_Exit>

Disassembly of section .text.__simple_malloc:

000008f2 <__simple_malloc>:
 8f2:	a2 e0       	ldi	r26, 0x02	; 2
 8f4:	b0 e0       	ldi	r27, 0x00	; 0
 8f6:	ee e7       	ldi	r30, 0x7E	; 126
 8f8:	f4 e0       	ldi	r31, 0x04	; 4
 8fa:	b4 c2       	rjmp	.+1384   	; 0xe64 <__prologue_saves__+0x14>
 8fc:	8c 01       	movw	r16, r24
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	01 15       	cp	r16, r1
 904:	11 05       	cpc	r17, r1
 906:	09 f4       	brne	.+2      	; 0x90a <__simple_malloc+0x18>
 908:	53 c0       	rjmp	.+166    	; 0x9b0 <__simple_malloc+0xbe>
 90a:	89 2b       	or	r24, r25
 90c:	71 f0       	breq	.+28     	; 0x92a <__simple_malloc+0x38>
 90e:	02 30       	cpi	r16, 0x02	; 2
 910:	11 05       	cpc	r17, r1
 912:	10 f4       	brcc	.+4      	; 0x918 <__simple_malloc+0x26>
 914:	02 e0       	ldi	r16, 0x02	; 2
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	c8 01       	movw	r24, r16
 91a:	72 db       	rcall	.-2332   	; 0x0 <__vectors>
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	09 f0       	breq	.+2      	; 0x922 <__simple_malloc+0x30>
 920:	4e c0       	rjmp	.+156    	; 0x9be <__simple_malloc+0xcc>
 922:	92 e0       	ldi	r25, 0x02	; 2
 924:	e9 2e       	mov	r14, r25
 926:	f1 2c       	mov	r15, r1
 928:	04 c0       	rjmp	.+8      	; 0x932 <__simple_malloc+0x40>
 92a:	80 e0       	ldi	r24, 0x00	; 0
 92c:	e8 2e       	mov	r14, r24
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	f8 2e       	mov	r15, r24
 932:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <end.1483>
 936:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <end.1483+0x1>
 93a:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <cur.1482>
 93e:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <cur.1482+0x1>
 942:	82 1b       	sub	r24, r18
 944:	93 0b       	sbc	r25, r19
 946:	67 01       	movw	r12, r14
 948:	c0 0e       	add	r12, r16
 94a:	d1 1e       	adc	r13, r17
 94c:	80 17       	cp	r24, r16
 94e:	91 07       	cpc	r25, r17
 950:	e8 f4       	brcc	.+58     	; 0x98c <__simple_malloc+0x9a>
 952:	da 82       	std	Y+2, r13	; 0x02
 954:	c9 82       	std	Y+1, r12	; 0x01
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	71 d0       	rcall	.+226    	; 0xa3e <__expand_heap>
 95c:	00 97       	sbiw	r24, 0x00	; 0
 95e:	19 f4       	brne	.+6      	; 0x966 <__simple_malloc+0x74>
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	2c c0       	rjmp	.+88     	; 0x9be <__simple_malloc+0xcc>
 966:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <end.1483>
 96a:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <end.1483+0x1>
 96e:	82 17       	cp	r24, r18
 970:	93 07       	cpc	r25, r19
 972:	21 f0       	breq	.+8      	; 0x97c <__simple_malloc+0x8a>
 974:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <cur.1482+0x1>
 978:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <cur.1482>
 97c:	29 81       	ldd	r18, Y+1	; 0x01
 97e:	3a 81       	ldd	r19, Y+2	; 0x02
 980:	82 0f       	add	r24, r18
 982:	93 1f       	adc	r25, r19
 984:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <end.1483+0x1>
 988:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <end.1483>
 98c:	e0 91 a0 01 	lds	r30, 0x01A0	; 0x8001a0 <cur.1482>
 990:	f0 91 a1 01 	lds	r31, 0x01A1	; 0x8001a1 <cur.1482+0x1>
 994:	cf 01       	movw	r24, r30
 996:	e1 14       	cp	r14, r1
 998:	f1 04       	cpc	r15, r1
 99a:	19 f0       	breq	.+6      	; 0x9a2 <__simple_malloc+0xb0>
 99c:	02 96       	adiw	r24, 0x02	; 2
 99e:	11 83       	std	Z+1, r17	; 0x01
 9a0:	00 83       	st	Z, r16
 9a2:	ce 0e       	add	r12, r30
 9a4:	df 1e       	adc	r13, r31
 9a6:	d0 92 a1 01 	sts	0x01A1, r13	; 0x8001a1 <cur.1482+0x1>
 9aa:	c0 92 a0 01 	sts	0x01A0, r12	; 0x8001a0 <cur.1482>
 9ae:	07 c0       	rjmp	.+14     	; 0x9be <__simple_malloc+0xcc>
 9b0:	00 97       	sbiw	r24, 0x00	; 0
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <__simple_malloc+0xc4>
 9b4:	af cf       	rjmp	.-162    	; 0x914 <__simple_malloc+0x22>
 9b6:	7c 01       	movw	r14, r24
 9b8:	01 e0       	ldi	r16, 0x01	; 1
 9ba:	10 e0       	ldi	r17, 0x00	; 0
 9bc:	ba cf       	rjmp	.-140    	; 0x932 <__simple_malloc+0x40>
 9be:	22 96       	adiw	r28, 0x02	; 2
 9c0:	e8 e0       	ldi	r30, 0x08	; 8
 9c2:	87 c2       	rjmp	.+1294   	; 0xed2 <__epilogue_restores__+0x14>

Disassembly of section .text._Exit:

000011ea <_Exit>:
    11ea:	e8 d7       	rcall	.+4048   	; 0x21bc <__TEXT_REGION_LENGTH__+0x1bc>

Disassembly of section .text.__expand_heap:

00000a3e <__expand_heap>:
 a3e:	fc 01       	movw	r30, r24
 a40:	40 81       	ld	r20, Z
 a42:	51 81       	ldd	r21, Z+1	; 0x01
 a44:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__brkval>
 a48:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <__brkval+0x1>
 a4c:	89 2b       	or	r24, r25
 a4e:	41 f4       	brne	.+16     	; 0xa60 <__expand_heap+0x22>
 a50:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__malloc_heap_start>
 a54:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <__malloc_heap_start+0x1>
 a58:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <__brkval+0x1>
 a5c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__brkval>
 a60:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__malloc_heap_end>
 a64:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__malloc_heap_end+0x1>
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	19 f4       	brne	.+6      	; 0xa72 <__expand_heap+0x34>
 a6c:	8d b7       	in	r24, 0x3d	; 61
 a6e:	9e b7       	in	r25, 0x3e	; 62
 a70:	80 97       	sbiw	r24, 0x20	; 32
 a72:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <__brkval>
 a76:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <__brkval+0x1>
 a7a:	28 17       	cp	r18, r24
 a7c:	39 07       	cpc	r19, r25
 a7e:	48 f0       	brcs	.+18     	; 0xa92 <__expand_heap+0x54>
 a80:	8c e0       	ldi	r24, 0x0C	; 12
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <__errno_val+0x1>
 a88:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__errno_val>
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	08 95       	ret
 a92:	82 1b       	sub	r24, r18
 a94:	93 0b       	sbc	r25, r19
 a96:	84 17       	cp	r24, r20
 a98:	95 07       	cpc	r25, r21
 a9a:	90 f3       	brcs	.-28     	; 0xa80 <__expand_heap+0x42>
 a9c:	42 0f       	add	r20, r18
 a9e:	53 1f       	adc	r21, r19
 aa0:	50 93 a3 01 	sts	0x01A3, r21	; 0x8001a3 <__brkval+0x1>
 aa4:	40 93 a2 01 	sts	0x01A2, r20	; 0x8001a2 <__brkval>
 aa8:	c9 01       	movw	r24, r18
 aaa:	08 95       	ret

Disassembly of section .text.avrlibc:

0000104e <eeprom_read_block>:
    104e:	ba 01       	movw	r22, r20
    1050:	a9 01       	movw	r20, r18
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22

00001056 <eeprom_read_blraw>:
    1056:	fc 01       	movw	r30, r24
    1058:	f9 99       	sbic	0x1f, 1	; 31
    105a:	fe cf       	rjmp	.-4      	; 0x1058 <eeprom_read_blraw+0x2>
    105c:	06 c0       	rjmp	.+12     	; 0x106a <eeprom_read_blraw+0x14>
    105e:	f2 bd       	out	0x22, r31	; 34
    1060:	e1 bd       	out	0x21, r30	; 33
    1062:	f8 9a       	sbi	0x1f, 0	; 31
    1064:	31 96       	adiw	r30, 0x01	; 1
    1066:	00 b4       	in	r0, 0x20	; 32
    1068:	0d 92       	st	X+, r0
    106a:	41 50       	subi	r20, 0x01	; 1
    106c:	50 40       	sbci	r21, 0x00	; 0
    106e:	b8 f7       	brcc	.-18     	; 0x105e <eeprom_read_blraw+0x8>
    1070:	08 95       	ret

Disassembly of section .text.avrlibc:

0000115a <eeprom_read_byte>:
    115a:	cb 01       	movw	r24, r22
    115c:	f9 99       	sbic	0x1f, 1	; 31
    115e:	fe cf       	rjmp	.-4      	; 0x115c <eeprom_read_byte+0x2>
    1160:	92 bd       	out	0x22, r25	; 34
    1162:	81 bd       	out	0x21, r24	; 33
    1164:	f8 9a       	sbi	0x1f, 0	; 31
    1166:	99 27       	eor	r25, r25
    1168:	80 b5       	in	r24, 0x20	; 32
    116a:	08 95       	ret

Disassembly of section .text.avrlibc:

00001194 <eeprom_read_word>:
    1194:	cb 01       	movw	r24, r22
    1196:	a8 e1       	ldi	r26, 0x18	; 24
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	42 e0       	ldi	r20, 0x02	; 2
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	5b cf       	rjmp	.-330    	; 0x1056 <eeprom_read_blraw>

Disassembly of section .text.avrlibc:

00000f28 <eeprom_write_block>:
 f28:	cf 92       	push	r12
 f2a:	df 92       	push	r13
 f2c:	ef 92       	push	r14
 f2e:	6b 01       	movw	r12, r22
 f30:	e8 2e       	mov	r14, r24
 f32:	ca 01       	movw	r24, r20
 f34:	42 2f       	mov	r20, r18
 f36:	73 2f       	mov	r23, r19
 f38:	09 c0       	rjmp	.+18     	; 0xf4c <eeprom_write_block+0x24>
 f3a:	f6 01       	movw	r30, r12
 f3c:	5e 2d       	mov	r21, r14
 f3e:	35 d1       	rcall	.+618    	; 0x11aa <__xload_1>
 f40:	26 2f       	mov	r18, r22
 f42:	c9 d0       	rcall	.+402    	; 0x10d6 <eeprom_write_r18>
 f44:	3f ef       	ldi	r19, 0xFF	; 255
 f46:	c3 1a       	sub	r12, r19
 f48:	d3 0a       	sbc	r13, r19
 f4a:	e3 0a       	sbc	r14, r19
 f4c:	41 50       	subi	r20, 0x01	; 1
 f4e:	70 40       	sbci	r23, 0x00	; 0
 f50:	a0 f7       	brcc	.-24     	; 0xf3a <eeprom_write_block+0x12>
 f52:	ef 90       	pop	r14
 f54:	df 90       	pop	r13
 f56:	cf 90       	pop	r12
 f58:	08 95       	ret

Disassembly of section .text.avrlibc:

000010d4 <eeprom_write_byte>:
    10d4:	26 2f       	mov	r18, r22

000010d6 <eeprom_write_r18>:
    10d6:	f9 99       	sbic	0x1f, 1	; 31
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <eeprom_write_r18>
    10da:	1f ba       	out	0x1f, r1	; 31
    10dc:	92 bd       	out	0x22, r25	; 34
    10de:	81 bd       	out	0x21, r24	; 33
    10e0:	20 bd       	out	0x20, r18	; 32
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	fa 9a       	sbi	0x1f, 2	; 31
    10e8:	f9 9a       	sbi	0x1f, 1	; 31
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	01 96       	adiw	r24, 0x01	; 1
    10ee:	08 95       	ret

Disassembly of section .text.avrlibc:

000011d4 <eeprom_write_word>:
    11d4:	7f df       	rcall	.-258    	; 0x10d4 <eeprom_write_byte>
    11d6:	27 2f       	mov	r18, r23
    11d8:	7e cf       	rjmp	.-260    	; 0x10d6 <eeprom_write_r18>

Disassembly of section .text.libgcc.prologue:

00000e50 <__prologue_saves__>:
 e50:	2f 92       	push	r2
 e52:	3f 92       	push	r3
 e54:	4f 92       	push	r4
 e56:	5f 92       	push	r5
 e58:	6f 92       	push	r6
 e5a:	7f 92       	push	r7
 e5c:	8f 92       	push	r8
 e5e:	9f 92       	push	r9
 e60:	af 92       	push	r10
 e62:	bf 92       	push	r11
 e64:	cf 92       	push	r12
 e66:	df 92       	push	r13
 e68:	ef 92       	push	r14
 e6a:	ff 92       	push	r15
 e6c:	0f 93       	push	r16
 e6e:	1f 93       	push	r17
 e70:	cf 93       	push	r28
 e72:	df 93       	push	r29
 e74:	cd b7       	in	r28, 0x3d	; 61
 e76:	de b7       	in	r29, 0x3e	; 62
 e78:	ca 1b       	sub	r28, r26
 e7a:	db 0b       	sbc	r29, r27
 e7c:	0f b6       	in	r0, 0x3f	; 63
 e7e:	f8 94       	cli
 e80:	de bf       	out	0x3e, r29	; 62
 e82:	0f be       	out	0x3f, r0	; 63
 e84:	cd bf       	out	0x3d, r28	; 61
 e86:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00000ebe <__epilogue_restores__>:
 ebe:	2a 88       	ldd	r2, Y+18	; 0x12
 ec0:	39 88       	ldd	r3, Y+17	; 0x11
 ec2:	48 88       	ldd	r4, Y+16	; 0x10
 ec4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ec6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ec8:	7d 84       	ldd	r7, Y+13	; 0x0d
 eca:	8c 84       	ldd	r8, Y+12	; 0x0c
 ecc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ece:	aa 84       	ldd	r10, Y+10	; 0x0a
 ed0:	b9 84       	ldd	r11, Y+9	; 0x09
 ed2:	c8 84       	ldd	r12, Y+8	; 0x08
 ed4:	df 80       	ldd	r13, Y+7	; 0x07
 ed6:	ee 80       	ldd	r14, Y+6	; 0x06
 ed8:	fd 80       	ldd	r15, Y+5	; 0x05
 eda:	0c 81       	ldd	r16, Y+4	; 0x04
 edc:	1b 81       	ldd	r17, Y+3	; 0x03
 ede:	aa 81       	ldd	r26, Y+2	; 0x02
 ee0:	b9 81       	ldd	r27, Y+1	; 0x01
 ee2:	ce 0f       	add	r28, r30
 ee4:	d1 1d       	adc	r29, r1
 ee6:	0f b6       	in	r0, 0x3f	; 63
 ee8:	f8 94       	cli
 eea:	de bf       	out	0x3e, r29	; 62
 eec:	0f be       	out	0x3f, r0	; 63
 eee:	cd bf       	out	0x3d, r28	; 61
 ef0:	ed 01       	movw	r28, r26
 ef2:	08 95       	ret

Disassembly of section .text.libgcc:

000011aa <__xload_1>:
    11aa:	57 fd       	sbrc	r21, 7
    11ac:	60 81       	ld	r22, Z
    11ae:	57 ff       	sbrs	r21, 7
    11b0:	64 91       	lpm	r22, Z
    11b2:	08 95       	ret
